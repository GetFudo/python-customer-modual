# Create your views here.
import traceback
import datetime
from datetime import timedelta
from datetime import timezone as tzone
from translate import Translator as t
from geopy.distance import geodesic
from urllib.parse import unquote
from concurrent.futures import ThreadPoolExecutor,as_completed
from mongo_query_module.query_module import (
    store_find,
    category_find_one,
    category_find,
    category_find_count,
    symptom_find_count,
    symptom_find,
    banner_find,
    product_find_count,
    offer_find_one,
    home_page_find_one,
    zone_find,
)
import time
from search_api.settings import (
    db,
    es,
    POPULAR_API_URL,
    CASSANDRA_KEYSPACE,
    CASSANDRA_SERVER,
    CENTRAL_PRODUCT_INDEX,
    CENTRAL_PRODUCT_DOC_TYPE,
    CENTRAL_PRODUCT_VARIENT_INDEX,
    CHILD_PRODUCT_INDEX,
    CHILD_PRODUCT_DOC_TYPE,
    STORE_PRODUCT_INDEX,
    STORE_PRODUCT_DOC_TYPE,
    CENRAL_STORE_NAME,
    PYTHON_PRODUCT_URL,
    OFFER_DOC_TYPE,
    OFFER_INDEX,
    KAFKA_URL,
    PYTHON_BASE_URL,
    REDIS_IP,
    STORE_CREATE_TIME,
    TIME_ZONE,
    PHARMACY_STORE_CATEGORY_ID,
    ECOMMERCE_STORE_CATEGORY_ID,
    WEBSITE_URL,
    conv_fac,
    EARTH_REDIS,
    MEAT_STORE_CATEGORY_ID,
    DINE_STORE_CATEGORY_ID,
    GROCERY_STORE_CATEGORY_ID,
    CANNABIS_STORE_CATEGORY_ID,
    LIQUOR_STORE_CATEGORY_ID,
    REBBITMQ_USERNAME,
    REBBITMQ_PASSWORD,
    REBBITMQ_IP,
    GRPC_URL,
    CASSANDRA_PASSWORD,
    CASSANDRA_USERNAME,
    session,
    APP_NAME,
    referral_db,
    currency_exchange_rate,
    MEAT_STORE_TYPE,
    DINE_STORE_TYPE,
    YUMMY_STORE_TYPE,
    rj, rj_plp, GRPC_EMAIL_SERVICE, IS_B2B_ENABLE, RJ_DEALS_PRODUCTS
)
from json import dumps
from notification import notification_pb2, notification_pb2_grpc
import json
from bson import json_util
from rest_framework.views import APIView
from rest_framework.decorators import action
from rest_framework import status
from rest_framework.response import Response
from pytz import timezone
from math import sin, cos, sqrt, atan2, radians
from kafka import KafkaProducer
from googletrans import Translator
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from django.http import JsonResponse
from dateutil import tz
from cassandra.cluster import Cluster
from cassandra.query import ValueSequence
from bson.objectid import ObjectId
import time
import threading
import requests
import re
import queue
import pytz
import pika
import pandas as pd
import grpc
import datetime
import asyncio
import ast
from validations.product_best_offer_redis import (
    product_get_best_offer_data,
    product_best_offer_data,
)
from validations.product_best_supplier_redis import update_best_suppliers_redis
from validations.search_products_function import food_search_data
from mongo_query_module.query_module import zone_find
from validations.product_dc_validation import validate_dc_product_data
from validations.product_unit_validation import validate_units_data
from validations.product_variant_validation import validate_variant
from validations.supplier_validation import best_supplier_function
from validations.store_validate_data import store_function
from validations.driver_roaster import (
    next_availbale_driver_roaster,
    next_availbale_driver_shift_out_stock,
)
from validations.language import language_change
from validations.product_data_validation import validate_product_data
from validations.store_category_validation import validate_store_category
from validations.driver_intensive_api import driver_intensive
from validations.meat_availbility_validation import meat_availability_check
from validations.product_colour_details import colour_data
from validations.plp_page_update_function import *
from validations.update_plp_page_data import *
from validations.product_validation import *
from validations.product_validation import *
import os
import sys
import html2text
from validations.combo_special_validation import combo_special_type_validation
from validations.calculate_avg_rating import product_avg_rating
from rejson import Client, Path
from validations.time_zone_validation import time_zone_converter
from email_send_grpc import emailService_pb2, emailService_pb2_grpc
from validations.email_send_validation import mail_news_letter_sender

sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "searchApi.settings")

meal_timing = {
    "latenightdinner": 0,
    "breakfast": 5,
    "brunch": 10,
    "lunch": 11,
    "tea": 15,
    "dinner": 19,
}


##### import helper files and create objects #####
from .response_helper import ResponseHelper
from .operation_helper import OperationHelper

ResponseHelper = ResponseHelper()
OperationHelper = OperationHelper()

# =====================import all the files which need to call from api============================

# approximate radius of earth in km
R = float(EARTH_REDIS)
conv_fac = float(conv_fac)

try:
    producer = KafkaProducer(
        bootstrap_servers=[KAFKA_URL], value_serializer=lambda x: dumps(x).encode("utf-8")
    )
except:
    pass

translator = Translator()
res1 = queue.Queue()
res2 = queue.Queue()
res3 = queue.Queue()
res4 = queue.Queue()
res5 = queue.Queue()
res6 = queue.Queue()
res7 = queue.Queue()
res8 = queue.Queue()
res9 = queue.Queue()
# ===================================for the new home page===============================================================
res10 = queue.Queue()
res11 = queue.Queue()
res12 = queue.Queue()
res13 = queue.Queue()
res14 = queue.Queue()
res15 = queue.Queue()
res16 = queue.Queue()
res17 = queue.Queue()
res18 = queue.Queue()
res22 = queue.Queue()  # sysmptoms
res29 = queue.Queue()  # home page seo
res30 = queue.Queue()  # home page store details
# ===========================================new pdp page================================================================
res19 = queue.Queue()
res20 = queue.Queue()
res21 = queue.Queue()

# =======================================for food stores================================================
res23 = queue.Queue()
res24 = queue.Queue()

# =================================================disptcher======================================================
res25 = queue.Queue()
res26 = queue.Queue()
res27 = queue.Queue()
res28 = queue.Queue()

central_store = CENRAL_STORE_NAME
central_zero_store_creation_ts = int(STORE_CREATE_TIME)

currentDate = datetime.datetime.now()

index_central_product = CENTRAL_PRODUCT_INDEX
doc_central_product = CENTRAL_PRODUCT_DOC_TYPE

index_central_varient_product = CENTRAL_PRODUCT_VARIENT_INDEX

index_products = CHILD_PRODUCT_INDEX
doc_type_products = CHILD_PRODUCT_DOC_TYPE

index_store = STORE_PRODUCT_INDEX
doc_type_store = STORE_PRODUCT_DOC_TYPE

index_offers = OFFER_INDEX
doc_type_offers = OFFER_DOC_TYPE

SERVER = PYTHON_PRODUCT_URL
try:
    session.set_keyspace(CASSANDRA_KEYSPACE)
except:
    pass

timezonename = TIME_ZONE

"""
    TODO: Need to get linked unit attribute with the product
    :parameter: array of the units details
    :return: array of object (linked attributes with units)
"""

timezonename = TIME_ZONE
stores_collection = db['stores']
specialities_collection = db['specialities']
banner_collection = db["banner"]
offers_collection = db["offers"]

# def food_product_time_management(row, current_hour, current_text, user_id):
#     # print('datas---',row["status"])
#     # if row["status"] == 1:
#     try:
#         try:
#             if "nextAvailableTime" in row and row["nextAvailableTime"] != 0:
#                 product_status = True
#                 next_available_time = row["nextAvailableTime"]
#                 next_open_time = int(next_available_time)
#                 local_time = datetime.datetime.fromtimestamp(next_open_time)
#                 next_day = datetime.datetime.now() + datetime.timedelta(days=1)
#                 next_day_midnight = next_day.replace(hour=23, minute=59, second=59)
#                 next_day_midnight_timestamp = int(next_day_midnight.timestamp())
#                 if next_day_midnight_timestamp < next_open_time:
#                     open_time = local_time.strftime("%b %d %Y, %I:%M %p")
#                     product_tag = "Available On " + open_time
#                 else:
#                     open_time = local_time.strftime("%I:%M %p")
#                     product_tag = "Next available at " + open_time + " tomorrow"
        
#             else:
#                 if "mealConsumptionTime" in row:
#                     if (
#                             current_text
#                             in row[
#                         "mealConsumptionTime"
#                     ]
#                     ):
#                         pass
#                     elif (
#                             len(
#                                 row[
#                                     "mealConsumptionTime"
#                                 ]
#                             )
#                             > 0
#                     ):
#                         if (
#                                 int(current_hour) >= 0
#                                 and int(current_hour) < 5
#                         ):
#                             current_text = "latenightdinner"
#                             currenct_text_value = [
#                                 "breakfast",
#                                 "brunch",
#                                 "lunch",
#                                 "tea",
#                                 "dinner",
#                             ]
#                         elif (
#                                 int(current_hour) >= 5
#                                 and int(current_hour) < 10
#                         ):
#                             current_text = "breakfast"
#                             currenct_text_value = [
#                                 "brunch",
#                                 "lunch",
#                                 "tea",
#                                 "dinner",
#                             ]
#                         elif (
#                                 int(current_hour) >= 10
#                                 and int(current_hour) < 11
#                         ):
#                             current_text = "brunch"
#                             currenct_text_value = [
#                                 "lunch",
#                                 "tea",
#                                 "dinner",
#                             ]
#                         elif (
#                                 int(current_hour) >= 11
#                                 and int(current_hour) < 15
#                         ):
#                             current_text = "lunch"
#                             currenct_text_value = [
#                                 "tea",
#                                 "dinner",
#                             ]
#                         elif (
#                                 int(current_hour) >= 15
#                                 and int(current_hour) < 19
#                         ):
#                             current_text = "tea"
#                             currenct_text_value = ["dinner"]
#                         else:
#                             current_text = "dinner"
#                             currenct_text_value = []
#                         for k, v in row[
#                             "mealConsumptionTime"
#                         ].items():
#                             if k in currenct_text_value:
#                                 product_status = True
#                                 next_day = (
#                                     datetime.datetime.now()
#                                 )
#                                 next_day_midnight = (
#                                     next_day.replace(
#                                         hour=int(
#                                             meal_timing[k]
#                                         ),
#                                         minute=00,
#                                         second=00,
#                                     )
#                                 )
#                                 open_time = next_day_midnight.strftime(
#                                     "%I:%M %p"
#                                 )
#                                 product_tag = (
#                                         "Available On Today At "
#                                         + open_time
#                                 )
#                             else:
#                                 product_status = True
#                                 next_day = (
#                                         datetime.datetime.now()
#                                         + datetime.timedelta(
#                                     days=1
#                                 )
#                                 )
#                                 next_day_midnight = (
#                                     next_day.replace(
#                                         hour=meal_timing[k],
#                                         minute=00,
#                                         second=00,
#                                     )
#                                 )
#                                 open_time = next_day_midnight.strftime(
#                                     "%I:%M %p"
#                                 )
#                                 product_tag = (
#                                         "Next available at "
#                                         + open_time
#                                         + " tomorrow"
#                                 )
#                     else:
#                         product_tag = ""
#                         product_status = False
#                 else:
#                     product_tag = ""
#                     product_status = False
#         except:
#             product_tag = ''
#             product_status = False
#         try:
#             response_casandra = session.execute(
#                 """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
#                 {
#                     "userid": user_id,
#                     "productid": str(row['childProductId']),
#                 },
#             )
#             if not response_casandra:
#                 isFavourite = False
#                 row['productTag'] = product_tag
#                 row['productStatus']= product_status
#                 row['isFavourite'] = isFavourite
#                 return pd.Series({
#                     'normal_product': row,
#                     'fav_product': [],
                    
#                 })
#             else:
#                 isFavourite = True
#                 row['productTag'] = product_tag
#                 row['productStatus']= product_status
#                 row['isFavourite'] = isFavourite
#                 return pd.Series({
#                     'normal_product': row,
#                     'fav_product': row,
                    
#                 })
#         except:
#             isFavourite = False
#             row['productTag'] = product_tag
#             row['productStatus']= product_status
#             row['isFavourite'] = isFavourite
#             return pd.Series({
#                 'normal_product': row,
#                 'fav_product': [],
                
#             })
#         # else:
#         #     product_tag = ""
#         #     product_status = False
        
#     except Exception as ex:
#         template = "An exception of type {0} occurred. Arguments:\n{1!r}"
#         message = template.format(type(ex).__name__, ex.args)
#         print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
#         row['productTag'] = ""
#         row['productStatus']= False
#         row['isFavourite'] = False
#         return pd.Series({
#             'normal_product': row,
#             'fav_product': [],
#             })

def food_product_time_management(row, user_id, current_hour):
    try:
        if "nextAvailableTime" in row and row["nextAvailableTime"] != 0:
            product_status = True
            next_available_time = row["nextAvailableTime"]
            next_open_time = int(next_available_time)
            local_time = datetime.datetime.fromtimestamp(next_open_time)
            next_day = datetime.datetime.now() + datetime.timedelta(days=1)
            next_day_midnight = next_day.replace(hour=23, minute=59, second=59)
            next_day_midnight_timestamp = int(next_day_midnight.timestamp())
            if next_day_midnight_timestamp < next_open_time:
                open_time = local_time.strftime("%b %d %Y, %I:%M %p")
                product_tag = "Available On " + open_time
            else:
                open_time = local_time.strftime("%I:%M %p")
                product_tag = "Next available at " + open_time + " tomorrow"
    
        else:
            if "mealConsumptionTime" in row:
                if (
                        current_text
                        in row[
                    "mealConsumptionTime"
                ]
                ):
                    pass
                elif (
                        len(
                            row[
                                "mealConsumptionTime"
                            ]
                        )
                        > 0
                ):
                    if (
                            int(current_hour) >= 0
                            and int(current_hour) < 5
                    ):
                        current_text = "latenightdinner"
                        currenct_text_value = [
                            "breakfast",
                            "brunch",
                            "lunch",
                            "tea",
                            "dinner",
                        ]
                    elif (
                            int(current_hour) >= 5
                            and int(current_hour) < 10
                    ):
                        current_text = "breakfast"
                        currenct_text_value = [
                            "brunch",
                            "lunch",
                            "tea",
                            "dinner",
                        ]
                    elif (
                            int(current_hour) >= 10
                            and int(current_hour) < 11
                    ):
                        current_text = "brunch"
                        currenct_text_value = [
                            "lunch",
                            "tea",
                            "dinner",
                        ]
                    elif (
                            int(current_hour) >= 11
                            and int(current_hour) < 15
                    ):
                        current_text = "lunch"
                        currenct_text_value = [
                            "tea",
                            "dinner",
                        ]
                    elif (
                            int(current_hour) >= 15
                            and int(current_hour) < 19
                    ):
                        current_text = "tea"
                        currenct_text_value = ["dinner"]
                    else:
                        current_text = "dinner"
                        currenct_text_value = []
                    for k, v in row[
                        "mealConsumptionTime"
                    ].items():
                        if k in currenct_text_value:
                            product_status = True
                            next_day = (
                                datetime.datetime.now()
                            )
                            next_day_midnight = (
                                next_day.replace(
                                    hour=int(
                                        meal_timing[k]
                                    ),
                                    minute=00,
                                    second=00,
                                )
                            )
                            open_time = next_day_midnight.strftime(
                                "%I:%M %p"
                            )
                            product_tag = (
                                    "Available On Today At "
                                    + open_time
                            )
                        else:
                            product_status = True
                            next_day = (
                                    datetime.datetime.now()
                                    + datetime.timedelta(
                                days=1
                            )
                            )
                            next_day_midnight = (
                                next_day.replace(
                                    hour=meal_timing[k],
                                    minute=00,
                                    second=00,
                                )
                            )
                            open_time = next_day_midnight.strftime(
                                "%I:%M %p"
                            )
                            product_tag = (
                                    "Next available at "
                                    + open_time
                                    + " tomorrow"
                            )
                else:
                    product_tag = ""
                    product_status = False
            else:
                product_tag = ""
                product_status = False
    except:
        product_tag = ''
        product_status = False
    try:
        response_casandra = session.execute(
            """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
            {
                "userid": user_id,
                "productid": str(row['childProductId']),
            },
        )
        if not response_casandra:
            isFavourite = False
        else:
            isFavourite = True
    except:
        isFavourite = False
    return product_tag , product_status , isFavourite
        
def check_fav_product(row, user_id):
    try:
        response_casandra = session.execute(
            """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
            {
                "userid": user_id,
                "productid": str(row['childProductId']),
            },
        )
        if not response_casandra:
            isFavourite = False
            row['isFavourite'] = isFavourite
            return row
        else:
            isFavourite = True
            row['isFavourite'] = isFavourite
            return row
    except:
        isFavourite = False
        row['isFavourite'] = isFavourite
        return row
def parse_ratings_count(ratings_count):
    """
    Parse ratings count to extract numeric value.
    Retain the "+" if present in the original count.
    """
    has_plus = '+' in ratings_count
    try:
        # Remove non-numeric characters and convert to int
        numeric_count = int(ratings_count.replace(',', '').replace('+', ''))
        return numeric_count, has_plus
    except ValueError:
        return 0, has_plus

def get_linked_unit_attribute(units):
    linked_units = []
    for link in units[0]["attributes"]:
        try:
            for attrlist in link["attrlist"]:
                try:
                    if attrlist["linkedtounit"] == 1:
                        linked_units.append(
                            {
                                "attrname": attrlist["attrname"]["en"],
                                "value": attrlist["value"]["en"] if len(attrlist["value"]) else [],
                            }
                        )
                    else:
                        pass
                except Exception as ex:
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print(
                        "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                        type(ex).__name__,
                        ex,
                    )
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
    if "unitSizeGroupValue" in units[0]:
        if len(units[0]["unitSizeGroupValue"]) > 0:
            if "en" in units[0]["unitSizeGroupValue"]:
                if units[0]["unitSizeGroupValue"]["en"] != "":
                    linked_units.append(
                        {"attrname": "Size", "value": units[0]["unitSizeGroupValue"]["en"]}
                    )
                else:
                    pass
            else:
                pass
        else:
            pass
    else:
        pass

    if "colorName" in units[0]:
        if units[0]["colorName"] != "":
            linked_units.append({"attrname": "Color", "value": units[0]["colorName"]})
        else:
            pass
    else:
        pass

    return linked_units


def next_availbale_time(product_id):
    child_product = db.childProducts.find_one(
        {"_id": ObjectId(product_id)},
        {"currencySymbol": 1, "currency": 1, "nextAvailableTime": 1, "status": 1},
    )
    if child_product != None:
        currency_symbol = child_product["currencySymbol"]
        currency = child_product["currency"]
        # ==========================for the available product===========================
        try:
            if "nextAvailableTime" in child_product:
                if child_product["nextAvailableTime"] != "":
                    product_status = True
                    next_available_time = child_product["nextAvailableTime"]
                    next_open_time = int(next_available_time)
                    local_time = datetime.datetime.fromtimestamp(next_open_time)
                    next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                    next_day_midnight = next_day.replace(hour=23, minute=59, second=59)
                    next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                    if next_day_midnight_timestamp < next_open_time:
                        open_time = local_time.strftime("%b %d %Y, %I:%M %p")
                        product_tag = "Available On " + open_time
                    else:
                        open_time = local_time.strftime("%I:%M %p")
                        product_tag = "Next available at " + open_time + " tomorrow"
                else:
                    product_status = False
                    product_tag = ""
            else:
                if child_product["status"] == 1:
                    product_status = False
                    product_tag = ""
                else:
                    product_status = True
                    product_tag = ""
        except:
            product_status = True
            product_tag = ""
    else:
        currency_symbol = "₹"
        currency = "INR"
        product_status = False
        product_tag = ""
    return currency_symbol, currency, product_status, product_tag


def calculate_distance(user_latitude, user_longtitude, store_lat, store_long):
    lat1 = radians(user_latitude)
    lon1 = radians(user_longtitude)
    lat2 = radians(store_lat)
    lon2 = radians(store_long)

    dlon = lon2 - lon1
    dlat = lat2 - lat1
    store_cal = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    store_distance = 2 * atan2(sqrt(store_cal), sqrt(1 - store_cal))

    distance = R * store_distance
    distance_km = round(distance, 2)
    distance_miles = round(distance_km * conv_fac, 2)
    return distance_km, distance_miles


def unitsData(row, lan, curntime, sort):
    unitdata = []
    if len(row["offer"]) > 0:
        for j in row["offer"]:
            pricedata = []
            if (
                    j["status"] == 1
                    and float(j["endDateTime"]) > curntime
                    or j["status"] == "active"
                    and float(j["endDateTime"]) > curntime
            ):
                if j["discountType"] == 0:
                    discount_value = j["discountValue"]
                    for k in row["units"]:
                        try:
                            if "availableQuantity" in k:
                                if k["availableQuantity"] > 0:
                                    availableQuantity = k["availableQuantity"]
                                    outOfStock = False
                                else:
                                    availableQuantity = k["availableQuantity"]
                                    outOfStock = True
                            else:
                                availableQuantity = 0
                                outOfStock = True
                        except:
                            availableQuantity = 100
                            outOfStock = False
                        pricedata.append(
                            {
                                "outOfStock": outOfStock,
                                "availableQuantity": availableQuantity,
                                "unitName": k["name"][lan],
                                "unitId": k["unitId"],
                                "unitPrice": k["price"][lan],
                                "finalPrice": float(k["price"]["en"]) - float(discount_value),
                                "floatunitPrice": float(k["price"]["en"]) - float(discount_value),
                                "discount_value": discount_value,
                            }
                        )

                elif j["discountType"] == 1:
                    for k in row["units"]:
                        discount_value = (float(k["price"]["en"]) * float(j["discountValue"])) / 100
                        try:
                            if "availableQuantity" in k:
                                if k["availableQuantity"] > 0:
                                    availableQuantity = k["availableQuantity"]
                                    outOfStock = False
                                else:
                                    availableQuantity = k["availableQuantity"]
                                    outOfStock = True
                            else:
                                availableQuantity = 0
                                outOfStock = True
                        except:
                            availableQuantity = 100
                            outOfStock = False
                        pricedata.append(
                            {
                                "outOfStock": outOfStock,
                                "availableQuantity": availableQuantity,
                                "unitName": k["name"][lan],
                                "unitId": k["unitId"],
                                "unitPrice": k["price"]["en"],
                                "finalPrice": float(k["price"]["en"]) - discount_value,
                                "floatunitPrice": float(k["price"]["en"]) - discount_value,
                                "discount_value": discount_value,
                            }
                        )
            else:
                for j in row["units"]:
                    if "floatValue" in j:
                        floatprice = j["floatValue"]
                    else:
                        floatprice = "none"
                    try:
                        if "availableQuantity" in j:
                            if j["availableQuantity"] > 0:
                                availableQuantity = j["availableQuantity"]
                                outOfStock = False
                            else:
                                availableQuantity = j["availableQuantity"]
                                outOfStock = True
                        else:
                            availableQuantity = 0
                            outOfStock = True
                    except:
                        availableQuantity = 100
                        outOfStock = False

                    pricedata.append(
                        {
                            "availableQuantity": availableQuantity,
                            "outOfStock": outOfStock,
                            "unitName": j["name"][lan],
                            "unitId": j["unitId"],
                            "unitPrice": j["price"][lan],
                            "finalPrice": floatprice,
                            "floatunitPrice": floatprice,
                            "discount_value": 0,
                        }
                    )

            # sort the data according to filter apply
            if int(sort) == 0:
                decorated = [(dict_["finalPrice"], dict_) for dict_ in pricedata]
                decorated.sort()
                result = [dict_ for (key, dict_) in decorated]
            elif int(sort) == 1:
                decorated = [(dict_["finalPrice"], dict_) for dict_ in pricedata]
                decorated.sort(reverse=True)
                result = [dict_ for (key, dict_) in decorated]
            else:
                result = pricedata
            return result
    else:
        for j in row["units"]:
            if "floatValue" in j:
                floatprice = j["floatValue"]
            else:
                floatprice = "none"
            try:
                if "availableQuantity" in j:
                    if j["availableQuantity"] > 0:
                        availableQuantity = j["availableQuantity"]
                        outOfStock = False
                    else:
                        availableQuantity = j["availableQuantity"]
                        outOfStock = True
                else:
                    availableQuantity = 0
                    outOfStock = True
            except:
                availableQuantity = 100
                outOfStock = False
            unitdata.append(
                {
                    "availableQuantity": availableQuantity,
                    "outOfStock": outOfStock,
                    "unitName": j["name"][lan],
                    "unitId": j["unitId"] if "unitId" in j else "",
                    "unitPrice": j["price"][lan],
                    "finalPrice": floatprice,
                    "floatunitPrice": floatprice,
                    "discount_value": 0,
                }
            )
        # sort the data according to filter apply
        if int(sort) == 0:
            decorated = [(dict_["finalPrice"], dict_) for dict_ in unitdata]
            decorated.sort()
            result = [dict_ for (key, dict_) in decorated]
        elif int(sort) == 1:
            decorated = [(dict_["finalPrice"], dict_) for dict_ in unitdata]
            decorated.sort(reverse=True)
            result = [dict_ for (key, dict_) in decorated]
        else:
            result = unitdata
        return result


"""
    Function for the search from the central
    Function for the modify data based on request
    :res ---> data which we are getting from es
    : language ---> return data in particular language
"""


def central_search_data(
        res,
        start_time,
        language,
        filter_responseJson,
        finalfilter_responseJson_products,
        popularstatus,
        sort,
        login_type,
):
    resData = []
    base_price = 0
    final_price = 0
    discount_price = 0
    for i in res["hits"]["hits"]:

        # ======================================product seo======================================================
        if "productSeo" in i["_source"]:
            if len(i["_source"]["productSeo"]["title"]) > 0:
                title = (
                    i["_source"]["productSeo"]["title"][language]
                    if language in i["_source"]["productSeo"]["title"]
                    else i["_source"]["productSeo"]["title"]["en"]
                )
            else:
                title = ""

            if len(i["_source"]["productSeo"]["description"]) > 0:
                description = (
                    i["_source"]["productSeo"]["description"][language]
                    if language in i["_source"]["productSeo"]["description"]
                    else i["_source"]["productSeo"]["description"]["en"]
                )
            else:
                description = ""

            if len(i["_source"]["productSeo"]["metatags"]) > 0:
                metatags = (
                    i["_source"]["productSeo"]["metatags"][language]
                    if language in i["_source"]["productSeo"]["metatags"]
                    else i["_source"]["productSeo"]["metatags"]["en"]
                )
            else:
                metatags = ""

            if len(i["_source"]["productSeo"]["slug"]) > 0:
                slug = (
                    i["_source"]["productSeo"]["slug"][language]
                    if language in i["_source"]["productSeo"]["slug"]
                    else i["_source"]["productSeo"]["slug"]["en"]
                )
            else:
                slug = ""

            product_seo = {
                "title": title,
                "description": description,
                "metatags": metatags,
                "slug": slug,
            }
        else:
            product_seo = {"title": "", "description": "", "metatags": "", "slug": ""}

        color_data = []
        size_list = []
        currencySymbol = i["_source"]["currencySymbol"] if "currencySymbol" in i["_source"] else "$"
        currency = i["_source"]["currency"] if "currency" in i["_source"] else "INR"
        if "stores" in i["_source"]:
            stores = len(i["_source"]["stores"])
        elif "suppliers" in i["_source"]:
            stores = len(i["_source"]["suppliers"])
        else:
            stores = 0
        if "childProducts" in i["_source"]:
            for j in i["_source"]["childProducts"]:
                try:
                    if j["unitSizeGroupValue"] != "":
                        size_list.append(
                            {
                                "childProductId": str(j["unitId"]),
                                "isPrimary": False,
                                "size": j["unitSizeGroupValue"],
                            }
                        )
                except:
                    size_list = []
                try:
                    color_data.append(
                        {
                            "childProductId": str(j["unitId"]),
                            "name": j["colorName"],
                            "isPrimary": False,
                            "rgb": str("rgb(") + j["color"] + ")",
                            "image": j["images"][0]["image"]
                            if "images" in j
                            else j["image"][0]["image"],
                        }
                    )
                except:
                    color_data = []

            try:
                if j["unitSizeGroupValue"] != "":
                    size_list.append(
                        {
                            "childProductId": str(j["unitId"]),
                            "isPrimary": True,
                            "size": j["unitSizeGroupValue"],
                        }
                    )
            except:
                pass
            try:
                color_data.append(
                    {
                        "childProductId": str(i["_source"]["units"][0]["unitId"]),
                        "name": i["_source"]["units"][0]["colorName"],
                        "rgb": str("rgb(") + i["_source"]["units"][0]["color"] + ")",
                        "isPrimary": True,
                        "image": i["_source"]["images"][0]["image"],
                    }
                )
            except:
                pass

            dataframe = pd.DataFrame(color_data)
            dataframe = dataframe.drop_duplicates("name", keep="last")
            colors = dataframe.to_json(orient="records")
            dataframe1 = pd.DataFrame(size_list)
            dataframe1 = dataframe1.drop_duplicates("size", keep="last")
            size_json = dataframe1.to_json(orient="records")
            if login_type == 1:
                try:
                    if "suppliers" in i["_source"]["units"][0]:
                        best_supplier = max(
                            i["_source"]["units"][0]["suppliers"], key=lambda x: x["retailerQty"]
                        )
                    else:
                        best_supplier = {}
                except:
                    best_supplier = {}
            else:
                try:
                    if "suppliers" in i["_source"]["units"][0]:
                        best_supplier = max(
                            i["_source"]["units"][0]["suppliers"], key=lambda x: x["distributorQty"]
                        )
                    else:
                        best_supplier = {}
                except:
                    best_supplier = {}

            if len(best_supplier) > 0:
                if "productId" in best_supplier:
                    product_id = best_supplier["productId"]
                else:
                    product_id = i["_id"]
            else:
                product_id = i["_id"]

            offers_details = []
            if len(best_supplier) > 0:
                if best_supplier["id"] == "0":
                    if "offer" in i["_source"]:
                        for offer in i["_source"]["offer"]:
                            if "offerFor" in offer:
                                if login_type == 1:
                                    if offer["offerFor"] == 1 or offer["offerFor"] == 0:
                                        if offer["status"] == 1:
                                            offer_query = {
                                                "_id": ObjectId(offer["offerId"]),
                                                "status": 1,
                                            }
                                            offer_count = db.offers.find_one(offer_query)
                                            if offer_count is not None:
                                                if offer_count["startDateTime"] <= int(time.time()):
                                                    offers_details.append(offer)
                                        else:
                                            pass
                                    else:
                                        pass
                                else:
                                    if offer["offerFor"] == 0 or offer["offerFor"] == 2:
                                        if offer["status"] == 1:
                                            offers_details.append(offer)
                                        else:
                                            pass
                                    else:
                                        pass
                            else:
                                pass
                else:
                    child_offer_data = db.childProducts.find_one(
                        {"_id": ObjectId(best_supplier["productId"])}, {"offer": 1}
                    )
                    if child_offer_data == None:
                        offers_details = []
                    else:
                        if "offer" in child_offer_data:
                            for offer in child_offer_data["offer"]:
                                if login_type == 1:
                                    if offer["status"] == 1:
                                        offer_terms = db.offers.find_one(
                                            {"_id": ObjectId(offer["offerId"])}
                                        )
                                        if offer_terms is not None:
                                            if offer_terms["startDateTime"] <= int(time.time()):
                                                offers_details.append(offer)
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass
                                else:
                                    if offer["status"] == 1:
                                        offers_details.append(offer)
                                    else:
                                        pass
                        else:
                            pass
            else:
                pass
            if len(offers_details) > 0:
                best_offer = max(offers_details, key=lambda x: x["discountValue"])
                best_offer = max(offers_details, key=lambda x: x["discountValue"])
                offer_details = db.offers.find(
                    {
                        "_id": ObjectId(best_offer["offerId"]),
                        "status": 1,
                        "storeId": best_supplier["id"],
                    }
                ).count()
                if offer_details != 0:
                    best_offer = best_offer
                else:
                    best_offer = {}
            else:
                best_offer = {}

            resData.append(
                {
                    "childProductId": product_id,
                    "productName": i["_source"]["pPName"][language]
                    if language in i["_source"]["pPName"]
                    else i["_source"]["pPName"]["en"],
                    "brandName": i["_source"]["brandTitle"][language]
                    if language in i["_source"]["brandTitle"]
                    else i["_source"]["brandTitle"]["en"],
                    "parentProductId": i["_id"],
                    "productSeo": product_seo,
                    "storeCount": stores,
                    "TotalStarRating": i["_source"]["avgRating"]
                    if "avgRating" in i["_source"]
                    else 0,
                    "colors": json.loads(colors),
                    "sizes": json.loads(size_json),
                    "currencySymbol": currencySymbol,
                    "currency": currency,
                    "mobileImage": i["_source"]["images"],
                    "units": i["_source"]["units"],
                    "unitId": i["_source"]["units"][0]["unitId"],
                    "offer": best_offer,
                    "popularstatus": popularstatus,
                    "stores": i["_source"]["stores"] if "stores" in i["_source"] else [],
                    "suppliers": best_supplier,
                }
            )
        else:
            if login_type == 1:
                try:
                    if "suppliers" in i["_source"]["units"][0]:
                        best_supplier = max(
                            i["_source"]["units"][0]["suppliers"], key=lambda x: x["retailerQty"]
                        )
                    else:
                        best_supplier = {}
                except:
                    best_supplier = {}
            else:
                try:
                    if "suppliers" in i["_source"]["units"][0]:
                        best_supplier = max(
                            i["_source"]["units"][0]["suppliers"], key=lambda x: x["distributorQty"]
                        )
                    else:
                        best_supplier = {}
                except:
                    best_supplier = {}

            if len(best_supplier) > 0:
                if "productId" in best_supplier:
                    product_id = best_supplier["productId"]
                else:
                    product_id = i["_id"]
            else:
                product_id = i["_id"]

            offers_details = []
            if "offer" in i["_source"]:
                for offer in i["_source"]["offer"]:
                    if "offerFor" in offer:
                        if login_type == 1:
                            if offer["offerFor"] == 1 or offer["offerFor"] == 0:
                                if offer["status"] == 1:
                                    offer_query = {"_id": ObjectId(offer["offerId"]), "status": 1}
                                    offer_count = db.offers.find_one(offer_query)
                                    if offer_count is not None:
                                        if offer_count["startDateTime"] <= int(time.time()):
                                            offers_details.append(offer)
                                else:
                                    pass
                            else:
                                pass
                        else:
                            if offer["offerFor"] == 0 or offer["offerFor"] == 2:
                                if offer["status"] == 1:
                                    offers_details.append(offer)
                                else:
                                    pass
                            else:
                                pass
                    else:
                        pass

            if len(offers_details) > 0:
                best_offer = max(offers_details, key=lambda x: x["discountValue"])
                offer_details = db.offers.find(
                    {
                        "_id": ObjectId(best_offer["offerId"]),
                        "status": 1,
                        "storeId": best_supplier["id"],
                    }
                ).count()
                if offer_details != 0:
                    best_offer = best_offer
                else:
                    best_offer = {}
            else:
                best_offer = {}

            for units in i["_source"]["units"]:
                resData.append(
                    {
                        "childProductId": product_id,
                        "productName": i["_source"]["pName"][language]
                        if language in i["_source"]["pName"]
                        else i["_source"]["pName"]["en"],
                        "brandName": i["_source"]["brandTitle"][language]
                        if language in i["_source"]["brandTitle"]
                        else i["_source"]["brandTitle"]["en"],
                        "parentProductId": i["_id"],
                        "storeCount": stores,
                        "productSeo": product_seo,
                        "TotalStarRating": i["_source"]["avgRating"]
                        if "avgRating" in i["_source"]
                        else 0,
                        "sizes": [],
                        "currencySymbol": currencySymbol,
                        "currency": currency,
                        "mobileImage": i["_source"]["images"],
                        "units": units,
                        "unitId": units[0]["unitId"],
                        "offer": best_offer,
                        "popularstatus": popularstatus,
                        "stores": i["_source"]["stores"] if "stores" in i["_source"] else [],
                        "suppliers": best_supplier,
                    }
                )
    dataframe = pd.DataFrame(resData)
    dataframe["popularstatus"] = popularstatus
    dataframe["unitsData"] = dataframe.apply(
        home_units_data,
        lan=language,
        sort=sort,
        status=1,
        axis=1,
        logintype=login_type,
        store_category_id=store_category_id,
        margin_price=True, city_id=""
    )
    details = dataframe.to_json(orient="records")
    data = json.loads(details)
    for k in data:
        try:
            base_price = k["unitsData"]["basePrice"]
            final_price = k["unitsData"]["finalPrice"]
            discount_price = k["unitsData"]["discountPrice"]
            outOfStock = k["unitsData"]["outOfStock"]
            availableQuantity = k["unitsData"]["availableQuantity"]
            mou = ""  # (k['unitsData']['mou'])
            mou_unit = ""
        except:
            base_price = 0
            final_price = 0
            discount_price = 0
            availableQuantity = 0
            outOfStock = True
            mou = None
            mou_unit = None

        if len(k["offer"]) == 0:
            percentage = 0
            discount_type = 0
        else:
            if k["offer"]["discountType"] == 0:
                percentage = 0
                discount_type = 0
            else:
                percentage = int(k["offer"]["discountValue"])
                discount_type = k["offer"]["discountType"]

        if base_price > 0:
            filter_responseJson.append(
                {
                    "outOfStock": outOfStock,
                    "childProductId": k["childProductId"],
                    "productName": k["productName"],
                    "brandName": k["brandName"],
                    "unitId": k["unitId"],
                    "parentProductId": k["parentProductId"],
                    "colors": k["colors"],
                    "sizes": k["sizes"],
                    "TotalStarRating": k["TotalStarRating"],
                    "storeCount": k["storeCount"],
                    "offers": k["offer"],
                    "availableQuantity": availableQuantity,
                    "images": k["mobileImage"],
                    "productSeo": k["productSeo"],
                    "discountPrice": discount_price,
                    "discountType": discount_type,
                    "finalPriceList": {
                        "basePrice": base_price,
                        "finalPrice": final_price,
                        "discountPrice": discount_price,
                        "discountPercentage": percentage,
                    },
                    "currencySymbol": k["currencySymbol"],
                    "currency": k["currency"],
                    "stores": k["stores"],
                    "suppliers": k["suppliers"],
                    "mouData": {
                        "mou": mou,
                        "mouUnit": mou_unit,
                        "mouQty": k["unitsData"]["minimumPurchaseQty"]
                        if "minimumPurchaseQty" in k["unitsData"]
                        else 0,
                        "minimumPurchaseUnit": k["unitsData"]["minimumPurchaseUnit"]
                        if "minimumPurchaseUnit" in k["unitsData"]
                        else "",
                    },
                }
            )
    serarchResults_products = {
        "products": filter_responseJson,
        "penCount": res["hits"]["total"]["value"],
    }
    return serarchResults_products


async def search_read(
        res,
        start_time,
        language,
        filter_responseJson,
        finalfilter_responseJson_products,
        popularstatus,
        sort,
        filter_type,
        login_type,
):
    try:
        currdate = datetime.datetime.now()
        eastern = timezone(timezonename)
        currlocal = eastern.localize(currdate)
        start = time.time()

        if len(res) <= 0:
            error = {"data": [], "message": "No Products Found"}
            return error
        else:
            # if int(filter_type) == 1:
            last_data = central_search_data(
                res,
                start_time,
                language,
                filter_responseJson,
                finalfilter_responseJson_products,
                popularstatus,
                sort,
                login_type,
            )
            finalSearchResults = {
                "data": last_data,
                "message": "Got the details",
            }
            return finalSearchResults
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        finalResponse = {"message": message, "data": []}
        return JsonResponse(finalResponse, safe=False, status=500)


async def popular_search_write(pname, res_popular_test, start_time, language, res):
    try:
        currdate = datetime.datetime.now()
        eastern = timezone(timezonename)
        currlocal = eastern.localize(currdate)
        temp_count = 0
        if len(res_popular_test) == 0:
            for i in res["hits"]["hits"]:
                del i["_id"]
                i["_source"]["count"] = 0
                res_popular = es.index(
                    index=index_popularSearch,
                    doc_type=doc_type_popularSearch,
                    body=i["_source"],
                )
        else:
            for i in res_popular_test["hits"]["hits"]:
                if i["_source"]["productname"]["en"] == pname:
                    temp_count += 1
                    iddata = i["_id"]
                    final_count = i["_source"]["count"]

                else:
                    pass

            if temp_count == 0:
                for i in res["hits"]["hits"]:
                    del i["_id"]
                    i["_source"]["count"] = 0
                    res_popular = es.index(
                        index=index_popularSearch,
                        doc_type=doc_type_popularSearch,
                        body=i["_source"],
                    )
            else:
                final_count_final = int(final_count) + 1
                res_pop_update = es.update(
                    index=index_popularSearch,
                    doc_type=doc_type_popularSearch,
                    id=iddata,
                    body={"doc": {"count": final_count_final}},
                )

    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        finalResponse = {"message": message, "data": []}
        return JsonResponse(finalResponse, safe=False, status=500)


"""
	function for the get the review of the product
"""


def product_reviews(product_id,language, skip, limit, user_id, out_res20):
    try:
        start_time = time.time()

        ## fetch the product review and review count of the product
        product_review_detials = db.reviewRatings.find(
            {"productId": str(product_id), "status": 1, "rating": {"$ne": 0}}).sort([("createdTimestamp", -1)])
        product_review_pen_count = db.reviewRatings.find(
            {"productId": str(product_id), "status": 1, "reviewTitle": {"$ne": ""}}).count()

        product_review_count = 0
        rating_avg = 0
        first_star = []
        two_star = []
        three_star = []
        four_star = []
        five_star = []
        image_list = []
        if product_review_detials.count() > 0:
            rating_data = []
            attribute_rating_data = []
            for rating in product_review_detials:
                try:
                    if rating["attributeId"] != "":

                        ### need to find attribute details or added check that check the attribute is ratable or not
                        attribute_details = db.productAttribute.find_one(
                            {"_id": ObjectId(rating["attributeId"]), "status": 1},
                            {"attributeName": 1},
                        )
                        if attribute_details != None:
                            product_review_count = product_review_count + 1
                            attribute_rating_data.append(
                                {
                                    "attributeId": rating["attributeId"],
                                    "attributeName": attribute_details["attributeName"]["en"],
                                    "rating": rating["rating"],
                                }
                            )
                            rating_avg = rating_avg + rating["rating"]
                            if rating["rating"] == 1:
                                first_star.append(rating["rating"])
                            elif rating["rating"] == 2:
                                two_star.append(rating["rating"])
                            elif rating["rating"] == 3:
                                three_star.append(rating["rating"])
                            elif rating["rating"] == 4:
                                four_star.append(rating["rating"])
                            elif rating["rating"] == 5:
                                five_star.append(rating["rating"])

                            if rating["userName"] == "":
                                user_name = "App Customer"
                            else:
                                user_name = rating["userName"]
                            dt_object = datetime.datetime.fromtimestamp(rating["createdTimestamp"])
                            day_s = datetime.datetime.now() - dt_object
                            if day_s.days == 0:
                                if int(day_s.seconds) > 59:
                                    sec = datetime.timedelta(seconds=day_s.seconds)
                                    if int(sec.seconds / 60) > 59:
                                        time_create = str(int(sec.seconds / 3600)) + " hours ago"
                                    else:
                                        time_create = str(int(sec.seconds / 60)) + " minutes ago"
                                else:
                                    time_create = str(day_s.seconds) + " seconds ago"

                            else:
                                time_create = str(day_s.days) + " days ago"

                            for img in rating["images"]:
                                image_list.append(img)

                            users_like = [i["userId"] for i in rating["likes"]]

                            if user_id in users_like:
                                user_like_data = True
                            else:
                                user_like_data = False

                            users_dislike = [i["userId"] for i in rating["disLikes"]]
                            if user_id in users_dislike:
                                user_dislike_data = True
                            else:
                                user_dislike_data = False

                            ## need to send only those review which have title non empty
                            if rating["reviewTitle"] != "":
                                rating_data.append(
                                    {
                                        "reviewId": str(rating["_id"]),
                                        "name": user_name,
                                        "userLikes": user_like_data,
                                        "userdisLikes": user_dislike_data,
                                        "timestamp": time_create,
                                        "likes": len(rating["likes"]),
                                        "images": rating["images"],
                                        "disLikes": len(rating["disLikes"]),
                                        "rating": rating["rating"],
                                        "replies": rating["replies"] if "replies" in rating else [],
                                        "reviewTitle": rating["reviewTitle"]
                                        if "reviewTitle" in rating
                                        else "",
                                        "reviewDesc": rating["reviewDescription"]
                                        if "reviewDescription" in rating
                                        else "",
                                    }
                                )
                            else:
                                pass
                        else:
                            product_review_count = product_review_count + 1
                            rating_avg = rating_avg + rating["rating"]
                            if rating["rating"] == 1:
                                first_star.append(rating["rating"])
                            elif rating["rating"] == 2:
                                two_star.append(rating["rating"])
                            elif rating["rating"] == 3:
                                three_star.append(rating["rating"])
                            elif rating["rating"] == 4:
                                four_star.append(rating["rating"])
                            elif rating["rating"] == 5:
                                five_star.append(rating["rating"])

                            if rating["userName"] == "":
                                user_name = "App Customer"
                            else:
                                user_name = rating["userName"]
                            dt_object = datetime.datetime.fromtimestamp(rating["createdTimestamp"])
                            day_s = datetime.datetime.now() - dt_object
                            if day_s.days == 0:
                                if int(day_s.seconds) > 59:
                                    sec = datetime.timedelta(seconds=day_s.seconds)
                                    if int(sec.seconds / 60) > 59:
                                        time_create = str(int(sec.seconds / 3600)) + " hours ago"
                                    else:
                                        time_create = str(int(sec.seconds / 60)) + " minutes ago"
                                else:
                                    time_create = str(day_s.seconds) + " seconds ago"

                            else:
                                time_create = str(day_s.days) + " days ago"

                            for img in rating["images"]:
                                image_list.append(img)

                            users_like = [i["userId"] for i in rating["likes"]]

                            if user_id in users_like:
                                user_like_data = True
                            else:
                                user_like_data = False

                            users_dislike = [i["userId"] for i in rating["disLikes"]]
                            if user_id in users_dislike:
                                user_dislike_data = True
                            else:
                                user_dislike_data = False

                            if rating["reviewTitle"] != "":
                                rating_data.append(
                                    {
                                        "reviewId": str(rating["_id"]),
                                        "name": user_name,
                                        "userLikes": user_like_data,
                                        "userdisLikes": user_dislike_data,
                                        "timestamp": time_create,
                                        "likes": len(rating["likes"]),
                                        "images": rating["images"],
                                        "replies": rating["replies"] if "replies" in rating else [],
                                        "disLikes": len(rating["disLikes"]),
                                        "rating": rating["rating"],
                                        "reviewTitle": rating["reviewTitle"]
                                        if "reviewTitle" in rating
                                        else "",
                                        "reviewDesc": rating["reviewDescription"]
                                        if "reviewDescription" in rating
                                        else "",
                                    }
                                )
                            else:
                                pass
                    else:
                        product_review_count = product_review_count + 1
                        rating_avg = rating_avg + rating["rating"]
                        if rating["rating"] == 1:
                            first_star.append(rating["rating"])
                        elif rating["rating"] == 2:
                            two_star.append(rating["rating"])
                        elif rating["rating"] == 3:
                            three_star.append(rating["rating"])
                        elif rating["rating"] == 4:
                            four_star.append(rating["rating"])
                        elif rating["rating"] == 5:
                            five_star.append(rating["rating"])

                        if rating["userName"] == "":
                            user_name = "App Customer"
                        else:
                            user_name = rating["userName"]
                        dt_object = datetime.datetime.fromtimestamp(rating["createdTimestamp"])
                        day_s = datetime.datetime.now() - dt_object
                        if day_s.days == 0:
                            if int(day_s.seconds) > 59:
                                sec = datetime.timedelta(seconds=day_s.seconds)
                                if int(sec.seconds / 60) > 59:
                                    time_create = str(int(sec.seconds / 3600)) + " hours ago"
                                else:
                                    time_create = str(int(sec.seconds / 60)) + " minutes ago"
                            else:
                                time_create = str(day_s.seconds) + " seconds ago"

                        else:
                            time_create = str(day_s.days) + " days ago"

                        for img in rating["images"]:
                            image_list.append(img)

                        users_like = [i["userId"] for i in rating["likes"]]

                        if user_id in users_like:
                            user_like_data = True
                        else:
                            user_like_data = False

                        users_dislike = [i["userId"] for i in rating["disLikes"]]
                        if user_id in users_dislike:
                            user_dislike_data = True
                        else:
                            user_dislike_data = False

                        if rating["reviewTitle"] != "":
                            rating_data.append(
                                {
                                    "reviewId": str(rating["_id"]),
                                    "name": user_name,
                                    "userLikes": user_like_data,
                                    "userdisLikes": user_dislike_data,
                                    "timestamp": time_create,
                                    "likes": len(rating["likes"]),
                                    "images": rating["images"],
                                    "replies": rating["replies"] if "replies" in rating else [],
                                    "disLikes": len(rating["disLikes"]),
                                    "rating": rating["rating"],
                                    "reviewTitle": rating["reviewTitle"]
                                    if "reviewTitle" in rating
                                    else "",
                                    "reviewDesc": rating["reviewDescription"]
                                    if "reviewDescription" in rating
                                    else "",
                                }
                            )
                        else:
                            pass
                except:
                    pass
            if len(attribute_rating_data) > 0:
                dataframe_attribute = pd.DataFrame(attribute_rating_data)
                dataframe_attribute["TotalStarRating"] = dataframe_attribute.groupby(
                    dataframe_attribute["attributeName"]
                ).transform("mean")
                dataframe_attribute = dataframe_attribute.drop_duplicates(
                    "attributeId", keep="last"
                )
                dataframe_attribute = dataframe_attribute.to_json(orient="records")
                attribute_rating_data = json.loads(dataframe_attribute)
            else:
                attribute_rating_data = []

            # if product_review_count == 0:
            #     product_count_data = 0
            # else:
            #     product_count_data = rating_avg / product_review_count
            avg_product_rating_value_new = 0
            try:
                product_rating = db.reviewRatings.aggregate(
                    [
                        {
                            "$match": {
                                "productId": str(product_id),
                                "rating": {"$ne": 0},
                                "status": 1,
                            }
                        },
                        {"$group": {"_id": "$orderId", "avgRating": {"$avg": "$rating"}}},
                    ]
                )
                p_ratting = 0
                rat_count = 0
                for avg_product_rating in product_rating:
                    rat_count = rat_count + 1
                    ratting_get = avg_product_rating['avgRating']
                    p_ratting = p_ratting + ratting_get

                avg_product_rating_value = p_ratting / rat_count
                try:
                    avg_product_rating_value_new = round(avg_product_rating_value, 2)
                except:
                    avg_product_rating_value_new = 0
            except:
                avg_product_rating_value_new = 0
            try:
                ## response need to send in api response.
                # send all star rating count
                response = {
                    "userReviews": rating_data[skip:limit],
                    "FiveStarRating": len(five_star),
                    "FourStartRating": len(four_star),
                    "ThreeStarRating": len(three_star),
                    "TwoStarRating": len(two_star),
                    "OneStarRating": len(first_star),
                    "penCount": product_review_pen_count,
                    "TotalNoOfReviews": len(rating_data),
                    "TotalNoOfRatings": product_review_count,
                    # "TotalStarRating": round(product_count_data, 2),
                     "TotalStarRating": avg_product_rating_value_new,
                    # "TotalStarRating": rating_avg / len(rating_data),
                    "attributeRating": attribute_rating_data,
                    "images": image_list,
                }
            except:
                response = {
                    "userReviews": rating_data,
                    "FiveStarRating": len(five_star),
                    "FourStartRating": len(four_star),
                    "ThreeStarRating": len(three_star),
                    "TwoStarRating": len(two_star),
                    "OneStarRating": len(first_star),
                    "penCount": product_review_count,
                    "TotalNoOfReviews": len(rating_data),
                    "TotalNoOfRatings": product_review_count,
                    "TotalStarRating": product_count_data,
                    # "TotalStarRating": rating_avg / len(rating_data),
                    "attributeRating": attribute_rating_data,
                    "images": image_list,
                }
            return response
        else:
            response = {
                "userReviews": [],
                "FiveStarRating": 0,
                "FourStartRating": 0,
                "ThreeStarRating": 0,
                "TwoStarRating": 0,
                "OneStarRating": 0,
                "penCount": 0,
                "TotalNoOfReviews": 0,
                "TotalNoOfRatings": 0,
                "TotalStarRating": 0,
                "attributeRating": [],
                "images": [],
            }
            return response
    except:
        response = {
            "userReviews": [],
            "FiveStarRating": 0,
            "FourStartRating": 0,
            "ThreeStarRating": 0,
            "TwoStarRating": 0,
            "OneStarRating": 0,
            "penCount": 0,
            "TotalNoOfReviews": 0,
            "TotalNoOfRatings": 0,
            "TotalStarRating": 0,
            "attributeRating": [],
            "images": [],
        }
        return response


# store the category, sub category, sub sub category clicks in cassandra====================================
def add_recent_click(
        search_type,
        userId,
        ip_address,
        seach_platform,
        city_name,
        language,
        country_name,
        latitude,
        longitude,
        search_item_query,
):
    if search_type != "":
        if int(search_type) == 0 or int(search_type) == 1 or int(search_type) == 2:
            credentials = pika.PlainCredentials(REBBITMQ_USERNAME, REBBITMQ_PASSWORD)
            parameters = pika.ConnectionParameters(
                REBBITMQ_IP, 5672, "/", credentials, socket_timeout=300
            )
            connection = pika.BlockingConnection(parameters)
            channel = connection.channel()
            channel.queue_declare(queue="RecentViewInsert")
            cat_clicks_data = {
                "userId": userId,
                "searchType": int(search_type),
                "ipAddress": ip_address,
                "platform": seach_platform,
                "city": city_name,
                "language": language,
                "country": country_name,
                "lat": latitude,
                "long": longitude,
                "query": search_item_query,
                "timestamp": int(datetime.datetime.now().timestamp()) * 1000,
            }
            channel.basic_publish(
                exchange="", routing_key="RecentCategoryInsert", body=json.dumps(cat_clicks_data)
            )
    return True


def home_units_data(row, lan, sort, status, logintype, store_category_id, margin_price, city_id):
    try:
        currency_rate = row["currencyRate"]
    except:
        currency_rate = 0
    try:
        tax_price = 0
        best_offer = row["offer"]
        ### tax we are reading from units array for meola because they have tax variant wise
        try:
            if store_category_id != DINE_STORE_CATEGORY_ID:
                if "tax" in row["units"][0]:
                    if len(row["units"][0]["tax"]) == 0:
                        tax_price = 0
                    else:
                        for amount in row["units"][0]["tax"]:
                            tax_price = tax_price + (int(amount["taxValue"]))
                else:
                    if len(row["tax"]) == 0:
                        tax_price = 0
                    else:
                        for amount in row["tax"]:
                            if "value" in amount:
                                tax_price = tax_price + (int(amount["value"]))
                            else:
                                tax_price = tax_price + (int(amount["taxValue"]))
            else:
                tax_price = 0
        except:
            tax_price = 0
        if len(best_offer) > 0:
            if len(best_offer) > 0:
                discount_type = (
                    int(best_offer["discountType"]) if "discountType" in best_offer else 1
                )
                discount_value = best_offer["discountValue"] if "discountValue" in best_offer else 0
            else:
                discount_type = 2
                discount_value = 0

            if discount_type == 0:
                percentage = 0
            else:
                percentage = int(discount_value)

            try:
                if "availableQuantity" in row["units"][0]:
                    if row["units"][0]["availableQuantity"] > 0:
                        outOfStock = False
                        availableQuantity = row["units"][0]["availableQuantity"]
                    else:
                        outOfStock = True
                        availableQuantity = 0
                else:
                    outOfStock = True
                    availableQuantity = 0
            except:
                outOfStock = True
                availableQuantity = 0

            base_price, minimum_order_qty, unit_package_type, unit_moq_type, moq_data, seller_price = cal_product_city_pricing(
                logintype, city_id, row)

            base_price = base_price + ((base_price) * tax_price) / 100
            seller_price = seller_price + ((seller_price) * tax_price) / 100

            if float(currency_rate) > 0:
                base_price = base_price * float(currency_rate)
                seller_price = seller_price * float(currency_rate)
            # ==============calculate discount price =============================
            if discount_type == 0:
                discount_price = float(discount_value)
            elif discount_type == 1:
                try:
                    discount_price = (float(base_price) * float(discount_value)) / 100
                except:
                    discount_price = (float(row["units"][0]["price"]["en"]) * float(discount_value)) / 100
            else:
                discount_price = 0

            if float(currency_rate) > 0 and discount_type == 0:
                discount_price = discount_price * float(currency_rate)

            final_price = base_price - discount_price

            if final_price == 0 or base_price == 0:
                discount_price = 0
            else:
                discount_price = discount_price

            pricedata = {
                "basePrice": base_price,
                "finalPrice": final_price,
                "discountType": discount_type,
                "discountPercentage": percentage,
                "sellerPrice": seller_price,
                "outOfStock": outOfStock,
                "availableQuantity": availableQuantity,
                "discountPrice": discount_price,
                "discountPriceForNonMembers": row["units"][
                    "discountPriceForNonMembers"] if "discountPriceForNonMembers" in row[
                    "units"] else discount_price if discount_price else round(final_price, 2),
                "memberPrice": row["units"]["memberPrice"] if "memberPrice" in row[
                    "units"] else discount_price if discount_price else round(final_price, 2),
                "MOQData": {
                    "minimumOrderQty": minimum_order_qty,
                    "unitPackageType": unit_package_type,
                    "unitMoqType": unit_moq_type,
                    "MOQ": str(minimum_order_qty) + " " + unit_package_type,
                },
            }
            result = pricedata
            return result
        else:
            if "availableQuantity" in row["units"][0]:
                availableQuantity = (
                    row["units"][0]["availableQuantity"]
                    if "availableQuantity" in row["units"][0]
                    else 0
                )
            else:
                availableQuantity = 0

            if availableQuantity == "":
                availableQuantity = 0

            if availableQuantity > 0:
                outOfStock = False
            else:
                outOfStock = True

            base_price_tax, minimum_order_qty, unit_package_type, unit_moq_type, moq_data, seller_price = cal_product_city_pricing(
                logintype, city_id, row)

            seller_price = seller_price + ((seller_price) * tax_price) / 100
            if float(currency_rate) > 0:
                base_price_tax = base_price_tax * float(currency_rate)
                seller_price = seller_price * float(currency_rate)

            if base_price_tax == "":
                base_price_tax = 0

            base_price = base_price_tax + ((base_price_tax) * tax_price) / 100
            pricedata = {
                "basePrice": base_price_tax,
                "finalPrice": base_price,
                "discountPrice": 0,
                "sellerPrice": seller_price,
                "availableQuantity": availableQuantity,
                "outOfStock": outOfStock,
                "discountType": 2,
                "discountPercentage": 0,
                "discountPriceForNonMembers": row["units"][
                    "discountPriceForNonMembers"] if "discountPriceForNonMembers" in row["units"] else round(base_price,
                                                                                                             2),
                "memberPrice": row["units"]["memberPrice"] if "memberPrice" in row["units"] else round(base_price, 2),
                "MOQData": {
                    "minimumOrderQty": minimum_order_qty,
                    "unitPackageType": unit_package_type,
                    "unitMoqType": unit_moq_type,
                    "MOQ": str(minimum_order_qty) + " " + unit_package_type,
                },
            }
            result = pricedata
            return result
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        pricedata = {
            "discountType": 2,
            "discountPercentage": 0,
            "basePrice": 0,
            "availableQuantity": 0,
            "outOfStock": True,
            "finalPrice": 0,
            "discountPrice": 0,
            "MOQData": {
                "minimumOrderQty": 0,
                "unitPackageType": "",
                "unitMoqType": "",
                "MOQ": "",
            },
        }
        result = pricedata
        return result


class ProductCategoryList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Home Page"],
        operation_description="API for getting the category, sub-category, sub-sub-category",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="cityId",
                default="5df7b7218798dc2c1114e6bf",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular city",
            ),
            openapi.Parameter(
                name="storeId",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store id while need paricular store's category otherwise value should be '0'",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b6ea8798dc19d926bd28",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="zone id while need paricular store's category otherwise value should be '0'",
            ),
            openapi.Parameter(
                name="categoryId",
                default="",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="category id while need child category for the parent category",
            ),
            openapi.Parameter(
                name="from",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="to",
                default="10",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="integrationType",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for filter out the products base on product setup configuration, value should be"
                            "0 for All products, "
                            "1 for Only Magento Products, "
                            "2 for Only Shopify Products, "
                            "3 for Only Roadyo or shopar products",
            ),
            openapi.Parameter(
                name="requestFrom",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from where the request is coming and which services need to give in response. values are 0 for web and 1 for app",
            ),
        ],
        responses={
            200: "successfully. category found or data found",
            404: "data not found. it might be category not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            # -------------------- accepting headers and qeuery parameters ---------------------- #
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            store_id = request.META["HTTP_STOREID"] if "HTTP_STOREID" in request.META else ""
            if store_id == "0":
                store_id = request.GET.get("storeId", "")
            zone_id = request.META["HTTP_ZONEID"] if "HTTP_ZONEID" in request.META else ""
            if zone_id == "":
                zone_id = request.GET.get("zoneId", "")
            else:
                pass

            if store_category_id == ECOMMERCE_STORE_CATEGORY_ID:
                store_id = ""
                zone_id = ""
            # elif store_category_id == PHARMACY_STORE_CATEGORY_ID:
            #     store_id = ""
            # elif store_id != "0" or store_id != "":
            #     zone_id = ""
            category_id = (
                request.META["HTTP_CATEGORYID"] if "HTTP_CATEGORYID" in request.META else ""
            )
            city_id = (
                request.META["HTTP_CITYID"]
                if "HTTP_CITYID" in request.META
                else "5df7b7218798dc2c1114e6bf"
            )
            from_data = request.META["HTTP_FROM"] if "HTTP_FROM" in request.META else "0"
            to_data = "40"  # request.META["HTTP_TO"] if "HTTP_TO" in request.META else "20"
            integration_type = int(request.GET.get("integrationType", 0))
            # ================== for the logs============================================================================
            token = request.META["HTTP_AUTHORIZATION"]
            request_from = int(request.GET.get("requestFrom", 0))
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return ResponseHelper.get_status_401(response_data)

            response = OperationHelper.process_category_list_data(
                store_category_id,
                store_id,
                zone_id,
                category_id,
                from_data,
                to_data,
                request_from,
                lan,
                token,
                integration_type,
            )
            return response
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    API for the get the supplier products details
"""


class SupplierProductDetails(APIView):
    def get(self, request):
        try:
            productId = request.GET["productId"]
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            lan = request.META["HTTP_LANGUAGE"]
            query = {
                "size": 100,
                "from": 0,
                "query": {
                    "bool": {
                        "must": [
                            {"match": {"status": 1}},
                            {"match": {"_id": str(productId)}},
                        ]
                    }
                },
            }
            res_filter_parameters = es.search(
                index=index_products,
                body=query,
                # filter_path=['hits.hits._id', 'hits.hits._source'])
                filter_path=[
                    "hits.hits._id",
                    "hits.hits._source.brand",
                    "hits.hits._source.supplierId",
                    "hits.hits._source.images",
                    "hits.hits._source.units",
                    "hits.hits._source.brandTitle",
                    "hits.hits._source.manufactureName",
                    "hits.hits._source.colors",
                    "hits.hits._source.pName",
                    "hits.hits._source.catName",
                    "hits.hits._source.subCatName",
                    "hits.hits._source.subSubCatName",
                    "hits.hits._source.manufactureName",
                    "hits.hits._source.offer",
                    "hits.hits._source.currencySymbol",
                    "hits.hits._source.currency",
                    "hits.hits._source.detailDescription",
                    "hits.hits._source.isAdded",
                ],
            )
            if len(res_filter_parameters) > 0:
                product_details = []
                for i in res_filter_parameters["hits"]["hits"]:
                    supplier_details = db.store.find_one(
                        {"_id": ObjectId(i["_source"]["storeId"])}, {"name": 1}
                    )
                    size = []
                    color = []
                    for j in i["_source"]["units"]:
                        price = j["floatValue"]
                        image = j["image"]
                        size.append(j["unitSizeGroupValue"])
                        color.append(
                            {"name": j["colorName"], "rgb": str("rgb(") + j["color"] + ")"}
                        )
                    product_details.append(
                        {
                            "productId": i["_id"],
                            "productName": i["_source"]["pName"][lan],
                            "catName": i["_source"]["catName"][lan],
                            "subCatName": i["_source"]["subCatName"][lan],
                            "subSubCatName": i["_source"]["subSubCatName"][lan],
                            "brandName": i["_source"]["brandTitle"][lan],
                            "manufactureName": i["_source"]["manufactureName"][lan],
                            "sizes": size,
                            "color": color,
                            "basePrice": price,
                            "images": image,
                            "description": i["_source"]["detailDescription"][lan],
                            "currency": i["_source"]["currency"],
                            "currencySymbol": i["_source"]["currencySymbol"],
                            "supplierId": i["_source"]["supplierId"],
                            "supplierName": supplier_details["name"][lan],
                            "isAdded": i["_source"]["isAdded"]
                            if "isAdded" in i["_source"]
                            else False,
                        }
                    )
                response = {"message": "Data Found", "Data": product_details}
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"message": "Data Not Found", "Data": []}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    Remove Supplier Products from store
"""


class RemoveSupplierProducts(APIView):
    def get(self, request):
        try:
            productId = request.GET["productId"]
            supplierProductId = request.GET["supplierProductId"]
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            supplier_products = db.supplierProducts.find(
                {"_id": supplierProductId, "status": 1}
            ).count()
            if supplier_products != 0:
                supplier_product_details = db.supplierProducts.find(
                    {"_id": ObjectId(supplierProductId), "status": 1}
                )
                db.supplierProducts.update(
                    {"childProductId": productId},
                    {"$set": {"isAdded": False, "childProductId": ""}},
                )
                for p in supplier_product_details:
                    res_pop_update = es.update(
                        index=index_supplier,
                        doc_type=doc_type_suppliertype,
                        id=str(productId),
                        body={"doc": {"isAdded": False, "childProductId": ""}},
                    )
                es.delete(index=index_products, id=productId)
                db.childProducts.remove({"_id": ObjectId(productId)})
                response = {
                    "message": "SuccessFully Removed",
                    "productId": productId,
                    "isAdded": False,
                }
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {
                    "message": "Product Not Found or ",
                    "productId": productId,
                    "supplierProductId": supplierProductId,
                    "isAdded": False,
                }
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


class ZoneDetails(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Zones"],
        operation_description="API for getting zones based on latitute and longtitute",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default="5f4f7709bd2e5b5882289097",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="id of the store category from which category need to change the zone",
            ),
            openapi.Parameter(
                name="cartId",
                default="5fdb1c61eda320789f6e13fc",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="cart id of the user which need to change the zone",
            ),
            openapi.Parameter(
                name="storeId",
                default="5e20914ac348027af2f9028e",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id",
            ),
            openapi.Parameter(
                name="currentZoneId",
                default="5fcf541871d7bd51e6008c94",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="current zone id of the user",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "data": openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        required=[
                            "cityId",
                            "currency",
                            "currencySymbol",
                            "_id",
                            "zoneId",
                            "city",
                            "title",
                        ],
                        properties={
                            "cityId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="city id of the founded zone",
                                example="5df7b7218798dc2c1114e6bf",
                            ),
                            "currency": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="currency of the user's country or city",
                                example="INR",
                            ),
                            "currencySymbol": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="currency symbol of the user's country or city",
                                example="₹",
                            ),
                            "mileageMetric": openapi.Schema(
                                type=openapi.TYPE_STRING, description="mileage metric", example="0"
                            ),
                            "_id": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="id of the founded zone",
                                example="5df8b6ea8798dc19d926bd28",
                            ),
                            "zoneId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="id of the founded zone",
                                example="5df8b6ea8798dc19d926bd28",
                            ),
                            "weightMetric": openapi.Schema(
                                type=openapi.TYPE_STRING, description="weight metric", example="0"
                            ),
                            "city": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="city name of the founded zone",
                                example="Bengaluru",
                            ),
                            "title": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="name of the founded zone",
                                example="R T Nagar",
                            ),
                        },
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="In operational zone.",
                    ),
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="data not found",
                    ),
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            lat = request.GET["lat"]
            long = request.GET["long"]
            store_category_id = request.GET.get("storeCategoryId", "")
            store_id = request.GET.get("storeId", "")
            cart_id = request.GET.get("cartId", "")
            current_zone_id = request.GET.get("currentZoneId", "")

            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                condition = {
                    "status": 1,
                    "storeId": 0,
                    "polygons": {
                        "$geoIntersects": {
                            "$geometry": {"type": "Point", "coordinates": [float(long), float(lat)]}
                        }
                    },
                }
                all_zones = db.zones.find(condition)
                matching_ids = [str(doc['_id']) for doc in all_zones]
                zone_details = db.zones.find_one(
                    condition,
                    {
                        "_id": 1,
                        "city_ID": 1,
                        "city": 1,
                        "currency": 1,
                        "currencySymbol": 1,
                        "title": 1,
                        "mileageMetric": 1,
                        "weightMetric": 1,
                        "DCStoreId": 1,
                    },
                )
                if zone_details == None:
                    condition["isDeleted"] = False
                    del condition["status"]
                    city_details = db.cities.find_one(
                        condition, {"_id": 1, "cityId": 1, "cityName": 1}
                    )
                    if city_details != None:
                        zone_details = db.zones.find_one(
                            {"status": 1, "city_ID": str(city_details["_id"])},
                            {
                                "_id": 1,
                                "city_ID": 1,
                                "city": 1,
                                "currency": 1,
                                "currencySymbol": 1,
                                "title": 1,
                                "mileageMetric": 1,
                                "weightMetric": 1,
                                "DCStoreId": 1,
                            },
                        )
                    else:
                        translator = t(to_lang="ar")
                        response =  "We don’t operate in your region at this moment , please contact our support team for further queries."
                        response = {
                            "message": response
                        }
                        return JsonResponse(response, safe=False, status=404)

                if zone_details != None:
                    country_data = db.cities.find_one(
                        {"_id": ObjectId(zone_details["city_ID"])}, {"countryId": 1}
                    )
                    if country_data is not None:
                        country_id = country_data["countryId"]
                    else:
                        country_id = ""

                    is_same_zone = False
                    is_same_city = False
                    if store_category_id == "":
                        pass
                    else:
                        city_details = db.cities.find_one(
                            {"_id": ObjectId(zone_details["city_ID"])}, {"storeCategory": 1}
                        )
                        if city_details is not None:
                            if "storeCategory" in city_details:
                                for category in city_details["storeCategory"]:
                                    if category["storeCategoryId"] == store_category_id:
                                        if "fullFilledByDC" in category:
                                            if category["fullFilledByDC"] == True:
                                                if current_zone_id == str(zone_details["_id"]):
                                                    is_same_zone = True
                                                else:
                                                    is_same_zone = False
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass
                            else:
                                pass
                        else:
                            pass

                    if current_zone_id != "":
                        current_zone_city_deatails = db.zones.find_one(
                            {"_id": ObjectId(current_zone_id)}
                        )
                        current_city_id = current_zone_city_deatails["city_ID"]
                    else:
                        current_zone_city_deatails = None
                        current_city_id = ""

                    main_city_id = zone_details["city_ID"]

                    if main_city_id == current_city_id:
                        is_same_city = True
                    else:
                        is_same_city = False

                    if is_same_zone == True and is_same_city == True:
                        message = "Our full fillment center will change based on your new address and we will clear your cart ,please confirm to proceed."
                    elif is_same_city == False:
                        message = "It seems you have changed your city , we will have to clear your current cart as the categories and products can potentially change when you change cities."
                    else:
                        message = "In operational zone."

                    zone_data = {
                        "city": zone_details["city"],
                        "cityId": zone_details["city_ID"],
                        "countryId": country_id,
                        "isSameZone": is_same_zone,
                        "isSameCity": is_same_city,
                        "currency": zone_details["currency"],
                        "currencySymbol": zone_details["currencySymbol"],
                        "mileageMetric": zone_details["mileageMetric"],
                        "title": zone_details["title"],
                        "weightMetric": zone_details["weightMetric"],
                        "zoneId": str(zone_details["_id"]),
                        "zoneIdList": matching_ids,
                        "_id": str(zone_details["_id"]),
                    }
                    if store_id != "":
                        zone_id = zone_data["zoneId"]
                        store_details = db.stores.find_one(
                            {"_id": ObjectId(store_id), "serviceZones.zoneId": zone_id}
                        )
                        if store_details is not None:
                            response = {
                                "data": zone_data,
                                "isSameZone": is_same_zone,
                                "message": message,
                            }
                            return JsonResponse(response, safe=False, status=200)
                        else:
                            response =  "We don’t operate in your region at this moment , please contact our support team for further queries."
                            response = {
                                "message": response
                            }
                            return JsonResponse(response, safe=False, status=404)
                    else:
                        response = {
                            "data": zone_data,
                            "isSameZone": is_same_zone,
                            "isSameCity": is_same_city,
                            "message": message,
                        }
                        return JsonResponse(response, safe=False, status=200)
                else:
                    response = "We don’t operate in your region at this moment , please contact our support team for further queries."
                    response = {
                        "message": response
                    }
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    API for the get the products for the offers
    @:param offerId 
"""


class OfferProducts(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Offer Products"],
        operation_description="API for getting the particular offers products. subcategory wise products",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="loginType",
                default="1",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="login type of the user. value should be 1 for retailer and 2 for distributor",
            ),
            openapi.Parameter(
                name="skip",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="size",
                default="10",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="storeId",
                default="5e20914ac348027af2f9028e",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="while checking in particular store",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5f7f08cf0895203e4b756073",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="while checking in particular zone",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
        ],
        responses={
            200: "successfully. offer product found",
            404: "data not found. it might be offers not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            store_category_id = (
                str(request.META["HTTP_STORECATEGORYID"])
                if "HTTP_STORECATEGORYID" in request.META
                else ECOMMERCE_STORE_CATEGORY_ID
            )
            if store_category_id == "":
                response_data = {
                    "message": "store category id is blank",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                pass
            login_type = (
                int(request.META["HTTP_LOGINTYPE"]) if "HTTP_LOGINTYPE" in request.META else 1
            )
            limit = int(request.META["HTTP_SKIP"]) if "HTTP_SKIP" in request.META else 0
            size = int(request.META["HTTP_SIZE"]) if "HTTP_SIZE" in request.META else 20
            offer_banners_data = []
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_id = request.GET.get("storeId", "")
            zone_id = request.GET.get("zoneId", "")
            integration_type = int(request.GET.get("integrationType", 0))
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            from_redis_data = True

            rjId = ""
            if store_id != "":
                if rjId == "":
                    rjId = str(store_id)
                else:
                    rjId = rjId + "_" + str(store_id)

            if zone_id != "":
                if rjId == "":
                    rjId = str(zone_id)
                else:
                    rjId = rjId + "_" + str(zone_id)

            if integration_type != "":
                if rjId == "":
                    rjId = str(integration_type)
                else:
                    rjId = rjId + "_" + str(integration_type)

            if store_category_id != "":
                if rjId == "":
                    rjId = str(store_category_id)
                else:
                    rjId = rjId + "_" + str(store_category_id)

            if currency_code != "":
                if rjId == "":
                    rjId = str(currency_code)
                else:
                    rjId = rjId + "_" + str(currency_code)

            if limit != "":
                if rjId == "":
                    rjId = str(limit)
                else:
                    rjId = rjId + "_" + str(limit)

            if size != "":
                if rjId == "":
                    rjId = str(size)
                else:
                    rjId = rjId + "_" + str(size)

            try:
                # redis_response_data = RJ_DEALS_PRODUCTS.jsonget(rjId)
                redis_response_data = {}
            except:
                redis_response_data = {}
            if redis_response_data is None:
                from_redis_data = False
                redis_response_data = {}

            if store_id != "":
                # store_query = {"match": {"units.suppliers.id": store_id}}
                store_query = {"match": {"storeId": store_id}}
            elif zone_id != "":
                store_list_json = []
                stores_list = db.stores.find(
                    {
                        "categoryId": str(store_category_id),
                        "serviceZones.zoneId": zone_id,
                        "storeFrontTypeId": {"$ne": 5},
                        "status": 1,
                    }
                )
                for s in stores_list:
                    store_list_json.append(str(s["_id"]))
                store_query = {"terms": {"storeId": store_list_json}}
            else:
                store_query = {"match": {"status": 1}}
            must_query = []
            must_not = []
            must_not.append({"match": {"storeId": "0"}})
            must_query.append(store_query)
            must_query.append({"match": {"storeCategoryId": str(store_category_id)}})
            must_query.append({"match": {"status": 1}})
            if store_id == "":
                if zone_id == "" or store_category_id == ECOMMERCE_STORE_CATEGORY_ID:
                    pass
                else:
                    store_data_details = []
                    store_query = {
                        "categoryId": str(store_category_id),
                        "serviceZones.zoneId": zone_id,
                        "storeFrontTypeId": {"$ne": 5},
                        "status": 1,
                    }
                    store_data = db.stores.find(store_query)  # store_find(store_query)

                    if store_data.count() > 0:
                        for store in store_data:
                            store_data_details.append(str(store["_id"]))
                        offer_data = db.offers.find(
                            {"storeId": {"$in": store_data_details}, "status": 1}
                        )
                        offer_ids = []
                        if offer_data.count() > 0:
                            for o_id in offer_data:
                                offer_ids.append(str(o_id["_id"]))
                        if len(offer_ids) > 0:
                            must_query.append({"terms": {"offer.offerId": offer_ids}})
                    else:
                        pass
            else:
                offer_data = db.offers.find({"storeId": {"$in": [store_id]}, "status": 1})
                offer_ids = []
                if offer_data.count() > 0:
                    for o_id in offer_data:
                        offer_ids.append(str(o_id["_id"]))
                if len(offer_ids) > 0:
                    must_query.append({"terms": {"offer.offerId": offer_ids}})
            # must_query.append(
            #     {
            #         "exists": {
            #             "field": "offer"
            #         }
            #     }
            # )
            if int(integration_type) == 0:
                pass
            elif int(integration_type) == 1:
                must_not.append({"match": {"magentoId": -1}})
                must_query.append({"exists": {"field": "magentoId"}})
            elif int(integration_type) == 2:
                must_not.append({"term": {"shopify_variant_id.keyword": {"value": ""}}})
                must_query.append({"exists": {"field": "shopify_variant_id"}})
            elif int(integration_type) == 3:
                must_query.append({"match": {"magentoId": -1}})
                must_query.append({"term": {"shopify_variant_id.keyword": ""}})

            if zone_id != "":
                driver_roaster = next_availbale_driver_roaster(zone_id)
                next_availbale_driver_time = driver_roaster["productText"]
            else:
                next_availbale_driver_time = ""

            total_count_data = []
            field_query = "secondCategoryName.keyword"
            sort_query = [
                {"isCentral": {"order": "desc"}},
                {"isInStock": {"order": "desc"}},
                {"units.discountPrice": {"order": "asc"}},
            ]
            query = {
                "query": {"bool": {"must": must_query, "must_not": must_not}},
                "track_total_hits": True,
                "sort": sort_query,
                "aggs": {
                    "group_by_catName": {
                        "terms": {
                            "field": field_query,
                            "size": 50,  # int(size)
                        },
                        "aggs": {
                            "top_hits": {
                                "terms": {"field": "parentProductId.keyword", "size": 20},
                                "aggs": {
                                    "top_sub_category_hits": {
                                        "top_hits": {
                                            "sort": sort_query,
                                            "_source": {
                                                "includes": [
                                                    "_id",
                                                    "pName",
                                                    "storeId",
                                                    "parentProductId",
                                                    "pPName",
                                                    "offer",
                                                    "categoryList",
                                                    "images",
                                                    "avgRating",
                                                    "units",
                                                    "storeCategoryId",
                                                    "manufactureName",
                                                    "maxQuantity",
                                                ]
                                            },
                                            "size": 1,
                                        }
                                    }
                                },
                            }
                        },
                    }
                },
            }
            categoty_data_json = []

            if not len(redis_response_data):
                res = es.search(index=index_products, body=query)
            else:
                res = {"aggregations": {"group_by_catName": {"buckets": []}}}
                response = {
                    "offerBanner": [],
                    "id": "",
                    "catName": "",
                    "imageUrl": "",
                    "bannerImageUrl": "",
                    "websiteImageUrl": "",
                    "websiteBannerImageUrl": "",
                    "categoryData": redis_response_data,
                    "offers": [],
                    "type": 7,
                    "seqId": 7,
                    "penCount": len(redis_response_data),
                }
                print("from redis response time", time.time() - start_time)
                return JsonResponse(response, safe=False, status=200)

            if len(res["aggregations"]["group_by_catName"]["buckets"]) == 0 and not len(redis_response_data):
                response = {
                    "offerBanner": [],
                    "id": "",
                    "catName": "",
                    "imageUrl": "",
                    "bannerImageUrl": "",
                    "websiteImageUrl": "",
                    "websiteBannerImageUrl": "",
                    "categoryData": [],
                    "offers": [],
                    "type": 7,
                    "seqId": 7,
                    "penCount": 0,
                }
                return JsonResponse(response, safe=False, status=404)
            for i in res["aggregations"]["group_by_catName"]["buckets"]:  # [int(limit):int(size)]:
                sub_cat_id = i["key"]
                if sub_cat_id != "":
                    categoty_data = []
                    offers_data = []
                    try:
                        resData = []
                        for inner_data in i["top_hits"]["buckets"]:
                            try:
                                total_count_data.append(
                                    inner_data["top_sub_category_hits"]["hits"]["total"]["value"]
                                )
                            except:
                                total_count_data.append(
                                    inner_data["top_sub_category_hits"]["hits"]["total"]
                                )

                            if (
                                    len(
                                        inner_data["top_sub_category_hits"]["hits"]["hits"][0][
                                            "_source"
                                        ]["categoryList"]
                                    )
                                    > 0
                            ):
                                cat_name = (
                                    inner_data["top_sub_category_hits"]["hits"]["hits"][0][
                                        "_source"
                                    ]["categoryList"][0]["parentCategory"]["categoryName"][language]
                                    if language
                                       in inner_data["top_sub_category_hits"]["hits"]["hits"][0][
                                           "_source"
                                       ]["categoryList"][0]["parentCategory"]["categoryName"]
                                    else inner_data["top_sub_category_hits"]["hits"]["hits"][0][
                                        "_source"
                                    ]["categoryList"][0]["parentCategory"]["categoryName"]["en"]
                                )
                                if store_category_id != MEAT_STORE_CATEGORY_ID:
                                    for product in inner_data["top_sub_category_hits"]["hits"][
                                        "hits"
                                    ]:
                                        try:
                                            variant_data = []
                                            best_supplier = {
                                                "productId": str(product["_id"]),
                                                "id": str(product["_source"]["storeId"]),
                                            }
                                            product_tag = ""
                                            # ================================get the details from childProducts collection=====================
                                            if len(best_supplier) > 0:
                                                # query = {"parentProductId": str(product['_source']['parentProductId']), "status": 1}
                                                query = {
                                                    "parentProductId": str(
                                                        product["_source"]["parentProductId"]
                                                    )
                                                }
                                                try:
                                                    query["storeId"] = ObjectId(best_supplier["id"])
                                                except:
                                                    query["storeId"] = best_supplier["id"]
                                                variant_count_data = db.childProducts.find(
                                                    query
                                                ).count()
                                                if variant_count_data > 1:
                                                    variant_count = True
                                                else:
                                                    variant_count = False

                                                child_product_query = {}
                                                if len(best_supplier) > 0:
                                                    child_product_id = best_supplier["productId"]
                                                else:
                                                    child_product_id = product["_id"]
                                                child_product_query["_id"] = ObjectId(
                                                    child_product_id
                                                )
                                                if best_supplier["id"] == "0":
                                                    child_product_query["storeId"] = best_supplier[
                                                        "id"
                                                    ]
                                                else:
                                                    child_product_query["storeId"] = ObjectId(
                                                        best_supplier["id"]
                                                    )

                                                child_product_details = db.childProducts.find_one(
                                                    child_product_query
                                                )
                                                if str(child_product_details["storeId"]) != "0":
                                                    if (
                                                            "availableQuantity"
                                                            in child_product_details["units"][0]
                                                    ):
                                                        if (
                                                                int(
                                                                    child_product_details["units"][0][
                                                                        "availableQuantity"
                                                                    ]
                                                                )
                                                                > 0
                                                        ):
                                                            outOfStock = False
                                                            availableQuantity = (
                                                                child_product_details["units"][0][
                                                                    "availableQuantity"
                                                                ]
                                                            )
                                                        else:
                                                            outOfStock = True
                                                            availableQuantity = 0
                                                    else:
                                                        outOfStock = True
                                                        availableQuantity = 0
                                                else:
                                                    outOfStock = True
                                                    availableQuantity = 0
                                                offers_details = []
                                                offer_details_data = []
                                                if "offer" in child_product_details:
                                                    for offer in child_product_details["offer"]:
                                                        if offer["status"] == 1:
                                                            offer_query = {
                                                                "_id": ObjectId(offer["offerId"])
                                                            }
                                                            offer_count = db.offers.find_one(
                                                                offer_query
                                                            )
                                                            if offer_count is not None:
                                                                if offer_count[
                                                                    "startDateTime"
                                                                ] <= int(time.time()):
                                                                    offers_details.append(offer)
                                                                    offer_details_data.append(
                                                                        {
                                                                            "offerId": offer[
                                                                                "offerId"
                                                                            ],
                                                                            "offerName": offer[
                                                                                "offerName"
                                                                            ]["en"],
                                                                            "webimages": offer[
                                                                                "webimages"
                                                                            ]["image"],
                                                                            "mobimage": offer[
                                                                                "images"
                                                                            ]["image"],
                                                                            "discountValue": offer[
                                                                                "discountValue"
                                                                            ],
                                                                        }
                                                                    )
                                                        else:
                                                            pass
                                                else:
                                                    pass

                                                if len(offers_details) > 0:
                                                    best_offer = max(
                                                        offers_details,
                                                        key=lambda x: x["discountValue"],
                                                    )
                                                    best_offer = best_offer
                                                    currdate = datetime.datetime.now().replace(
                                                        hour=23,
                                                        minute=59,
                                                        second=59,
                                                        microsecond=59,
                                                    )
                                                    eastern = timezone(timezonename)
                                                    currlocal = eastern.localize(currdate)
                                                    best_offer["endDateTimeISO"] = (
                                                            int(((currlocal).timestamp())) * 1000
                                                    )
                                                else:
                                                    best_offer = {}
                                                # ======================================product seo======================================================
                                                if "productSeo" in child_product_details:
                                                    try:
                                                        if (
                                                                len(
                                                                    child_product_details["productSeo"][
                                                                        "title"
                                                                    ]
                                                                )
                                                                > 0
                                                        ):
                                                            title = (
                                                                child_product_details["productSeo"][
                                                                    "title"
                                                                ][language]
                                                                if language
                                                                   in child_product_details[
                                                                       "productSeo"
                                                                   ]["title"]
                                                                else child_product_details[
                                                                    "productSeo"
                                                                ]["title"]["en"]
                                                            )
                                                        else:
                                                            title = ""
                                                    except:
                                                        title = ""

                                                    try:
                                                        if (
                                                                len(
                                                                    child_product_details["productSeo"][
                                                                        "description"
                                                                    ]
                                                                )
                                                                > 0
                                                        ):
                                                            description = (
                                                                child_product_details["productSeo"][
                                                                    "description"
                                                                ][language]
                                                                if language
                                                                   in child_product_details[
                                                                       "productSeo"
                                                                   ]["description"]
                                                                else child_product_details[
                                                                    "productSeo"
                                                                ]["description"]["en"]
                                                            )
                                                        else:
                                                            description = ""
                                                    except:
                                                        description = ""

                                                    try:
                                                        if (
                                                                len(
                                                                    child_product_details["productSeo"][
                                                                        "metatags"
                                                                    ]
                                                                )
                                                                > 0
                                                        ):
                                                            metatags = (
                                                                child_product_details["productSeo"][
                                                                    "metatags"
                                                                ][language]
                                                                if language
                                                                   in child_product_details[
                                                                       "productSeo"
                                                                   ]["metatags"]
                                                                else child_product_details[
                                                                    "productSeo"
                                                                ]["metatags"]["en"]
                                                            )
                                                        else:
                                                            metatags = ""
                                                    except:
                                                        metatags = ""

                                                    try:
                                                        if (
                                                                len(
                                                                    child_product_details["productSeo"][
                                                                        "slug"
                                                                    ]
                                                                )
                                                                > 0
                                                        ):
                                                            slug = (
                                                                child_product_details["productSeo"][
                                                                    "slug"
                                                                ][language]
                                                                if language
                                                                   in child_product_details[
                                                                       "productSeo"
                                                                   ]["slug"]
                                                                else child_product_details[
                                                                    "productSeo"
                                                                ]["slug"]["en"]
                                                            )
                                                        else:
                                                            slug = ""
                                                    except:
                                                        slug = ""

                                                    product_seo = {
                                                        "title": title,
                                                        "description": description,
                                                        "metatags": metatags,
                                                        "slug": slug,
                                                    }
                                                else:
                                                    product_seo = {
                                                        "title": "",
                                                        "description": "",
                                                        "metatags": "",
                                                        "slug": "",
                                                    }
                                                tax_value = []

                                                # =========================================pharmacy details=========================================
                                                if "prescriptionRequired" in child_product_details:
                                                    try:
                                                        if (
                                                                int(child_product_details[
                                                                    "prescriptionRequired"
                                                                ])
                                                                == 0
                                                        ):
                                                            prescription_required = False
                                                        else:
                                                            prescription_required = True
                                                    except:
                                                        prescription_required = False
                                                else:
                                                    prescription_required = False

                                                if "saleOnline" in child_product_details:
                                                    if child_product_details["saleOnline"] == 0:
                                                        sales_online = False
                                                    else:
                                                        sales_online = True
                                                else:
                                                    sales_online = False

                                                if "uploadProductDetails" in child_product_details:
                                                    upload_details = child_product_details[
                                                        "uploadProductDetails"
                                                    ]
                                                else:
                                                    upload_details = ""
                                                # ==================================================================================================

                                                if len(best_supplier) == 0:
                                                    tax_value = []
                                                else:
                                                    if child_product_details != None:
                                                        if (
                                                                type(child_product_details["tax"])
                                                                == list
                                                        ):
                                                            for tax in child_product_details["tax"]:
                                                                tax_value.append(
                                                                    {"value": tax["taxValue"]}
                                                                )
                                                        else:
                                                            if child_product_details["tax"] != None:
                                                                if (
                                                                        "taxValue"
                                                                        in child_product_details["tax"]
                                                                ):
                                                                    tax_value.append(
                                                                        {
                                                                            "value": child_product_details[
                                                                                "tax"
                                                                            ][
                                                                                "taxValue"
                                                                            ]
                                                                        }
                                                                    )
                                                                else:
                                                                    tax_value.append(
                                                                        {
                                                                            "value": child_product_details[
                                                                                "tax"
                                                                            ]
                                                                        }
                                                                    )
                                                            else:
                                                                pass
                                                    else:
                                                        tax_value = []

                                                # ========================= for the get the linked the unit data====================================
                                                for link_unit in child_product_details["units"][0][
                                                    "attributes"
                                                ]:
                                                    try:
                                                        for attrlist in link_unit["attrlist"]:
                                                            try:
                                                                if attrlist == None:
                                                                    pass
                                                                else:
                                                                    if (
                                                                            attrlist["linkedtounit"]
                                                                            == 1
                                                                    ):
                                                                        if (
                                                                                attrlist[
                                                                                    "measurementUnit"
                                                                                ]
                                                                                == ""
                                                                        ):
                                                                            attr_name = (
                                                                                str(
                                                                                    attrlist[
                                                                                        "value"
                                                                                    ][language]
                                                                                )
                                                                                if language
                                                                                   in attrlist["value"]
                                                                                else str(
                                                                                    attrlist[
                                                                                        "value"
                                                                                    ]["en"]
                                                                                )
                                                                            )
                                                                        else:
                                                                            attr_name = (
                                                                                str(
                                                                                    attrlist[
                                                                                        "value"
                                                                                    ][language]
                                                                                )
                                                                                + " "
                                                                                + attrlist[
                                                                                    "measurementUnit"
                                                                                ]
                                                                                if language
                                                                                   in attrlist["value"]
                                                                                else str(
                                                                                    attrlist[
                                                                                        "value"
                                                                                    ]["en"]
                                                                                )
                                                                                     + " "
                                                                                     + attrlist[
                                                                                         "measurementUnit"
                                                                                     ]
                                                                            )
                                                                        variant_data.append(
                                                                            {
                                                                                "value": str(
                                                                                    attr_name
                                                                                ),
                                                                                "name": attrlist[
                                                                                    "attrname"
                                                                                ]["en"],
                                                                            }
                                                                        )
                                                                    else:
                                                                        pass
                                                            except:
                                                                pass
                                                    except:
                                                        pass
                                                # =========================for max quantity=================================================
                                                if "maxQuantity" in child_product_details:
                                                    if child_product_details["maxQuantity"] != "":
                                                        max_quantity = int(
                                                            child_product_details["maxQuantity"]
                                                        )
                                                    else:
                                                        max_quantity = 30
                                                else:
                                                    max_quantity = 30
                                                # ==========================================================================================
                                                if "allowOrderOutOfStock" in child_product_details:
                                                    allow_out_of_order = child_product_details[
                                                        "allowOrderOutOfStock"
                                                    ]
                                                else:
                                                    allow_out_of_order = False
                                                try:
                                                    mobile_images = child_product_details["images"][
                                                        0
                                                    ]
                                                except:
                                                    try:
                                                        mobile_images = child_product_details[
                                                            "images"
                                                        ]
                                                    except:
                                                        mobile_images = child_product_details[
                                                            "image"
                                                        ]
                                                linked_attribute = get_linked_unit_attribute(
                                                    child_product_details["units"]
                                                )
                                                (
                                                    currency_symbol,
                                                    currency,
                                                    product_status,
                                                    product_tag,
                                                ) = next_availbale_time(child_product_id)
                                                if "productType" in child_product_details:
                                                    if child_product_details["productType"] == 2:
                                                        combo_product = True
                                                    else:
                                                        combo_product = False
                                                else:
                                                    combo_product = False

                                                if child_product_details["currencySymbol"] is None:
                                                    best_supplier["currencySymbol"] = "INR"
                                                if currency_symbol is None:
                                                    currency_symbol = "₹"

                                                # ==================================get currecny rate============================
                                                try:
                                                    currency_rate = currency_exchange_rate[
                                                        str(child_product_details["currency"])
                                                        + "_"
                                                        + str(currency_code)
                                                        ]
                                                except:
                                                    currency_rate = 0
                                                currency_details = db.currencies.find_one(
                                                    {"currencyCode": currency_code}
                                                )
                                                if currency_details is not None:
                                                    currency_symbol = currency_details[
                                                        "currencySymbol"
                                                    ]
                                                    currency = currency_details["currencyCode"]
                                                else:
                                                    currency_symbol = child_product_details[
                                                        "currencySymbol"
                                                    ]
                                                    currency = child_product_details["currency"]
                                                avg_rating = product_avg_rating(
                                                    str(child_product_details["parentProductId"])
                                                )
                                                product_type = combo_special_type_validation(
                                                    str(child_product_id)
                                                )
                                                if len(best_offer) == 0:
                                                    pass
                                                else:
                                                    resData.append(
                                                        {
                                                            "_id": str(child_product_details['_id']),
                                                            "maxQuantity": max_quantity,
                                                            "isComboProduct": combo_product,
                                                            "productType": product_type,
                                                            "childProductId": child_product_id,
                                                            "productStatus": product_status,
                                                            "productTag": product_tag,
                                                            "availableQuantity": availableQuantity,
                                                            "productName": child_product_details[
                                                                "units"
                                                            ][0]["unitName"][language]
                                                            if language
                                                               in child_product_details["units"][0][
                                                                   "unitName"
                                                               ]
                                                            else child_product_details["units"][0][
                                                                "unitName"
                                                            ]["en"],
                                                            "parentProductId": child_product_details[
                                                                "parentProductId"
                                                            ],
                                                            "suppliers": best_supplier,
                                                            "tax": tax_value,
                                                            "linkedAttribute": linked_attribute,
                                                            "allowOrderOutOfStock": allow_out_of_order,
                                                            "outOfStock": outOfStock,
                                                            "productTag": product_tag,
                                                            "offerDetailsData": offer_details_data,
                                                            "variantData": variant_data,
                                                            "productTag": product_tag,
                                                            "variantCount": variant_count,
                                                            "prescriptionRequired": prescription_required,
                                                            "saleOnline": sales_online,
                                                            "uploadProductDetails": upload_details,
                                                            "productSeo": product_seo,
                                                            "brandName": child_product_details[
                                                                "brandTitle"
                                                            ][language]
                                                            if language
                                                               in child_product_details["brandTitle"]
                                                            else child_product_details[
                                                                "brandTitle"
                                                            ]["en"],
                                                            "manufactureName": child_product_details[
                                                                "manufactureName"
                                                            ][
                                                                language
                                                            ]
                                                            if language
                                                               in child_product_details[
                                                                   "manufactureName"
                                                               ]
                                                            else "",
                                                            "TotalStarRating": avg_rating,
                                                            "currencySymbol": currency_symbol,
                                                            "currency": currency,
                                                            "storeCategoryId": child_product_details[
                                                                "storeCategoryId"
                                                            ]
                                                            if "storeCategoryId"
                                                               in child_product_details
                                                            else "",
                                                            "images": child_product_details[
                                                                "images"
                                                            ],
                                                            "mobimages": mobile_images,
                                                            "finalPriceList": child_product_details[
                                                                "units"
                                                            ],
                                                            "units": child_product_details["units"],
                                                            "unitId": child_product_details[
                                                                "units"
                                                            ][0]["unitId"],
                                                            "offer": best_offer,
                                                            "offers": best_offer,
                                                            "nextSlotTime": next_availbale_driver_time,
                                                            "isMembersOnly": child_product_details[
                                                                "isMembersOnly"] if "isMembersOnly" in child_product_details else False
                                                        }
                                                    )

                                        except Exception as ex:
                                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                            message = template.format(type(ex).__name__, ex.args)
                                            print(
                                                "Error on line {}".format(
                                                    sys.exc_info()[-1].tb_lineno
                                                ),
                                                type(ex).__name__,
                                                ex,
                                            )
                        if len(resData) > 0:
                            dataframe = pd.DataFrame(resData)
                            dataframe["unitsData"] = dataframe.apply(
                                home_units_data,
                                lan=language,
                                sort=0,
                                status=0,
                                axis=1,
                                logintype=login_type,
                                store_category_id=store_category_id,
                                margin_price=True, city_id=""
                            )
                            dataframe = dataframe.drop_duplicates(
                                subset="childProductId", keep="last"
                            )
                            details = dataframe.to_json(orient="records")
                            data = json.loads(details)
                            categoty_data = validate_units_data(data, False)
                        else:
                            pass

                        if len(categoty_data) > 0:
                            offer_dataframe = pd.DataFrame(categoty_data)
                            offer_dataframe = offer_dataframe.drop_duplicates(
                                "childProductId", keep="last"
                            )
                            offers_data = offer_dataframe.to_dict(orient="records")
                        else:
                            offers_data = []

                            # =========================================make response data==========================================
                    except Exception as ex:
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print(
                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                            type(ex).__name__,
                            ex,
                        )
                    if len(offers_data) == 0:
                        pass
                    else:
                        first_category_id = ""
                        second_category_id = ""
                        third_category_id = ""

                        ### get main category details
                        first_category_details = db.category.find_one({"categoryName.en": cat_name, "storeId": "0","storeCategory.storeCategoryId": store_category_id})
                        if first_category_details is not None:
                            first_category_id = str(first_category_details['_id'])
                        else:
                            pass

                        ### get child category details
                        if first_category_id != "":
                            main_category_details = db.category.find_one({"categoryName.en": sub_cat_id, "storeId": "0", "storeCategory.storeCategoryId": store_category_id,
                                                                          "parentId": ObjectId(first_category_id)})
                        else:
                            main_category_details = db.category.find_one(
                                {"categoryName.en": sub_cat_id, "storeId": "0", "storeCategory.storeCategoryId": store_category_id})
                        if main_category_details is not None:
                            second_category_id = str(main_category_details['_id'])
                        else:
                            main_category_details = db.category.find_one(
                                {"categoryName.en": sub_cat_id, "storeId": "0", "storeCategory.storeCategoryId": store_category_id})
                            if main_category_details is not None:
                                second_category_id = str(main_category_details['_id'])
                            else:
                                pass
                        categoty_data_json.append(
                            {
                                "firstCategoryId": first_category_id,
                                "secondCategoryId": second_category_id,
                                "thirdCategoryId": third_category_id,
                                "subCategory": offers_data,
                                "subCategoryName": sub_cat_id,
                                "catName": cat_name,
                            }
                        )
            if len(categoty_data_json) > 0 and not len(redis_response_data):
                if len(offer_banners_data) > 0:
                    offer_banner_dataframe = pd.DataFrame(offer_banners_data)
                    offer_banner_dataframe = offer_banner_dataframe.drop_duplicates(
                        "offerId", keep="last"
                    )
                    offer_banners = offer_banner_dataframe.to_dict(orient="records")
                else:
                    offer_banners = []

                try:
                    if rjId != "" and rjId is not None:
                        RJ_DEALS_PRODUCTS.jsonset(rjId, Path.rootPath(), data)
                        RJ_DEALS_PRODUCTS.expire(rjId, 3600)
                except:
                    pass

                response = {
                    "offerBanner": offer_banners,
                    "id": "",
                    "catName": "",
                    "imageUrl": "",
                    "bannerImageUrl": "",
                    "websiteImageUrl": "",
                    "websiteBannerImageUrl": "",
                    "categoryData": categoty_data_json,
                    "offers": [],
                    "type": 7,
                    "seqId": 7,
                    "penCount": sum(total_count_data),
                }
                print("es data time:", time.time() - start_time)
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {
                    "id": "",
                    "catName": "",
                    "imageUrl": "",
                    "bannerImageUrl": "",
                    "websiteImageUrl": "",
                    "websiteBannerImageUrl": "",
                    "categoryData": [],
                    "offers": [],
                    "type": 7,
                    "seqId": 7,
                    "penCount": 0,
                }
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {
                "id": "",
                "catName": "",
                "imageUrl": "",
                "bannerImageUrl": "",
                "websiteImageUrl": "",
                "websiteBannerImageUrl": "",
                "categoryData": [],
                "offers": [],
                "type": 7,
                "seqId": 7,
                "message": message,
                "penCount": 0,
            }
            return JsonResponse(error, safe=False, status=500)


"""
API for get the meat offer products
"""


class MeatOfferProducts(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Offer Products"],
        operation_description="API for getting the particular offers products. subcategory wise products",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="skip",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="size",
                default="10",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b6ea8798dc19d926bd28",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="while checking in particular zone",
            ),
        ],
        responses={
            200: "successfully. offer product found",
            404: "data not found. it might be offers not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            store_category_id = (
                str(request.META["HTTP_STORECATEGORYID"])
                if "HTTP_STORECATEGORYID" in request.META
                else MEAT_STORE_CATEGORY_ID
            )
            if store_category_id == "":
                response_data = {
                    "message": "store category id is blank",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                pass
            limit = int(request.META["HTTP_SKIP"]) if "HTTP_SKIP" in request.META else 0
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            # user_id = "5d92f959fc2045620ce36c92"
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            zone_id = request.GET.get("zoneId", "")

            if zone_id != "":
                store_list_json = []
                zone_details = zone_find({"_id": ObjectId(zone_id)})
                store_query = {
                    "categoryId": str(store_category_id),
                    "cityId": zone_details["city_ID"],
                }
                stores_list = db.stores.find(store_query)
                for s in stores_list:
                    store_list_json.append(str(s["_id"]))
                store_query = {"terms": {"units.suppliers.id": store_list_json}}
            else:
                store_query = {"match": {"status": 1}}

            if zone_id != "":
                driver_roaster = next_availbale_driver_roaster(zone_id)
                next_availbale_driver_time = driver_roaster["productText"]
            else:
                next_availbale_driver_time = ""
            search_item_query = {
                "query": {
                    "bool": {
                        "must": [
                            store_query,
                            {"match": {"status": 1}},
                            {"match": {"offer.status": 1}},
                            {"match": {"storeCategoryId": str(store_category_id)}},
                        ]
                    }
                },
                "size": 20,
                "from": limit,
            }
            res = es.search(
                index=index_central_product,
                body=search_item_query,
                filter_path=[
                    "hits.total",
                    "hits.hits._score",
                    "hits.hits._id",
                    "hits.hits._source",
                ],
            )
            if "hits" in res:
                if "hits" in res["hits"]:
                    if len(res["hits"]["hits"]) == 0:
                        response = {
                            "products": [],
                            "penCount": 0,
                            "offerBanner": [],
                        }
                        return JsonResponse(response, safe=False, status=404)
                    else:
                        resData = validate_dc_product_data(
                            res["hits"]["hits"],
                            "",
                            zone_id,
                            language,
                            next_availbale_driver_time,
                            user_id,
                        )
                        if len(resData) > 0:
                            dataframe = pd.DataFrame(resData)
                            details = dataframe.to_json(orient="records")
                            data = json.loads(details)
                            newlist = sorted(data, key=lambda k: k["isDcAvailable"], reverse=True)
                            try:
                                if "value" in res["hits"]["total"]:
                                    pen_count = res["hits"]["total"]["value"]
                                else:
                                    pen_count = res["hits"]["total"]
                            except:
                                pen_count = res["hits"]["total"]
                            response = {
                                "products": newlist,
                                "penCount": pen_count,
                                "offerBanner": [],
                            }
                            return JsonResponse(response, safe=False, status=200)
                        else:
                            response = {
                                "products": [],
                                "penCount": 0,
                                "offerBanner": [],
                            }
                            return JsonResponse(response, safe=False, status=200)
                else:
                    response = {
                        "products": [],
                        "penCount": 0,
                        "offerBanner": [],
                    }
                    return JsonResponse(response, safe=False, status=404)
            else:
                response = {
                    "products": [],
                    "penCount": 0,
                    "offerBanner": [],
                }
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response = {
                "products": [],
                "penCount": 0,
                "message": "Some error occur while performing action",
                "offerBanner": [],
            }
            return JsonResponse(response, safe=False, status=500)


"""
API for the add the product in favourite or wishlist for the user
"""


class FavouriteProduct(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Favourite Product"],
        operation_description="API for add the product into favourite list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "ipaddress": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="ip address of the network",
                    example="168.10.19.8",
                ),
                "platform": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="from which platform requested for data.values will be 0 for website, 1 for iOS and 2 for android",
                    example="0",
                ),
                "latitude": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="latitude of the user where browser or app opened if not there value should be 0",
                    example=77.5946,
                ),
                "longitude": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="longitude of the user where browser or app opened if not there value should be 0",
                    example=12.9716,
                ),
                "cityid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="city id of the user where browser or app opened if not there value should be empty string",
                    example="5df7b7218798dc2c1114e6bf",
                ),
                "countryid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="country id of the user where browser or app opened if not there value should be empty string",
                    example="5df7b7218798dc2c1114e6c0",
                ),
                "productid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product",
                    example="5df85105e80e605065d3cdff",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="Added to your WishList....!!!!",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="Product Not Found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "error": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="error message",
                        default="Invalid request",
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    ),
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            ##### --------------------- accepting parameters from header and query -------------------------- #####
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]

            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return ResponseHelper.get_status_401(response_data)

            data = request.data
            response = OperationHelper.process_favourite_product_post_api(token, data)
            return response
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["Favourite Product"],
        operation_description="API for remove the favourite products from the list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["productid"],
            properties={
                "ipaddress": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="ip address of the network",
                    default="168.10.19.8",
                ),
                "latitude": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="latitude of the user where browser or app opened if not there value should be 0",
                    default="77.5946",
                ),
                "longitude": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="longitude of the user where browser or app opened if not there value should be 0",
                    default="12.9716",
                ),
                "cityid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="city id of the user where browser or app opened if not there value should be empty string",
                    default="5df7b7218798dc2c1114e6bf",
                ),
                "countryid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="country id of the user where browser or app opened if not there value should be empty string",
                    default="5df7b7218798dc2c1114e6c0",
                ),
                "productid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product",
                    default="5df85105e80e605065d3cdff",
                ),
            },
        ),
        responses={
            200: "successfully added product in your wishlist",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required feild missing. it might be user missing or product id blank",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            ##### --------------------- accepting parameters from header and query -------------------------- #####
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)

            user_id = json.loads(token)["userId"]
            # user_id = "5d92f959fc2045620ce36c92"
            data = request.data

            if user_id == "":
                response = {"message": "User Not Found....!!!!"}
                return ResponseHelper.get_status_404(response)
            elif data["productid"] == "":
                response = {"message": "ProductId Should be Non-Empty....!!!!"}
                return ResponseHelper.get_status_422(response)
            else:
                response = OperationHelper.process_favourite_product_patch_api(data, user_id)
                return response
        except Exception as ex:
            traceback.print_exc()
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


class SimilarStoreProducts(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Similar Store Products"],
        operation_description="API for get smiliar products in other store",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["userId", "centralProductId", "productId", "zoneId"],
            properties={
                "userId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="id of the user who's logged in",
                    example="5e0d99054439f34df914b070",
                ),
                "centralProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="central product id of the product from which product need other sellers",
                    example="5e00da6e14fd8715730fa4c6",
                ),
                "productId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product from which product need other sellers",
                    example="5e157ad51b06fcfaef37a295",
                ),
                "zoneId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="zone id of the user from which zone we need data",
                    example="5df8b6ea8798dc19d926bd28",
                ),
                "storeId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id of the user the product in which store available",
                    example="5e1d939aeb81ae74a019972b",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="Added to your WishList....!!!!",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="products not found",
                    ),
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, default=""),
                    ),
                },
            ),
            411: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required fields are blank",
                        example="user id is blank",
                    ),
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, default=""),
                    ),
                },
            ),
            411: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required fields are blank",
                        example="central product id is blank",
                    ),
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, default=""),
                    )
                    # )
                },
            ),
            411: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required fields are blank",
                        example="child product id is blank",
                    ),
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, default=""),
                    )
                    # )
                },
            ),
            411: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required fields are blank",
                        example="zone id is blank",
                    ),
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, default=""),
                    )
                    # )
                },
            ),
            411: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required fields are blank",
                        example="store id is blank",
                    ),
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, default=""),
                    )
                    # )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "error": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="error message",
                        default="Invalid request",
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    ),
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            data = request.data
            product_json = []
            best_supplier = {}
            seller_name = ""
            user_id = data["userId"] if "userId" in data else ""
            central_product_id = data["centralProductId"] if "centralProductId" in data else ""
            child_product_id = data["productId"] if "productId" in data else ""
            zone_id = data["zoneId"] if "zoneId" in data else ""
            store_id = data["storeId"] if "storeId" in data else ""
            if user_id == "":
                response = {"message": "user id is blank", "data": []}
                return JsonResponse(response, safe=False, status=411)
            elif central_product_id == "":
                response = {"message": "central product id is blank", "data": []}
                return JsonResponse(response, safe=False, status=411)
            elif child_product_id == "":
                response = {"message": "child product id is blank", "data": []}
                return JsonResponse(response, safe=False, status=411)
            elif zone_id == "":
                response = {"message": "zone id is blank", "data": []}
                return JsonResponse(response, safe=False, status=411)
            elif store_id == "":
                response = {"message": "store id is blank", "data": []}
                return JsonResponse(response, safe=False, status=411)
            else:
                search_item_query = {
                    "_id": ObjectId(child_product_id),
                    "storeId": ObjectId(store_id),
                }
                variant = db.childProducts.find_one(search_item_query)

                if variant is None:
                    response = {"message": "product not found", "data": []}
                    return JsonResponse(response, safe=False, status=404)
                else:
                    all_variant_query = {
                        "parentProductId": variant["parentProductId"],
                        "storeId": {"$nin": ["0", ObjectId(store_id)]},
                        "units.unitId": variant["units"][0]["unitId"],
                        # "units.isPrimary": True,
                        "status": 1,
                    }
                    all_variant_data = db.childProducts.find(all_variant_query)
                    if all_variant_data.count() > 0:
                        for seller in all_variant_data:
                            parent_store_count = db.stores.find(
                                {
                                    "_id": ObjectId(seller["storeId"]),
                                    "storeFrontTypeId": {"$nin": [2]},
                                    "serviceZones.zoneId": zone_id,
                                }
                            ).count()
                            if parent_store_count > 0:
                                link_unit_attr = []
                                offers_details = []
                                if "offer" in seller:
                                    for offer in seller["offer"]:
                                        if offer["status"] == 1:
                                            offer_terms = db.offers.find_one(
                                                {"_id": ObjectId(offer["offerId"])}
                                            )
                                            if offer_terms is not None:
                                                if offer_terms["startDateTime"] <= int(time.time()):
                                                    offers_details.append(offer)
                                                else:
                                                    pass
                                            else:
                                                pass
                                        else:
                                            pass
                                else:
                                    pass

                                if len(offers_details) > 0:
                                    best_offer = max(
                                        offers_details, key=lambda x: x["discountValue"]
                                    )
                                    offer_details = db.offers.find(
                                        {
                                            "_id": ObjectId(best_offer["offerId"]),
                                            "status": 1,
                                            "storeId": ObjectId(seller["storeId"]),
                                        }
                                    ).count()
                                    if offer_details != 0:
                                        best_offer = best_offer
                                    else:
                                        best_offer = {}
                                    if len(best_offer) > 0:
                                        # ==================================offers part=========================================
                                        discount_type = (
                                            int(best_offer["discountType"])
                                            if "discountType" in best_offer
                                            else 0
                                        )
                                        discount_value = (
                                            best_offer["discountValue"]
                                            if "discountValue" in best_offer
                                            else 0
                                        )
                                    else:
                                        best_offer = {}
                                        discount_type = 0
                                        discount_value = 0
                                else:
                                    best_offer = {}
                                    discount_type = 0
                                    discount_value = 0

                                if len(best_offer) == 0:
                                    offer_expire = True
                                    offer_validate = True
                                else:
                                    offer_validate_data = db.offers.find(
                                        {"_id": ObjectId(best_offer["offerId"]), "status": 1}
                                    )
                                    if offer_validate_data.count() > 0:
                                        offer_expire = False
                                        offer_validate = False
                                    else:
                                        offer_expire = True
                                        offer_validate = True
                                # ===============================price get the details======================================
                                if discount_type == 0:
                                    discount_price = float(discount_value)
                                elif discount_type == 1:
                                    discount_price = (
                                                             float(seller["retailerPrice"]) * float(discount_value)
                                                     ) / 100
                                else:
                                    discount_price = 0

                                try:
                                    base_price = float(seller["retailerPrice"])
                                    final_price = float(seller["retailerPrice"]) - discount_price
                                except:
                                    base_price = 0
                                    final_price = 0

                                if final_price == 0 or base_price == 0:
                                    discount_price = 0
                                else:
                                    discount_price = discount_price

                                seller_details = db.stores.find_one(
                                    {"_id": ObjectId(seller["storeId"]), "status": 1},
                                    {"storeName": 1},
                                )
                                if seller_details != None:
                                    seller["storeName"] = seller_details["storeName"][language]
                                    seller_name = seller_details["storeName"][language]
                                else:
                                    seller_name = ""

                                if seller_name == "":
                                    pass
                                else:
                                    for attr in seller["units"][0]["attributes"]:
                                        for innr_attr in attr["attrlist"]:
                                            if innr_attr["linkedtounit"] == 0:
                                                pass
                                            else:
                                                try:
                                                    link_unit_attr.append(
                                                        {
                                                            "attrname": innr_attr["attrname"][
                                                                language
                                                            ]
                                                            if language in innr_attr["attrname"]
                                                            else innr_attr["attrname"]["en"],
                                                            "value": innr_attr["value"][language]
                                                            if language in innr_attr["value"]
                                                            else innr_attr["value"]["en"],
                                                            "measurementUnit": innr_attr[
                                                                "measurementUnit"
                                                            ],
                                                        }
                                                    )
                                                except:
                                                    pass
                                    try:
                                        if variant["_source"]["colorName"] != "":
                                            link_unit_attr.append(
                                                {
                                                    "attrname": "colour",
                                                    "value": variant["_source"]["colorName"],
                                                    "measurementUnit": "",
                                                }
                                            )
                                        else:
                                            pass
                                    except:
                                        pass

                                    try:
                                        if len(variant["_source"]["unitSizeGroupValue"]) != 0:
                                            link_unit_attr.append(
                                                {
                                                    "attrname": "size",
                                                    "value": variant["_source"][
                                                        "unitSizeGroupValue"
                                                    ][language]
                                                    if language
                                                       in variant["_source"]["unitSizeGroupValue"]
                                                    else variant["_source"]["unitSizeGroupValue"][
                                                        "en"
                                                    ],
                                                    "measurementUnit": "",
                                                }
                                            )
                                        else:
                                            pass
                                    except:
                                        pass
                                    best_supplier = {
                                        "id": str(seller["storeId"]),
                                        "productId": str(seller["_id"]),
                                    }
                                    if "substitute" in seller:
                                        if len(seller["substitute"]) > 0:
                                            isSubstititeAdded = True
                                        else:
                                            isSubstititeAdded = False
                                    else:
                                        isSubstititeAdded = False

                                    product_json.append(
                                        {
                                            "finalPriceList": {
                                                "basePrice": round(base_price, 2),
                                                "finalPrice": round(final_price, 2),
                                                "discountPrice": round(discount_price, 2),
                                                # "discountPriceForNonMembers": discount_price_for_non_members,
                                                # "memberPrice": member_price,
                                            },
                                            "offerExpire": offer_expire,
                                            "offerValidate": offer_validate,
                                            "isSubstititeAdded": isSubstititeAdded,
                                            "offers": best_offer if offer_expire == False else {},
                                            "storeName": seller_name,
                                            "storeId": str(seller["storeId"]),
                                            "zoneId": zone_id,
                                            "centralProductId": seller["parentProductId"],
                                            "productId": str(seller["_id"]),
                                            "linktounit": link_unit_attr,
                                            "outOfStock": True
                                            if seller["units"][0]["availableQuantity"] == 0
                                            else False,
                                            "productName": seller["units"][0]["unitName"][language]
                                            if language in seller["units"][0]["unitName"]
                                            else seller["units"][0]["unitName"]["en"],
                                            "unitId": seller["units"][0]["unitId"],
                                            "supplier": best_supplier,
                                            "isMembersOnly": seller[
                                                "isMembersOnly"] if "isMembersOnly" in seller else False
                                        }
                                    )
                response = {"message": "products found", "data": product_json}
                return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


"""
	Function for the calculate the rating for the product
"""


def rating_review_logs():
    review_rating = db.reviewRatings.find({"status": 1})
    review_data = []
    for review in review_rating:
        if review["productId"] == "else" or review["rating"] == "":
            pass
        else:
            review_data.append(
                {
                    "id": review["productId"],
                    "rating": int(review["rating"]),
                    "name": review["productName"],
                }
            )
    dataframe = pd.DataFrame(review_data)
    group_id = dataframe.groupby("id")
    group_data = (group_id.mean()).to_json(orient="index")

    data = json.loads(group_data)
    count = len(data)
    for rate in data:
        try:
            product_id = rate
            avg_rating = data[rate]["rating"]
            p_id = db.products.update(
                {"_id": ObjectId(product_id)},
                {"$set": {"avgRating": float(avg_rating)}},
                multi=True,
                upsert=False,
            )
            try:
                res_pop_update = es.update(
                    index=index_central_product,
                    doc_type="_doc",
                    id=str(product_id),
                    body={"doc": {"avgRating": float(avg_rating)}},
                )
            except:
                pass
            # ============================update in child product collection===========================
            db.childProducts.update(
                {"parentProductId": str(product_id), "status": 1},
                {"$set": {"avgRating": float(avg_rating)}},
            )
            child_product = db.childProducts.find({"parentProductId": str(product_id), "status": 1})
            for child in child_product:
                try:
                    res = es.update(
                        index=index_products,
                        doc_type=doc_type_products,
                        id=str(child["_id"]),
                        body={"doc": {"avgRating": float(avg_rating)}},
                    )
                except:
                    print("error")
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            pass
    response = {"message": "data in processing"}
    return response


class ProductReviewRating(APIView):
    """
    -----------------------------------Api for create rating and review ------------------------------------
        Type :2 for Review
              1:for Rating
    """

    @swagger_auto_schema(
        method="post",
        tags=["Review Rating"],
        operation_description="API for post and update the review of the product",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="ipAddress",
                default="124.40.244.94",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="ip address of the network",
            ),
            openapi.Parameter(
                name="platform",
                default="0",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="from which platform requested for data.values will be 0 for website, 1 for iOS and 2 for android",
            ),
            openapi.Parameter(
                name="latitude",
                default="12.9716",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="latitude of the user where website or application opened",
            ),
            openapi.Parameter(
                name="longitude",
                default="77.5946",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="longitude of the user where website or application opened",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["attributeId", "rating", "type"],
            properties={
                "city": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="city name of the user where browser or app opened if not there value should be empty string",
                    example="Mumbai",
                ),
                "country": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="country name of the user where browser or app opened if not there value should be empty string",
                    example="India",
                ),
                "type": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="type for the review and rating. ex.type: 1 for rating, 2 for review",
                    example="1",
                ),
                "images": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    description="array of the images link. links from the s3 or cloudinaty",
                    items=openapi.Items(
                        type=openapi.TYPE_STRING,
                        example="https://s3-ap-southeast-1.amazonaws.com/5canalewebsite/Distributor/Logo_1577080186035",
                    ),
                ),
                "rating": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="rating of the product. value between 1 to 5",
                    example=1,
                ),
                "reviewDescription": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="review description of the review. if review description not there that time value empty string",
                    example="",
                ),
                "sellerReview": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="review description of the review of the seller. if review description not there that time value empty string",
                    example="",
                ),
                "driverReview": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="review description of the review of the driver. if review description not there that time value empty string",
                    example="",
                ),
                "driverId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="driver id to which driver need to give review",
                    example="5f73442a53551c6162cbdcc2",
                ),
                "reviewTitle": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="review title of the review. if review title not there that time value empty string",
                    example="",
                ),
                "attributeId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="attribute id for the ratable attribute of the product if attribute is there that time value is attribute id otherwise empty string. ex:5df8efcae2c05798aa40e67f",
                    example="",
                ),
                "sellerId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="seller id from which seller order placed",
                    example="0",
                ),
                "productId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="central product id of the product. ex.5f3510f80285b3b62a2eee22",
                    example="5f3510f80285b3b62a2eee22",
                ),
                "childProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product. ex.5f453a4d0794f663886cd408",
                    example="5f453a4d0794f663886cd408",
                ),
                "orderId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="order number for the add or update the review. need to send storeOrderId. ex.9571600324059436",
                    example="9571600324059436",
                ),
                "serviceType": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="service type for add from which service need to add rating or review. value should be 1 for delivery and 2 for ride",
                    example=2,
                ),
            },
        ),
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            review_data = []
            response = []
            data = request.data
            print('data--',data)
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            ip_address = request.META["HTTP_IPADDRESS"] if "HTTP_IPADDRESS" in request.META else ""
            latitude = request.META["HTTP_LATITUDE"] if "HTTP_LATITUDE" in request.META else 0
            longitude = request.META["HTTP_LONGITUDE"] if "HTTP_LONGITUDE" in request.META else 0
            platform = request.META["HTTP_PLATFORM"] if "HTTP_PLATFORM" in request.META else 0
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            # user_id = "5df8c6f765722e4f9dfdb9f7"
            product_id = data["productId"] if "productId" in data else ""
            child_product_id = data["childProductId"] if "childProductId" in data else ""
            driver_id = data["driverId"] if "driverId" in data else ""
            order_id = data["orderId"] if "orderId" in data else ""
            service_type = data["serviceType"] if "serviceType" in data else 1
            review_type = int(data["type"]) if "type" in data else 1
            order_query = {"customerId": str(user_id), "status.status": 7}
            if product_id != "":
                order_query["products.centralProductId"] = str(product_id)
            if child_product_id != "":
                order_query["products.productId"] = str(child_product_id)
            if order_id != "":
                order_query["storeOrderId"] = str(order_id)

            order_details = db.storeOrder.find(order_query).sort([("_id", -1)]).limit(1)
            images = data["images"] if "images" in data else []
            cityId = str(data["city"]) if "city" in data else ""
            countryId = (str(data["country"]) if "country" in data else "",)
            seller_id = "0"
            master_order_id = ""
            main_master_order_id = ""
            seller_name = "N/A"
            store_category_id = ""
            store_front_type_id = 0
            if order_details.count() > 0 and order_id == "":
                for seller in order_details:
                    seller_id = seller["storeId"]
                    master_order_id = seller["storeOrderId"]
                    main_master_order_id = seller['masterOrderId']
                    store_category_id = seller["storeCategoryId"]
                    if seller_id == "0" or seller_id == "1":
                        seller_id = "0"
                        seller_name = central_store
                    else:
                        seller_details = db.stores.find_one(
                            {"_id": ObjectId(seller_id)}, {"storeName": 1, "storeFrontTypeId": 1}
                        )
                        if seller_details != None:
                            seller_name = seller_details["storeName"]["en"]
                            store_front_type_id = seller_details["storeFrontTypeId"]
                        else:
                            seller_name = central_store
            elif order_details.count() > 0 and order_id != "":
                for seller in order_details:
                    seller_id = seller["storeId"]
                    master_order_id = seller["storeOrderId"]
                    main_master_order_id = seller['masterOrderId']
                    store_category_id = seller["storeCategoryId"]
                    if seller_id == "0" or seller_id == "1":
                        seller_id = "0"
                        seller_name = central_store
                    else:
                        seller_details = db.stores.find_one(
                            {"_id": ObjectId(seller_id)}, {"storeName": 1, "storeFrontTypeId": 1}
                        )
                        if seller_details != None:
                            seller_name = seller_details["storeName"]["en"]
                            store_front_type_id = seller_details["storeFrontTypeId"]
                        else:
                            seller_name = central_store
            else:
                if order_details.count() == 0 and order_id != "":
                    main_order_details = db.storeOrder.find_one({"masterOrderId": order_id})
                    if main_order_details is not None:
                        master_order_id = main_order_details['storeOrderId']
                    else:
                        master_order_id = order_id
                else:
                    master_order_id = order_id
                seller_id = data["sellerId"] if "sellerId" in data else "0"
                if seller_id != "0" and seller_id != "1":
                    seller_details = db.stores.find_one(
                        {"_id": ObjectId(seller_id)}, {"storeName": 1, "storeFrontTypeId": 1}
                    )
                    if seller_details != None:
                        seller_name = seller_details["storeName"]["en"]
                        store_front_type_id = seller_details["storeFrontTypeId"]
                    else:
                        seller_name = central_store
                else:
                    seller_name = central_store
            print("master_order_id", master_order_id)
            print("seller_id", seller_id)
            print("main_master_order_id", main_master_order_id)
            city_name = cityId
            country_name = countryId
            user_details = db.customer.find_one({"_id": ObjectId(user_id)}, {"firstName": 1})
            if user_details == None:
                response_data = {"message": "User Not Found...!!!"}
                return JsonResponse(response_data, safe=False, status=404)
            else:
                user_name = user_details["firstName"]

            if product_id != "":
                search_item_query = {
                    "from": 0,
                    "query": {"bool": {"must": [{"match": {"_id": str(product_id)}}]}},
                    "size": 1,
                }

                res = es.search(
                    index=index_central_product,
                    body=search_item_query,
                    filter_path=["hits.total", "hits.hits._id", "hits.hits._source.pPName"],
                )
                if type(res["hits"]["total"]) == int:
                    if res["hits"]["total"] == 0:
                        response = {
                            "data": [],
                            "message": "Product Not Found",
                            "total_count": res["hits"]["total"],
                        }
                        return JsonResponse(response, safe=False, status=404)
                else:
                    if res["hits"]["total"]["value"] == 0:
                        response = {
                            "data": [],
                            "message": "Product Not Found",
                            "total_count": res["hits"]["total"]["value"],
                        }
                        return JsonResponse(response, safe=False, status=404)

                for pname in res["hits"]["hits"]:
                    product_name = pname["_source"]["pPName"][language]
            else:
                product_name = "N/A"

            # ==================================for product rating and review=========================
            if product_id != "":  # and child_product_id != "":
                product_query = {
                    "productId": product_id,
                    "userId": user_id,
                    "status": 1,
                    "orderId": master_order_id,
                }
                if child_product_id != "":
                    product_query["childProductId"] = child_product_id
                if data["attributeId"] != "":
                    product_query["attributeId"] = data["attributeId"]
                else:
                    product_query["attributeId"] = {"$eq": ""}
                product = db.reviewRatings.find(product_query).count()
                reviewTitle = data["reviewTitle"] if "reviewTitle" in data else ""
                reviewDescription = data["reviewDescription"] if "reviewDescription" in data else ""
                respMsg = "Review added Succesfully"
                rating = data["rating"] if "rating" in data else 0
                if product == 0:
                    review_data = {
                        "userId": user_id,
                        "productId": product_id,
                        "sellerId": seller_id,
                        "childProductId": child_product_id,
                        "orderId": master_order_id,
                        "storeCategoryId": store_category_id,
                        "storeFrontTypeId": int(store_front_type_id),
                        "productName": product_name,
                        "sellerName": seller_name,
                        "serviceType": service_type,
                        "attributeId": data["attributeId"],
                        "userName": user_name,
                        "rating": rating,
                        "createdTimestamp": int(timeStamp),
                        "reviewTitle": reviewTitle,
                        "reviewDescription": reviewDescription,
                        "ipaddress": ip_address,
                        "status": 1,
                        "platform": platform,
                        "statusMsg": "active",
                        "likes": [],
                        "disLikes": [],
                        "images": images,
                        "latitude": float(latitude),
                        "longitude": float(longitude),
                        "cityId": cityId,
                        "cityName": city_name,
                        "countryId": countryId,
                        "countryName": country_name,
                    }
                    db.reviewRatings.insert_one(review_data)

                    # =========================rating update in order ===========================
                    avg_product_rating_value = 0
                    match_query = {
                        "productId": str(product_id),
                        "orderId": str(master_order_id),
                        "rating": {"$ne": 0},
                        "status": 1,
                    }
                    if child_product_id != "":
                        match_query["childProductId"] = child_product_id
                    product_rating = db.reviewRatings.aggregate(
                        [
                            {"$match": match_query},
                            {"$group": {"_id": "$orderId", "avgRating": {"$avg": "$rating"}}},
                        ]
                    )
                    for avg_product_rating in product_rating:
                        avg_product_rating_value = avg_product_rating["avgRating"]

                    if avg_product_rating_value is not None:
                        rating_data = {
                            "rating": round(avg_product_rating_value, 2),
                            "reviewTitle": reviewTitle,
                            "reviewDescription": reviewDescription,
                            "isRated": True,
                        }
                        store_order_query = {
                            "products.centralProductId": str(product_id),
                            "customerDetails.id": user_id,
                        }
                        if child_product_id != "":
                            store_order_query["products.productId"] = child_product_id
                        db.storeOrder.update(
                            store_order_query,
                            {"$set": {"products.$.rattingData": rating_data}},
                            upsert=False,
                            multi=True,
                        )
                        thread_rating_logs = threading.Thread(target=rating_review_logs)
                        thread_rating_logs.start()
                else:
                    update_query = {"orderId": master_order_id}
                    if review_type == 2:
                        if "reviewTitle" in data:
                            update_query["reviewTitle"] = data["reviewTitle"]
                        if "reviewDescription" in data:
                            update_query["reviewDescription"] = data["reviewDescription"]
                        if "attributeId" in data:
                            update_query["attributeId"] = data["attributeId"]
                        if "images" in data:
                            update_query["images"] = images
                    if "ipaddress" in data:
                        update_query["ipaddress"] = ip_address
                    # if 'createdTimestamp' in data:
                    update_query["createdTimestamp"] = int(timeStamp)
                    if int(review_type) == 1:
                        if "rating" in data:
                            update_query["rating"] = int(data["rating"])
                    elif int(review_type) == 2:
                        if int(data["rating"]) != 0:
                            if "rating" in data:
                                update_query["rating"] = int(data["rating"])
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    update_rating_query = {"orderId": master_order_id}
                    update_rating_query["userId"] = user_id
                    update_rating_query["productId"] = product_id
                    if child_product_id != "":
                        update_rating_query["childProductId"] = child_product_id
                    if data["attributeId"] != "":
                        update_rating_query["attributeId"] = data["attributeId"]
                    else:
                        update_rating_query["attributeId"] = {"$eq": ""}
                    db.reviewRatings.update(
                        update_rating_query, {"$set": update_query}, upsert=False, multi=True
                    )
                    if "rating" in data:
                        # =========================rating update in order ===========================
                        avg_product_rating_value = 0
                        match_query = {
                            "productId": str(product_id),
                            "orderId": str(master_order_id),
                            "rating": {"$ne": 0},
                            "status": 1,
                        }
                        if child_product_id != "":
                            match_query["childProductId"] = child_product_id
                        product_rating = db.reviewRatings.aggregate(
                            [
                                {"$match": match_query},
                                {
                                    "$group": {
                                        "_id": {"orderId": "$orderId", "productId": "$productId"},
                                        "avgRating": {"$avg": "$rating"},
                                    }
                                },
                            ]
                        )
                        for avg_product_rating in product_rating:
                            avg_product_rating_value = avg_product_rating["avgRating"]
                        rating_data = {
                            "rating": round(avg_product_rating_value, 2),
                            "reviewTitle": reviewTitle,
                            "reviewDescription": reviewDescription,
                            "isRated": True,
                        }
                        store_order_query = {
                            "products.centralProductId": str(product_id),
                            "customerDetails.id": user_id,
                        }
                        if child_product_id != "":
                            store_order_query["products.productId"] = child_product_id
                        db.storeOrder.update(
                            store_order_query,
                            {"$set": {"products.$.rattingData": rating_data}},
                            upsert=True,
                            multi=True,
                        )
                    thread_rating_logs = threading.Thread(target=rating_review_logs)
                    thread_rating_logs.start()
            else:
                pass

            # =========================================seller rating and review========================================
            if seller_id != "" and seller_id != "0" and seller_id != "1" or order_id!="":
                plateformName = data["plateformName"] if "plateformName" in data else ""
                if str(review_type) == "2":
                    print('get review for seller')
                    reviewTitle = ""
                    reviewDescription = data["sellerReview"] if "sellerReview" in data else ""
                    respMsg = "Review added Succesfully"
                    rating = data["rating"] if "rating" in data else 0
                    review_data = {
                        "userId": user_id,
                        "productId": product_id,
                        "storeCategoryId": store_category_id,
                        "storeFrontTypeId": int(store_front_type_id),
                        "sellerId": seller_id,
                        "sellerName": seller_name,
                        "orderId": master_order_id,
                        "productName": product_name,
                        "attributeId": data["attributeId"],
                        "userName": user_name,
                        "serviceType": service_type,
                        "rating": rating,
                        "createdTimestamp": int(timeStamp),
                        "reviewTitle": reviewTitle,
                        "sellerReview": reviewDescription,
                        "ipaddress": ip_address,
                        "status": 1,
                        "platform": platform,
                        "statusMsg": "active",
                        "likes": [],
                        "disLikes": [],
                        "images": images,
                        "latitude": float(latitude),
                        "longitude": float(longitude),
                        "cityId": cityId,
                        "cityName": city_name,
                        "countryId": countryId,
                        "countryName": country_name,
                        "plateformName" : plateformName
                    }
                    db.sellerReviewRatings.insert_one(review_data)
                if data["attributeId"] != "":
                    seller_attribute_count = db.ratingParams.find(
                        {"_id": ObjectId(data["attributeId"]), "associated": 2}
                    ).count()
                else:
                    seller_attribute_count = 0
                print('seller_attribute_count---',seller_attribute_count)
                if seller_attribute_count > 0 or seller_attribute_count==0:
                    seller_query = {
                        "userId": user_id,
                        "sellerId": seller_id,
                        "orderId": master_order_id,
                    }
                    # if data['attributeId'] != "":
                    seller_query["attributeId"] = data["attributeId"]
                    print('seller_query---',seller_query)
                    seller = db.sellerReviewRatings.find(seller_query).count()
                    if seller == 0:
                        reviewTitle = ""
                        reviewDescription = data["sellerReview"] if "sellerReview" in data else ""
                        respMsg = "Review added Succesfully"
                        rating = data["rating"] if "rating" in data else 0
                        review_data = {
                            "userId": user_id,
                            "productId": product_id,
                            "storeCategoryId": store_category_id,
                            "storeFrontTypeId": int(store_front_type_id),
                            "sellerId": seller_id,
                            "sellerName": seller_name,
                            "orderId": master_order_id,
                            "productName": product_name,
                            "attributeId": data["attributeId"],
                            "userName": user_name,
                            "serviceType": service_type,
                            "rating": rating,
                            "createdTimestamp": int(timeStamp),
                            "reviewTitle": reviewTitle,
                            "sellerReview": reviewDescription,
                            "ipaddress": ip_address,
                            "status": 1,
                            "platform": platform,
                            "statusMsg": "active",
                            "likes": [],
                            "disLikes": [],
                            "images": images,
                            "latitude": float(latitude),
                            "longitude": float(longitude),
                            "cityId": cityId,
                            "cityName": city_name,
                            "countryId": countryId,
                            "countryName": country_name,
                            "plateformName" : plateformName
                        }
                        db.sellerReviewRatings.insert_one(review_data)
                        avg_order_rating_value = 0
                        seller_order_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "orderId": str(master_order_id),
                                        "sellerId": str(seller_id),
                                        "rating": {"$ne": 0},
                                        "status": 1,
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_order_rating in seller_order_rating:
                            avg_order_rating_value = avg_order_rating["avgRating"]

                        try:
                            db.storeOrder.update(
                                {
                                    "storeOrderId": str(master_order_id),
                                    # "customerDetails.id": user_id,
                                },
                                {
                                    "$set": {
                                        "storeRattingData": {
                                            "rating": round(avg_order_rating_value, 2),
                                            "reviewTitle": "",
                                            "isRated": True,
                                            "reviewDescription": "",
                                        },
                                    }
                                },
                                upsert=False,
                                multi=True,
                            )
                        except:
                            pass

                        if seller_id != "0" or seller_id != "" or seller_id != "1":
                            try:
                                db.stores.update(
                                    {"_id": ObjectId(seller_id)},
                                    {"$set": {"avgRating": avg_order_rating_value}},
                                )
                            except:
                                pass
                            try:
                                es.update(
                                    index=index_store,
                                    doc_type="stores",
                                    id=str(seller_id),
                                    body={"doc": {"avgRating": avg_order_rating_value}},
                                )
                            except:
                                pass
                    else:
                        seller_update_query = {
                            "userId": user_id,
                            "sellerId": seller_id,
                            "orderId": master_order_id,
                        }
                        # if data['attributeId'] != "":
                        seller_update_query["attributeId"] = data["attributeId"]
                        seller_set_query = {
                            "ipaddress": ip_address,
                            "images": images,
                            "createdTimestamp": int(timeStamp),
                        }
                        if review_type == 2:
                            if "sellerReview" in data:
                                seller_set_query["sellerReview"] = data["sellerReview"]
                            if "attributeId" in data:
                                seller_set_query["attributeId"] = data["attributeId"]
                        if int(review_type) == 1:
                            if "rating" in data:
                                seller_set_query["rating"] = int(data["rating"])
                                db.storeOrder.update(
                                    {
                                        "storeOrderId": str(master_order_id),
                                        # "customerDetails.id": user_id,
                                    },
                                    {
                                        "$set": {
                                            "storeRattingData": {
                                                "rating": int(data["rating"]),
                                                "reviewTitle": "",
                                                "isRated": True,
                                                "reviewDescription": "",
                                            },
                                        }
                                    },
                                    upsert=False,
                                    multi=False,
                                )
                        #for getfudo set orderId 1
                        if order_id=="1":
                            pass
                        else:
                            db.sellerReviewRatings.update(
                                seller_update_query, {"$set": seller_set_query}, upsert=False
                            )
                        avg_rating_value = 0
                        seller_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "sellerId": str(seller_id),
                                        "rating": {"$ne": 0},
                                        "status": 1,
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_rating in seller_rating:
                            avg_rating_value = avg_rating["avgRating"]

                        if seller_id != "0" or seller_id != "" or seller_id != "1":
                            try:
                                db.stores.update(
                                    {"_id": ObjectId(seller_id)},
                                    {"$set": {"avgRating": avg_rating_value}},
                                )
                            except:
                                pass
                            try:
                                es.update(
                                    index=index_store,
                                    doc_type="stores",
                                    id=str(seller_id),
                                    body={"doc": {"avgRating": avg_rating_value}},
                                )
                            except:
                                pass
            else:
                pass

            # ==========================================driver rating================================
            if driver_id != "":
                if data["attributeId"] != "":
                    driver_attribute_count = db.ratingParams.find(
                        {"_id": ObjectId(data["attributeId"]), "associated": 1}
                    ).count()
                else:
                    driver_attribute_count = 1
                if driver_attribute_count > 0:
                    driver_query = {
                        "userId": user_id,
                        "driverId": driver_id,
                        "orderId": master_order_id,
                    }
                    # if data['attributeId'] != "":
                    driver_query["attributeId"] = data["attributeId"]
                    driver_count = db.driverRatingReview.find(driver_query).count()
                    if driver_count == 0:
                        reviewTitle = ""
                        driverReview = data["driverReview"] if "driverReview" in data else ""
                        respMsg = "Review added Succesfully"
                        rating = data["rating"] if "rating" in data else 0

                        driver_details = db.driver.find_one(
                            {"_id": ObjectId(driver_id)}, {"firstName": 1, "lastName": 1}
                        )
                        if driver_details != None:
                            driver_name = (
                                    driver_details["firstName"] + " " + driver_details["lastName"]
                            )
                        else:
                            driver_name = "N/A"

                        customer_details = db.customer.find_one(
                            {"_id": ObjectId(user_id)}, {"firstName": 1, "lastName": 1}
                        )
                        if customer_details != None:
                            customer_name = (
                                    customer_details["firstName"] + " " + customer_details["lastName"]
                            )
                        else:
                            customer_name = "N/A"

                        driver_data = {
                            "userId": user_id,
                            "orderId": str(master_order_id),
                            "driverId": driver_id,
                            "attributeId": data["attributeId"] if "attributeId" in data else "",
                            "rating": rating,
                            "driverName": driver_name,
                            "serviceType": service_type,
                            "customerName": customer_name,
                            "createdTimestamp": int(timeStamp),
                            "reviewTitle": "",
                            "reviewDescription": driverReview,
                            "ipaddress": ip_address,
                            "status": 1,
                            "platform": platform,
                            "likes": [],
                            "disLikes": [],
                            "latitude": latitude,
                            "longitude": longitude,
                            "cityId": cityId,
                            "countryId": countryId,
                        }
                        db.driverRatingReview.insert_one(driver_data)
                        avg_driver_rating_value = 0
                        driver_order_rating = db.driverRatingReview.aggregate(
                            [
                                {
                                    "$match": {
                                        "orderId": str(master_order_id),
                                        "driverId": driver_id,
                                        "rating": {"$ne": 0},
                                        "status": 1,
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_driver_rating in driver_order_rating:
                            avg_driver_rating_value = avg_driver_rating["avgRating"]

                        db.storeOrder.update(
                            {"storeOrderId": str(master_order_id), "customerDetails.id": user_id},
                            {
                                "$set": {
                                    "driverRattingData": {
                                        "rating": round(avg_driver_rating_value, 2),
                                        "reviewTitle": "",
                                        "isRated": True,
                                        "reviewDescription": "",
                                    },
                                }
                            },
                            upsert=False,
                            multi=True,
                        )

                        details = {
                            "bookingId": str(master_order_id),
                            "driverId": driver_id,
                            "serviceType": service_type,
                        }
                        # driver_intensive
                        threading.Thread(
                            target=driver_intensive,
                            args=(
                                details,
                                token,
                            ),
                        ).start()
                    else:
                        driver_update_query = {
                            "userId": user_id,
                            "driverId": driver_id,
                            "orderId": str(master_order_id),
                        }
                        # if data['attributeId'] != "":
                        driver_update_query["attributeId"] = data["attributeId"]
                        driver_set_query = {
                            "ipaddress": ip_address,
                            "createdTimestamp": int(timeStamp),
                        }
                        if review_type == 2:
                            if "driverReview" in data:
                                driver_set_query["reviewDescription"] = data["driverReview"]
                            if "sellerReview" in data:
                                driver_set_query["reviewDescription"] = data["sellerReview"]
                            if "attributeId" in data:
                                driver_set_query["attributeId"] = data["attributeId"]
                        if review_type == 1:
                            if "rating" in data:
                                if int(data["rating"]) != 0:
                                    driver_set_query["rating"] = int(data["rating"])
                        db.driverRatingReview.update(
                            driver_update_query, {"$set": driver_set_query}, upsert=False
                        )
                        avg_driver_rating_value = 0
                        driver_order_rating = db.driverRatingReview.aggregate(
                            [
                                {
                                    "$match": {
                                        "orderId": str(master_order_id),
                                        "driverId": driver_id,
                                        "rating": {"$ne": 0},
                                        "status": 1,
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_driver_rating in driver_order_rating:
                            avg_driver_rating_value = avg_driver_rating["avgRating"]
                        if avg_driver_rating_value is not None:
                            db.storeOrder.update(
                                {"storeOrderId": str(master_order_id), "customerDetails.id": user_id},
                                {
                                    "$set": {
                                        "driverRattingData": {
                                            "rating": round(avg_driver_rating_value, 2),
                                            "reviewTitle": "",
                                            "isRated": True,
                                            "reviewDescription": "",
                                        },
                                    }
                                },
                                upsert=False,
                                multi=True,
                            )
                    # ==============================calculate average rating======================================
                    driver_rating = db.driverRatingReview.aggregate(
                        [
                            {"$match": {"driverId": str(driver_id), "rating": {"$ne": 0}}},
                            {"$group": {"_id": "$driverId", "avgRating": {"$avg": "$rating"}}},
                        ]
                    )
                    avg_rating_value = 0
                    for avg_rating in driver_rating:
                        avg_rating_value = avg_rating["avgRating"]
                    # ======================update in mongo db===================================================
                    if avg_rating_value is not None:
                        db.driver.update(
                            {"_id": ObjectId(driver_id)},
                            {"$set": {"avgRating": round(avg_rating_value, 2)}},
                            upsert=False,
                            multi=False,
                        )
                        try:
                            res_update = es.update(
                                index="driverindex",
                                doc_type="driver",
                                id=str(driver_id),
                                body={"doc": {"avgRating": round(avg_rating_value, 2)}},
                            )
                        except:
                            pass
            else:
                pass

            success = {"message": "rating or review updated"}
            return JsonResponse(success, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class ProjectReviewRating(APIView):
    """APIs for Project reviews and ratings"""

    @swagger_auto_schema(
        method="get",
        tags=["Project Review Rating"],
        operation_description="API to get project reviews and ratings.",
        manual_parameters=ResponseHelper.PROJECT_REVIEW_RATING_GET_MANUAL_PARAMS,
        responses=ResponseHelper.RESPONSES,
        operation_summary="Get project reviews",
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        """API to get project reviews and ratings."""
        try:
            err = OperationHelper.check_authentication(request)
            if err:
                return err
            lang = OperationHelper.get_language(request)

            query = {"status": 1}
            userId = OperationHelper.get_userId(request)
            if userId:
                query["customerId"] = str(userId)

            projects = request.GET.get("projectIds", [])
            if len(projects):
                if type(projects) != list:
                    try:
                        if "[" in projects and "]" in projects:
                            projects = ast.literal_eval(projects)
                        else:
                            projects = [projects]
                    except Exception as e:
                        return JsonResponse(
                            {"data": [], "message": ResponseHelper.MSG_BAD_REQ}, status=422
                        )

                query["_id"] = {"$in": [ObjectId(x) for x in projects]}

                projdb = db.projectReviewRating.find(query)
            else:
                projdb = db.projectReviewRating.find(query)

            if projdb.count():
                data = []
                for d in projdb:
                    d["_id"] = str(d["_id"])
                    data.append(d)
                return JsonResponse({"data": data, "message": ResponseHelper.MSG_200}, status=200)
            else:
                return JsonResponse({"data": [], "message": ResponseHelper.MSG_404}, status=404)
        except Exception as e:
            resp = OperationHelper.generate_exception(e)
            return JsonResponse(resp, status=500)

    @swagger_auto_schema(
        method="post",
        tags=["Project Review Rating"],
        operation_description="API to create and update the project review rating.",
        manual_parameters=ResponseHelper.COMMON_MANUAL_PARAMS,
        request_body=ResponseHelper.PROJECT_POST_REQ_BODY,
        responses=ResponseHelper.RESPONSES,
        operation_summary="Bulk create, update and delete project ratings",
    )
    @action(detail=False, methods=["post", "patch", "delete"])
    def post(self, request):
        """API to create and update the project review rating."""
        try:
            err = OperationHelper.check_authentication(request)
            if err:
                return err
            lang = OperationHelper.get_language(request)

            params = ["data"]
            err = OperationHelper.check_req_params(request.data, params)
            if err:
                return err

            projectReviews = request.data.get("data", {})
            if projectReviews:
                created = 0
                updated = 0
                for pr in projectReviews:
                    if "_id" in pr:
                        pr["updatedTimestamp"] = int(datetime.datetime.now().timestamp())
                        _id = pr.pop("_id")
                        updated_ = db.projectReviewRating.update_one(
                            {"_id": ObjectId(_id)}, {"$set": pr}
                        )
                        try:
                            if updated_._UpdateResult__raw_result["n"]:
                                updated += 1
                        except:
                            pass
                    else:
                        pr["createdTimestamp"] = int(datetime.datetime.now().timestamp())
                        pr["updatedTimestamp"] = 0
                        pr["status"] = 1
                        db.projectReviewRating.insert_one(pr)
                        created += 1
            if updated or created:
                resp = {
                    "updated": updated,
                    "created": created,
                    "message": ResponseHelper.MSG_SUCCESS,
                }
                return JsonResponse(resp, status=200)
            return JsonResponse(
                {"updated": updated, "created": created, "message": ResponseHelper.MSG_BAD_REQ},
                status=404,
            )
        except Exception as e:
            resp = OperationHelper.generate_exception(e)
            return JsonResponse(resp, status=500)


"""
	API for the like or dislike the review of the products
"""


class LikesDislikeReview(APIView):
    def post(self, request):
        try:
            data = request.data
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            user_details = db.customer.find_one({"_id": ObjectId(user_id)})
            if user_details == None:
                response_data = {"message": "User Not Found...!!!"}
                return JsonResponse(response_data, safe=False, status=404)
            else:
                user_name = user_details["name"]
            # review must be exists if we want to like or dislike
            if "reviewId" in data:
                if "like" in data and data["like"] == True:
                    review = db.reviewRatings.find(
                        {"_id": ObjectId(data["reviewId"]), "disLikes.userId": user_id}
                    ).count()
                    likes = {"userId": user_id, "userName": user_name, "status": 1}
                    if review == 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"likes": likes}},
                            upsert=True,
                        )
                    elif review > 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$pull": {"disLikes": {"userId": user_id}}},
                        )
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"likes": likes}},
                            upsert=True,
                        )
                    response_data = {"message": "Liked Review"}
                    return JsonResponse(response_data, safe=False, status=200)
                elif "dislike" in data and data["dislike"] == True:
                    review = db.reviewRatings.find(
                        {"_id": ObjectId(data["reviewId"]), "likes.userId": user_id}
                    ).count()
                    disLikes = {"userId": user_id, "userName": user_name, "status": 2}
                    if review == 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"disLikes": disLikes}},
                            upsert=True,
                        )
                    elif review > 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$pull": {"likes": {"userId": user_id}}},
                        )
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"disLikes": disLikes}},
                            upsert=False,
                        )
                    response_data = {"message": "DisLike Review"}
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {"message": "Like Or Dislike Feild is Missing"}
                    return JsonResponse(response_data, safe=False, status=422)
            else:
                error = {"message": "ReviewId Feild is Missing"}
                return JsonResponse(error, safe=False, status=422)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "totalCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class LikesDislikeReview(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Review Rating"],
        operation_description="API for like and dislike of the product review",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["productid"],
            properties={
                "dislike": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while dislike the value should be True and mandatory while disliking review",
                    default=True,
                ),
                "like": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while like the value should be True and mandatory while liking review",
                    default=True,
                ),
                "reviewId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="review id of the product",
                    default="5dfb2f86d7d5edec37eb9b72",
                ),
            },
        ),
        responses={
            200: "successfully. liked or disliked review",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "required Feilds are missing. it might be Like or Dislike Feild is or product id",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            data = request.data
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            # user_id = "5df87cbedb02fa7815ca17d5"
            user_details = db.customer.find_one({"_id": ObjectId(user_id)})
            if user_details == None:
                response_data = {"message": "User Not Found...!!!"}
                return JsonResponse(response_data, safe=False, status=404)
            else:
                user_name = (
                    user_details["name"] if "name" in user_details else user_details["firstName"]
                )
            # review must be exists if we want to like or dislike
            if "reviewId" in data:
                if "like" in data and data["like"] == True:
                    review = db.reviewRatings.find(
                        {"_id": ObjectId(data["reviewId"]), "disLikes.userId": user_id}
                    ).count()
                    likes = {
                        "userId": user_id,
                        "userName": user_name,
                        "status": 1,
                        "createdTimestamp": int(datetime.datetime.now().timestamp()),
                    }
                    if review == 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"likes": likes}},
                            upsert=True,
                        )
                    elif review > 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$pull": {"disLikes": {"userId": user_id}}},
                        )
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"likes": likes}},
                            upsert=True,
                        )
                    response_data = {"message": "Liked Review"}
                    return JsonResponse(response_data, safe=False, status=200)
                elif "dislike" in data and data["dislike"] == True:
                    review = db.reviewRatings.find(
                        {"_id": ObjectId(data["reviewId"]), "likes.userId": user_id}
                    ).count()
                    disLikes = {
                        "userId": user_id,
                        "userName": user_name,
                        "status": 2,
                        "createdTimestamp": int(datetime.datetime.now().timestamp()),
                    }
                    if review == 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"disLikes": disLikes}},
                            upsert=True,
                        )
                    elif review > 0:
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$pull": {"likes": {"userId": user_id}}},
                        )
                        db.reviewRatings.update(
                            {"_id": ObjectId(data["reviewId"])},
                            {"$push": {"disLikes": disLikes}},
                            upsert=False,
                        )
                    response_data = {"message": "DisLike Review"}
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {"message": "Like Or Dislike Feild is Missing"}
                    return JsonResponse(response_data, safe=False, status=422)
            else:
                error = {"message": "ReviewId Feild is Missing"}
                return JsonResponse(error, safe=False, status=422)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "totalCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
    API for the get the brands list
"""


class BrandList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Brands"],
        operation_description="API for getting the brands based on store category",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="q",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="search using brand name",
            ),
            openapi.Parameter(
                name="s_id",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="get the brand list from the particular store",
            ),
            openapi.Parameter(
                name="FROM",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="TO",
                default="10",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
        ],
        responses={
            200: "successfully. brands data found",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = (
                request.META["HTTP_STORECATEGORYID"]
                if "HTTP_STORECATEGORYID" in request.META
                else ECOMMERCE_STORE_CATEGORY_ID
            )
            token = request.META["HTTP_AUTHORIZATION"]
            data = request.data
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return ResponseHelper.get_status_401(response_data)
            from_page = int(request.META["HTTP_FROM"]) if "HTTP_FROM" in request.META else 0
            to_page = int(request.META["HTTP_TO"]) if "HTTP_TO" in request.META else 10
            search_text = request.GET.get("q", "")
            s_id = request.GET.get("s_id", "")

            response = OperationHelper.process_brandlist_get_api(
                store_category_id, search_text, from_page, to_page, lan, s_id
            )
            return response
        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "penCount": 0,
                "data": [],
            }
            return ResponseHelper.get_status_500(response_data)


class SymptomsList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Symptoms"],
        operation_description="API for getting the symptoms based on store category",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="FROM",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="TO",
                default="10",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="search",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="search the symptoms",
            ),
        ],
        responses={
            200: "successfully. symptom data found",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            data = request.data
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return ResponseHelper.get_status_401(response_data)
            from_page = int(request.META["HTTP_FROM"]) if "HTTP_FROM" in request.META else 0
            to_page = int(request.META["HTTP_TO"]) if "HTTP_TO" in request.META else 10
            search_text = request.GET.get("search", "")

            response = OperationHelper.process_symptoms_get_api(
                search_text, from_page, to_page, lan
            )
            return response

        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": translator.translate(str(message), dest=lan).text,
                "penCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
    API for Report Reviews of user
"""


class ReportReview(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Review Rating"],
        operation_description="API for report the review or reporting the review(abuse)",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["reviewId"],
            properties={
                "reviewId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="review id for the which review need to report",
                    default="5e061a2a213ce4a7b96e14c2",
                ),
            },
        ),
        responses={
            200: "successfully. review reported successfully ",
            401: "Unauthorized. token expired",
            422: "required filed is missing. it might be review id is missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            data = request.data
            user_id = json.loads(token)["userId"]

            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            if "reviewId" in data and data["reviewId"] != "":
                user_details = db.customer.find_one({"_id": ObjectId(user_id)})
                if user_details == None:
                    response_data = {"message": "User Not Found...!!!"}
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    user_name = (
                        user_details["name"]
                        if "name" in user_details
                        else user_details["firstName"]
                    )
                abuse_count = db.reviewRatings.find(
                    {"_id": ObjectId(str(data["reviewId"])), "abuse.userId": user_id, "status": 1}
                ).count()
                if abuse_count == 0:
                    abuse = {
                        "userId": user_id,
                        "userName": user_name,
                        "status": 2,
                        "createdTimestamp": int(datetime.datetime.now().timestamp()),
                    }
                    db.reviewRatings.update(
                        {"_id": ObjectId(str(data["reviewId"])), "status": 1},
                        {"$push": {"abuse": abuse}},
                    )
                response_data = {
                    "message": "Thanks for reporting it. Our team will look into it at the earliest."
                }
                return JsonResponse(response_data, safe=False, status=200)
            else:
                error = {"message": "Review id missing"}
                return JsonResponse(error, safe=False, status=422)
        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": translator.translate(str(message), dest=lan).text,
                "penCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
    API for the send the mail for the subscription for the news letter
    status: 1 for Subscribed
            2 for Unsubscribed
"""


class NewsLetter(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["News Latter"],
        operation_description="API for subscribe for the updates or news latters",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["emailAddress"],
            properties={
                "emailAddress": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="email address of the user. ex: nil@mobifyi.com",
                    default="nil@mobifyi.com",
                ),
            },
        ),
        responses={
            200: "Email Sent Successfully",
            401: "Unauthorized. token expired",
            412: "email is already subscribed",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            data = request.data
            if token == "":
                response_data = {"message": "unauthorized"}
                return JsonResponse(response_data, safe=False, status=401)
            customer_email = data["emailAddress"]
            email_data_count = db.newsLetter.find(
                {"emailAddress": customer_email, "status": 1}
            ).count()
            if email_data_count > 0:
                response_data = {"message": "Email is already subscribed."}
                return JsonResponse(response_data, safe=False, status=412)
            else:
                thread_logs = threading.Thread(
                    target=mail_news_letter_sender, args=(customer_email,)
                )
                thread_logs.start()
                # mail_news_letter_sender(customer_email)
                response = {
                    "message": "Thank you subscribing to our news letter , we hope you enjoy the offers and recipes that we will send to you from time to time :)"
                }
                return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "penCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["News Latter"],
        operation_description="API for unsubscribe for the updates or news latters",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["emailAddress"],
            properties={
                "emailAddress": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="email address of the user. ex: nil@mobifyi.com",
                    default="nil@mobifyi.com",
                ),
            },
        ),
        responses={
            200: "email sent successfully",
            401: "Unauthorized. token expired",
            412: "Already Unsubscribation Done",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            data = request.data
            if token == "":
                response_data = {"message": "unauthorized"}
                return JsonResponse(response_data, safe=False, status=401)
            customer_email = data["emailAddress"]
            email_data_count = db.newsLetter.find(
                {"emailAddress": customer_email, "status": 2}
            ).count()
            if email_data_count > 0:
                response_data = {"message": "Already Unsubscribation Done"}
                return JsonResponse(response_data, safe=False, status=412)
            html_data = """<html>
                            <head></head>
                            <body>
                                </br>
                                <p>SuccessFully UnSubscribe Your News Letter Subscription...!!!</p>
                                </br>
                                </br>
                                <p>Regards,& Thanks</p>
                                </br>
                                <p>Team 5 """ + APP_NAME + """</p>
                            </body>
                           </html>
                           """
            with grpc.insecure_channel(GRPC_EMAIL_SERVICE) as channel:
                stub = emailService_pb2_grpc.email_serviceStub(channel)
                subject = "You have unsubscription to " + APP_NAME + "'s newsletter"
                response = stub.sendEmail(emailService_pb2.sendEmailDetails(
                    emailService="SENDGRID",
                    toEmail=customer_email,
                    subject=subject,
                    body=html_data,
                    userName="",
                    trigger="News Letter unsubscription",
                    httpFilePath='',
                    localFilePath='')
                )
                db.newsLetter.update(
                    {"emailAddress": customer_email},
                    {"$set": {"status": 2, "statusMsg": "Unsubscribed"}},
                )
            response = {"message": "Email Sent SuccessFully....!!!!"}
            return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": translator.translate(str(message), dest=lan).text,
                "penCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
    API for the get the all the wish list (favourite products) for the user
    sort_type : 0 for default, 1 for price low to high and 2 for high to low
"""


class WishList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Favourite Product"],
        operation_description="API for getting the wishlist or favourite products of the user",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="sortType",
                default="0",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="sorting type, 0 for recent first, 1 for price lowest to high and 2 for price highest to lowest",
            ),
            openapi.Parameter(
                name="text",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="text of the search string",
            ),
            openapi.Parameter(
                name="page",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                default="1",
                description="page for the pagination",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                default=ECOMMERCE_STORE_CATEGORY_ID,
                description="store category id for the get the data of one particular category",
            ),
            openapi.Parameter(
                name="cityId",
                default="5df7b7218798dc2c1114e6bf",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="city id from which city we need to show price, for city pricing, mainly we are using for meat flow",
            ),
            openapi.Parameter(
                name="zoneId",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                default="5df8b7628798dc19d926bd29",
                description="zone id for the get the data of one particular zone",
            ),
        ],
        responses={
            200: "successfully. found favourite products for the user",
            404: "data not found. it might be product not found for the user",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            ##### ---------------------- accepting headers and query parameters --------------------- #####
            start_time = time.time()
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            login_type = (
                int(request.META["HTTP_LOGINTYPE"]) if "HTTP_LOGINTYPE" in request.META else 1
            )
            sort_type = int(request.META["HTTP_SORTTYPE"]) if "HTTP_SORTTYPE" in request.META else 0
            search_text = request.META["HTTP_TEXT"] if "HTTP_TEXT" in request.META else ""
            store_category_id = (
                request.META["HTTP_STORECATEGORYID"]
                if "HTTP_STORECATEGORYID" in request.META
                else ""
            )
            city_id = request.GET.get("cityId", "5df7b7218798dc2c1114e6bf")
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            zone_id = (
                request.META["HTTP_ZONEID"]
                if "HTTP_ZONEID" in request.META
                else "5df8b7628798dc19d926bd29"
            )
            page = int(request.META["HTTP_PAGE"]) if "HTTP_PAGE" in request.META else 1
            to_data = page * 10
            from_data = to_data - 10
            token = request.META["HTTP_AUTHORIZATION"]

            if token == "":
                response_data = {"message": "unauthorized", "data": [], "penCount": 0}
                return ResponseHelper.get_status_401(response_data)

            response = OperationHelper.process_wishlist_get_api(
                token,
                store_category_id,
                zone_id,
                from_data,
                to_data,
                language,
                currency_code,
                login_type,
                search_text,
                sort_type, city_id
            )
            return response
        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "penCount": 0,
                "data": [],
            }
            return_response = {"data": response_data}
            return JsonResponse(return_response, safe=False, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["Favourite Product"],
        operation_description="API for removing all the products from the wishlist or favourite",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="successfully. remove all products from wishlist",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "error": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="error message",
                        default="Invalid request",
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    ),
                },
            ),
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            # user_id = "5df8c6f765722e4f9dfdb9f7"
            session.execute(
                """DELETE FROM favouriteproductsuserwise WHERE userid=%(userid)s""",
                {"userid": user_id},  # , "childproductid": str(product_id)
            )
            response = {"message": "successfully. remove all products from wishlist"}
            return_response = {"data": response}
            return JsonResponse(return_response, safe=False, status=200)
        except Exception as ex:
            template = "an exception of type {0} occurred. arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {"message": message}
            return_response = {"data": response_data}
            return JsonResponse(return_response, safe=False, status=500)


"""
	Function for the update the inventory for the placed order or cancelled order
	:parameter
	user_id -  user id of the user by whom order is placed 
	order_id - order id  
	inventory_data -  inventory for 0 retailer and 1 for distributor
	language  - language of the choosen by user
	inventory_type - inventory for 0 retailer and 1 for distributor
"""


def update_inventory(
        user_id, order_id, inventory_data, language, inventory_type, delivery_address_id
):
    # =============================check the store dc and zone data====================================
    if delivery_address_id != "":
        delivery_address_details = db.savedAddress.find_one(
            {"_id": ObjectId(delivery_address_id)}, {"latitude": 1, "longitude": 1}
        )
        if delivery_address_details is not None:
            condition = {
                "status": 1,
                "storeId": 0,
                "polygons": {
                    "$geoIntersects": {
                        "$geometry": {
                            "type": "Point",
                            "coordinates": [
                                float(delivery_address_details["longitude"]),
                                float(delivery_address_details["latitude"]),
                            ],
                        }
                    }
                },
            }
            zone_details = db.zones.find_one(
                condition, {"_id": 1, "title": 1, "DCStoreId": 1, "timeZone": 1, "timeOffset": 1}
            )
            if zone_details is not None:
                zone_id = str(zone_details["_id"])
                dc_store_id = zone_details["DCStoreId"] if "DCStoreId" in zone_details else ""
            else:
                zone_id = ""
                dc_store_id = ""
        else:
            zone_id = ""
            dc_store_id = ""
    else:
        zone_id = ""
        dc_store_id = ""
    # ==================================end of code=====================================================
    last_response = []
    opening_qty = 0
    final_quntity_product = 0
    closing_qty = 0
    for pro in inventory_data:
        try:
            product_data = []
            parent_product_id = pro["parentProductId"]
            child_product_id = pro["childProductId"]
            unit_id = pro["unitId"]
            quantity = pro["quantity"]
            batch_id = pro["batchId"] if "batchId" in pro else "DEFAULT"
            child_product_details = db.childProducts.find_one(
                {"_id": ObjectId(child_product_id), "parentProductId": str(parent_product_id)},
                {
                    "units": 1,
                    "pName": 1,
                    "storeCategoryId": 1,
                    "inventoryData": 1,
                    "parentProductId": 1,
                    "storeId": 1,
                },
            )
            # try:
            # ========================== primary unit===============================================================
            if child_product_details != None:
                # ============================need to check store category is meat or not=====================
                if child_product_details["storeCategoryId"] == MEAT_STORE_CATEGORY_ID:
                    query = {"parentProductId": str(parent_product_id), "units.unitId": unit_id}
                    if dc_store_id != "":
                        query["storeId"] = ObjectId(dc_store_id)
                    child_product_details = db.childProducts.find_one(query)
                    if child_product_details is None:
                        child_product_details = db.childProducts.find_one(
                            {
                                "_id": ObjectId(child_product_id),
                                "parentProductId": str(parent_product_id),
                            }
                        )
                else:
                    pass
                # ==============================inventory===============================================
                try:
                    available_qty = child_product_details["units"][0]["availableQuantity"]
                    final_quntity = int(available_qty) - int(quantity)
                except:
                    final_quntity = 0
                    available_qty = 0

                try:
                    parent_product_id = str(child_product_details["parentProductId"])
                    child_product_id = str(child_product_details["_id"])
                    unit_id = str(child_product_details["units"][0]["unitId"])
                except:
                    parent_product_id = pro["parentProductId"]
                    child_product_id = pro["childProductId"]
                    unit_id = pro["unitId"]

                if int(final_quntity) > 0:
                    is_in_stock = 1
                else:
                    is_in_stock = 0
                db.childProducts.update(
                    {"_id": ObjectId(child_product_id), "parentProductId": str(parent_product_id)},
                    {
                        "$set": {
                            "units.0.availableQuantity": final_quntity,
                            "isInStock": int(is_in_stock),
                        }
                    },
                    upsert=False,
                )
                try:
                    db.childProducts.update(
                        {
                            "_id": ObjectId(child_product_id),
                            "parentProductId": str(parent_product_id),
                            "inventoryData.batchId": batch_id,
                        },
                        {"$set": {"inventoryData.$.availableQuantity": final_quntity}},
                        upsert=False,
                    )
                except:
                    pass
                child_product_details_new = db.childProducts.find_one(
                    {"_id": ObjectId(child_product_id), "parentProductId": str(parent_product_id)}
                )
                if child_product_details_new != None:
                    if str(child_product_details["storeId"]) == "0":
                        is_central = 0
                    else:
                        is_central = 1
                    try:
                        es.update(
                            index=index_products,
                            doc_type="_doc",
                            id=str(child_product_id),
                            body={
                                "doc": {
                                    "units": child_product_details_new["units"],
                                    "isInStock": is_in_stock,
                                    # int(child_product_details_new['isInStock']) if "isInStock" in child_product_details_new else 0
                                    "isCentral": is_central,
                                    # int(child_product_details_new['isInStock']) if "isInStock" in child_product_details_new else 0
                                }
                            },
                        )
                    except:
                        pass
                    if "inventoryData" in child_product_details_new:
                        try:
                            es.update(
                                index=index_products,
                                doc_type="_doc",
                                id=str(child_product_id),
                                body={
                                    "doc": {
                                        "inventoryData": child_product_details_new["inventoryData"]
                                    }
                                },
                            )
                        except:
                            pass
            else:
                pass
            # ========================== primary unit end ========================================================
            # except:
            #     pass
            central_product_details_child = db.products.find_one(
                {
                    "childProducts.suppliers.productId": str(child_product_id),
                    "_id": ObjectId(parent_product_id),
                },
                {"childProducts": 1},
            )
            if central_product_details_child != None:
                for cen_child in central_product_details_child["childProducts"]:
                    if "suppliers" in cen_child:
                        for c_n in range(0, len(cen_child["suppliers"])):
                            if cen_child["suppliers"][c_n]["productId"] == str(child_product_id):
                                if cen_child["suppliers"][c_n]["retailerQty"] != "":
                                    final_quntity_product = (
                                            cen_child["suppliers"][c_n]["retailerQty"] - quantity
                                    )
                                else:
                                    final_quntity_product = 0

                                db.products.update(
                                    {
                                        "units.suppliers.productId": str(child_product_id),
                                        "units.unitId": str(pro["unitId"]),
                                    },
                                    {
                                        "$set": {
                                            "units.$.suppliers.0.retailerQty": final_quntity_product
                                        }
                                    },
                                    upsert=False,
                                )

                                db.products.update(
                                    {
                                        "childProducts.suppliers.productId": str(child_product_id),
                                        "_id": ObjectId(parent_product_id),
                                    },
                                    {
                                        "$set": {
                                            "childProducts.$.suppliers."
                                            + str(c_n)
                                            + ".retailerQty": final_quntity_product
                                        }
                                    },
                                    upsert=False,
                                )
                else:
                    pass

            product_details_new = db.products.find_one(
                {"_id": ObjectId(parent_product_id)}, {"units": 1, "childProducts": 1}
            )
            if product_details_new != None:
                try:
                    es.update(
                        index=index_central_product,
                        doc_type="_doc",
                        id=str(parent_product_id),
                        body={"doc": {"units": product_details_new["units"]}},
                    )
                except:
                    pass

            # =========================update inventory in cassandra=============================================
            if child_product_details != None:
                product_details = session.execute(
                    """SELECT * FROM productwiseinventory where childproductid=%(childproductid)s AND inventoryfor=%(inventoryfor)s LIMIT 1 ALLOW FILTERING""",
                    {"childproductid": child_product_id, "inventoryfor": int(inventory_type)},
                )

                for qty in product_details:
                    closing_qty = qty.closingqty
                if closing_qty == 0:
                    closing_qantity = int(quantity)
                else:
                    closing_qantity = closing_qty - int(quantity)

                user_id = user_id
                trigger_type = 2
                try:
                    opening_qty = child_product_details["units"][0]["availableQuantity"]
                except:
                    opening_qty = child_product_details["units"][0]["availableQuantity"]

                closing_qty = pro["quantity"]

                time_stamp = int(datetime.datetime.now().timestamp()) * 1000
                store_id = pro["storeId"] if "storeId" in pro else "0"
                if store_id == "0":
                    store_name = "Central"
                    store_front_type = 0
                else:
                    store_details = db.stores.find_one(
                        {"_id": ObjectId(store_id)}, {"storeFrontTypeId": 1, "storeName": 1}
                    )
                    if store_details != "":
                        store_name = (
                            store_details["storeName"]["en"]
                            if "en" in store_details["storeName"]
                            else "Central"
                        )
                        store_front_type = store_details["storeFrontTypeId"]
                    else:
                        store_name = "Central"
                        store_front_type = 0
                if quantity > 0:
                    reason = "Order Placed"
                else:
                    quantity = -(quantity)
                    trigger_type = 1
                    reason = "Order Cancelled"

                order_details = db.storeOrder.find_one({"storeOrderId": order_id})
                try:
                    if order_details is not None:
                        master_order_id = order_details["masterOrderId"]
                    else:
                        master_order_id = order_id
                except:
                    master_order_id = order_id
                session.execute(
                    """
						INSERT INTO productwiseinventory (childproductid, userid, triggertype, openingqty, closingqty, inventoryfor, qty, 
						order_id, store_id, store_front_type, reason, batch_id, createdtimestamp)
						VALUES (%(childproductid)s, %(userid)s, %(triggertype)s, %(openingqty)s, %(closingqty)s,%(inventoryfor)s, %(qty)s, 
						%(order_id)s, %(store_id)s, %(store_front_type)s, %(reason)s, %(batch_id)s,
						%(createdtimestamp)s)
					""",
                    {
                        "childproductid": str(child_product_id),
                        "userid": user_id,
                        "triggertype": int(trigger_type),
                        "openingqty": available_qty,
                        "closingqty": final_quntity_product,
                        "inventoryfor": int(inventory_type),
                        "qty": quantity,
                        "order_id": str(master_order_id),
                        "store_id": store_id,
                        "store_front_type": store_front_type,
                        "reason": reason,
                        "batch_id": batch_id,
                        "createdtimestamp": time_stamp,
                    },
                )

            thread_logs = threading.Thread(
                target=update_best_suppliers_redis, args=(parent_product_id,)
            )
            thread_logs.start()
            threading.Thread(
                target=plp_page_update,
                args=(str(child_product_id), str(user_id),)
            ).start()
            ''' call nau API for notification '''

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)

    response = {"message": "data in process"}
    return response


"""
    API for the update the inventory on checkout
    inventory for 0 retailer and 1 for distributor 
"""


class UpdateInventory(APIView):
    @swagger_auto_schema(
        method="patch",
        tags=["Inventory"],
        operation_description="API for update the inventory after the placed the order",
        required=[],
        manual_parameters=[
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["data"],
            properties={
                "data": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    description="array of the data or object(parentProductId, childProductId, offerId, productName)",
                    items=openapi.Items(
                        type=openapi.TYPE_OBJECT,
                        required=["parentProductId", "childProductId", "productName", "offerId"],
                        properties={
                            "parentProductId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdfe",
                                description="central product id of the product. ex.5df8efcae2c05798aa40e67f",
                            ),
                            "childProductId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdff",
                                description="child product id of the product. ex.5df8efcae2c05798aa40e67f",
                            ),
                            "unitId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdff",
                                description="unit id of the product. ex.5df8efcae2c05798aa40e67f",
                            ),
                            "storeId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="0",
                                description="store id of the product. product from which store. if central store that time store id 0. ex.5df8efcae2c05798aa40e67f",
                            ),
                            "quantity": openapi.Schema(
                                type=openapi.TYPE_INTEGER,
                                default=1,
                                description="quantity of the product how much quantity user added in cart or how much number of product user want to buy",
                            ),
                        },
                    ),
                ),
                "orderId": openapi.Schema(type=openapi.TYPE_STRING, description="order id"),
                "userId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="user id of the user by whom the order placed",
                ),
            },
        ),
        responses={
            200: "Successfully. Inventory updated",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            inventory_type = 0  # int(request.META["HTTP_INVENTORYTYPE"]) if "HTTP_INVENTORYTYPE" in request.META else 0
            data = request.data
            print("data", data)
            user_id = data["userId"] if "userId" in data else ""
            order_id = data["orderId"] if "orderId" in data else ""
            delivery_address_id = data["deliveryAddressId"] if "deliveryAddressId" in data else ""
            thread_logs = threading.Thread(
                target=update_inventory,
                args=(
                    user_id,
                    order_id,
                    data["data"],
                    language,
                    inventory_type,
                    delivery_address_id,
                ),
            )
            thread_logs.start()
            response = {"message": "Inventory update successfully"}
            return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response = {"data": [], "message": message}
            return JsonResponse(response, safe=False, status=500)


class GetSeller(APIView):
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            status = request.GET["status"] if "status" in request.GET else 1
            from_page = request.GET["from"]
            to_page = request.GET["to"]
            seller_list = []
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            seller_details = (
                db.stores.find({"status": int(status)}).skip(int(from_page)).limit(int(to_page))
            )
            seller_count = db.stores.find({"status": int(status)}).count()
            if seller_details.count() > 0:
                for seller_data in seller_details:
                    seller_list.append(
                        {
                            "_id": str(seller_data["_id"]),
                            "city": seller_data["citiesOfOperation"]["city"],
                            "parentStore": "",
                            "storeName": seller_data["storeName"][language],
                            "address": seller_data["headOffice"]["headOfficeAddress"]
                            if "headOfficeAddress" in seller_data["headOffice"]
                            else "",
                            "categoryName": seller_data["categoryName"],
                            "categoryId": seller_data["categoryId"],
                            "sellerTypeId": seller_data["sellerTypeId"],
                            "sellerType": seller_data["sellerType"],
                            "storeFrontTypeId": seller_data["storeFrontTypeId"],
                            "storeFrontType": seller_data["storeFrontType"],
                            "buyerAccountId": seller_data["buyerAccountId"],
                            "buyerAccountLinked": True
                            if seller_data["buyerAccountId"] != ""
                            else False,
                        }
                    )
                response = {
                    "data": seller_list,
                    "total_count": seller_count,
                    "message": "Seller Found SuccesFully",
                }
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"data": [], "message": "data not found"}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    Function for the search from the central
    Function for the modify data based on request
    :res ---> data which we are getting from es
    : language ---> return data in particular language
    currency_rate: we will use for the find the rate of currecny between two currency USD -> INR, INR -> AED
"""


def store_search_data_new(
        res,
        start_time,
        language,
        filter_responseJson,
        finalfilter_responseJson_products,
        popularstatus,
        sort,
        login_type,
        store_id,
        sort_type,
        store_category_id,
        from_data,
        to_data,
        user_id,
        remove_central,
        zone_id,
        min_price,
        max_price,
        margin_price,
        currency_code,
        search_query,
        token,
        hyperlocal,
        storelisting,
        QUERY_STRING,
):
    start_time_for_query = time.time()
    resData = []  # to append the all the product json in one list
    product_tag = ""
    main_sellers = []  # list of the all sellers in the zone, city or country
    object_id_main_sellers = []  # list of the all sellers in object form

    ### fetch all the seller from the zone
    if zone_id != "":
        more_store_details = db.stores.find(
            {"serviceZones.zoneId": zone_id, "storeFrontTypeId": {"$ne": 5}, "status": 1}
        )
        for seller in more_store_details:
            main_sellers.append(str(seller["_id"]))
            object_id_main_sellers.append(ObjectId(seller["_id"]))
    elif store_id != "":
        object_id_main_sellers.append(ObjectId(store_id))
    else:
        pass

    product_scr = {}  # product score we need to set in dict which getting from elastic search
    product_data = [] # set all the product data in one array or list
    ### iterate the elastic search response
    for bucket in res["aggregations"]["group_by_sub_category"]["buckets"][from_data:to_data]:
        i = bucket["top_sales_hits"]["hits"]["hits"][0]
        score = bucket["avg_score"]["value"] if bucket["avg_score"]["value"] is not None else 0
        product_scr[str(i["_id"])] = score
        i['_source']['_id'] = str(i["_id"])
        child_product_details = i['_source'] # document for each product details
        currency_rate = 0
        try:
            # this block for check the product is available in dc or not
            main_product_details = None
            child_product_id = str(child_product_details["_id"])
            if "productSeo" in child_product_details:
                try:
                    if len(child_product_details["productSeo"]["title"]) > 0:
                        title = (
                            child_product_details["productSeo"]["title"][language]
                            if language in child_product_details["productSeo"]["title"]
                            else child_product_details["productSeo"]["title"]["en"]
                        )
                    else:
                        title = ""
                except:
                    title = ""

                try:
                    if len(child_product_details["productSeo"]["description"]) > 0:
                        description = (
                            child_product_details["productSeo"]["description"][language]
                            if language in child_product_details["productSeo"]["description"]
                            else child_product_details["productSeo"]["description"]["en"]
                        )
                    else:
                        description = ""
                except:
                    description = ""

                try:
                    if len(child_product_details["productSeo"]["metatags"]) > 0:
                        metatags = (
                            child_product_details["productSeo"]["metatags"][language]
                            if language in child_product_details["productSeo"]["metatags"]
                            else child_product_details["productSeo"]["metatags"]["en"]
                        )
                    else:
                        metatags = ""
                except:
                    metatags = ""

                try:
                    if len(child_product_details["productSeo"]["slug"]) > 0:
                        slug = (
                            child_product_details["productSeo"]["slug"][language]
                            if language in child_product_details["productSeo"]["slug"]
                            else child_product_details["productSeo"]["slug"]["en"]
                        )
                    else:
                        slug = ""
                except:
                    slug = ""

                product_seo = {
                    "title": title,
                    "description": description,
                    "metatags": metatags,
                    "slug": slug,
                }
            else:
                product_seo = {"title": "", "description": "", "metatags": "", "slug": ""}
            if "prescriptionRequired" in child_product_details:
                try:
                    if int(child_product_details["prescriptionRequired"]) == 0:
                        prescription_required = False
                    else:
                        prescription_required = True
                except:
                    prescription_required = False
            else:
                prescription_required = False

            if "saleOnline" in child_product_details:
                if child_product_details["saleOnline"] == 0:
                    sales_online = False
                else:
                    sales_online = True
            else:
                sales_online = False

            if "needsIdProof" in child_product_details:
                if child_product_details["needsIdProof"] is False:
                    needsIdProof = False
                else:
                    needsIdProof = True
            else:
                needsIdProof = False

            if "uploadProductDetails" in child_product_details:
                upload_details = child_product_details["uploadProductDetails"]
            else:
                upload_details = ""

            ### section for get the currency rate and currency details
            if str(currency_code) != str(child_product_details["currency"]):
                try:
                    currency_rate = currency_exchange_rate[
                        str(child_product_details["currency"]) + "_" + str(currency_code)
                        ]
                except:
                    currency_rate = 0
                currency_details = db.currencies.find_one({"currencyCode": currency_code},
                                                          {"currencySymbol": 1, "currencyCode": 1})
                if currency_details is not None:
                    currency_symbol = currency_details["currencySymbol"]
                    currency = currency_details["currencyCode"]
                else:
                    currency_symbol = child_product_details["currencySymbol"]
                    currency = child_product_details["currency"]
                    currency_rate = 0
            else:
                currency_symbol = child_product_details["currencySymbol"]
                currency = child_product_details["currency"]

            ### find the tax details for the products
            tax_value = []
            if child_product_details is not None:
                if type(child_product_details["tax"]) == list:
                    for tax in child_product_details["tax"]:
                        if "taxValue" in tax:
                            tax_value.append({"value": tax["taxValue"]})
                        else:
                            pass
                else:
                    if child_product_details["tax"] is not None:
                        if "taxValue" in child_product_details["tax"]:
                            tax_value.append({"value": child_product_details["tax"]["taxValue"]})
                        else:
                            tax_value.append({"value": child_product_details["tax"]})
                    else:
                        pass
            else:
                tax_value = []

            ### section for find the variant count for the products, colour and size combination
            query = {"parentProductId": str(child_product_details["parentProductId"]), "status": 1}
            try:
                if store_category_id == MEAT_STORE_CATEGORY_ID:
                    query["storeId"] = {"$in": [ObjectId(child_product_details["storeId"])]}
                else:
                    if str(child_product_details["storeId"]) == "0":
                        query["storeId"] = child_product_details["storeId"]
                    else:
                        query["storeId"] = ObjectId(child_product_details["storeId"])
            except:
                query["storeId"] = child_product_details["storeId"]
            variant_count_data = db.childProducts.find(query).count()
            if variant_count_data > 1:
                variant_count = True
            else:
                variant_count = False

            try:
                mobile_images = child_product_details["images"][0]
            except:
                try:
                    mobile_images = child_product_details["images"]
                except:
                    mobile_images = child_product_details["image"]

            ### need to add additional data in response for pharmacy store category
            addition_info = []
            if "THC" in child_product_details["units"][0]:
                addition_info.append(
                    {
                        "seqId": 2,
                        "attrname": "THC",
                        "value": str(child_product_details["units"][0]["THC"]) + " %",
                        "id": "",
                    }
                )
            else:
                pass

            if "CBD" in child_product_details["units"][0]:
                addition_info.append(
                    {
                        "seqId": 1,
                        "attrname": "CBD",
                        "value": str(child_product_details["units"][0]["CBD"]) + " %",
                        "id": "",
                    }
                )
            else:
                pass

            # canniber product type need to add in response
            if "cannabisProductType" in child_product_details["units"][0]:
                if child_product_details["units"][0]["cannabisProductType"] != "":
                    cannabis_type_details = db.cannabisProductType.find_one(
                        {
                            "_id": ObjectId(
                                child_product_details["units"][0]["cannabisProductType"]
                            ),
                            "status": 1,
                        }
                    )
                    if cannabis_type_details is not None:
                        addition_info.append(
                            {
                                "seqId": 3,
                                "attrname": "Type",
                                "value": cannabis_type_details["productType"]["en"],
                                "id": child_product_details["units"][0]["cannabisProductType"],
                            }
                        )
                    else:
                        pass
            else:
                pass
            if len(addition_info) > 0:
                additional_info = sorted(addition_info, key=lambda k: k["seqId"], reverse=True)
            else:
                additional_info = []

            ### need to add size is available or not for the product in api response
            if "unitSizeGroupValue" in child_product_details["units"][0]:
                if len(child_product_details["units"][0]["unitSizeGroupValue"]) > 0:
                    if language in child_product_details["units"][0]["unitSizeGroupValue"]:
                        if child_product_details["units"][0]["unitSizeGroupValue"][language] != "":
                            is_size_available = True
                        else:
                            is_size_available = False
                    elif "en" in child_product_details["units"][0]["unitSizeGroupValue"]:
                        if child_product_details["units"][0]["unitSizeGroupValue"]["en"] != "":
                            is_size_available = True
                        else:
                            is_size_available = False
                    else:
                        is_size_available = False
                else:
                    is_size_available = False
            else:
                is_size_available = False

            # highlight data
            hightlight_data = []
            if "highlights" in child_product_details["units"][0]:
                if child_product_details["units"][0]["highlights"] != None:
                    for highlight in child_product_details["units"][0]["highlights"]:
                        try:
                            hightlight_data.append(
                                highlight[language] if language in highlight else highlight["en"]
                            )
                        except:
                            pass
                else:
                    pass

            hightlight_data = list(set(hightlight_data))
            hightlight_data = [x for x in hightlight_data if x]

            ### call get colour data of the product
            colour_details = colour_data(child_product_details["parentProductId"], object_id_main_sellers)

            if type(child_product_details["units"][0]) == list:
                attribute_list = child_product_details["units"][0][0]["attributes"]
            else:
                attribute_list = child_product_details["units"][0]["attributes"]

            # section for the get the attribute details which are linked to unit,
            # from attributes array from child product object
            variant_data_list = []
            for link_unit in attribute_list:
                if "attrlist" in link_unit:
                    for attrlist in link_unit["attrlist"]:
                        if attrlist is None:
                            pass
                        else:
                            if type(attrlist) == str:
                                pass
                            else:
                                try:
                                    if attrlist["linkedtounit"] == 1:
                                        if attrlist["measurementUnit"] == "":
                                            attr_name = (
                                                str(attrlist["value"][language])
                                                if language in attrlist["value"]
                                                else str(attrlist["value"]["en"])
                                            )
                                        else:
                                            attr_name = (
                                                str(attrlist["value"][language])
                                                + " "
                                                + attrlist["measurementUnit"]
                                                if language in attrlist["value"]
                                                else str(attrlist["value"]["en"])
                                                     + " "
                                                     + attrlist["measurementUnit"]
                                            )
                                        variant_data_list.append(
                                            {
                                                "attrname": attrlist["attrname"]["en"],
                                                "value": str(attr_name),
                                                "name": attrlist["attrname"]["en"],
                                            }
                                        )
                                    else:
                                        pass
                                except:
                                    pass
                else:
                    pass

            if len(variant_data_list) == 1 and is_size_available == False:
                is_size_available = True
            detail_description = (
                child_product_details["detailDescription"][language]
                if language in child_product_details["detailDescription"]
                else child_product_details["detailDescription"]["en"]
            )

            ### section for check the product is added in shopping list for user or not
            isShoppingList = False
            if child_product_details["storeCategoryId"] == ECOMMERCE_STORE_CATEGORY_ID:
                isShoppingList = True
            else:
                shoppinglist_product = db.userShoppingList.find(
                    {
                        "userId": user_id,
                        "products.centralProductId": child_product_details["parentProductId"],
                        "products.childProductId": str(child_product_details["_id"]),
                    }
                )
                if shoppinglist_product.count() == 0:
                    isShoppingList = False
                else:
                    isShoppingList = True

            # get all the linked to unit attribute list from all the variants
            try:
                linked_attribute = get_linked_unit_attribute(child_product_details["units"])
            except:
                linked_attribute = []

            # get the favourite product details for user, that product is added in favourite list or not
            try:
                response_casandra = session.execute(
                    """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                    {"userid": user_id, "productid": str(child_product_details["_id"])},
                )
            

                isFavourite = False
                if not response_casandra:
                    isFavourite = False
                else:
                    for fav in response_casandra:
                        isFavourite = True
            except:
                isFavourite = False
                response_casandra = ''
            model_data = []
            if "modelImage" in child_product_details["units"][0]:
                if len(child_product_details["units"][0]["modelImage"]) > 0:
                    model_data = child_product_details["units"][0]["modelImage"]
                else:
                    model_data = []
            else:
                model_data = []
            image_data = []
            if len(child_product_details["units"][0]["image"]) > 0:
                image_data = child_product_details["units"][0]["image"]
            else:
                image_data = [
                    {"extraLarge": "", "medium": "", "altText": "", "large": "", "small": ""}
                ]

            # es_scr --> score of the product which we will get from elastic search
            if str(child_product_id) in product_scr:
                es_scr = product_scr[str(child_product_id)]
            else:
                es_scr = 0

            try:
                if "memberPrice" in child_product_details["units"][0] and "discountPriceForNonMembers" in \
                        child_product_details["units"][0]:
                    pass
                else:
                    if not "memberPrice" in child_product_details["units"][0]:
                        child_product_details["units"][0]["memberPrice"] = child_product_details["units"][0][
                            "floatValue"]
                    if not "discountPriceForNonMembers" in child_product_details["units"][0]:
                        child_product_details["units"][0]["discountPriceForNonMembers"] = \
                            child_product_details["units"][0]["floatValue"]
            except:
                pass

            try:
                reseller_commission = child_product_details['units'][0]['b2cPricing'][0]['b2cresellerCommission']
            except:
                reseller_commission = 0

            reseller_commission_type = 0 # alwasy need to set seller commission type as 0

            ## generate the response for api and append all the details in list
            if "addOns" in child_product_details["units"][0]:
                if child_product_details["units"][0]["addOns"] != None:
                    if len(child_product_details["units"][0]["addOns"]) > 0:
                        addons_count = True
                    else:
                        addons_count = False
                else:
                    addons_count = False
            else:
                addons_count = False
            substitute_length = 0
            if "substitute" in child_product_details:
                substitute_length = len(child_product_details["substitute"])
            else:
                substitute_length = 0

            if substitute_length > 0:
                is_substitute_available = True
            else:
                is_substitute_available = False
            product_data.append(
                {
                    "isSizeAvailable": is_size_available,
                    "detailDescription": detail_description,
                    "resellerCommission": reseller_commission,
                    "resellerCommissionType": reseller_commission_type,
                    "maxQuantity": child_product_details["maxQuantity"]
                    if "maxQuantity" in child_product_details
                    else 0,
                    "isComboProduct": child_product_details["isComboProduct"]
                    if "isComboProduct" in child_product_details
                    else False,
                    "currencyRate": currency_rate,
                    "isSubstituteAvailable": is_substitute_available,
                    "productStatus": "",
                    "hardLimit": 0,
                    "preOrder": False,
                    "procurementTime": 0,
                    "extraAttributeDetails": additional_info,
                    "childProductId": str(child_product_id),
                    "tax": tax_value,
                    "productName": child_product_details["units"][0]["unitName"][language]
                    if language in child_product_details["units"][0]["unitName"]
                    else child_product_details["units"][0]["unitName"]["en"],
                    "parentProductId": child_product_details["parentProductId"],
                    "storeCategoryId": child_product_details["storeCategoryId"],
                    "allowOrderOutOfStock": child_product_details["allowOrderOutOfStock"]
                    if "allowOrderOutOfStock" in child_product_details
                    else False,
                    "prescriptionRequired": prescription_required,
                    "saleOnline": sales_online,
                    "uploadProductDetails": upload_details,
                    "nextSlotTime": "",
                    "productSeo": product_seo,
                    "mobimages": mobile_images,
                    "needsIdProof": needsIdProof,
                    "variantCount": variant_count,
                    "brandName": child_product_details["brandTitle"][language]
                    if language in child_product_details["brandTitle"]
                    else child_product_details["brandTitle"]["en"],
                    "manufactureName": child_product_details["manufactureName"][language]
                    if language in child_product_details["manufactureName"]
                    else "",
                    "currencySymbol": currency_symbol,
                    "currency": currency,
                    "images": image_data,
                    "productTag": "",
                    "units": child_product_details["units"],
                    "storeId": str(child_product_details["storeId"]),
                    "unitId": child_product_details["units"][0]["unitId"],
                    "offerData": child_product_details["offer"]
                    if "offer" in child_product_details
                    else [],
                    "childProductDetails": child_product_details,
                    "mainProductDetails": main_product_details,
                    "score": es_scr,
                    "hightlight": hightlight_data,
                    "isShoppingList": isShoppingList,
                    "isSizeAvailable": is_size_available,
                    "detailDescription": detail_description,
                    "isOpenPdp": False,
                    "colourData": colour_details,
                    "colourCount": len(colour_details),
                    "linkedAttribute": linked_attribute,
                    "isFavourite": isFavourite,
                    "availableQty": child_product_details["units"][0]["availableQuantity"],
                    "productType": child_product_details[
                        'productType'] if "productType" in child_product_details else 1,
                    "modelImage": model_data,
                    "containsMeat": False,
                    "sizes": [],
                    "variantData": variant_data_list,
                    "addOnsCount": addons_count,
                    "mobileImage": image_data,
                    "mouDataUnit": "",
                    "moUnit": "Pcs",
                    "popularstatus": 0,
                    "storeCount": 0,
                    "isMembersOnly": child_product_details[
                        "isMembersOnly"] if "isMembersOnly" in child_product_details else False,
                    "popularScore": child_product_details[
                        "popularScore"] if "popularScore" in child_product_details else 0
                }
            )
        except Exception as ex:
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)

    # converting the list into dataframe for perform operation on list
    # operations are add price in object, fetch best offer, fetch best supplier,
    # fetch rating for product, variant data and unit data
    if len(product_data) > 0:
        product_dataframe = pd.DataFrame(product_data)

        ### function call for get the product available quantity
        product_dataframe = product_dataframe.apply(
            get_avaialable_quantity,
            next_availbale_driver_time="",
            driver_roaster={},
            zone_id=zone_id,
            axis=1,
        )
        # function call for get the best offer for the product
        product_dataframe = product_dataframe.apply(
            best_offer_function_validate, zone_id=zone_id, logintype=login_type, axis=1
        )
        # function call for the get the supplier details for the product
        product_dataframe["suppliers"] = product_dataframe.apply(
            best_supplier_function_cust, axis=1
        )
        # function call for the get the product type for the product
        product_dataframe["productType"] = product_dataframe.apply(product_type_validation, axis=1)

        # function call for the get the product total rating (average rating)
        product_dataframe["TotalStarRating"] = product_dataframe.apply(
            cal_star_rating_product, axis=1
        )

        # function call for the linked to unit attributes list for the products
        product_dataframe["linkedAttribute"] = product_dataframe.apply(
            linked_unit_attribute, axis=1
        )
        # function call for the get the variant list (other colours, sizes and linked to unit) for the same products
        product_dataframe["variantData"] = product_dataframe.apply(
            linked_variant_data, language=language, axis=1
        )
        # function call for the get the units data, calculate the price for the products
        product_dataframe["unitsData"] = product_dataframe.apply(
            home_units_data,
            lan=language,
            sort=0,
            status=0,
            axis=1,
            logintype=login_type,
            store_category_id=store_category_id,
            margin_price=True, city_id=""
        )
        del product_dataframe["childProductDetails"]
        del product_dataframe["mainProductDetails"]
        details = product_dataframe.to_json(orient="records")
        recent_data = json.loads(details)
        filter_responseJson = validate_units_data(recent_data, False)
        ## sort the data base on request for sorting
        if int(sort_type) == 0:
            newlist = sorted(filter_responseJson, key=lambda k: k["price"], reverse=False)
        elif int(sort_type) == 1:
            newlist = sorted(filter_responseJson, key=lambda k: k["price"], reverse=True)
        elif int(sort_type) == 3:
            newlist = sorted(filter_responseJson, key=lambda k: k["productName"], reverse=True)
        elif int(sort_type) == 4:
            newlist = sorted(filter_responseJson, key=lambda k: k["productName"])
        elif int(sort_type) == 5:
            newlist = sorted(filter_responseJson, key=lambda k: k["popularScore"], reverse=True)
        elif int(sort_type) == 7:
            newlist = sorted(filter_responseJson, key=lambda k: k["score"], reverse=True)
        else:
            if search_query == "":
                newlist = sorted(filter_responseJson, key=lambda k: (k['outOfStock']), reverse=False)
            else:
                filter_responseJson.sort(key=lambda k: (-k['score'], -k['availableQuantity']))
                filter_responseJson.sort(key=lambda k: (+k['outOfStock']))
                newlist = filter_responseJson

        try:
            if "value" in res["hits"]["total"]:
                pen_count = res["hits"]["total"]["value"]
            else:
                pen_count = res["hits"]["total"]
        except:
            pen_count = res["hits"]["total"]
        if pen_count > 20:
            pen_count = pen_count
        else:
            pen_count = len(newlist)
        serarchResults_products = {
            "products": newlist,
            "penCount": pen_count,
            "offerBanner": [],
        }

        ### add the response in redis for the request
        rjId = "plp_" + QUERY_STRING + "_" + currency_code + "_" + str(login_type)
        try:
            rj_plp.delete(rjId)
        except:
            pass
        try:
            rj_plp.jsonset(rjId, Path.rootPath(), serarchResults_products)
            rj_plp.expire(rjId, 172800)
        except:
            pass
        return serarchResults_products
    else:
        serarchResults_products = {
            "products": [],
            "penCount": 0,
            "offerBanner": [],
        }
        ### add the response in redis for the request
        rjId = "plp_" + QUERY_STRING + "_" + currency_code + "_" + str(login_type)
        try:
            rj_plp.delete(rjId)
        except:
            pass
        try:
            rj_plp.jsonset(rjId, Path.rootPath(), serarchResults_products)
            rj_plp.expire(rjId, 172800)
        except:
            pass
        return serarchResults_products


"""
    Function for the search from the dc
    Function for the modify data based on request
    :res ---> data which we are getting from es
    : language ---> return data in particular language
"""


def dc_search_data_new(
        res,
        start_time,
        language,
        filter_responseJson,
        finalfilter_responseJson_products,
        popularstatus,
        sort,
        login_type,
        store_id,
        sort_type,
        store_category_id,
        from_data,
        to_data,
        user_id,
        remove_central,
        zone_id,
        offer_id,
        next_availbale_driver_time, city_id, currency_code
):
    # resData = validate_dc_product_data(res["hits"]["hits"], store_id, zone_id, language, next_availbale_driver_time, user_id)
    resData = []
    # =================get all the zone dc list=====================================================
    store_details = db.stores.find(
        {"serviceZones.zoneId": zone_id, "storeFrontTypeId": 5, "status": 1}
    )
    more_store_details = db.stores.find(
        {"serviceZones.zoneId": zone_id, "storeFrontTypeId": {"$ne": 5}, "status": 1}
    )
    main_sellers = []
    for seller in more_store_details:
        main_sellers.append(str(seller["_id"]))
    dc_seller_list = []
    dc_seller_list_new = []
    for dc_seller in store_details:
        dc_seller_list.append(str(dc_seller["_id"]))
        dc_seller_list_new.append(ObjectId(dc_seller["_id"]))
    try:
        if zone_id != "":
            driver_roaster = next_availbale_driver_roaster(zone_id)
        else:
            driver_roaster = {}
    except:
        driver_roaster = {}
    for bucket in res["aggregations"]["group_by_sub_category"]["buckets"][from_data:to_data]:
        # try:
        all_dc_list = []
        start_time = time.time()
        best_supplier = {}
        product = bucket["top_sales_hits"]["hits"]["hits"][0]
        score = bucket["avg_score"]["value"] if bucket["avg_score"]["value"] is not None else 0
        variant_data = []
        available_qty = (
            product["_source"]["units"][0]["availableQuantity"]
            if "availableQuantity" in product["_source"]["units"][0]
            else 0
        )
        # try:
        start_time = time.time()
        is_dc_linked = False
        hard_limit = 0
        variant_data = []
        supplier_data = []
        dc_data = []
        best_supplier["productId"] = product["_id"]
        best_supplier["id"] = product["_source"]["storeId"]
        best_supplier["retailerQty"] = available_qty
        child_product_count = db.childProducts.find_one(
            {
                "parentProductId": product["_source"]["parentProductId"],
                "storeId": {"$in": dc_seller_list_new},
                "units.unitId": product["_source"]["units"][0]["unitId"],
                "status": 1,
            }
        )
        if child_product_count is not None:
            if "seller" in child_product_count:
                if len(child_product_count["seller"]) > 0:
                    is_dc_linked = True
                    for seller in child_product_count["seller"]:
                        if seller["storeId"] in main_sellers:
                            if seller["preOrder"] == True:
                                all_dc_list.append(seller)
                            else:
                                pass
                        else:
                            pass
                    if len(all_dc_list) == 0:
                        for new_seller in child_product_count["seller"]:
                            if new_seller["storeId"] in main_sellers:
                                all_dc_list.append(seller)
                            else:
                                pass
                    dc_data.append(
                        {
                            "productId": str(child_product_count["_id"]),
                            "id": str(child_product_count["storeId"]),
                            "retailerQty": child_product_count["units"][0]["availableQuantity"]
                            if "availableQuantity" in child_product_count["units"][0]
                            else 0,
                            "retailerPrice": child_product_count["units"][0]["floatValue"],
                            "preOrder": False,
                        }
                    )
                else:
                    pass
            else:
                pass
        else:
            pass
        if is_dc_linked:
            if len(all_dc_list) > 0:
                best_seller_product = min(all_dc_list, key=lambda x: x["procurementTime"])
            else:
                best_seller_product = {}
        else:
            best_seller_product = {}

        if is_dc_linked == True:
            if len(dc_data) > 0:
                best_dc = min(dc_data, key=lambda x: x["retailerPrice"])
            else:
                best_dc = {}
        else:
            best_dc = {}

        if len(best_dc) > 0:
            child_product_data = db.childProducts.find_one({"_id": ObjectId(best_dc["productId"])})
            if "seller" in child_product_data:
                for seller in child_product_data["seller"]:
                    for supplier in supplier_data:
                        if seller["storeId"] == supplier["id"]:
                            supplier["preOrder"] = seller["preOrder"]
                    else:
                        pass
            else:
                pass

        if len(best_supplier) > 0:
            child_product_details = db.childProducts.find_one(
                {"_id": ObjectId(best_supplier["productId"])}
            )
            if child_product_details is not None:
                offers_details = []
                offer_details_data = []
                pre_order = False
                child_product_data = None
                hard_limit = 0
                procurementTime = 0
                if len(best_dc) > 0:
                    child_product_data = db.childProducts.find_one(
                        {"_id": ObjectId(best_dc["productId"])}
                    )
                    if "offer" in child_product_data:
                        for offer in child_product_data["offer"]:
                            offer_count = db.offers.find(
                                {"_id": ObjectId(offer["offerId"]), "status": 1}
                            ).count()
                            if offer_count > 0:
                                if offer["status"] == 1:
                                    offer_terms = db.offers.find_one(
                                        {"_id": ObjectId(offer["offerId"])}
                                    )
                                    if offer_terms != None:
                                        if offer_terms["startDateTime"] <= int(time.time()):
                                            offer["termscond"] = offer_terms["termscond"]
                                            offer["name"] = offer_terms["name"]["en"]
                                            offer["discountValue"] = offer_terms["discountValue"]
                                            offer["discountType"] = offer_terms["offerType"]
                                            offers_details.append(offer)
                                            offer_details_data.append(
                                                {
                                                    "offerId": offer["offerId"],
                                                    "discountType": offer_terms["offerType"],
                                                    "offerName": offer["offerName"]["en"],
                                                    "webimages": offer["webimages"]["image"],
                                                    "mobimage": offer["images"]["image"],
                                                    "discountValue": offer["discountValue"],
                                                }
                                            )
                                else:
                                    pass
                            else:
                                pass
                    else:
                        pass
                    try:
                        available_qty = child_product_data["units"][0]["availableQuantity"]
                    except:
                        available_qty = 0
                else:
                    try:
                        available_qty = child_product_details["units"][0]["availableQuantity"]
                    except:
                        available_qty = 0

                if len(best_seller_product) > 0:
                    hard_limit = best_seller_product["hardLimit"]
                    pre_order = best_seller_product["preOrder"]
                    procurementTime = best_seller_product["procurementTime"]
                else:
                    pass

                if len(offers_details) > 0:
                    best_offer = max(offers_details, key=lambda x: x["discountValue"])
                    currdate = datetime.datetime.now().replace(
                        hour=23, minute=59, second=59, microsecond=59
                    )
                    eastern = timezone(timezonename)
                    currlocal = eastern.localize(currdate)
                    best_offer["endDateTimeISO"] = int(((currlocal).timestamp())) * 1000
                else:
                    best_offer = {}

                # ======================================product seo======================================================
                if "productSeo" in child_product_details:
                    try:
                        if len(child_product_details["productSeo"]["title"]) > 0:
                            title = (
                                child_product_details["productSeo"]["title"][language]
                                if language in child_product_details["productSeo"]["title"]
                                else child_product_details["productSeo"]["title"]["en"]
                            )
                        else:
                            title = ""
                    except:
                        title = ""

                    try:
                        if len(child_product_details["productSeo"]["description"]) > 0:
                            description = (
                                child_product_details["productSeo"]["description"][language]
                                if language in child_product_details["productSeo"]["description"]
                                else child_product_details["productSeo"]["description"]["en"]
                            )
                        else:
                            description = ""
                    except:
                        description = ""

                    try:
                        if len(child_product_details["productSeo"]["metatags"]) > 0:
                            metatags = (
                                child_product_details["productSeo"]["metatags"][language]
                                if language in child_product_details["productSeo"]["metatags"]
                                else child_product_details["productSeo"]["metatags"]["en"]
                            )
                        else:
                            metatags = ""
                    except:
                        metatags = ""

                    try:
                        if len(child_product_details["productSeo"]["slug"]) > 0:
                            slug = (
                                child_product_details["productSeo"]["slug"][language]
                                if language in child_product_details["productSeo"]["slug"]
                                else child_product_details["productSeo"]["slug"]["en"]
                            )
                        else:
                            slug = ""
                    except:
                        slug = ""

                    product_seo = {
                        "title": title,
                        "description": description,
                        "metatags": metatags,
                        "slug": slug,
                    }
                else:
                    product_seo = {"title": "", "description": "", "metatags": "", "slug": ""}
                tax_value = []

                # =========================================pharmacy details=========================================
                if "prescriptionRequired" in child_product_details:
                    try:
                        if int(child_product_details["prescriptionRequired"]) == 0:
                            prescription_required = False
                        else:
                            prescription_required = True
                    except:
                        prescription_required = False

                else:
                    prescription_required = False

                if "saleOnline" in child_product_details:
                    if child_product_details["saleOnline"] == 0:
                        sales_online = False
                    else:
                        sales_online = True
                else:
                    sales_online = False

                if "uploadProductDetails" in child_product_details:
                    upload_details = child_product_details["uploadProductDetails"]
                else:
                    upload_details = ""

                # ========================= for the get the linked the unit data====================================
                for link_unit in child_product_details["units"][0]["attributes"]:
                    try:
                        for attrlist in link_unit["attrlist"]:
                            try:
                                if attrlist == None:
                                    pass
                                else:
                                    if attrlist["linkedtounit"] == 1:
                                        if attrlist["measurementUnit"] == "":
                                            attr_name = (
                                                str(attrlist["value"][language])
                                                if language in attrlist["value"]
                                                else str(attrlist["value"]["en"])
                                            )
                                        else:
                                            attr_name = (
                                                str(attrlist["value"][language])
                                                + " "
                                                + attrlist["measurementUnit"]
                                                if language in attrlist["value"]
                                                else str(attrlist["value"]["en"])
                                                     + " "
                                                     + attrlist["measurementUnit"]
                                            )
                                        variant_data.append(
                                            {
                                                "attrname": attrlist["attrname"]["en"],
                                                "value": str(attr_name),
                                                "name": attrlist["attrname"]["en"],
                                            }
                                        )
                                    else:
                                        pass
                            except:
                                pass
                    except:
                        pass
                # =========================for max quantity=================================================
                if "maxQuantity" in child_product_details:
                    if child_product_details["maxQuantity"] != "":
                        max_quantity = int(child_product_details["maxQuantity"])
                    else:
                        max_quantity = 30
                else:
                    max_quantity = 30
                # ==========================================================================================
                if "allowOrderOutOfStock" in child_product_details:
                    allow_out_of_order = child_product_details["allowOrderOutOfStock"]
                else:
                    allow_out_of_order = False

                mobile_images = []

                if "productType" in child_product_details:
                    if child_product_details["productType"] == 2:
                        combo_product = True
                    else:
                        combo_product = False
                else:
                    combo_product = False
                minimum_order_qty = 1
                unit_package_type = "Box"
                unit_moq_type = "Box"
                moq_data = ""
                base_price, minimum_order_qty, unit_package_type, unit_moq_type, moq_data, seller_price = cal_product_city_pricing(
                    login_type, city_id, child_product_details)

                tax_price = 0
                if "tax" in child_product_details:
                    if len(child_product_details["tax"]) == 0:
                        tax_price = 0
                    else:
                        for amount in child_product_details["tax"]:
                            if "taxValue" in amount:
                                tax_price = tax_price + (int(amount["taxValue"]))
                            if "value" in amount:
                                tax_price = tax_price + (int(amount["value"]))
                            else:
                                tax_price = tax_price + 0
                else:
                    tax_price = 0

                if len(best_offer) > 0:
                    discount_type = (
                        int(best_offer["discountType"]) if "discountType" in best_offer else 1
                    )
                    discount_value = (
                        best_offer["discountValue"] if "discountValue" in best_offer else 0
                    )
                else:
                    discount_type = 2
                    discount_value = 0

                if discount_type == 0:
                    percentage = 0
                else:
                    percentage = int(discount_value)

                try:
                    currency_rate = currency_exchange_rate[
                        str(child_product_details["currency"]) + "_" + str(currency_code)
                        ]
                except:
                    currency_rate = 0
                currency_details = db.currencies.find_one({"currencyCode": currency_code})
                if currency_details is not None:
                    currency_symbol = currency_details["currencySymbol"]
                    currency = currency_details["currencyCode"]
                else:
                    currency_symbol = child_product_details["currencySymbol"]
                    currency = child_product_details["currency"]

                if float(currency_rate) > 0:
                    base_price = base_price * float(currency_rate)

                # ==============calculate discount price =============================
                if discount_type == 0:
                    discount_price = float(discount_value)
                elif discount_type == 1:
                    discount_price = (float(base_price) * float(discount_value)) / 100
                else:
                    discount_price = 0
                final_price = base_price - discount_price
                final_price = final_price + ((final_price * tax_price) / 100)
                try:
                    product_name = (
                        child_product_details["units"][0]["unitName"][language]
                        if "unitName" in child_product_details["units"][0]
                        else child_product_details["units"][0]["unitName"]["en"]
                    )
                except:
                    product_name = child_product_details["pName"]["en"]

                start_time1 = time.time()
                main_product_details = None
                if len(best_seller_product) > 0:
                    main_product_details = db.childProducts.find_one(
                        {
                            "parentProductId": child_product_details["parentProductId"],
                            "units.unitId": child_product_details["units"][0]["unitId"],
                            "storeId": ObjectId(best_seller_product["storeId"]),
                        }
                    )
                    if main_product_details is not None:
                        child_product_id = str(main_product_details["_id"])
                    else:
                        child_product_id = str(child_product_details["_id"])
                else:
                    child_product_id = str(child_product_details["_id"])

                if child_product_data is not None:
                    outOfStock, next_availbale_time = meat_availability_check(
                        main_product_details
                        if main_product_details is not None
                        else child_product_details,
                        available_qty,
                        is_dc_linked,
                        next_availbale_driver_time,
                        hard_limit,
                        pre_order,
                        driver_roaster,
                        child_product_data,
                        zone_id,
                        procurementTime,
                    )
                else:
                    outOfStock = True
                    next_availbale_time = ""
                # ===================================variant count======================================
                seller_data = []
                # ===================================variant count======================================
                variant_query = {
                    "parentProductId": product["_source"]["parentProductId"],
                    "status": 1,
                }
                if best_supplier["id"] == "0":
                    variant_query["storeId"] = best_supplier["id"]
                else:
                    if store_category_id == MEAT_STORE_CATEGORY_ID:
                        # variant_query['storeId'] = {"$in": ["0", ObjectId(best_supplier['id'])]}
                        variant_query["storeId"] = {"$in": [ObjectId(best_supplier["id"])]}
                    else:
                        variant_query["storeId"] = ObjectId(best_supplier["id"])
                variant_count_data = db.childProducts.find(
                    variant_query
                ).count()  # product['_source']['variantCount'] if "variantCount" in product['_source'] else 1
                if variant_count_data > 1:
                    variant_count = True
                else:
                    variant_count = False
                isShoppingList = False

                if "containsMeat" in child_product_details:
                    contains_Meat = child_product_details["containsMeat"]
                else:
                    contains_Meat = False

                parent_product_data = db.products.find_one(
                    {"_id": ObjectId(product["_id"])}
                )  # for get the average rating of product
                # =====================from here need to send dc supplier id for the product===============
                resData.append(
                    {
                        "maxQuantity": max_quantity,
                        "isComboProduct": combo_product,
                        "childProductId": str(child_product_id),
                        "availableQuantity": available_qty,
                        "offerDetailsData": offer_details_data,
                        "productName": product_name,
                        "parentProductId": product["_source"]["parentProductId"],
                        "suppliers": best_supplier,
                        "supplier": best_supplier,
                        "containsMeat": contains_Meat,
                        "isShoppingList": isShoppingList,
                        "tax": tax_value,
                        "linkedAttribute": variant_data,
                        "allowOrderOutOfStock": allow_out_of_order,
                        "moUnit": "Pcs",
                        "outOfStock": outOfStock,
                        "variantData": variant_data,
                        "addOnsCount": 0,
                        "variantCount": variant_count,
                        "prescriptionRequired": prescription_required,
                        "saleOnline": sales_online,
                        "uploadProductDetails": upload_details,
                        "productSeo": product_seo,
                        "brandName": child_product_details["brandTitle"][language]
                        if language in child_product_details["brandTitle"]
                        else child_product_details["brandTitle"]["en"],
                        "manufactureName": child_product_details["manufactureName"][language]
                        if language in child_product_details["manufactureName"]
                        else "",
                        "TotalStarRating": 0,
                        "currencySymbol": currency_symbol,
                        "mobileImage": [],
                        "currency": currency,
                        "storeCategoryId": child_product_details["storeCategoryId"]
                        if "storeCategoryId" in child_product_details
                        else "",
                        "images": child_product_details["images"],
                        "mobimages": mobile_images,
                        "units": child_product_details["units"],
                        "finalPriceList": {
                            "basePrice": round(base_price, 2),
                            "finalPrice": round(final_price, 2),
                            "discountPrice": round(discount_price, 2),
                            "discountType": discount_type,
                            "discountPercentage": percentage,
                            "memberPrice": child_product_details["units"][0]["memberPrice"] if "memberPrice" in
                                                                                               child_product_details[
                                                                                                   "units"][
                                                                                                   0] else float(
                                final_price),
                            "discountPriceForNonMembers": child_product_details["units"][0][
                                "discountPriceForNonMembers"] if "discountPriceForNonMembers" in
                                                                 child_product_details["units"][0] else float(
                                final_price),
                        },
                        "price": int(final_price),
                        "isDcAvailable": is_dc_linked,
                        "discountType": discount_type,
                        "unitId": str(child_product_details["units"][0]["unitId"]),
                        "offer": best_offer,
                        "MOQData": {
                            "minimumOrderQty": minimum_order_qty,
                            "unitPackageType": unit_package_type,
                            "unitMoqType": unit_moq_type,
                            "MOQ": moq_data
                        },
                        #  "offers": best_offer,
                        "nextSlotTime": next_availbale_time,
                        "isMembersOnly": child_product_details[
                            "isMembersOnly"] if "isMembersOnly" in child_product_details else False
                    }
                )
            else:
                pass
        # except:
        #     print("pass")
    if len(resData) > 0:
        dataframe = pd.DataFrame(resData)
        details = dataframe.to_json(orient="records")
        data = json.loads(details)
        if int(sort_type) == 0:
            newlist = sorted(data, key=lambda k: k["price"], reverse=False)
        elif int(sort_type) == 1:
            newlist = sorted(data, key=lambda k: k["price"], reverse=True)
        elif int(sort_type) == 3:
            newlist = sorted(data, key=lambda k: k["productName"], reverse=True)
        elif int(sort_type) == 4:
            newlist = sorted(data, key=lambda k: k["productName"])
        else:
            newlist = sorted(data, key=lambda k: k["isDcAvailable"], reverse=True)
        try:
            if "value" in res["hits"]["total"]:
                pen_count = res["hits"]["total"]["value"]
            else:
                pen_count = res["hits"]["total"]
        except:
            pen_count = res["hits"]["total"]

        if len(newlist) > 0:
            res_data_dataframe = pd.DataFrame(newlist)
            res_data_dataframe = res_data_dataframe.drop_duplicates("productName", keep="first")
            newlist_json = res_data_dataframe.to_dict(orient="records")
        else:
            newlist_json = []

        if pen_count > 20:
            pen_count = pen_count
        else:
            pen_count = len(newlist_json)

        serarchResults_products = {
            "products": newlist_json,
            "penCount": pen_count,
            "offerBanner": [],
        }
        return serarchResults_products
    else:
        serarchResults_products = {
            "products": [],
            "penCount": 0,
            "offerBanner": [],
        }
        return serarchResults_products


def search_read_new(
        res,
        start_time,
        language,
        filter_responseJson,
        finalfilter_responseJson_products,
        popularstatus,
        sort,
        login_type,
        store_id,
        sort_type,
        store_category_id,
        from_data,
        to_data,
        user_id,
        remove_central,
        zone_id,
        offer_id,
        next_availbale_driver_time,
        QUERY_STRING, city_id, currency_code
):
    try:
        currdate = datetime.datetime.now()
        eastern = timezone(timezonename)
        currlocal = eastern.localize(currdate)
        start = time.time()

        if len(res) <= 0:
            error = {"data": [], "message": "No Products Found"}
            return error
        else:
            last_data = dc_search_data_new(
                res,
                start_time,
                language,
                filter_responseJson,
                finalfilter_responseJson_products,
                popularstatus,
                sort,
                login_type,
                store_id,
                sort_type,
                store_category_id,
                from_data,
                to_data,
                user_id,
                remove_central,
                zone_id,
                offer_id,
                next_availbale_driver_time, city_id, currency_code
            )
            finalSearchResults = {
                "data": last_data,
                "message": "Got the details",
            }
            if QUERY_STRING != "":
                rj.jsonset(QUERY_STRING, Path.rootPath(), last_data)
            else:
                pass
            return finalSearchResults
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        finalResponse = {"message": message, "data": []}
        return JsonResponse(finalResponse, safe=False, status=500)


def search_read_stores(
        res,
        start_time,
        language,
        filter_responseJson,
        finalfilter_responseJson_products,
        popularstatus,
        sort,
        login_type,
        store_id,
        sort_type,
        store_category_id,
        from_data,
        to_data,
        user_id,
        remove_central,
        zone_id,
        min_price,
        max_price,
        margin_price,
        currency_code,
        search_query,
        token,
        hyperlocal,
        storelisting,
        QUERY_STRING,
):
    try:
        if len(res) <= 0:
            error = {"data": [], "message": "No Products Found"}
            return error
        else:
            last_data = store_search_data_new(
                res,
                start_time,
                language,
                filter_responseJson,
                finalfilter_responseJson_products,
                popularstatus,
                sort,
                login_type,
                store_id,
                sort_type,
                store_category_id,
                from_data,
                to_data,
                user_id,
                remove_central,
                zone_id,
                min_price,
                max_price,
                margin_price,
                currency_code,
                search_query,
                token,
                hyperlocal,
                storelisting,
                QUERY_STRING,
            )
            finalSearchResults = {
                "data": last_data,
                "message": "Got the details",
            }
            try:
                if QUERY_STRING != "":
                    rj.jsonset(QUERY_STRING, Path.rootPath(), last_data)
                else:
                    pass
            except:
                pass
            return finalSearchResults
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        finalResponse = {"message": message, "data": []}
        return JsonResponse(finalResponse, safe=False, status=500)


"""
	Function for the add the search and category clicks logs in cassandra
"""


def category_search_logs(
        fname,
        sname,
        tname,
        search_type,
        user_id,
        seach_platform,
        ip_address,
        latitude,
        longitude,
        city_name,
        country_name,
        search_query,
        store_category_id,
        search_in,
        session_id,
        store_id,
        is_product,
        parent_product_id,
        child_product_id,
):
    if int(search_type) == 1:
        cat_name = fname
    elif int(search_type) == 2:
        cat_name = sname
    elif int(search_type) == 3:
        cat_name = tname
    else:
        cat_name = search_query

    storeid = store_id
    data = {
        "catName": cat_name,
        "searchType": search_type,
        "userId": user_id,
        "seachPlatform": seach_platform,
        "ipAddress": ip_address,
        "latitude": latitude,
        "longitude": longitude,
        "cityName": city_name,
        "countryName": country_name,
        "searchQuery": search_query,
        "storeCategoryId": store_category_id,
        "searchIn": search_in,
        "session_id": session_id,
        "storeid": storeid,
        "isProduct": is_product,
        "parent_product_id": parent_product_id,
        "child_product_id": child_product_id,
        "createdtimestamp": datetime.datetime.now().timestamp() * 1000,
    }
    try:
        if int(data["searchType"]) != 4:
            session.execute(
                """
                   INSERT INTO categorylogs (categoryname, categorytype, userid, partnerid, platform, ipaddress, latitude, 
                   longitude, cityname, countryname, store_category_id, session_id,storeid, createdtimestamp)
                   VALUES (%(categoryname)s, %(categorytype)s, %(userid)s, %(partnerid)s, %(platform)s,%(ipaddress)s, %(latitude)s, 
                   %(longitude)s, %(cityname)s, %(countryname)s, %(store_category_id)s,%(session_id)s,%(storeid)s,
                    %(createdtimestamp)s)
                   """,
                {
                    "categoryname": str(data["catName"]),
                    "categorytype": 1,
                    "userid": str(data["userId"]),
                    "partnerid": "",
                    "platform": int(data["seachPlatform"]),
                    "ipaddress": str(data["ipAddress"]),
                    "latitude": str(data["latitude"]),
                    "longitude": str(data["longitude"]),
                    "cityname": str(data["cityName"]),
                    "countryname": str(data["countryName"]),
                    "store_category_id": data["storeCategoryId"],
                    "session_id": data["session_id"],
                    "storeid": data["storeid"],
                    "createdtimestamp": int(data["createdtimestamp"]),
                },
            )
        else:
            db.userRecentSearch.insert(
                {
                    "categoryname": str(data["searchQuery"]),
                    "userid": str(data["userId"]),
                    "platform": int(data["seachPlatform"]),
                    "ipaddress": str(data["ipAddress"]),
                    "latitude": str(data["latitude"]),
                    "longitude": str(data["longitude"]),
                    "cityname": str(data["cityName"]),
                    "countryname": str(data["countryName"]),
                    "store_category_id": data["storeCategoryId"],
                    "session_id": data["session_id"],
                    "search_in": data["searchIn"],
                    "storeid": data["storeid"],
                    "is_product": data["isProduct"] if "isProduct" in data else False,
                    "parent_product_id": data["parent_product_id"] if "parent_product_id" in data else "",
                    "child_product_id": data["child_product_id"] if "child_product_id" in data else "",
                    "createdtimestamp": int(data["createdtimestamp"]),
                }
            )
    except Exception as ex:
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        pass
    response = {"message": "data in processing"}
    return response


class Variants(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Products"],
        operation_description="API for getting variants of the product",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="productId",
                required=True,
                default="5df88294e80e605065d3ce1e",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product",
            ),
            openapi.Parameter(
                name="storeId",
                required=True,
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id from which store need to get data",
            ),
        ],
        responses={
            200: "successfully. product variants found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required fields are not found. it might be product id not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            product_id = request.GET["productId"] if "productId" in request.GET else ""
            child_product_ids = request.GET["childProductId"] if "childProductId" in request.GET else ""
            store_id = request.GET["storeId"] if "storeId" in request.GET else "0"
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            res_unit = {}
            res_variant = {}
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            if product_id == "":
                response_data = {
                    "message": "product id empty",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)

            mongo_query = {"parentProductId": product_id}
            if store_id != "0" and store_id != "":
                mongo_query["storeId"] = ObjectId(store_id)
            main_res = db.childProducts.find(mongo_query)
            if main_res.count() == 0:
                child_mongo_query = {"_id": ObjectId(product_id), "status": 1}
                main_res = db.childProducts.find(child_mongo_query)
            if main_res.count() > 0:
                color_details = []
                color_list = []
                best_supplier_details = {}
                link_to_unit = []
                link_to_unit_list = []
                attribute_data = []
                last_color_json = []
                last_link_unit = []
                for res in main_res:
                    try:
                        if "manufactureName" in res:
                            manufacture_name = (
                                res["manufactureName"][lan] if lan in res["manufactureName"] else ""
                            )
                        else:
                            manufacture_name = ""
                        if "allowOrderOutOfStock" in res:
                            allow_out_of_stock = res["allowOrderOutOfStock"]
                        else:
                            allow_out_of_stock = False

                        best_supplier_child = {
                            "id": str(res["storeId"]),
                            "storeName": res["storeName"] if "storeName" in res else {},
                            "productId": str(res["_id"]),
                            "retailerPrice": res["units"][0]["b2cPricing"][0][
                                "b2cproductSellingPrice"
                            ],
                            "distributorPrice": res["units"][0]["b2cPricing"][0][
                                "b2cproductSellingPrice"
                            ],
                            "currency": res["currency"],
                            "currencySymbol": res["currencySymbol"],
                            "retailerQty": res["units"][0]["availableQuantity"],
                            "distributorQty": 0,
                        }
                        # =========================for max quantity=================================================
                        if "maxQuantity" in res:
                            if res["maxQuantity"] != "":
                                max_quantity = int(res["maxQuantity"])
                            else:
                                max_quantity = 30
                        else:
                            max_quantity = 30
                        # ==========================================================================================
                        if len(best_supplier_child) > 0:
                            if best_supplier_child["retailerQty"] > 0:
                                outOfStock = False
                                availableStock = int(best_supplier_child["retailerQty"])
                                child_product_id = best_supplier_child["productId"]
                            else:
                                outOfStock = True
                                availableStock = 0
                                child_product_id = best_supplier_child["productId"]

                            size_list_data = []
                            color_details_data = []
                            size_list = []

                            # loop for the getting the attributes value

                            # else:
                            child_product_details = db.childProducts.find_one(
                                {"_id": ObjectId(child_product_id)}
                            )
                            if child_product_details != None:
                                if child_product_details["units"][0]["isPrimary"] == True:
                                    best_supplier_details = best_supplier_child
                                for attr in child_product_details["units"][0]["attributes"]:
                                    for att in attr["attrlist"]:
                                        if "linkedtounit" in att:
                                            if att["linkedtounit"] == 0:
                                                pass
                                            else:
                                                link_to_unit_list.append(att["attrname"][lan])
                                                if "prescriptionRequired" in child_product_details:
                                                    if (
                                                            child_product_details[
                                                                "prescriptionRequired"
                                                            ]
                                                            == 0
                                                    ):
                                                        prescription_required = False
                                                    else:
                                                        prescription_required = True
                                                else:
                                                    prescription_required = False

                                                if "needsIdProof" in child_product_details:
                                                    if (
                                                            child_product_details["needsIdProof"]
                                                            == False
                                                    ):
                                                        needsIdProof = False
                                                    else:
                                                        needsIdProof = True
                                                else:
                                                    needsIdProof = False

                                                if att["value"] == None:
                                                    pass
                                                else:
                                                    if "measurementUnit" in att:
                                                        measurement_unit = att["measurementUnit"]
                                                    else:
                                                        measurement_unit = ""
                                                    try:
                                                        image = (
                                                            res["images"][0]["small"]
                                                            if "images" in res
                                                            else product["image"][0]["medium"]
                                                        )
                                                    except:
                                                        image = ""
                                                    try:
                                                        attr_value = (
                                                                str(att["value"][lan])
                                                                + " "
                                                                + str(measurement_unit)
                                                        )
                                                    except:
                                                        attr_value = ""
                                                    attribute_data.append(
                                                        {
                                                            "attrname": att["attrname"][lan]
                                                            if lan in att["attrname"]
                                                            else att["attrname"]["en"],
                                                            "value": attr_value,
                                                            "name": att["attrname"][lan]
                                                            if lan in att["attrname"]
                                                            else att["attrname"]["en"],
                                                        }
                                                    )
                                                    link_to_unit.append(
                                                        {
                                                            "name": att["attrname"][lan],
                                                            "value": attr_value,
                                                            "keyName": att["attrname"][lan]
                                                            if lan in att["attrname"]
                                                            else att["attrname"]["en"],
                                                            "isPrimary": child_product_details[
                                                                "units"
                                                            ][0]["isPrimary"]
                                                            if "isPrimary"
                                                               in child_product_details["units"][0]
                                                            else False,
                                                            "prescriptionRequired": prescription_required,
                                                            "needsIdProof": needsIdProof,
                                                            "variantData": attribute_data,
                                                            "childProductId": best_supplier_child[
                                                                "productId"
                                                            ],
                                                            "unitId": child_product_details[
                                                                "units"
                                                            ][0]["unitId"],
                                                            "allowOrderOutOfStock": allow_out_of_stock,
                                                            "maxQuantity": max_quantity,
                                                            "manufactureName": manufacture_name,
                                                            "outOfStock": outOfStock,
                                                            "availableStock": availableStock,
                                                            "colourId": best_supplier_child[
                                                                "productId"
                                                            ],
                                                            "image": image,
                                                            "size": attr_value,
                                                        }
                                                    )
                                if "unitSizeGroupValue" in child_product_details["units"][0]:
                                    if (
                                            type(
                                                child_product_details["units"][0]["unitSizeGroupValue"]
                                            )
                                            == str
                                    ):
                                        unit_size = child_product_details["units"][0][
                                            "unitSizeGroupValue"
                                        ]
                                    else:
                                        if (
                                                len(
                                                    child_product_details["units"][0][
                                                        "unitSizeGroupValue"
                                                    ]
                                                )
                                                == 0
                                        ):
                                            unit_size = None
                                        else:
                                            unit_size = (
                                                child_product_details["units"][0][
                                                    "unitSizeGroupValue"
                                                ][lan]
                                                if lan
                                                   in child_product_details["units"][0][
                                                       "unitSizeGroupValue"
                                                   ]
                                                else child_product_details["units"][0][
                                                    "unitSizeGroupValue"
                                                ]["en"]
                                            )
                                else:
                                    unit_size = None

                                if unit_size == None or unit_size == 0:
                                    pass
                                else:
                                    if "prescriptionRequired" in child_product_details:
                                        if child_product_details["prescriptionRequired"] == 0:
                                            prescription_required = False
                                        else:
                                            prescription_required = True
                                    else:
                                        prescription_required = False

                                    if "needsIdProof" in child_product_details:
                                        if child_product_details["needsIdProof"] == 0:
                                            needsIdProof = False
                                        else:
                                            needsIdProof = True
                                    else:
                                        needsIdProof = False

                                    attribute_data.append(
                                        {"attrname": "Size", "value": unit_size, "name": "Size"}
                                    )

                                    link_to_unit.append(
                                        {
                                            "childProductId": str(best_supplier_child["productId"]),
                                            "unitId": child_product_details["units"][0]["unitId"],
                                            "keyName": "Sizes",
                                            "isPrimary": child_product_details["units"][0][
                                                "isPrimary"
                                            ]
                                            if "isPrimary" in child_product_details["units"][0]
                                            else False,
                                            "productName": child_product_details["units"][0][
                                                "unitName"
                                            ][lan],
                                            "outOfStock": outOfStock,
                                            "variantData": attribute_data,
                                            "availableStock": availableStock,
                                            "manufactureName": manufacture_name,
                                            "allowOrderOutOfStock": allow_out_of_stock,
                                            "maxQuantity": max_quantity,
                                            "colourId": str(best_supplier_child["productId"]),
                                            "name": child_product_details["units"][0][
                                                "unitSizeGroupValue"
                                            ][lan]
                                            if lan
                                               in child_product_details["units"][0][
                                                   "unitSizeGroupValue"
                                               ]
                                            else child_product_details["units"][0][
                                                "unitSizeGroupValue"
                                            ]["en"],
                                            "prescriptionRequired": prescription_required,
                                            "needsIdProof": needsIdProof,
                                            "rgb": str("rgb(") + product["color"] + ")",
                                            "image": res["images"][0]["small"]
                                            if "images" in res
                                            else product["image"][0]["small"],
                                            "size": child_product_details["units"][0][
                                                "unitSizeGroupValue"
                                            ][lan]
                                            if lan
                                               in child_product_details["units"][0][
                                                   "unitSizeGroupValue"
                                               ]
                                            else child_product_details["units"][0][
                                                "unitSizeGroupValue"
                                            ]["en"],
                                        }
                                    )
                                    link_to_unit_list.append("Sizes")

                                if child_product_details["units"][0]["colorName"] == "":
                                    pass
                                else:
                                    if "prescriptionRequired" in child_product_details:
                                        if child_product_details["prescriptionRequired"] == 0:
                                            prescription_required = False
                                        else:
                                            prescription_required = True
                                    else:
                                        prescription_required = False

                                    if "needsIdProof" in child_product_details:
                                        if child_product_details["needsIdProof"] == False:
                                            needsIdProof = False
                                        else:
                                            needsIdProof = True
                                    else:
                                        needsIdProof = False

                                    attribute_data.append(
                                        {
                                            "attrname": "Colour",
                                            "value": child_product_details["units"][0]["colorName"],
                                            "name": "Colour",
                                        }
                                    )

                                    link_to_unit.append(
                                        {
                                            "childProductId": str(best_supplier_child["productId"]),
                                            "unitId": child_product_details["units"][0]["unitId"],
                                            "keyName": "Colors",
                                            "productName": child_product_details["units"][0][
                                                "unitName"
                                            ][lan],
                                            "outOfStock": outOfStock,
                                            "allowOrderOutOfStock": allow_out_of_stock,
                                            "availableStock": availableStock,
                                            "maxQuantity": max_quantity,
                                            "variantData": attribute_data,
                                            "manufactureName": manufacture_name,
                                            "isPrimary": child_product_details["units"][0][
                                                "isPrimary"
                                            ]
                                            if "isPrimary" in child_product_details["units"][0]
                                            else False,
                                            "colourId": str(best_supplier_child["productId"]),
                                            "name": child_product_details["units"][0]["colorName"],
                                            "prescriptionRequired": prescription_required,
                                            "needsIdProof": needsIdProof,
                                            "rgb": str("rgb(")
                                                   + child_product_details["color"]
                                                   + ")",
                                            "image": res["images"][0]["small"]
                                            if "images" in res
                                            else child_product_details["image"][0]["small"],
                                            "size": child_product_details["units"][0]["colorName"],
                                        }
                                    )
                                    link_to_unit_list.append("Colors")
                            else:
                                pass
                    except Exception as ex:
                        print(
                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                            type(ex).__name__,
                            ex,
                        )
                        pass

                # =============================part of the link unit data===================================================
                for link in link_to_unit:
                    if type(link["size"]) == list:
                        size_list = link["size"][0]
                    else:
                        size_list = link["size"]
                    res_unit.setdefault(link["keyName"], []).append(
                        {
                            "childProductId": link["childProductId"],
                            "size": size_list,
                            "keyName": link["keyName"],
                            "isPrimary": link["isPrimary"],
                            "variantData": link["variantData"],
                            "name": link["name"],
                            "image": link["image"],
                            "maxQuantity": link["maxQuantity"],
                            "manufactureName": link["manufactureName"],
                            "allowOrderOutOfStock": link["allowOrderOutOfStock"],
                            "colourId": link["colourId"],
                            "prescriptionRequired": link["prescriptionRequired"],
                            "needsIdProof": link["needsIdProof"]
                            if "needsIdProof" in link
                            else False,
                            "unitId": link["unitId"],
                            "outOfStock": link["outOfStock"],
                            "availableStock": link["availableStock"],
                        }
                    )
                for link_unit in list(set(link_to_unit_list)):
                    try:
                        newlist = sorted(res_unit[link_unit], key=lambda k: k["isPrimary"])
                        dataframe_unit_details = pd.DataFrame(newlist)
                        dataframe_unit_details = dataframe_unit_details.drop_duplicates(
                            "size", keep="last"
                        )
                        dataframe_unit_details = dataframe_unit_details.dropna(
                            subset=["size"], axis=0
                        )
                        link_unit_data = dataframe_unit_details.to_json(orient="records")
                        link_unit_data = json.loads(link_unit_data)
                        if not any(d["isPrimary"] == True for d in res_unit[link_unit]):
                            is_primary = False
                        else:
                            is_primary = True

                        if res_unit[link_unit][0]["size"] != "":
                            last_color_json.append(
                                {
                                    "name": res_unit[link_unit][0]["keyName"],
                                    "centralProductId": product_id,
                                    "keyName": res_unit[link_unit][0]["keyName"],
                                    "variantData": res_unit[link_unit][0]["variantData"],
                                    "childProductId": res_unit[link_unit][0]["childProductId"],
                                    "manufactureName": res_unit[link_unit][0]["manufactureName"],
                                    "prescriptionRequired": res_unit[link_unit][0][
                                        "prescriptionRequired"
                                    ],
                                    "needsIdProof": res_unit[link_unit][0]["needsIdProof"]
                                    if "needsIdProof" in res_unit[link_unit][0]
                                    else False,
                                    "maxQuantity": res_unit[link_unit][0]["maxQuantity"],
                                    "allowOrderOutOfStock": res_unit[link_unit][0][
                                        "allowOrderOutOfStock"
                                    ],
                                    "isPrimary": is_primary,
                                    "sizeData": link_unit_data,
                                    "image": res_unit[link_unit][0]["image"],
                                    "unitId": res_unit[link_unit][0]["unitId"],
                                }
                            )
                    except:
                        pass

                if len(best_supplier_details) > 0:
                    if best_supplier_details["id"] == "0":
                        best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                        best_supplier_details["rating"] = 0
                    else:
                        store_response = db.stores.find_one(
                            {"_id": ObjectId(best_supplier_details["id"])},
                            {"storeName": 1, "avgRating": 1},
                        )
                        try:
                            if store_response != None:
                                best_supplier_details["supplierName"] = store_response["storeName"][
                                    "en"
                                ]
                                best_supplier_details["rating"] = (
                                    store_response["avgRating"]
                                    if "avgRating" in store_response
                                    else 0
                                )
                            else:
                                best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                                best_supplier_details["rating"] = 0
                        except:
                            best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                            best_supplier_details["rating"] = 0
                else:
                    best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                    best_supplier_details["rating"] = 0

                # if "productId" in best_supplier_details:
                # =====================================product details section==============================
                # product_details = db.childProducts.find_one({"_id": ObjectId(best_supplier_details['productId'])})
                query={"_id": ObjectId(product_id)}
                if child_product_ids:
                    query["_id"] = {"$ne": ObjectId(child_product_ids)}
                product_details = db.childProducts.find_one(query)
                if product_details is None:
                    if "productId" in best_supplier_details:
                        product_details = db.childProducts.find_one(
                            {"_id": ObjectId(best_supplier_details["productId"])}
                        )
                    else:
                        product_details = None
                tax_price = 0
                if product_details != None:
                    offers_details = []
                    final_offer = None
                    if "offer" in product_details:
                        for offer in product_details["offer"]:
                            if offer["status"] == 1:
                                offer_terms = db.offers.find_one(
                                    {"_id": ObjectId(offer["offerId"])}
                                )
                                if offer_terms is not None:
                                    if offer_terms["startDateTime"] <= int(time.time()):
                                        offers_details.append(offer)
                                    else:
                                        pass
                                else:
                                    pass
                            else:
                                pass
                    else:
                        pass

                    if len(offers_details) > 0:
                        best_offer = max(offers_details, key=lambda x: x["discountValue"])
                        offer_details = db.offers.find(
                            {"_id": ObjectId(best_offer["offerId"]), "status": 1}
                        ).count()
                        if offer_details != 0:
                            best_offer = best_offer
                        else:
                            best_offer = {}
                    else:
                        best_offer = {}
                    try:
                        price = product_details["units"][0]["b2cPricing"][0][
                            "b2cproductSellingPrice"
                        ]
                        with_out_margin_base_price = product_details["units"][0]["b2cPricing"][0][
                            "b2cpriceWithTax"
                        ]
                    except:
                        try:
                            price = product_details["units"][0]["b2cPricing"][0][
                                "b2cproductSellingPrice"
                            ]
                            with_out_margin_base_price = product_details["units"][0]["b2cPricing"][
                                0
                            ]["b2cpriceWithTax"]
                        except:
                            price = product_details["units"][0]["floatValue"]
                            with_out_margin_base_price = product_details["units"][0]["floatValue"]

                    try:
                        currency_rate = currency_exchange_rate[
                            str(product_details["currency"]) + "_" + str(currency_code)
                            ]
                    except:
                        currency_rate = 0
                    currency_details = db.currencies.find_one({"currencyCode": currency_code})
                    if currency_details is not None:
                        currency_symbol = currency_details["currencySymbol"]
                        currency = currency_details["currencyCode"]
                    else:
                        currency_symbol = product_details["currencySymbol"]
                        currency = product_details["currency"]

                    if len(best_offer) > 0:
                        try:
                            final_offer = {
                                "offerName": best_offer['offerName'][lan] if lan in best_offer[
                                    'offerName'] else best_offer['offerName']["en"],
                                "offerId": best_offer['offerId'],
                                "offerType": best_offer['offerType'] if 'offerType' in best_offer else 0,
                                "discountType": best_offer['discountType'],
                                "discountValue": best_offer['discountValue']
                            }
                        except Exception as e:
                            print(e)
                            final_offer = None
                        discount_type = (
                            int(best_offer["discountType"]) if "discountType" in best_offer else 0
                        )
                        discount_value = (
                            best_offer["discountValue"] if "discountValue" in best_offer else 0
                        )
                    else:
                        final_offer = None
                        discount_value = 0
                        discount_type = 2

                    if price == 0 or price == "":
                        final_price = 0
                        discount_price = 0
                    else:
                        if discount_type == 0:
                            discount_price = float(discount_value)
                        elif discount_type == 1:
                            discount_price = (float(price) * float(discount_value)) / 100
                        else:
                            discount_price = 0
                    if float(currency_rate) > 0:
                        price = price * float(currency_rate)
                        with_out_margin_base_price = with_out_margin_base_price * float(
                            currency_rate
                        )
                    else:
                        pass
                    # ======================for tax ================================================================
                    variantData = []
                    try:
                        tax_value = []
                        if type(product_details["tax"]) == list:
                            for tax in product_details["tax"]:
                                tax_value.append({"value": tax["taxValue"]})
                        else:
                            if product_details["tax"] != None:
                                if "taxValue" in product_details["tax"]:
                                    tax_value.append({"value": product_details["tax"]["taxValue"]})
                                else:
                                    tax_value.append({"value": product_details["tax"]})
                            else:
                                tax_value = []
                    except:
                        tax_value = []
                    if product_details["storeCategoryId"] != DINE_STORE_CATEGORY_ID:
                        if len(tax_value) == 0:
                            tax_price = 0
                        else:
                            for amount in tax_value:
                                tax_price = tax_price + (int(amount["value"]))
                    else:
                        tax_price = 0

                    base_price = float(price) + ((float(price) * tax_price) / 100)
                    with_out_margin_base_price = float(with_out_margin_base_price) + (
                            (float(with_out_margin_base_price) * tax_price) / 100
                    )
                    try:
                        # final_price = product_details['units'][0]['discountPrice']
                        final_price = base_price - discount_price
                        final_without_margin_price = float(with_out_margin_base_price) - float(discount_price)
                    except:
                        final_price = float(base_price) - discount_price
                        final_without_margin_price = float(with_out_margin_base_price) - float(discount_price)

                    if final_price == 0:
                        final_price = float(base_price) - discount_price
                        final_without_margin_price = float(with_out_margin_base_price) - float(discount_price)
                    final_price_list = {
                        "withOutTaxPrice": round(float(price), 2),
                        "basePrice": round(float(base_price), 2),
                        "withOutMarginPrice": round(float(with_out_margin_base_price), 2),
                        "finalWithOutMarginPrice": final_without_margin_price,
                        "discountPrice": round(discount_price, 2),
                        "finalPrice": round(final_price, 2),
                        "discountPercentage": discount_value,
                    }
                    if "brandTitle" in product_details:
                        brand_title = product_details["brandTitle"]["en"]
                        if brand_title == "Array":
                            brand_title = ""
                    else:
                        brand_title = ""

                    # ==============================variant data================================
                    for attr in product_details["units"][0]["attributes"]:
                        if "attrlist" in attr:
                            for attr_data in attr["attrlist"]:
                                try:
                                    if attr_data["linkedtounit"] == 1:
                                        attr_value = ""
                                        if "measurementUnit" in attr_data:
                                            measurement_unit = attr_data["measurementUnit"]
                                        else:
                                            measurement_unit = ""
                                        try:
                                            image = (
                                                res["images"][0]["small"]
                                                if "images" in res
                                                else product["image"][0]["medium"]
                                            )
                                        except:
                                            image = ""
                                        try:
                                            attr_value = (
                                                    str(attr_data["value"][lan])
                                                    + " "
                                                    + str(measurement_unit)
                                            )
                                        except:
                                            attr_value = ""
                                        variantData.append(
                                            {
                                                "attrname": attr_data["attrname"][lan]
                                                if lan in attr_data["attrname"]
                                                else attr_data["attrname"]["en"],
                                                "value": attr_value,
                                                "name": attr_data["attrname"][lan]
                                                if lan in attr_data["attrname"]
                                                else attr_data["attrname"]["en"],
                                            }
                                        )
                                    else:
                                        pass
                                except:
                                    pass
                    if product_details["units"][0]["colorName"] == "":
                        pass
                    else:
                        variantData.append(
                            {
                                "attrname": "Colour",
                                "value": product_details["units"][0]["colorName"],
                                "name": "Colour",
                            }
                        )

                    if "unitSizeGroupValue" in product_details["units"][0]:
                        if type(product_details["units"][0]["unitSizeGroupValue"]) == str:
                            unit_size = product_details["units"][0]["unitSizeGroupValue"]
                        else:
                            if len(product_details["units"][0]["unitSizeGroupValue"]) == 0:
                                unit_size = None
                            else:
                                unit_size = (
                                    product_details["units"][0]["unitSizeGroupValue"][lan]
                                    if lan
                                       in child_product_details["units"][0]["unitSizeGroupValue"]
                                    else child_product_details["units"][0]["unitSizeGroupValue"][
                                        "en"
                                    ]
                                )
                    else:
                        unit_size = 0

                    if unit_size == None or unit_size == 0:
                        pass
                    else:
                        variantData.append({"attrname": "Size", "value": unit_size, "name": "Size"})

                    product_json = {
                        "childProductId": str(product_details["_id"]),
                        "parentProductId": product_id,
                        "productName": product_details["units"][0]["unitName"]["en"]
                        if "units" in product_details
                        else "",
                        "brandName": brand_title,
                        "finalPriceList": final_price_list,
                        "variantData": variantData,
                        "productBestOffer": final_offer,
                        "images": product_details["units"][0]["image"],
                        "images": product_details["units"][0]["image"],
                        "currency": currency,
                        "currencySymbol": currency_symbol,
                    }
                else:
                    product_json = {}
                # =========================end of the part==================================================================
                response_data = {
                    "message": "Data Found",
                    "data": last_color_json,
                    "suppliers": best_supplier_details,
                    "product": product_json,
                }
                return JsonResponse(response_data, safe=False, status=200)
            # else:
            #     response_data = {
            #         "message": "Data Not Found",
            #         "data": [],
            #         "suppliers": {}
            #     }
            #     return JsonResponse(response_data, safe=False, status=404)
            else:
                response_data = {"message": "Data Not Found", "data": [], "suppliers": {}}
                return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    Api for the get the child variant of the product
"""


class ChildVariants(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Products"],
        operation_description="API for getting child variants of the product",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="loginType",
                default="1",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="login type of the user. value should be 1 for retailer and 2 for distributor",
            ),
            openapi.Parameter(
                name="productId",
                required=True,
                default="5df88294e80e605065d3ce1e",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product",
            ),
            openapi.Parameter(
                name="childProductId",
                required=True,
                default="5df8835ce80e605065d3ce25",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product",
            ),
            openapi.Parameter(
                name="storeId",
                required=True,
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id from which store need to get data",
            ),
        ],
        responses={
            200: "successfully. product variants found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required fields are not found. it might be product id not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = (
                request.META["HTTP_AUTHORIZATION"] if "HTTP_AUTHORIZATION" in request.META else ""
            )
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            product_id = request.GET["productId"] if "productId" in request.GET else ""
            variant_product_id = (
                request.GET["childProductId"] if "childProductId" in request.GET else ""
            )
            login_type = request.META["HTTP_LOGINTYPE"] if "HTTP_LOGINTYPE" in request.META else 1
            store_id = request.GET["storeId"] if "storeId" in request.GET else "0"
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            res_unit = {}
            product_data = {}
            manufacure_name = ""
            best_supplier_details = {}
            attr_name = []
            tax_price = 0
            max_quantity = 0
            allow_out_of_stock = False
            res_variant = {}
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            if product_id == "":
                response_data = {
                    "message": "product id empty",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)

            mongo_query = {"parentProductId": str(product_id)}
            if store_id != "" and store_id != "0":
                mongo_query["storeId"] = ObjectId(store_id)
            main_res = db.childProducts.find(mongo_query)
            central_product = db.products.find_one(
                {"_id": ObjectId(product_id)},
                {
                    "replacementPolicy": 1,
                    "warranty": 1,
                    "images": 1,
                    "storeCategoryId": 1,
                    "term&condition": 1,
                    "productSeo": 1,
                    "cashOnDelivery": 1,
                    "brandTitle": 1,
                    "exchangePolicy": 1,
                    "returnPolicy": 1,
                    "offer": 1,
                    "manufactureName": 1,
                    "currency": 1,
                    "currencySymbol": 1,
                    "avgRating": 1,
                    "maxQuantity": 1,
                    "allowOrderOutOfStock": 1,
                    "units": 1,
                },
            )
            supplier_list = []
            if int(login_type) == 1:
                if "suppliers" in central_product["units"][0]:
                    for b_s in central_product["units"][0]["suppliers"]:
                        if b_s["id"] == str(store_id):
                            best_supplier_variant = b_s
                        else:
                            pass
                else:
                    best_supplier_variant = {}
            else:
                try:
                    if "suppliers" in central_product["units"][0]:
                        for b_s in central_product["units"][0]["suppliers"]:
                            if b_s["id"] == str(store_id):
                                best_supplier_variant = b_s
                            else:
                                pass
                    else:
                        best_supplier_variant = {}
                except:
                    best_supplier_variant = {}

            offers_details = []

            if central_product != None:
                if "allowOrderOutOfStock" in central_product:
                    allow_out_of_stock = central_product["allowOrderOutOfStock"]
                else:
                    allow_out_of_stock = False

                if "manufactureName" in central_product:
                    manufacure_name = (
                        central_product["manufactureName"][lan] if lan in central_product else ""
                    )
                else:
                    manufacure_name = ""

                if "brandTitle" in central_product:
                    brand_name = (
                        central_product["brandTitle"][lan] if lan in central_product else ""
                    )
                else:
                    brand_name = ""
            else:
                allow_out_of_stock = False
                manufacure_name = ""

            if len(best_supplier_variant) > 0:
                child_product_details = db.childProducts.find_one(
                    {"_id": ObjectId(best_supplier_variant["productId"])}
                )
                if child_product_details != None:
                    if "offer" in child_product_details:
                        for offer in child_product_details["offer"]:
                            if "offerFor" in offer:
                                if int(login_type) == 1 or int(login_type) != 2:
                                    if offer["offerFor"] == 1 or offer["offerFor"] == 0:
                                        if offer["status"] == 1:
                                            offer_terms = db.offers.find_one(
                                                {"_id": ObjectId(offer["offerId"])}
                                            )
                                            if offer_terms is not None:
                                                if offer_terms["startDateTime"] <= int(time.time()):
                                                    offers_details.append(offer)
                                                else:
                                                    pass
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass
                                else:
                                    if offer["offerFor"] == 0 or offer["offerFor"] == 2:
                                        if offer["status"] == 1:
                                            offer_terms = db.offers.find_one(
                                                {"_id": ObjectId(offer["offerId"])}
                                            )
                                            if offer_terms is not None:
                                                if "startDateTime" in offer_terms:
                                                    if offer_terms["startDateTime"] <= int(time.time()):
                                                        offers_details.append(offer)
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass
                            else:
                                pass
                    else:
                        pass

                if len(offers_details) > 0:
                    best_offer = max(offers_details, key=lambda x: x["discoulogin_typentValue"])
                    offer_details = db.offers.find(
                        {
                            "_id": ObjectId(best_offer["offerId"]),
                            "status": 1,
                            "storeId": best_supplier_variant["id"],
                        }
                    ).count()
                    if offer_details != 0:
                        best_offer = best_offer
                    else:
                        best_offer = {}
                else:
                    best_offer = {}

                if int(login_type) == 1:
                    price = best_supplier_variant["retailerPrice"]
                else:
                    if "distributorPrice" in best_supplier_variant:
                        price = best_supplier_variant["distributorPrice"]
                    else:
                        price = 0
                try:
                    currency_rate = currency_exchange_rate[
                        str(child_product_details["currency"]) + "_" + str(currency_code)
                        ]
                except:
                    currency_rate = 0
                currency_details = db.currencies.find_one({"currencyCode": currency_code})
                if currency_details is not None:
                    currency_symbol = currency_details["currencySymbol"]
                    currency = currency_details["currencyCode"]
                else:
                    currency_symbol = child_product_details["currencySymbol"]
                    currency = child_product_details["currency"]

                if float(currency_rate) > 0:
                    price = price * float(currency_rate)
                else:
                    pass

                if len(best_offer) > 0:

                    discount_type = (
                        int(best_offer["discountType"]) if "discountType" in best_offer else 0
                    )
                    discount_value = (
                        best_offer["discountValue"] if "discountValue" in best_offer else 0
                    )
                else:
                    discount_value = 0
                    discount_type = 2

                if price == 0 or price == "":
                    final_price = 0
                    discount_price = 0
                else:
                    if discount_type == 0:
                        discount_price = float(discount_value)
                    elif discount_type == 1:
                        discount_price = (float(price) * float(discount_value)) / 100
                    else:
                        discount_price = 0

                # ======================for tax ================================================================
                try:
                    tax_value = []
                    if type(child_product_details["tax"]) == list:
                        for tax in child_product_details["tax"]:
                            tax_value.append({"value": tax["taxValue"]})
                    else:
                        if child_product_details["tax"] != None:
                            if "taxValue" in child_product_details["tax"]:
                                tax_value.append(
                                    {"value": child_product_details["tax"]["taxValue"]}
                                )
                            else:
                                tax_value.append({"value": child_product_details["tax"]})
                        else:
                            tax_value = []
                except:
                    tax_value = []

                if central_product["storeCategoryId"] != DINE_STORE_CATEGORY_ID:
                    if len(tax_value) == 0:
                        tax_price = 0
                    else:
                        for amount in tax_value:
                            tax_price = tax_price + (int(amount["value"]))
                else:
                    tax_price = 0

                final_price = price - discount_price
                final_price = final_price + ((final_price * tax_price) / 100)

                # =========================for max quantity=================================================
                if "maxQuantity" in child_product_details:
                    if child_product_details["maxQuantity"] != "":
                        max_quantity = int(child_product_details["maxQuantity"])
                    else:
                        max_quantity = 30
                else:
                    max_quantity = 30
                # ==========================================================================================
                if "prescriptionRequired" in child_product_details:
                    if child_product_details["prescriptionRequired"] == 0:
                        prescription_required = False
                    else:
                        prescription_required = True
                else:
                    prescription_required = False

                if "needsIdProof" in child_product_details:
                    if child_product_details["needsIdProof"] == False:
                        needsIdProof = False
                    else:
                        needsIdProof = True
                else:
                    needsIdProof = False

                product_data = {
                    "productName": child_product_details["units"][0]["unitName"]["en"],
                    "childProductId": best_supplier_variant["productId"],
                    "currencySymbol": currency_symbol,
                    "currency": currency,
                    "parentProductId": product_id,
                    "allowOrderOutOfStock": allow_out_of_stock,
                    "manufactureName": manufacure_name,
                    "images": central_product["units"][0]["image"],
                    "prescriptionRequired": prescription_required,
                    "needsIdProof": needsIdProof,
                    "brandName": brand_name,
                    "offers": best_offer,
                    "maxQuantity": max_quantity,
                    "suppliers": best_supplier_variant,
                    "finalPriceList": {
                        "basePrice": round(price, 2),
                        "discountPrice": round(discount_price, 2),
                        "finalPrice": round(final_price, 2),
                        "discountPercentage": discount_value,
                    },
                }
            # ================================================for the main product loop=================================================
            if main_res.count() > 0:
                color_details = []
                color_list = []
                link_to_unit = []
                link_to_unit_list = []
                last_color_json = []
                last_link_unit = []
                for res in main_res:
                    best_supplier_child = {
                        "id": str(res["storeId"]),
                        "storeName": res["storeName"] if "storeName" in res else {},
                        "productId": str(res["_id"]),
                        "retailerPrice": res["units"][0]["b2cPricing"][0]["b2cproductSellingPrice"],
                        "distributorPrice": res["units"][0]["b2cPricing"][0][
                            "b2cproductSellingPrice"
                        ],
                        "currency": res["currency"],
                        "currencySymbol": res["currencySymbol"],
                        "retailerQty": res["units"][0]["availableQuantity"],
                        "distributorQty": 0,
                    }

                    if len(best_supplier_child) > 0:
                        child_product_data = db.childProducts.find_one(
                            {"_id": ObjectId(best_supplier_child["productId"])}
                        )
                        if child_product_data != None:
                            if best_supplier_child["retailerQty"] > 0:
                                outOfStock = False
                                availableStock = int(best_supplier_child["retailerQty"])
                                child_product_id = best_supplier_child["productId"]
                            else:
                                outOfStock = True
                                availableStock = 0
                                child_product_id = best_supplier_child["productId"]

                            size_list_data = []
                            color_details_data = []
                            size_list = []

                            # loop for the getting the attributes value
                            for attr in child_product_data["units"][0]["attributes"]:
                                for att in attr["attrlist"]:
                                    if "linkedtounit" in att:
                                        if att["linkedtounit"] == 0:
                                            pass
                                        else:
                                            if (
                                                    best_supplier_child["productId"]
                                                    == variant_product_id
                                            ):
                                                visible = True
                                                is_primary = True
                                                best_supplier_details = best_supplier_child
                                            else:
                                                visible = False
                                                is_primary = False

                                            if "prescriptionRequired" in child_product_data:
                                                if child_product_data["prescriptionRequired"] == 0:
                                                    prescription_required = False
                                                else:
                                                    prescription_required = True
                                            else:
                                                prescription_required = False

                                            if "needsIdProof" in child_product_data:
                                                if child_product_data["needsIdProof"] == False:
                                                    needsIdProof = False
                                                else:
                                                    needsIdProof = True
                                            else:
                                                needsIdProof = False

                                            link_to_unit_list.append(att["attrname"][lan])
                                            if "measurementUnit" in att:
                                                measurement_unit = att["measurementUnit"]
                                            else:
                                                measurement_unit = ""
                                            link_to_unit.append(
                                                {
                                                    "name": att["attrname"][lan],
                                                    "value": str(att["value"][lan])
                                                             + " "
                                                             + measurement_unit,
                                                    "keyName": att["attrname"][lan]
                                                    if lan in att["attrname"]
                                                    else att["attrname"]["en"],
                                                    "isPrimary": is_primary,
                                                    "childProductId": best_supplier_child[
                                                        "productId"
                                                    ],
                                                    "unitId": child_product_data["units"][0][
                                                        "unitId"
                                                    ],
                                                    "prescriptionRequired": prescription_required,
                                                    "needsIdProof": needsIdProof,
                                                    "outOfStock": outOfStock,
                                                    "manufactureName": manufacure_name,
                                                    "maxQuantity": max_quantity,
                                                    "allowOrderOutOfStock": allow_out_of_stock,
                                                    "availableStock": availableStock,
                                                    "colourId": best_supplier_child["productId"],
                                                    "image": child_product_data["units"][0][
                                                        "image"
                                                    ][0]["medium"]
                                                    if "image" in child_product_data["units"][0]
                                                    else "",
                                                    "size": str(att["value"][lan])
                                                            + " "
                                                            + measurement_unit,
                                                }
                                            )
                            if "unitSizeGroupValue" in child_product_data["units"][0]:
                                if child_product_data["units"][0]["unitSizeGroupValue"] == "":
                                    size_d = None
                                else:
                                    size_list.append(
                                        {
                                            "childProductId": str(
                                                child_product_data["units"][0]["unitId"]
                                            ),
                                            "size": child_product_data["units"][0][
                                                "unitSizeGroupValue"
                                            ],
                                        }
                                    )
                                    if best_supplier_child["productId"] == variant_product_id:
                                        visible = True
                                        is_primary = True
                                        best_supplier_details = best_supplier_child
                                    else:
                                        visible = False
                                        is_primary = False

                                    if (
                                            type(child_product_data["units"][0]["unitSizeGroupValue"])
                                            == str
                                    ):
                                        unit_size = child_product_data["units"][0][
                                            "unitSizeGroupValue"
                                        ]
                                    else:
                                        if (
                                                len(
                                                    child_product_data["units"][0]["unitSizeGroupValue"]
                                                )
                                                == 0
                                        ):
                                            unit_size = None
                                        else:
                                            unit_size = (
                                                child_product_data["units"][0][
                                                    "unitSizeGroupValue"
                                                ][lan]
                                                if lan in product["_source"]["unitSizeGroupValue"]
                                                else child_product_data["units"][0][
                                                    "unitSizeGroupValue"
                                                ]["en"]
                                            )

                                    if unit_size == None or unit_size == 0:
                                        pass
                                    else:
                                        if "prescriptionRequired" in child_product_data:
                                            if child_product_data["prescriptionRequired"] == 0:
                                                prescription_required = False
                                            else:
                                                prescription_required = True
                                        else:
                                            prescription_required = False

                                        if "needsIdProof" in child_product_data:
                                            if child_product_data["needsIdProof"] == False:
                                                needsIdProof = False
                                            else:
                                                needsIdProof = True
                                        else:
                                            needsIdProof = False
                                        color_details.append(
                                            {
                                                "childProductId": str(
                                                    best_supplier_child["productId"]
                                                ),
                                                "unitId": child_product_data["units"][0]["unitId"],
                                                "keyName": "Sizes",
                                                "isPrimary": is_primary,
                                                "prescriptionRequired": prescription_required,
                                                "needsIdProof": needsIdProof,
                                                "productName": child_product_data["units"][0][
                                                    "unitName"
                                                ][lan],
                                                "outOfStock": outOfStock,
                                                "manufactureName": manufacure_name,
                                                "availableStock": availableStock,
                                                "maxQuantity": max_quantity,
                                                "allowOrderOutOfStock": allow_out_of_stock,
                                                "colourId": str(best_supplier_child["productId"]),
                                                "name": unit_size,
                                                "rgb": str("rgb(")
                                                       + child_product_data["units"][0]["color"]
                                                       + ")",
                                                "image": child_product_data["units"][0]["image"][0][
                                                    "medium"
                                                ]
                                                if "image" in child_product_data["units"][0]
                                                else "",
                                                "size": unit_size,
                                            }
                                        )
                                        color_list.append("Sizes")

                            if "colorName" in child_product_data["units"][0]:
                                if child_product_data["units"][0]["colorName"] == "":
                                    pass
                                else:
                                    color_details_data.append(
                                        {
                                            "name": child_product_data["units"][0]["colorName"],
                                            "rgb": str("rgb(")
                                                   + child_product_data["units"][0]["color"]
                                                   + ")",
                                            "image": child_product_data["units"][0]["image"][0][
                                                "medium"
                                            ]
                                            if "image" in child_product_data["units"][0]
                                            else "",
                                        }
                                    )
                                    if best_supplier_child["productId"] == variant_product_id:
                                        visible = True
                                        is_primary = True
                                        best_supplier_details = best_supplier_child
                                    else:
                                        visible = False
                                        is_primary = False

                                    if "prescriptionRequired" in child_product_data:
                                        if child_product_data["prescriptionRequired"] == 0:
                                            prescription_required = False
                                        else:
                                            prescription_required = True
                                    else:
                                        prescription_required = False

                                    if "needsIdProof" in child_product_data:
                                        if child_product_data["needsIdProof"] == False:
                                            needsIdProof = False
                                        else:
                                            needsIdProof = True
                                    else:
                                        needsIdProof = False
                                    color_details.append(
                                        {
                                            "childProductId": str(best_supplier_child["productId"]),
                                            "unitId": child_product_data["units"][0]["unitId"],
                                            "prescriptionRequired": prescription_required,
                                            "needsIdProof": needsIdProof,
                                            "keyName": "Colors",
                                            "productName": child_product_data["units"][0][
                                                "unitName"
                                            ][lan],
                                            "outOfStock": outOfStock,
                                            "maxQuantity": max_quantity,
                                            "manufactureName": manufacure_name,
                                            "allowOrderOutOfStock": allow_out_of_stock,
                                            "availableStock": availableStock,
                                            "isPrimary": is_primary,
                                            "colourId": str(best_supplier_child["productId"]),
                                            "name": child_product_data["units"][0]["colorName"],
                                            "rgb": str("rgb(")
                                                   + child_product_data["units"][0]["color"]
                                                   + ")",
                                            "image": child_product_data["units"][0]["image"][0][
                                                "medium"
                                            ]
                                            if "image" in child_product_data["units"][0]
                                            else "",
                                            "size": child_product_data["units"][0]["colorName"],
                                        }
                                    )
                                    color_list.append("Colors")

                for d in color_details:
                    res_variant.setdefault(d["keyName"], []).append(
                        {
                            "childProductId": d["childProductId"],
                            "size": d["size"],
                            "keyName": d["keyName"],
                            "rgb": d["rgb"],
                            "name": d["name"],
                            "prescriptionRequired": d["prescriptionRequired"],
                            "needsIdProof": d["needsIdProof"] if "needsIdProof" in d else False,
                            "isPrimary": d["isPrimary"],
                            "image": d["image"],
                            "manufactureName": d["manufactureName"],
                            "maxQuantity": d["maxQuantity"],
                            "allowOrderOutOfStock": d["allowOrderOutOfStock"],
                            "colourId": d["colourId"],
                            "unitId": d["unitId"],
                            "productName": d["productName"],
                            "outOfStock": d["outOfStock"],
                            "availableStock": d["availableStock"],
                        }
                    )

                # =============================part of the link unit data===================================================
                for link in link_to_unit:
                    res_unit.setdefault(link["keyName"], []).append(
                        {
                            "childProductId": link["childProductId"],
                            "size": link["size"],
                            "keyName": link["keyName"],
                            "isPrimary": link["isPrimary"],
                            "name": link["name"],
                            "manufactureName": link["manufactureName"],
                            "maxQuantity": link["maxQuantity"],
                            "allowOrderOutOfStock": link["allowOrderOutOfStock"],
                            "prescriptionRequired": link["prescriptionRequired"],
                            "needsIdProof": link["needsIdProof"]
                            if "needsIdProof" in link
                            else False,
                            "image": link["image"],
                            "colourId": link["colourId"],
                            "unitId": link["unitId"],
                        }
                    )

                for link_unit in list(set(link_to_unit_list)):
                    try:
                        newlist = sorted(res_unit[link_unit], key=lambda k: k["isPrimary"])
                        dataframe_unit_details = pd.DataFrame(newlist)
                        dataframe_unit_details = dataframe_unit_details.drop_duplicates(
                            "size", keep="last"
                        )
                        dataframe_unit_details = dataframe_unit_details.dropna(
                            subset=["size"], axis=0
                        )
                        link_unit_data = dataframe_unit_details.to_json(orient="records")
                        link_unit_data = json.loads(link_unit_data)
                        if not any(d["isPrimary"] == True for d in res_unit[link_unit]):
                            is_primary = False
                        else:
                            is_primary = True

                        if res_unit[link_unit][0]["size"] != "":
                            last_color_json.append(
                                {
                                    "centralProductId": product_id,
                                    "name": res_unit[link_unit][0]["keyName"],
                                    "keyName": res_unit[link_unit][0]["keyName"],
                                    "childProductId": res_unit[link_unit][0]["childProductId"],
                                    "maxQuantity": res_unit[link_unit][0]["maxQuantity"],
                                    "allowOrderOutOfStock": res_unit[link_unit][0][
                                        "allowOrderOutOfStock"
                                    ],
                                    "manufactureName": res_unit[link_unit][0]["manufactureName"],
                                    "isPrimary": is_primary,
                                    "sizeData": link_unit_data,
                                    "image": res_unit[link_unit][0]["image"],
                                    "unitId": res_unit[link_unit][0]["unitId"],
                                }
                            )
                    except:
                        pass

                # =========================end of the part==================================================================
                for color in list(set(color_list)):
                    try:
                        newlist = sorted(res_variant[color], key=lambda k: k["isPrimary"])
                        dataframe_details = pd.DataFrame(newlist)
                        dataframe_details = dataframe_details.drop_duplicates("size", keep="last")
                        dataframe_details = dataframe_details.dropna(subset=["size"], axis=0)
                        color_data = dataframe_details.to_json(orient="records")
                        color_data = json.loads(color_data)

                        if not any(d["isPrimary"] == True for d in color_data):
                            is_primary = False
                        else:
                            is_primary = True

                        if res_variant[color][0]["size"] != "":
                            last_color_json.append(
                                {
                                    "centralProductId": product_id,
                                    "name": res_variant[color][0]["keyName"],
                                    "keyName": res_variant[color][0]["keyName"],
                                    "isPrimary": is_primary,
                                    "rgb": res_variant[color][0]["rgb"],
                                    "childProductId": res_variant[color][0]["childProductId"],
                                    "maxQuantity": res_variant[color][0]["maxQuantity"],
                                    "manufactureName": res_variant[color][0]["manufactureName"],
                                    "allowOrderOutOfStock": res_variant[color][0][
                                        "allowOrderOutOfStock"
                                    ],
                                    "sizeData": color_data,
                                    "image": res_variant[color][0]["image"],
                                    "unitId": res_variant[color][0]["unitId"],
                                }
                            )
                    except:
                        pass

                if len(best_supplier_details) > 0:
                    if best_supplier_details["id"] == "0":
                        best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                        best_supplier_details["rating"] = 0
                    else:
                        store_response = db.stores.find_one(
                            {"_id": ObjectId(best_supplier_details["id"])},
                            {"storeName": 1, "avgRating": 1},
                        )
                        try:
                            if store_response != None:
                                best_supplier_details["supplierName"] = store_response["storeName"][
                                    "en"
                                ]
                                best_supplier_details["rating"] = (
                                    store_response["avgRating"]
                                    if "avgRating" in store_response
                                    else 0
                                )
                            else:
                                best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                                best_supplier_details["rating"] = 0
                        except:
                            best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                            best_supplier_details["rating"] = 0
                else:
                    best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                    best_supplier_details["rating"] = 0

                if len(last_color_json) > 0:
                    response_data = {
                        "message": "Data Found",
                        "data": last_color_json,
                        "product": product_data,
                        "suppliers": best_supplier_details,
                    }
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {
                        "message": "Data Found",
                        "data": last_link_unit,
                        "product": product_data,
                        "suppliers": best_supplier_details,
                    }
                    return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
	Function for the add the redemption logs of the offers
"""


def offer_redemption_logs(
        offerId,
        bookingId,
        originalAmonut,
        userId,
        finalAmount,
        discount,
        parentProductId,
        childProductId,
        quantity,
):
    try:
        start_time = time.time()
        currdate = datetime.datetime.now()
        eastern = timezone("Asia/Kolkata")
        store_id = "0"
        supplier_id = "0"
        currlocal = eastern.localize(currdate)
        currlocaltimestamp = currlocal.timestamp()
        currlocalISO = datetime.datetime.fromtimestamp(currlocaltimestamp)
        if offerId == "":
            pass
        else:
            offerdeatils = db.offers.find({"$and": [{"_id": ObjectId(offerId)}]})
            for j in offerdeatils:
                store_id = j["storeId"]
                supplier_id = j["supplierId"] if "supplierId" in j else "0"
                if j["globalClaimCount"] < j["globalUsageLimit"]:
                    globalClaimCount = int(j["globalClaimCount"]) + 1
                    if globalClaimCount >= j["globalUsageLimit"]:
                        header = {
                            "Authorization": "Bearer eyJhbGciOiJSU0EtT0FFUCIsImN0eSI6IkpXVCIsImVuYyI6IkExMjhHQ00iLCJ0eXAiOiJKV1QifQ.CqbzCmSWFzoMqiLBy4UyARim3khqGBLYXRYVfPhkkGSmjcEO5MqJmqSArFxjvitmC0LVeYL4LDH67A-P21Fdq6rVKYNbf90M7DsSpvN_QbmcxohG5q-WBJsWaEE18EhiNp1JmSg__-gBQPsa_0oHZqMYm71qdoQn3dVasfpsTyU.Cr6R5y5L5VOJ1Mlj.84aKnoemdkN2Q6sMOqdMaSPwp7szKbwNjFN7yAQpKfesESHhK0g5Np87eyjDGpYCG_Lg2Rl0FZntD4GbEztLn5-mZ-znE3G_5VEX57sucx7CzzQpXSFdi3cRQppS95u-q4ZxSrNnYPFvOABq-89Zh7OEG38fnDFOxuQ06zGGaJvNOifE1Sj3ikFMtF4pklDAnidqONG96PlY5yLXRVWkHAWFcOTkJ0i62EqtQDTsCF-w7k_stRLpCRLT8_tu4SsCiMkgZtGkJV6M2Zhl8ertHkwODsCCjxRHq3txLfuHUMXUQDFwKU_dPntAEZKaeB6tbt025PcxLX-hWdJla0v9SK34TRBll03-fgTaDCrU14FBvTnETmZV0ZWSbmZjN_Sy4xxxRYknBsuB7Zdj2n0t3F2xJ0s-2crQEm98ScEwrirsgsvX1EXwxmqB0NbCb_X4tqICqwk1Zj-lSYUgaTSuLH2DDygqCUTxwO5_q0yZRGd4IhsRGWO4q3PIVjwbCV-Aceon2naFIXxASfVqvq-ll7TY9TKvM93c_vkcPaPZXRY1RqxFj6aisIzT_xuuxPE-ZcwvQA6XB-n-w1IGxqKh7kzzF_TRQRv7X8-CX-_-RlaFZMd9hA2r91HQuwh8bQ_-Az_BvvY-R7y917BNjJl-gTTCqn264UAvUeYLTUJ-fKFeW496otk7eFkmklMPA7NVypy-ohACoQEGcabl0MITpCj_cz275wGwIb2iYSDd_RZENfRmo8oN2c4rndsunv8Gr8Mpa7MfONMNEAJZuQRKSdRFsrSZHCFTXELw9R_cmFi2LVQXAw1U0brIKRAPO6wuL3hK5JoLuQGEkw724B68Bch6L4sdMGst4d0k9oQpPLma2zAaWPZUvHs8oKE5v-f72CqhkbtNIqtykhN68ZCjQ9Ib5pc2SUTCR054USzhR6bamDvUCWhRfopMSohrG-glkyTVMZHq117fwtoS7GrD3i6chsPDEbhvOd4DcE35gFmjMTp4U3jKLLgu874Rx9Pe6amqApjxdeTvvgHv3LZ3l0Y3nEZfGPLWjUXHFMQw9oykOC94jRRHupZmZ9Op9WCXP137dqe8xa5jFl9AYxyJY1IO_hx9ov33B4sFaKgxDR8uR5_kGKVF9mntieU3vp_gIR9VW__-h-U7diQPyaEAAB8DCzXlMebgWiLm4Yajj9OLkjRCM5oVAootNfV0d4UPurEJPdLT15SyhNmOdnkncYuiZbtsiYcz-XCArF7xgyDspARjdzHUPL8m2SEzkvj4jT9BGB9W8mHmkRFFxvfyPZoAxSWymM30zh9jSk9JyqvU3wNhjIaj86GnpG7DtQuK-bjV1sSRMissnZ6i.EvmepE1SToihc70ffQfHkA"
                        }
                        expiredata = {
                            "data": {"offerId": offerId, "storeId": store_id, "status": 3}
                        }
                        expireOffer = requests.patch(
                            SERVER + "offerStatus/", json=expiredata, headers=header
                        )
                        error_message = {"error": "offer expired"}
                        return JsonResponse(error_message, status=412)
                else:
                    header = {
                        "Authorization": "Bearer eyJhbGciOiJSU0EtT0FFUCIsImN0eSI6IkpXVCIsImVuYyI6IkExMjhHQ00iLCJ0eXAiOiJKV1QifQ.CqbzCmSWFzoMqiLBy4UyARim3khqGBLYXRYVfPhkkGSmjcEO5MqJmqSArFxjvitmC0LVeYL4LDH67A-P21Fdq6rVKYNbf90M7DsSpvN_QbmcxohG5q-WBJsWaEE18EhiNp1JmSg__-gBQPsa_0oHZqMYm71qdoQn3dVasfpsTyU.Cr6R5y5L5VOJ1Mlj.84aKnoemdkN2Q6sMOqdMaSPwp7szKbwNjFN7yAQpKfesESHhK0g5Np87eyjDGpYCG_Lg2Rl0FZntD4GbEztLn5-mZ-znE3G_5VEX57sucx7CzzQpXSFdi3cRQppS95u-q4ZxSrNnYPFvOABq-89Zh7OEG38fnDFOxuQ06zGGaJvNOifE1Sj3ikFMtF4pklDAnidqONG96PlY5yLXRVWkHAWFcOTkJ0i62EqtQDTsCF-w7k_stRLpCRLT8_tu4SsCiMkgZtGkJV6M2Zhl8ertHkwODsCCjxRHq3txLfuHUMXUQDFwKU_dPntAEZKaeB6tbt025PcxLX-hWdJla0v9SK34TRBll03-fgTaDCrU14FBvTnETmZV0ZWSbmZjN_Sy4xxxRYknBsuB7Zdj2n0t3F2xJ0s-2crQEm98ScEwrirsgsvX1EXwxmqB0NbCb_X4tqICqwk1Zj-lSYUgaTSuLH2DDygqCUTxwO5_q0yZRGd4IhsRGWO4q3PIVjwbCV-Aceon2naFIXxASfVqvq-ll7TY9TKvM93c_vkcPaPZXRY1RqxFj6aisIzT_xuuxPE-ZcwvQA6XB-n-w1IGxqKh7kzzF_TRQRv7X8-CX-_-RlaFZMd9hA2r91HQuwh8bQ_-Az_BvvY-R7y917BNjJl-gTTCqn264UAvUeYLTUJ-fKFeW496otk7eFkmklMPA7NVypy-ohACoQEGcabl0MITpCj_cz275wGwIb2iYSDd_RZENfRmo8oN2c4rndsunv8Gr8Mpa7MfONMNEAJZuQRKSdRFsrSZHCFTXELw9R_cmFi2LVQXAw1U0brIKRAPO6wuL3hK5JoLuQGEkw724B68Bch6L4sdMGst4d0k9oQpPLma2zAaWPZUvHs8oKE5v-f72CqhkbtNIqtykhN68ZCjQ9Ib5pc2SUTCR054USzhR6bamDvUCWhRfopMSohrG-glkyTVMZHq117fwtoS7GrD3i6chsPDEbhvOd4DcE35gFmjMTp4U3jKLLgu874Rx9Pe6amqApjxdeTvvgHv3LZ3l0Y3nEZfGPLWjUXHFMQw9oykOC94jRRHupZmZ9Op9WCXP137dqe8xa5jFl9AYxyJY1IO_hx9ov33B4sFaKgxDR8uR5_kGKVF9mntieU3vp_gIR9VW__-h-U7diQPyaEAAB8DCzXlMebgWiLm4Yajj9OLkjRCM5oVAootNfV0d4UPurEJPdLT15SyhNmOdnkncYuiZbtsiYcz-XCArF7xgyDspARjdzHUPL8m2SEzkvj4jT9BGB9W8mHmkRFFxvfyPZoAxSWymM30zh9jSk9JyqvU3wNhjIaj86GnpG7DtQuK-bjV1sSRMissnZ6i.EvmepE1SToihc70ffQfHkA"
                    }
                    expiredata = {"data": {"offerId": offerId, "storeId": store_id, "status": 3}}
                    expireOffer = requests.patch(
                        SERVER + "offerStatus/", json=expiredata, headers=header
                    )
                    error_message = {"error": "c"}
                    return JsonResponse(error_message, status=412)

                db.offers.update(
                    {"_id": ObjectId(offerId)},
                    {"$set": {"globalClaimCount": int(globalClaimCount)}},
                )

                order_data = db.storeOrder.find_one(
                    {"products.productOrderId": bookingId}, {"masterOrderId": 1, "storeOrderId": 1}
                )
                if order_data != None:
                    master_order_id = order_data["masterOrderId"]
                    store_order_id = order_data["storeOrderId"]
                else:
                    master_order_id = "N/A"
                    store_order_id = "N/A"

                user_details = db.customer.find_one(
                    {"_id": ObjectId(userId)}, {"firstName": 1, "lastName": 1}
                )
                if user_details == None:
                    user_name = "N/A"
                else:
                    user_name = user_details["firstName"] + " " + user_details["lastName"]

                db.offerRedemptionLogs.insert(
                    {
                        "offerId": offerId,
                        "bookingId": bookingId,
                        "masterOrderId": master_order_id,
                        "storeOrderId": store_order_id,
                        "userName": user_name,
                        "userId": userId,
                        "status": 1,
                        "parentProductId": parentProductId,
                        "childProductId": childProductId,
                        "quantity": quantity,
                        "statusMsg": "Redeemed",
                        "originalAmonut": int(originalAmonut),
                        "finalAmount": int(finalAmount),
                        "timeStamp": int(currlocaltimestamp),
                        "discount": discount,
                        "timeStampISO": currlocalISO,
                    }
                )
            if store_id == "0" and store_id == "":
                db.products.update(
                    {"offer.offerId": offerId},
                    {
                        "$set": {
                            "offer.$.globalClaimCount": globalClaimCount,
                        }
                    },
                    upsert=False,
                )
            else:
                db.childProducts.update(
                    {"offer.offerId": offerId},
                    {
                        "$set": {
                            "offer.$.globalClaimCount": globalClaimCount,
                        }
                    },
                    upsert=False,
                )

        success_message = {
            "message": "Successfully Inserted",
            "status": 1,
        }
        return success_message
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        error_message = {"data": [], "message": message}
        return error_message


"""
	Function for the add the redemption logs of the offers
"""


def offer_redemption_patch_logs(offerId, bookingId, userId):
    try:
        start_time = time.time()
        if offerId == "":
            pass
        else:
            offerdeatils = db.offers.find({"$and": [{"_id": ObjectId(offerId)}]})
            for j in offerdeatils:
                globalClaimCount = int(j["globalClaimCount"]) - 1

                db.offers.update(
                    {"_id": ObjectId(offerId)},
                    {"$set": {"globalClaimCount": int(globalClaimCount)}},
                )
                db.offerRedemptionLogs.update(
                    {
                        "offerId": str(offerId),
                        "bookingId": bookingId,
                        "offerId": offerId,
                        "userId": userId,
                    },
                    {"$set": {"status": 2}},
                    upsert=True,
                    multi=False,
                )

                # db.offers.update({
                #     '_id': ObjectId(offerId),
                #     "redemption.bookingId": bookingId,
                #     "redemption.offerId": offerId,
                #     "redemption.userId": userId
                # },
                #     {
                #     '$pull':
                #     {
                #         # 'redemption.$.status': 2,
                #         # 'redemption.$.statusMsg': "Cancelled"
                #         'redemption': {
                #             '_id': ObjectId(offerId),
                #             "redemption.bookingId": bookingId,
                #             "redemption.offerId": offerId,
                #             "redemption.userId": userId
                #         }
                #     }
                # }, upsert=False)
                # db.products.update({
                #     'offer.offerId': offerId
                # }, {'$set': {
                #     "offer.$.globalClaimCount": globalClaimCount,
                # }
                # }, upsert=False)

                res_offer_col = es.update(
                    index=index_offers,
                    doc_type=doc_type_offers,
                    id=offerId,
                    body={"doc": {"globalClaimCount": int(globalClaimCount)}},
                )
            # if store_id == "0" and store_id == "":
            #     productsdetails = db.products.find(
            #         {"$and": [{"offer.offerId": offerId}]})
            #     for i in productsdetails:
            #         res = es.update(index=index_central_product, # doc_type=doc_central_product, id=str(i['_id']),
            #                         body={"doc": {"offer": i["offer"]}})
            # else:
            #     productsdetails = db.childProducts.find(
            #         {"$and": [{"offer.offerId": offerId}]})
            #     for i in productsdetails:
            #         res = es.update(index=index_products, doc_type=doc_type_products, id=str(i['_id']),
            #                         body={"doc": {"offer": i["offer"]}})

        success_message = {
            "message": "Successfully Inserted",
            "status": 1,
        }
        return success_message
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        error_message = {"data": [], "message": message}
        return error_message


"""
    API for the redemption for the offers
"""


class redemption(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Offer Redemption"],
        operation_description="API for post the redemption for the offers",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["data"],
            properties={
                "data": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    description="array of the data or object",
                    items=openapi.Items(
                        type=openapi.TYPE_OBJECT,
                        required=[
                            "offerId",
                            "bookingId",
                            "userId",
                            "originalAmonut",
                            "finalAmount",
                            "discount",
                        ],
                        properties={
                            "bookingId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdfe",
                                description="booking or order id of the users order",
                            ),
                            "userId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdff",
                                description="user id of the user by whom order was placed",
                            ),
                            "originalAmonut": openapi.Schema(
                                type=openapi.TYPE_INTEGER,
                                default=300,
                                description="original amount of the order",
                            ),
                            "finalAmount": openapi.Schema(
                                type=openapi.TYPE_INTEGER,
                                default=250,
                                description="final amount of the order after tax and discount applied",
                            ),
                            "discount": openapi.Schema(
                                type=openapi.TYPE_INTEGER,
                                default=50,
                                description="total discount amount of the order",
                            ),
                            "offerId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="offer id of the product if offer is there else empty string",
                            ),
                        },
                    ),
                ),
            },
        ),
        responses={
            200: "successfully. offers redemption stored",
            412: "limit exceed. if offer limit was exceed for the user",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            start_time = time.time()
            request_data = request.data["data"]
            print(request_data)
            for re_data in request_data:
                discount_amaount = (
                    re_data["discount"]
                    if "discount" in re_data
                    else int(re_data["originalAmonut"]) - int(re_data["finalAmount"])
                )
                if "offerId" in re_data:
                    thread1 = threading.Thread(
                        target=offer_redemption_logs,
                        args=(
                            re_data["offerId"],
                            re_data["bookingId"],
                            re_data["originalAmonut"],
                            re_data["userId"],
                            re_data["finalAmount"],
                            discount_amaount,
                            re_data["parentProductId"],
                            re_data["childProductId"],
                            re_data["quantity"],
                        ),
                    )
                    thread1.start()
                else:
                    success_message = {
                        "message": "Offer id is missing",
                        "status": 1,
                    }
                    return JsonResponse(success_message, safe=False, status=422)
            success_message = {
                "message": "Successfully Inserted",
                "status": 1,
            }
            return JsonResponse(success_message, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"data": [], "message": message}
            return JsonResponse(error_message, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["Offer Redemption"],
        operation_description="API for patch the redemption for the offers while offer cancelled or rejected",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["data"],
            properties={
                "data": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    description="array of the data or object",
                    items=openapi.Items(
                        type=openapi.TYPE_OBJECT,
                        required=["offerId", "bookingId", "userId"],
                        properties={
                            "bookingId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdfe",
                                description="booking or order id of the users order",
                            ),
                            "userId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                default="5df85105e80e605065d3cdff",
                                description="user id of the user by whom order was placed",
                            ),
                            "offerId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="offer id of the product if offer is there else empty string",
                            ),
                        },
                    ),
                ),
            },
        ),
        responses={
            200: "successfully. offers redemption updated.",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            start_time = time.time()
            request_data = request.data["data"]
            for re_data in request_data:
                thread1 = threading.Thread(
                    target=offer_redemption_patch_logs,
                    args=(re_data["offerId"], re_data["bookingId"], re_data["userId"]),
                )
                thread1.start()
            success_message = {
                "message": "Successfully Inserted",
                "status": 1,
            }
            return JsonResponse(success_message, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"data": [], "message": message}
            return JsonResponse(error_message, status=500)


class Seller(APIView):
    """
    Get All sellers details
    """

    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            status = request.GET["status"] if "status" in request.GET else 1
            from_page = request.GET["from"] if "from" in request.GET else 0
            to_page = request.GET["to"] if "to" in request.GET else 10
            seller_list = []
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            seller_details = (
                db.stores.find({"status": int(status)}).skip(int(from_page)).limit(int(to_page))
            )
            seller_count = db.stores.find({"status": int(status)}).count()
            if seller_details.count() > 0:
                for seller_data in seller_details:
                    if seller_data["parentStore"] == 1:
                        parent_store = db.stores.find_one({"_id": ObjectId(seller_data["_id"])})
                        parentStoreName = parent_store["storeName"]
                    else:
                        parentStoreName = ""

                    if "cityName" in seller_data:
                        city_name = seller_data["cityName"]
                    else:
                        city_name = ""
                    seller_list.append(
                        {
                            "_id": str(seller_data["_id"]),
                            "businessLocationAddress": seller_data["businessLocationAddress"],
                            "billingAddress": seller_data["billingAddress"]
                            if "billingAddress" in seller_data
                            else {},
                            "headOffice": seller_data["headOffice"]
                            if "headOffice" in seller_data
                            else {},
                            "cityName": city_name,
                            "logoImages": seller_data["logoImages"],
                            "bannerImages": seller_data["bannerImages"],
                            "galleryImages": seller_data["galleryImages"],
                            "cityId": seller_data["cityId"],
                            "citiesOfOperation": seller_data["citiesOfOperation"],
                            "parentStore": parentStoreName if parentStoreName != "" else "",
                            "parentSellerIdOrSupplierId": seller_data["parentSellerIdOrSupplierId"],
                            "storeName": seller_data["storeName"][language],
                            "address": seller_data["headOffice"]["headOfficeAddress"]
                            if "headOfficeAddress" in seller_data["headOffice"]
                            else "",
                            "categoryName": seller_data["categoryName"],
                            "categoryId": seller_data["categoryId"],
                            "sellerTypeId": seller_data["sellerTypeId"],
                            "sellerType": seller_data["sellerType"],
                            "statusLogs": seller_data["statusLogs"],
                            "status": seller_data["status"],
                            "registrationDateTimeStamp": seller_data["registrationDateTimeStamp"],
                            "storeFrontTypeId": seller_data["storeFrontTypeId"],
                            "storeFrontType": seller_data["storeFrontType"],
                            "buyerAccountId": seller_data["buyerAccountId"],
                            "buyerAccountLinked": True
                            if seller_data["buyerAccountId"] != ""
                            else False,
                        }
                    )
                response = {
                    "data": seller_list,
                    "total_count": seller_count,
                    "message": "Seller Found SuccesFully",
                }
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"data": [], "message": "data not found"}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


class SellerFilter(APIView):
    """
    API for seller filter
    sorting: 0 for popularity
             1 for rating low to high
             2 for rating high to low
    """

    # swagger_schema = None
    @swagger_auto_schema(
        method="post",
        tags=["Store Search & Filter"],
        operation_description="API for seller filter",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["from", "to", "latitude", "longitude"],
            properties={
                "from": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    default=0,
                    description="from where need to get data for pagination",
                ),
                "to": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    default=20,
                    example=20,
                    description="how many data need get for pagination",
                ),
                "sort": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    default=0,
                    description="sort the store by the popularity or rating. value should ne 0 for popularity ,1 for rating low to high, 2 for rating high to low",
                ),
                "sellerTypeId": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    default=1,
                    description="seller type id for the filter the store by seller type."
                                "value should be 1-retailer, 2- Distributor, 3-Wholesaler, 4-manufacturer, 5- Boutique, 6- Artisan, 7-designer",
                ),
                "storeFrontTypeId": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    default=1,
                    description="store front type id for the filter the store by store front type."
                                "value should be 0 for all stores, 1-singleLocation, 2-multiLocation(ParentStore), 3-promoter(Re-seller or Affililiate), 4-full-fillmentCenter(FC), 5-distributionCenter(DC), 6-Store front for parent store",
                ),
                "status": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    default=1,
                    description="status of the store for which status data need to get",
                ),
                "categoryId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default=ECOMMERCE_STORE_CATEGORY_ID,
                    example=ECOMMERCE_STORE_CATEGORY_ID,
                    description="store category id for the which category data we need to get",
                ),
                "cityId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="5df7b7218798dc2c1114e6bf",
                    example="5df7b7218798dc2c1114e6bf",
                    description="city id for the which city store we need to get",
                ),
                "zoneId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="5df8b6ea8798dc19d926bd28",
                    example="5df8b6ea8798dc19d926bd28",
                    description="zone id for the which zone store we need to get",
                ),
                "name": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="reliance",
                    example="reliance",
                    description="store name for the search the store by name of the store",
                ),
                "attributeName": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="Fabrics, Styles",
                    example="Fabrics, Styles",
                    description="while need to filter data by the Attribute Name. value should be multiple with comma seprated",
                ),
                "attributeValues": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    default="dresses, Silk",
                    example="dresses, Silk",
                    description="while need to filter data by the Attribute Name that time need to send the value of the selected attribute value. value should be multiple with comma seprated",
                ),
                "isExpressDelivery": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    default=False,
                    description="is store have express delivery(for laundry). value for express delivery True",
                ),
                "latitude": openapi.Schema(
                    default="12.9716",
                    example="12.9716",
                    type=openapi.TYPE_STRING,
                    description="latitude of the user where website or application opened",
                ),
                "longitude": openapi.Schema(
                    default="77.5946",
                    example="77.5946",
                    type=openapi.TYPE_STRING,
                    description="longitude of the user where website or application opened",
                ),
                "orderType": openapi.Schema(
                    default="1",
                    example="1",
                    type=openapi.TYPE_STRING,
                    description="for apply the filter on based on order type delivery or pickup. value should be 1 for delivery and 2 for pickup",
                ),
                "laterBookingDate": openapi.Schema(
                    default="2020-08-19 14:00:00",
                    example="2020-08-19 14:00:00",
                    type=openapi.TYPE_STRING,
                    description="date which for selected for the later booking",
                ),
            },
        ),
        responses={
            200: "store data found successfully",
            401: "unauthorized",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "total_count": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            query = []  # {}
            jsondata = []
            try:
                user_latitude = float(request.data["latitude"]) if "latitude" in request.data else 0
            except:
                user_latitude = 0

            try:
                user_longitude = (
                    float(request.data["longitude"]) if "longitude" in request.data else 0
                )
            except:
                user_longitude = 0

            if "categoryId" in request.data:
                category_id = request.data["categoryId"]

            if "storeCategoryId" in request.data:
                category_id = request.data["storeCategoryId"]

            try:
                request_data = json.loads(request.data)
            except:
                request_data = request.data
            sorting_data = request.data["sort"] if "sort" in request.data else 0

            try:
                user_id = json.loads(token)["userId"]
            except:
                user_id = ""

            if "id" in request.data:
                Id = request.data["id"]
                query.append({"match": {"_id": str(Id)}})

                # query['_id'] = Id

            if "cityId" in request.data:
                cityId = request.data["cityId"]
                query.append({"match": {"cityId": str(cityId)}})
                # query['cityId'] = cityId

            if "storeCategoryId" in request.data:
                categoryId = request.data["storeCategoryId"]
                query.append({"match": {"categoryId": str(categoryId)}})
            if "supplierType" in request.data:
                supplier_type = request.data["supplierType"]
                query.append({"match": {"supplierType": int(supplier_type)}})
            else:
                query.append({"match": {"supplierType": 1}})

            if "categoryId" in request.data:
                categoryId = request.data["categoryId"]
                query.append({"match": {"categoryId": str(categoryId)}})
                # query['categoryId'] = categoryId

            if "isExpressDelivery" in request.data:
                if request.data["isExpressDelivery"] == 0:
                    pass
                else:
                    express_delivery = request.data["isExpressDelivery"]
                    query.append({"match": {"isExpressDelivery": int(express_delivery)}})
                    # query['isExpressDelivery'] = int(express_delivery)

            if "zoneId" in request.data:
                zoneId = request.data["zoneId"]
                query.append({"match": {"serviceZones.zoneId": str(zoneId)}})
                # query['serviceZones.zoneId'] = zoneId

            if "name" in request.data:
                if request.data["name"] != "":
                    name = request.data["name"]
                    query.append({"match_phrase_prefix": {"storeName.en": str(name)}})
                # query['storeName.en'] = {'$regex': name, '$options': 'i'}

            if "sellerTypeId" in request.data:
                try:
                    if category_id == "5e6115b3a13e000016003b67":
                        sellerTypeId = int(4)
                    else:
                        sellerTypeId = request.data["sellerTypeId"]
                    if sellerTypeId != "":
                        query.append({"match": {"sellerTypeId": int(sellerTypeId)}})
                except:
                    sellerTypeId = request.data["sellerTypeId"]
                    if sellerTypeId != "":
                        query.append({"match": {"sellerTypeId": int(sellerTypeId)}})

            if "storeFrontTypeId" in request.data:
                storeFrontTypeId = request.data["storeFrontTypeId"]
                if storeFrontTypeId != "":
                    if int(storeFrontTypeId) != 0:
                        query.append({"match": {"storeFrontTypeId": int(storeFrontTypeId)}})

            if "orderType" in request.data:
                order_type = request.data["orderType"]
                if order_type != "":
                    query.append({"terms": {"supportedOrderTypes": [int(order_type), 3]}})
                    # query['storeFrontTypeId'] = int(storeFrontTypeId)

            if "parentSellerIdOrSupplierId" in request.data:
                parentSellerIdOrSupplierId = request.data["parentSellerIdOrSupplierId"]
                query.append({"match": {"parentSellerIdOrSupplierId": parentSellerIdOrSupplierId}})

            if "attributeName" in request.data:
                query.append(
                    {
                        "match": {
                            "storeAttributes.attributeName."
                            + language: request.data["attributeName"]
                        }
                    }
                )
                query.append(
                    {
                        "match": {
                            "storeAttributes.values.ValueText."
                            + language: request.data["attributeValues"]
                        }
                    }
                )

            range_next_close = {}
            if "laterBookingDate" in request.data:
                format_date = datetime.datetime.strptime(
                    request.data["laterBookingDate"], "%Y-%m-%d %H:%M:%S"
                )
                end_date = int(format_date.timestamp())
                start_date = int(datetime.datetime.now().timestamp()) + 19800
                query.append(
                    {"range": {"nextCloseTime": {"gte": start_date, "lte": end_date, "boost": 1}}}
                )

            if "status" in request.data:
                status = request.data["status"]
                # query['status'] = int(status)
            else:
                status = 1
            query.append({"match": {"status": int(status)}})

            if "from" in request.data:
                skip = request.data["from"]
            elif "skip" in request.data:
                skip = request.data["skip"]
            else:
                skip = 0

            if "to" in request.data:
                limit = request.data["to"] + 10
                if limit == 0:
                    limit = 20
            elif "limit" in request.data:
                limit = 20
            else:
                limit = 20

            if len(range_next_close) == 0:
                seller_query = {
                    "query": {"bool": {"must": query}},
                    "size": limit,
                    "from": skip,
                    "sort": [{"storeIsOpen": {"order": "desc"}}],
                }
            else:
                seller_query = {
                    "query": {
                        "bool": {
                            "must": query,
                        }
                    },
                    "size": limit,
                    "from": skip,
                    "sort": [{"storeIsOpen": {"order": "desc"}}],
                }
            res = es.search(
                index=index_store,
                body=seller_query,
                filter_path=[
                    "hits.total",
                    "hits.hits._id",
                    "hits.hits._source.businessLocationAddress",
                    "hits.hits._source.billingAddress",
                    "hits.hits._source.headOffice",
                    "hits.hits._source.parentStore",
                    "hits.hits._source.cityName",
                    "hits.hits._source.logoImages",
                    "hits.hits._source.bannerImages",
                    "hits.hits._source.galleryImages",
                    "hits.hits._source.cityId",
                    "hits.hits._source.citiesOfOperation",
                    "hits.hits._source.isExpressDelivery",
                    "hits.hits._source.parentSellerIdOrSupplierId",
                    "hits.hits._source.storeName",
                    "hits.hits._source.headOffice",
                    "hits.hits._source.driverTypeId",
                    "hits.hits._source.driverType",
                    "hits.hits._source.categoryName",
                    "hits.hits._source.categoryId",
                    "hits.hits._source.referrals",
                    "hits.hits._source.nextCloseTime",
                    "hits.hits._source.nextOpenTime",
                    "hits.hits._source.sellerTypeId",
                    "hits.hits._source.sellerType",
                    "hits.hits._source.storeIsOpen",
                    "hits.hits._source.categoryName",
                    "hits.hits._source.storeFrontTypeId",
                    "hits.hits._source.storeFrontType",
                    "hits.hits._source.cityName",
                    "hits.hits._source.status",
                    "hits.hits._source.buyerAccountId",
                    "hits.hits._source.statusLogs",
                    "hits.hits._source.averageCostForMealForTwo",
                    "hits.hits._source.registrationDateTimeStamp",
                    "hits.hits._source.planId",
                    "hits.hits._source.planName",
                    "hits.hits._source.uniqStoreId",
                    "hits.hits._source.operatorServiceType",
                    "hits.hits._source.serviceZones",
                    "hits.hits._source.storeAliasName",
                ],
            )
            try:
                total_doc_count = res["hits"]["total"]["value"]
            except:
                total_doc_count = res["hits"]["total"]
            if total_doc_count <= 0:
                final_json = {"data": [], "total_count": 0, "message": "No Data Found"}
                return JsonResponse(final_json, safe=False, status=404)
            else:
                parentStoreName = ""
                stores_data_count = total_doc_count
                for store in res["hits"]["hits"]:
                    try:
                        if user_id != "":
                            user_count = db.stores.find(
                                {"_id": ObjectId(store["_id"]), "favouriteUsers": user_id}
                            ).count()
                            if user_count == 0:
                                isFavourite = False
                            else:
                                isFavourite = True
                        else:
                            isFavourite = False
                    except:
                        isFavourite = False

                    if store["_source"]["storeFrontTypeId"] == 2:
                        try:
                            parent_store = db.stores.find_one(
                                {"_id": ObjectId(store["_source"]["parentSellerIdOrSupplierId"])}
                            )
                            if parent_store != None:
                                parentStoreName = parent_store["storeName"]
                            else:
                                parentStoreName = ""
                        except:
                            parentStoreName = ""
                    else:
                        parentStoreName = ""

                    if "cityName" in store["_source"]:
                        city_name = store["_source"]["cityName"]
                    else:
                        city_name = ""

                    avg_rating_value = 0
                    seller_rating = db.sellerReviewRatings.aggregate(
                        [
                            {
                                "$match": {
                                    "sellerId": str(store["_id"]),
                                    "rating": {"$ne": 0},
                                    "status": 1,
                                }
                            },
                            {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                        ]
                    )
                    for avg_rating in seller_rating:
                        avg_rating_value = avg_rating["avgRating"]

                    # ===============================for the distcance=====================================
                    try:
                        store_lat = float(store["_source"]["businessLocationAddress"]["lat"])
                        store_long = float(store["_source"]["businessLocationAddress"]["long"])
                        distance_km, distance_miles = calculate_distance(
                            user_latitude, user_longitude, store_lat, store_long
                        )
                    except:
                        distance_km, distance_miles = 0, 0

                    # ========================================for the store address details================
                    address = (
                        store["_source"]["businessLocationAddress"]["address"]
                        if "address" in store["_source"]["businessLocationAddress"]
                        else ""
                    )
                    addressArea = (
                        store["_source"]["businessLocationAddress"]["addressArea"]
                        if "addressArea" in store["_source"]["businessLocationAddress"]
                        else ""
                    )
                    locality = (
                        store["_source"]["businessLocationAddress"]["locality"]
                        if "locality" in store["_source"]["businessLocationAddress"]
                        else ""
                    )
                    post_code = (
                        store["_source"]["businessLocationAddress"]["postCode"]
                        if "postCode" in store["_source"]["businessLocationAddress"]
                        else ""
                    )
                    state = (
                        store["_source"]["businessLocationAddress"]["state"]
                        if "state" in store["_source"]["businessLocationAddress"]
                        else ""
                    )
                    country = (
                        store["_source"]["businessLocationAddress"]["country"]
                        if "country" in store["_source"]["businessLocationAddress"]
                        else ""
                    )
                    city = (
                        store["_source"]["businessLocationAddress"]["city"]
                        if "city" in store["_source"]["businessLocationAddress"]
                        else ""
                    )

                    # ===================================for the cusines=============================================
                    cusine_name = ""
                    if "specialities" in store["_source"]:
                        if len(store["_source"]["specialities"]):
                            for spec in store["_source"]["specialities"]:
                                spec_data = db.specialities.find_one(
                                    {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                )
                                if spec_data != None:
                                    if cusine_name == "":
                                        cusine_name = (
                                            spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                    else:
                                        cusine_name = (
                                            cusine_name
                                            + ", "
                                            + spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                else:
                                    pass
                        else:
                            pass
                    else:
                        pass

                    # ========================for the average cost for the people==========================
                    if "averageCostForMealForTwo" in store["_source"]:
                        cost_for_two = store["_source"]["averageCostForMealForTwo"]
                    else:
                        cost_for_two = 0

                    if avg_rating_value is None:
                        avg_rating_value = 0

                    if "headOffice" in store["_source"]:
                        if "headOfficeAddress" in store["_source"]["headOffice"]:
                            headOfficeAddress = store["_source"]["headOffice"]["headOfficeAddress"]
                        else:
                            headOfficeAddress = ""
                    else:
                        headOfficeAddress = ""
                    jsondata.append(
                        {
                            "cityName": city_name,
                            "_id": str(store["_id"]),
                            "averageCostForMealForTwo": cost_for_two,
                            "avgRating": round(avg_rating_value, 2),
                            "currencyCode": store["_source"]["currencyCode"]
                            if "currencyCode" in store["_source"]
                            else "₹",
                            "businessLocationAddress": store["_source"]["businessLocationAddress"],
                            "nextCloseTime": store["_source"]["nextCloseTime"]
                            if "nextCloseTime" in store["_source"]
                            else "",
                            "nextOpenTime": store["_source"]["nextOpenTime"]
                            if "nextOpenTime" in store["_source"]
                            else "",
                            "billingAddress": store["_source"]["billingAddress"]
                            if "billingAddress" in store["_source"]
                            else {},
                            "headOffice": store["_source"]["headOffice"]
                            if "headOffice" in store["_source"]
                            else {},
                            "freeDeliveryAbove": store["_source"]["freeDeliveryAbove"]
                            if "freeDeliveryAbove" in store["_source"]
                            else 0,
                            "logoImages": store["_source"]["logoImages"],
                            "parentStore": parentStoreName if parentStoreName != "" else "",
                            "distanceKm": round(distance_km, 2),
                            "address": address,
                            "cuisines": cusine_name,
                            "locality": locality,
                            "postCode": post_code,
                            "addressArea": addressArea,
                            "state": state,
                            "country": country,
                            "city": city,
                            "distanceMiles": distance_miles,
                            "categoryName": store["_source"]["categoryName"],
                            "referrals": store["_source"]["referrals"]
                            if "referrals" in store["_source"]
                            else 0,
                            "bannerImages": store["_source"]["bannerImages"],
                            "galleryImages": store["_source"]["galleryImages"],
                            "cityId": store["_source"]["cityId"],
                            "citiesOfOperation": store["_source"]["citiesOfOperation"],
                            "isExpressDelivery": int(store["_source"]["isExpressDelivery"])
                            if "isExpressDelivery" in store["_source"]
                            else 0,
                            "parentSellerIdOrSupplierId": store["_source"][
                                "parentSellerIdOrSupplierId"
                            ],
                            "planId": store["_source"]["planId"]
                            if "planId" in store["_source"]
                            else "",
                            "planName": store["_source"]["planName"]
                            if "planName" in store["_source"]
                            else "",
                            "storeName": store["_source"]["storeName"][language],
                            "address": headOfficeAddress,
                            "sellerTypeId": store["_source"]["sellerTypeId"],
                            "currencySymbol": store["_source"]["currencyCode"]
                            if "currencyCode" in store["_source"]
                            else "₹",
                            "currency": store["_source"]["currencyCode"]
                            if "currencyCode" in store["_source"]
                            else "INR",
                            "sellerType": store["_source"]["sellerType"],
                            "storeFrontTypeId": store["_source"]["storeFrontTypeId"],
                            "storeFrontType": store["_source"]["storeFrontType"],
                            "nextCloseTime": store["_source"]["nextCloseTime"]
                            if "nextCloseTime" in store["_source"]
                            else "",
                            "nextOpenTime": store["_source"]["nextOpenTime"]
                            if "nextOpenTime" in store["_source"]
                            else "",
                            "driverTypeId": store["_source"]["driverTypeId"]
                            if "driverTypeId" in store["_source"]
                            else 0,
                            "driverType": store["_source"]["driverType"]
                            if "driverType" in store["_source"]
                            else 0,
                            "storeIsOpen": store["_source"]["storeIsOpen"]
                            if "storeIsOpen" in store["_source"]
                            else False,
                            "buyerAccountId": store["_source"]["buyerAccountId"]
                            if "buyerAccountId" in store["_source"]
                            else "",
                            "uniqStoreId": store["_source"]["uniqStoreId"]
                            if "uniqStoreId" in store["_source"]
                            else "",
                            "operatorServiceType": store["_source"]["operatorServiceType"]
                            if "operatorServiceType" in store["_source"]
                            else "",
                            "status": store["_source"]["status"],
                            "serviceZones": store["_source"]["serviceZones"] if "serviceZones" in store[
                                "_source"] else [],
                            "storeAliasName": store["_source"]["storeAliasName"] if "storeAliasName" in store[
                                "_source"] else ""
                        }
                    )
                if int(sorting_data) == 0:
                    # new_list = jsondata
                    new_list = sorted(jsondata, key=lambda k: k["storeName"], reverse=False)
                elif int(sorting_data) == 1:
                    new_list = sorted(jsondata, key=lambda k: k["rating"], reverse=False)
                else:
                    new_list = sorted(jsondata, key=lambda k: k["rating"], reverse=True)

                final_json = {
                    "data": new_list,
                    "message": "Seller Found SuccesFully",
                    "total_count": stores_data_count,
                }
                return JsonResponse(final_json, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


"""
    API for the list of the all brand products
"""


class BrandProducts(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Brands"],
        operation_description="API for getting the brands based on store category",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="bname",
                default="nike",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="name of the brand. which data want",
            ),
            openapi.Parameter(
                name="page",
                default="1",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="page number. which page number data want to display",
            ),
        ],
        responses={
            200: "successfully. brands products found",
            404: "data not found. it might be product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            filter_responseJson = []
            category_data = []
            brand_data = []
            banner_deatils_data = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            login_type = request.META["HTTP_LOGINTYPE"] if "HTTP_LOGINTYPE" in request.META else 1
            brand_name = request.GET.get("bname", "")
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            page = int(request.GET.get("page", 1))
            to_data = page * 30
            from_data = to_data - 30
            number_for = [0]
            number_for.append(int(login_type))
            store_category_id = ""
            data = {
                "query": {
                    "bool": {
                        "must": [
                            {"match_phrase_prefix": {"brandTitle.en": brand_name}},
                            {"terms": {"productFor": number_for}},
                            {"match": {"status": 1}},
                        ]
                    }
                },
                "size": to_data,
                "from": from_data,
            }
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif brand_name == "":
                response_data = {
                    "message": "brand name is empty",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                res = es.search(
                    index=index_central_product,
                    # # doc_type=doc_central_product,
                    body=data,
                    filter_path=[
                        "hits.total",
                        "hits.hits._id",
                        "hits.hits._source.currency",
                        "hits.hits._source.catName",
                        "hits.hits._source.brandTitle",
                        "hits.hits._source.units",
                        "hits.hits._source.offer",
                        "hits.hits._source.subCatName",
                        "hits.hits._source.suppliers",
                        "hits.hits._source.subSubCatName",
                        "hits.hits._source.currencySymbol",
                        "hits.hits._source.brandName",
                        "hits.hits._source.images",
                        "hits.hits._source.pName",
                        "hits.hits._source.tax",
                        "hits.hits._source.pPName",
                        "hits.hits._source.productSeo",
                        "hits.hits._source.isMemebersOnly",
                    ],
                )
                if res["hits"]["total"]["value"] <= 0:
                    final_json = {"data": [], "penCount": 0, "message": "No Data Found"}
                    return JsonResponse(final_json, safe=False, status=404)
                else:
                    resData = []
                    cat_id = []
                    sub_cat_id = []
                    sub_sub_cat_id = []
                    brand_id = []
                    for i in res["hits"]["hits"]:
                        supplier_list = []
                        cat_id.append(
                            i["_source"]["catName"][language]
                            if language in i["_source"]["catName"]
                            else i["_source"]["catName"]["en"]
                        )
                        sub_cat_id.append(
                            i["_source"]["subCatName"][language]
                            if language in i["_source"]["subCatName"]
                            else i["_source"]["subCatName"]["en"]
                        )
                        sub_sub_cat_id.append(
                            i["_source"]["subSubCatName"][language]
                            if language in i["_source"]["subSubCatName"]
                            else i["_source"]["subSubCatName"][language]
                        )
                        brand_id.append(
                            i["_source"]["brandTitle"][language]
                            if language in i["_source"]["brandTitle"]
                            else i["_source"]["brandTitle"]["en"]
                        )
                        units_data = []
                        color_data = []
                        size_list = []

                        # ===========================product seo============================================================
                        if "productSeo" in i["_source"]:
                            if len(i["_source"]["productSeo"]["title"]) > 0:
                                title = (
                                    i["_source"]["productSeo"]["title"][language]
                                    if language in i["_source"]["productSeo"]["title"]
                                    else i["_source"]["productSeo"]["title"]["en"]
                                )
                            else:
                                title = ""

                            if len(i["_source"]["productSeo"]["description"]) > 0:
                                description = (
                                    i["_source"]["productSeo"]["description"][language]
                                    if language in i["_source"]["productSeo"]["description"]
                                    else i["_source"]["productSeo"]["description"]["en"]
                                )
                            else:
                                description = ""

                            if len(i["_source"]["productSeo"]["metatags"]) > 0:
                                metatags = (
                                    i["_source"]["productSeo"]["metatags"][language]
                                    if language in i["_source"]["productSeo"]["metatags"]
                                    else i["_source"]["productSeo"]["metatags"]["en"]
                                )
                            else:
                                metatags = ""

                            if len(i["_source"]["productSeo"]["slug"]) > 0:
                                slug = (
                                    i["_source"]["productSeo"]["slug"][language]
                                    if language in i["_source"]["productSeo"]["slug"]
                                    else i["_source"]["productSeo"]["slug"]["en"]
                                )
                            else:
                                slug = ""

                            product_seo = {
                                "title": title,
                                "description": description,
                                "metatags": metatags,
                                "slug": slug,
                            }
                        else:
                            product_seo = {
                                "title": "",
                                "description": "",
                                "metatags": "",
                                "slug": "",
                            }

                        currencySymbol = (
                            i["_source"]["currencySymbol"]
                            if "currencySymbol" in i["_source"]
                            else "US$"
                        )
                        currency = i["_source"]["currency"] if "currency" in i["_source"] else "INR"
                        if "stores" in i["_source"]:
                            stores = len(i["_source"]["stores"])
                        else:
                            stores = 0

                        if login_type == 1:
                            try:
                                if "suppliers" in i["_source"]["units"][0]:
                                    if store_category_id == GROCERY_STORE_CATEGORY_ID:
                                        for s in i["_source"]["units"][0]["suppliers"]:
                                            if s["id"] == "0":
                                                pass
                                            else:
                                                parent_store_count = db.stores.find(
                                                    {
                                                        "_id": ObjectId(s["id"]),
                                                        "storeFrontTypeId": {"$nin": [2]},
                                                    }
                                                ).count()
                                                if parent_store_count == 0:
                                                    pass
                                                else:
                                                    supplier_list.append(s)
                                    else:
                                        supplier_list = i["_source"]["units"][0]["suppliers"]

                                    best_supplier = min(
                                        supplier_list, key=lambda x: x["retailerPrice"]
                                    )
                                    if best_supplier["retailerQty"] == 0:
                                        best_supplier = max(
                                            supplier_list, key=lambda x: x["retailerQty"]
                                        )
                                    else:
                                        best_supplier = best_supplier
                                else:
                                    best_supplier = {}
                            except:
                                best_supplier = {}
                        else:
                            try:
                                if "suppliers" in i["_source"]["units"][0]:
                                    if store_category_id == GROCERY_STORE_CATEGORY_ID:
                                        for s in i["_source"]["units"][0]["suppliers"]:
                                            if s["id"] == "0":
                                                pass
                                            else:
                                                parent_store_count = db.stores.find(
                                                    {
                                                        "_id": ObjectId(s["id"]),
                                                        "storeFrontTypeId": {"$nin": [2]},
                                                    }
                                                ).count()
                                                if parent_store_count == 0:
                                                    pass
                                                else:
                                                    supplier_list.append(s)
                                    else:
                                        supplier_list = i["_source"]["units"][0]["suppliers"]

                                    best_supplier = min(
                                        supplier_list, key=lambda x: x["distributorPrice"]
                                    )
                                    if best_supplier["retailerQty"] == 0:
                                        best_supplier = max(
                                            supplier_list, key=lambda x: x["distributorQty"]
                                        )
                                    else:
                                        best_supplier = best_supplier
                                else:
                                    best_supplier = {}
                            except:
                                best_supplier = {}

                        if len(best_supplier) > 0:
                            if "productId" in best_supplier:
                                product_id = best_supplier["productId"]
                            else:
                                product_id = i["_id"]
                        else:
                            product_id = i["_id"]

                        offers_details = []
                        if "offer" in i["_source"]:
                            for offer in i["_source"]["offer"]:
                                if "offerFor" in offer:
                                    if login_type == 1:
                                        if offer["offerFor"] == 1 or offer["offerFor"] == 0:
                                            if offer["status"] == 1:
                                                offer_query = {
                                                    "_id": ObjectId(offer["offerId"]),
                                                    "status": 1,
                                                }
                                                offer_count = db.offers.find_one(offer_query)
                                                if offer_count is not None:
                                                    if offer_count["startDateTime"] <= int(
                                                            time.time()
                                                    ):
                                                        offers_details.append(offer)
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        if offer["offerFor"] == 0 or offer["offerFor"] == 2:
                                            if offer["status"] == 1:
                                                offers_details.append(offer)
                                            else:
                                                pass
                                        else:
                                            pass
                                else:
                                    pass

                        if len(offers_details) > 0:
                            best_offer = max(offers_details, key=lambda x: x["discountValue"])
                            offer_details = db.offers.find(
                                {
                                    "_id": ObjectId(best_offer["offerId"]),
                                    "status": 1,
                                    "storeId": best_supplier["id"],
                                }
                            ).count()
                            if offer_details != 0:
                                best_offer = best_offer
                            else:
                                best_offer = {}
                        else:
                            best_offer = {}

                        # ======================for tax ================================================================
                        tax_value = []
                        tax_details = db.childProducts.find_one(
                            {"_id": ObjectId(product_id)}, {"tax": 1}
                        )

                        if tax_details != None:
                            if type(tax_details["tax"]) == list:
                                for tax in tax_details['units'][0]["tax"]:
                                    tax_value.append({"value": tax["taxValue"]})
                            else:
                                if tax_details["tax"] != None:
                                    if "taxValue" in tax_details["tax"]:
                                        tax_value.append({"value": tax_details["tax"]["taxValue"]})
                                    else:
                                        tax_value.append({"value": tax_details["tax"]})
                                else:
                                    tax_value = []
                        else:
                            tax_value = []

                        # ================================currency=================================================
                        child_product = db.childProducts.find_one(
                            {"_id": ObjectId(product_id)}, {"currencySymbol": 1, "currency": 1}
                        )

                        try:
                            currency_rate = currency_exchange_rate[
                                str(child_product["currency"]) + "_" + str(currency_code)
                                ]
                        except:
                            currency_rate = 0
                        currency_details = db.currencies.find_one({"currencyCode": currency_code})
                        if currency_details is not None:
                            currency_symbol = currency_details["currencySymbol"]
                            currency = currency_details["currencyCode"]
                        else:
                            currency_symbol = child_product["currencySymbol"]
                            currency = child_product["currency"]

                        resData.append(
                            {
                                "childProductId": product_id,
                                "productName": i["_source"]["pPName"][language]
                                if language in i["_source"]["pPName"]
                                else i["_source"]["pPName"]["en"],
                                "brandName": i["_source"]["brandTitle"][language]
                                if "brandTitle" in i["_source"]
                                else "",
                                "parentProductId": i["_id"],
                                "productSeo": product_seo,
                                "currencyRate": currency_rate,
                                "currencySymbol": currency_symbol,
                                "currency": currency,
                                "tax": tax_value,
                                "mobileImage": i["_source"]["images"],
                                "units": i["_source"]["units"],
                                "unitId": i["_source"]["units"][0]["unitId"],
                                "offer": best_offer,
                                "suppliers": best_supplier,
                                "isMemebersOnly": i["_source"]["isMembersOnly"] if "isMembersOnly" in i[
                                    "_source"] else False
                            }
                        )
                    dataframe = pd.DataFrame(resData)
                    dataframe["unitsData"] = dataframe.apply(
                        home_units_data,
                        lan=language,
                        sort=1,
                        status=1,
                        axis=1,
                        logintype=login_type,
                        store_category_id=store_category_id,
                        margin_price=True, city_id=""
                    )
                    details = dataframe.to_json(orient="records")
                    data = json.loads(details)
                    for k in data:
                        base_price = k["unitsData"]["basePrice"]
                        percentage = 0
                        final_price = k["unitsData"]["finalPrice"]
                        discount_price = k["unitsData"]["discountPrice"]
                        outOfStock = k["unitsData"]["outOfStock"]
                        availableQuantity = k["unitsData"]["availableQuantity"]
                        mou = ""
                        if len(k["offer"]) != 0:
                            if "discountType" in k["offer"]:
                                if k["offer"]["discountType"] == 0:
                                    percentage = 0
                                else:
                                    percentage = int(k["offer"]["discountValue"])
                        else:
                            percentage = 0

                        filter_responseJson.append(
                            {
                                "outOfStock": outOfStock,
                                "childProductId": k["childProductId"],
                                "productName": k["productName"],
                                "brandName": k["brandName"],
                                "parentProductId": k["parentProductId"],
                                "productSeo": k["productSeo"],
                                "offers": k["offer"],
                                "discountType": k["offer"]["discountType"]
                                if "discountType" in k["offer"]
                                else 0,
                                "unitId": k["unitId"],
                                "availableQuantity": availableQuantity,
                                "images": k["mobileImage"],
                                "finalPriceList": {
                                    "basePrice": round(base_price, 2),
                                    "finalPrice": round(final_price, 2),
                                    "discountPrice": round(discount_price, 2),
                                    "discountPercentage": percentage,
                                    "discountPriceForNonMembers": k["units"][0][
                                        "discountPriceForNonMembers"] if "discountPriceForNonMembers" in k["units"][
                                        0] else round(final_price, 2),
                                    "memberPrice": k["units"][0]["memberPrice"] if "memberPrice" in k["units"][
                                        0] else round(final_price, 2),
                                },
                                "currencySymbol": k["currencySymbol"],
                                "currency": k["currency"],
                            }
                        )
                    for cat in list(set(cat_id)):
                        category_details = db.firstCategory.find_one(
                            {"categoryName." + language: cat},
                            {"categoryName": 1, "imageUrl": 1, "websiteImageUrl": 1},
                        )
                        if category_details != None:
                            category_details = db.firstCategory.find_one(
                                {"categoryName.en": cat},
                                {"categoryName": 1, "imageUrl": 1, "websiteImageUrl": 1},
                            )
                        if category_details != None:
                            brand_image_data = db.brands.find_one(
                                {"category.categoryId": str(category_details["_id"])},
                                {"category": 1},
                            )
                            if brand_image_data != None:
                                brand_details = [
                                    x
                                    for x in brand_image_data["category"]
                                    if x["categoryId"] == str(category_details["_id"])
                                ]
                                for brands in brand_details:
                                    category_data.append(
                                        {
                                            "id": str(brands["categoryId"]),
                                            "catName": brands["categoryName"],
                                            "subSubCategoryName": brands["subSubCategoryName"],
                                            "subCategoryName": brands["subCategoryName"],
                                            "imageUrl": brands["mobileImage"],
                                            "websiteImageUrl": brands["webImage"],
                                        }
                                    )
                    for brand in list(set(brand_id)):
                        brand_details = db.brands.find_one(
                            {"name." + language: brand},
                            {"name": 1, "bannerImage": 1, "logoImage": 1, "websiteBannerImage": 1},
                        )
                        if brand_details != None:
                            brand_details = db.brands.find_one(
                                {"name.en": brand},
                                {
                                    "name": 1,
                                    "bannerImage": 1,
                                    "logoImage": 1,
                                    "websiteBannerImage": 1,
                                },
                            )
                        if brand_details != None:
                            brand_data.append(
                                {
                                    "id": str(brand_details["_id"]),
                                    "name": brand_details["name"][language]
                                    if language in brand_details["name"]
                                    else brand_details["name"]["en"],
                                    "imageWeb": brand_details["websiteBannerImage"],
                                    "logo": brand_details["logoImage"],
                                    "bannerImage": brand_details["bannerImage"],
                                }
                            )
                            banner_deatils_data.append(
                                {
                                    "imageWeb": brand_details["websiteBannerImage"],
                                    "imageMobile": brand_details["bannerImage"],
                                    "logo": brand_details["logoImage"],
                                }
                            )
                    serarchResults_products = {
                        "products": filter_responseJson,
                        "penCount": res["hits"]["total"]["value"],
                        "categoryData": category_data,
                        "brandData": brand_data,
                        "bannerData": banner_deatils_data,
                    }
                    return JsonResponse(serarchResults_products, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "penCount": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
    API for the get the search data from elastic base on query
    Type: 0 for central admin search
          1 for store admin search
          2 for supplier admin search  
"""


class AdminSearch(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Admin Search"],
        operation_description="API for getting the searched data for admin",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="type",
                default="0",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="type of the search. from which location search the data. values should be 0 for central search and 1 for store search",
            ),
            openapi.Parameter(
                name="q",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the search the item in search bar ex. ni, nik, addi",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="page",
                default="1",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="page number. which page number data want to display",
            ),
            openapi.Parameter(
                name="status",
                default="1",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="status of the data which need to display",
            ),
            openapi.Parameter(
                name="fname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="category name of the product..ex. Men, Women",
            ),
            openapi.Parameter(
                name="sname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="sub category name of the product while getting data through subcategory that time category name mandatory..ex. Footware",
            ),
            openapi.Parameter(
                name="tname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="sub sub category name of the product while getting data through subsubcategory that time category name and subcategory mandatory..ex. Footware",
            ),
            openapi.Parameter(
                name="s_id",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="while need to display particular stores product. ex.5df89d3edd77d6ca2752bd10",
            ),
        ],
        responses={
            200: "successfully. data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            product_data = []
            query = []
            should_query = []
            token = request.META["HTTP_AUTHORIZATION"]
            lan = request.META["HTTP_LANGUAGE"]
            # for the search the item in search bar
            search_query = request.GET.get("q", "")
            page = int(request.GET.get("page", 1))  # for the pagination
            to_data = 20  # (page * 20)# - 20
            from_data = (page * 20) - 20
            status = int(request.GET.get("status", 1))  # for the pagination
            try:
                product_type_filter = int(
                    request.GET.get("productDataType", 0)
                )  # for the pagination
            except:
                product_type_filter = 0  # for the pagination
            fname = request.GET.get("fname", "")  # category-name
            parentCatName = request.GET.get("parentCatName", "")  # category-name
            fname = fname.replace("%20", " ")
            search_type = int(request.GET.get("searchType", 1))
            fname = fname.replace("+", " ")

            store_id = request.GET.get("s_id", "")  # get particular offer data
            if store_id == "":
                store_id = request.GET.get("storeid", "")  # get particular offer data

            store_category_id = request.GET.get("storeCategoryId", "")  # get particular offer data

            if store_category_id != "":
                query.append({"match": {"storeCategoryId": store_category_id}})

            if search_query != "" and search_type == 1:
                # ===========================product name========================================
                should_query.append(
                    {
                        "match_phrase_prefix": {
                            "pPName.en": {
                                "analyzer": "standard",
                                "query": search_query.replace("%20", " "),
                                "boost": 6,
                            }
                        }
                    }
                )
                should_query.append(
                    {
                        "match": {
                            "pPName.en": {"query": search_query.replace("%20", " "), "boost": 6}
                        }
                    }
                )
            elif search_query != "" and search_type == 2:
                # ===========================unit name========================================
                should_query.append(
                    {
                        "match_phrase_prefix": {
                            "units.unitName.en": {
                                "analyzer": "standard",
                                "query": search_query.replace("%20", " "),
                                "boost": 1,
                            }
                        }
                    }
                )
                should_query.append(
                    {
                        "match": {
                            "units.unitName.en": {
                                "query": search_query.replace("%20", " "),
                                "boost": 1,
                            }
                        }
                    }
                )
            elif search_query != "" and search_type == 3:
                # ===========================unit name========================================
                should_query.append(
                    {
                        "match_phrase_prefix": {
                            "detailDescription.en": {
                                "analyzer": "standard",
                                "query": search_query.replace("%20", " "),
                                "boost": 1,
                            }
                        }
                    }
                )
                should_query.append(
                    {
                        "match": {
                            "detailDescription.en": {
                                "query": search_query.replace("%20", " "),
                                "boost": 1,
                            }
                        }
                    }
                )
            elif search_query != "" and search_type == 4:
                # ===========================unit name========================================
                should_query.append(
                    {
                        "match_phrase_prefix": {
                            "units.barcode": {
                                "analyzer": "standard",
                                "query": search_query.replace("%20", " "),
                                "boost": 1,
                            }
                        }
                    }
                )
                should_query.append(
                    {
                        "match": {
                            "units.barcode": {"query": search_query.replace("%20", " "), "boost": 1}
                        }
                    }
                )
            elif search_query != "" and search_type == 5:
                # ===========================unit name========================================
                should_query.append(
                    {
                        "match_phrase_prefix": {
                            "units.sku": {
                                "analyzer": "standard",
                                "query": search_query.replace("%20", " "),
                                "boost": 1,
                            }
                        }
                    }
                )
                should_query.append(
                    {
                        "match": {
                            "units.sku": {"query": search_query.replace("%20", " "), "boost": 1}
                        }
                    }
                )
            else:
                pass
            if store_id != "":
                query.append({"match": {"storeId": store_id}})

            if store_id != "":
                query.append({"match": {"units.isPrimary": True}})

            if fname != "":
                query.append(
                    {
                        "match_phrase_prefix": {
                            "categoryList.parentCategory.categoryName.en": fname.replace("%20", " ")
                        }
                    }
                )

            if product_type_filter != 0:
                query.append({"match": {"productType": product_type_filter}})

            query.append({"match": {"status": int(status)}})

            if len(should_query) == 0:
                search_item_query = {
                    "query": {
                        "bool": {
                            "must": query,
                        }
                    },
                    "size": to_data,
                    "from": from_data,
                    "sort": {"createdTimestamp": {"order": "desc"}},
                }
            else:
                search_item_query = {
                    "query": {
                        "bool": {
                            "must": query,
                            "should": should_query,
                            "minimum_should_match": 1,
                            "boost": 1.0,
                        }
                    },
                    "size": to_data,
                    "from": from_data,
                    "track_total_hits": True,
                    "sort": {"createdTimestamp": {"order": "desc"}},
                }

            search_item_query = search_item_query
            if store_id == "":
                res = es.search(
                    index=index_central_product,
                    # # doc_type=doc_central_product,
                    body=search_item_query,
                    filter_path=[
                        "hits.total",
                        "hits.hits._id",
                        "hits.hits._source.currency",
                        "hits.hits._source.catName",
                        "hits.hits._source.brand",
                        "hits.hits._source.units",
                        "hits.hits._source.offer",
                        "hits.hits._source.subCatName",
                        "hits.hits._source.stores",
                        "hits.hits._source.subSubCatName",
                        "hits.hits._source.currencySymbol",
                        "hits.hits._source.brandName",
                        "hits.hits._source.images",
                        "hits.hits._source.productType",
                        "hits.hits._source.pName",
                        "hits.hits._source.pPName",
                        "hits.hits._source.brandLogo",
                        "hits.hits._source.brandBannerImage",
                        "hits.hits._source.childProducts",
                        "hits.hits._source.avgRating",
                        "hits.hits._source.storeType",
                        "hits.hits._source.categoryList",
                    ],
                )
            else:
                res = es.search(
                    index=index_products,
                    body=search_item_query,
                    filter_path=[
                        "hits.total",
                        "hits.hits._id",
                        "hits.hits._source.currency",
                        "hits.hits._source.catName",
                        "hits.hits._source.brand",
                        "hits.hits._source.units",
                        "hits.hits._source.parentProductId",
                        "hits.hits._source.offer",
                        "hits.hits._source.subCatName",
                        "hits.hits._source.stores",
                        "hits.hits._source.subSubCatName",
                        "hits.hits._source.currencySymbol",
                        "hits.hits._source.productType",
                        "hits.hits._source.brandName",
                        "hits.hits._source.images",
                        "hits.hits._source.pName",
                        "hits.hits._source.pPName",
                        "hits.hits._source.brandLogo",
                        "hits.hits._source.brandBannerImage",
                        "hits.hits._source.childProducts",
                        "hits.hits._source.storeType",
                        "hits.hits._source.categoryList",
                    ],
                )
            try:
                total_value = res["hits"]["total"]["value"]
            except:
                total_value = res["hits"]["total"]
            if total_value == 0:
                query = []
                if store_category_id != "":
                    query.append({"match": {"storeCategoryId": store_category_id}})

                if search_query != "":
                    query.append(
                        {"match_phrase_prefix": {"pPName.en": search_query.replace("%20", " ")}}
                    )
                else:
                    pass

                if product_type_filter != 0:
                    query.append({"match": {"productType": product_type_filter}})

                if store_id != "":
                    query.append({"match": {"storeId": store_id}})

                if fname != "":
                    query.append(
                        {
                            "match_phrase_prefix": {
                                "categoryList.parentCategory.childCategory.categoryName.en": fname.replace(
                                    "%20", " "
                                )
                            }
                        }
                    )

                if store_id != "":
                    query.append({"match": {"units.isPrimary": True}})
                query.append({"match": {"status": int(status)}})
                search_item_query = {
                    "query": {
                        "bool": {
                            "must": query,
                        }
                    },
                    "size": to_data,
                    "from": from_data,
                    "sort": {"createdTimestamp": {"order": "desc"}},
                }
                search_item_query = search_item_query
                if store_id == "":
                    res = es.search(
                        index=index_central_product,
                        # # doc_type=doc_central_product,
                        body=search_item_query,
                        filter_path=[
                            "hits.total",
                            "hits.hits._id",
                            "hits.hits._source.currency",
                            "hits.hits._source.catName",
                            "hits.hits._source.brand",
                            "hits.hits._source.units",
                            "hits.hits._source.offer",
                            "hits.hits._source.subCatName",
                            "hits.hits._source.stores",
                            "hits.hits._source.parentProductId",
                            "hits.hits._source.subSubCatName",
                            "hits.hits._source.productType",
                            "hits.hits._source.currencySymbol",
                            "hits.hits._source.currency",
                            "hits.hits._source.brandName",
                            "hits.hits._source.images",
                            "hits.hits._source.pName",
                            "hits.hits._source.pPName",
                            "hits.hits._source.brandLogo",
                            "hits.hits._source.brandBannerImage",
                            "hits.hits._source.childProducts",
                            "hits.hits._source.avgRating",
                            "hits.hits._source.storeType",
                            "hits.hits._source.categoryList",
                        ],
                    )
                else:
                    res = es.search(
                        index=index_products,
                        body=search_item_query,
                        filter_path=[
                            "hits.total",
                            "hits.hits._id",
                            "hits.hits._source.currency",
                            "hits.hits._source.currencySymbol",
                            "hits.hits._source.catName",
                            "hits.hits._source.brand",
                            "hits.hits._source.units",
                            "hits.hits._source.offer",
                            "hits.hits._source.subCatName",
                            "hits.hits._source.productType",
                            "hits.hits._source.stores",
                            "hits.hits._source.parentProductId",
                            "hits.hits._source.subSubCatName",
                            "hits.hits._source.currencySymbol",
                            "hits.hits._source.brandName",
                            "hits.hits._source.images",
                            "hits.hits._source.pName",
                            "hits.hits._source.pPName",
                            "hits.hits._source.brandLogo",
                            "hits.hits._source.brandBannerImage",
                            "hits.hits._source.childProducts",
                            "hits.hits._source.storeType",
                            "hits.hits._source.categoryList",
                        ],
                    )
            try:
                main_total_value = res["hits"]["total"]["value"]
            except:
                main_total_value = res["hits"]["total"]
            if main_total_value == 0:
                response_data = {
                    "message": "data not found",
                    "totalCount": 0,
                    "data": product_data,
                }
                return JsonResponse(response_data, safe=False, status=404)
            else:
                productcount = main_total_value
                for products in res["hits"]["hits"]:
                    try:
                        product_name = products["_source"]["pPName"]["en"]
                        size = []
                        color_details = []
                        color_name = ""
                        rgb = ""
                        cat_data = []
                        cat_name = "N/A"
                        if "categoryList" in products["_source"]:
                            if len(products["_source"]["categoryList"]) > 0:
                                for cat in products["_source"]["categoryList"]:
                                    if "parentCategory" in cat:
                                        if len(cat["parentCategory"]["childCategory"]) > 0:
                                            cat_name = cat["parentCategory"]["childCategory"][0][
                                                "categoryName"
                                            ]["en"]
                                        else:
                                            pass
                            else:
                                cat_name = "N/A"
                            if len(products["_source"]["categoryList"]) > 0:
                                for cat in products["_source"]["categoryList"]:
                                    child_text = ""
                                    if "parentCategory" in cat:
                                        cat_details_name = cat["parentCategory"]["categoryName"][
                                            "en"
                                        ]
                                        for child in cat["parentCategory"]["childCategory"]:
                                            if child_text == "":
                                                child_text = child["categoryName"]["en"]
                                            else:
                                                child_text = (
                                                        child_text + "," + child["categoryName"]["en"]
                                                )
                                        name_cat = cat_details_name + "," + child_text
                                        if cat_name == "N/A":
                                            cat_name = name_cat
                                        cat_data.append(name_cat)

                            else:
                                cat_name = "N/A"
                                cat_data = []
                        else:
                            cat_name = "N/A"
                            cat_data = []

                        for unit in products["_source"]["units"]:
                            try:
                                color_details.append(
                                    {
                                        "name": unit["colorName"],
                                        "rgb": str("rgb(") + unit["color"] + ")",
                                    }
                                )
                                color_name = unit["colorName"]
                                rgb = str("rgb(") + unit["color"] + ")"
                            except:
                                pass

                            try:
                                float_value = unit["b2cPricing"][0]["b2cpriceWithTax"]
                                listed_price = unit["b2cPricing"][0]["b2cproductSellingPrice"]
                            except:
                                float_value = unit["floatValue"]
                                listed_price = unit["floatValue"]

                            if "unitSizeGroupValue" in unit:
                                size.append(unit["unitSizeGroupValue"])

                        review_details = db.reviewRatings.find(
                            {"productId": str(products["_id"]), "status": 1}
                        )
                        if review_details.count() > 0:
                            review_data = []
                            for review in review_details:
                                review_data.append(review["rating"])
                            avg_rating = sum(review_data) / len(review_data)
                            avg_rating = round(avg_rating, 2)
                        else:
                            avg_rating = 0

                        rating_data = db.reviewRatings.find(
                            {"productId": str(products["_id"]), "reviewTitle": {"$ne": ""}}
                        ).count()

                        if store_id == "" or store_id == "0":
                            product_id = str(products["_id"])
                            try:
                                if "suppliers" in products["_source"]["units"][0]:
                                    child_product_id = str(
                                        products["_source"]["units"][0]["suppliers"][0]["productId"]
                                    )
                                else:
                                    child_product_id = ""
                            except:
                                child_product_id = ""
                            variant_count = db.childProducts.find(
                                {"parentProductId": str(product_id), "storeId": "0", "status": int(status)}
                            ).count()
                        else:
                            product_id = str(products["_source"]["parentProductId"])
                            child_product_id = str(products["_id"])
                            variant_count = db.childProducts.find(
                                {"parentProductId": str(product_id), "storeId": ObjectId(store_id),
                                 "status": int(status)}
                            ).count()

                        # ===========================================product tag============================
                        if store_id != "0":
                            store_product_details = db.childProducts.find_one(
                                {"_id": ObjectId(child_product_id)}
                            )
                            if store_product_details is not None:
                                if "nextAvailableTime" in store_product_details:
                                    if store_product_details["nextAvailableTime"] != "":
                                        product_status = True
                                        try:
                                            next_available_time = store_product_details[
                                                "nextAvailableTime"
                                            ]
                                            next_open_time = int(next_available_time)
                                            local_time = datetime.datetime.fromtimestamp(
                                                next_open_time
                                            )
                                            next_day = datetime.datetime.now() + datetime.timedelta(
                                                days=1
                                            )
                                            next_day_midnight = next_day.replace(
                                                hour=23, minute=59, second=59
                                            )
                                            next_day_midnight_timestamp = int(
                                                next_day_midnight.timestamp()
                                            )

                                            mid_night_date = datetime.datetime.strptime(
                                                str(next_day), "%Y-%m-%d %H:%M:%S.%f"
                                            )
                                            db_time = datetime.datetime.fromtimestamp(
                                                next_open_time
                                            )
                                            if next_day_midnight_timestamp < next_open_time:
                                                # if mid_night_date < db_time:
                                                open_time = local_time.strftime(
                                                    "%b %d %Y, %I:%M %p"
                                                )
                                                product_tag = "Available On " + open_time
                                            else:
                                                open_time = local_time.strftime("%I:%M %p")
                                                product_tag = (
                                                        "Next available at " + open_time + " tomorrow"
                                                )
                                        except:
                                            product_tag = ""
                                    else:
                                        product_tag = ""
                                else:
                                    product_tag = ""
                            else:
                                product_tag = ""
                        else:
                            product_tag = ""

                        product_type = (
                            products["_source"]["productType"]
                            if "productType" in products["_source"]
                            else 1
                        )
                        if product_type == 1:
                            product_type_message = "Individual Listing"
                        elif product_type == 2:
                            product_type_message = "Combo"
                        else:
                            product_type_message = "Special"

                        product_data.append(
                            {
                                "productId": str(product_id),
                                "childProductId": str(child_product_id),  # str(child_product_id),
                                "productName": product_name,
                                "productTag": product_tag,
                                "color": color_name,
                                "colorDetails": color_details,
                                "rgb": rgb,
                                "catPath": cat_data,
                                "sizes": size,
                                "price": float_value,
                                "listedPrice": listed_price,
                                "avgRating": avg_rating,
                                "totalReview": rating_data,
                                "variantCount": variant_count,
                                "images": products["_source"]["images"],
                                "productDataType": product_type,
                                "productTypeMessage": product_type_message,
                                "catName": cat_name,
                                "storeType": products["_source"]["storeType"]
                                if "storeType" in products["_source"]
                                else 8,
                                "currency": products["_source"]["currency"]
                                if "currency" in products["_source"]
                                else "INR",
                                "currencySymbol": products["_source"]["currencySymbol"]
                                if "currencySymbol" in products["_source"]
                                else "₹",
                                "storeType": products["_source"]["storeType"]
                                if "storeType" in products["_source"]
                                else 8,
                                "addedBySupplier": products["_source"]["addedBySupplier"]
                                if "addedBySupplier" in products
                                else False,
                                "supplierId": str(products["_source"]["supplierId"])
                                if "supplierId" in products
                                else "",
                                "supplierName": products["_source"]["supplierName"]
                                if "supplierName" in products
                                else "",
                            }
                        )
                    except Exception as ex:
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print(
                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                            type(ex).__name__,
                            ex,
                        )
                        pass
                if len(product_data) > 0:
                    dataframe = pd.DataFrame(product_data)
                    # dataframe = dataframe.drop_duplicates(subset="productName", keep="first")
                    product_data = dataframe.to_dict(orient="records")
                else:
                    product_data = []

                if productcount < 20:
                    productcount = len(product_data)
                else:
                    productcount = productcount

                response_data = {
                    "message": "data found",
                    "totalCount": productcount,
                    "total_count": productcount,
                    "data": product_data,
                }
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "total_count": 0,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class UserPreferences(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["User Preferences"],
        operation_description="API for getting prefrences data or list",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=CANNABIS_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="preferenceId",
                default="5dfa708a639aa17d844ed436",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="preference id for the user's preferences if need particular prefrence data otherwise it will be empty string",
            ),
            openapi.Parameter(
                name="skip",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="skip the data. how much data want to skip. default 0 after that based on pagiation",
            ),
            openapi.Parameter(
                name="status",
                default="1",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="status of the prefernces for with status data need. 0 for new, 1 for active, 2 for inactive, 3 for deleted. default 1",
            ),
            openapi.Parameter(
                name="limit",
                default="10",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="limit for the data. how many data need to display",
            ),
        ],
        responses={
            200: "successfully. prefernce data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be prefernce not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = (
                str(request.META["HTTP_STORECATEGORYID"])
                if "HTTP_STORECATEGORYID" in request.META
                else ECOMMERCE_STORE_CATEGORY_ID
            )
            prefernce_list = []
            if token == "":
                response_data = {"message": "unauthorized", "total_count": 0}
                return JsonResponse(response_data, safe=False, status=401)

            preference_id = request.GET.get("preferenceId", "")
            skip = request.GET.get("skip", 0)
            status = request.GET.get("status", 1)
            limit = request.GET.get("limit", 10)
            if preference_id == "":
                preference_data = db.userPreferences.find(
                    {"status": int(status), "storeCategoryId": str(store_category_id)}
                ).sort(
                    [("_id", -1)]
                )  # .skip(int(skip)).limit(int(limit))
                preference_data_count = (
                    db.userPreferences.find(
                        {"status": int(status), "storeCategoryId": str(store_category_id)}
                    )
                        .sort([("_id", -1)])
                        .count()
                )  # .skip(int(skip)).limit(int(limit)).count()
            else:
                preference_data = db.userPreferences.find({"_id": ObjectId(preference_id)})
                preference_data_count = db.userPreferences.find(
                    {"_id": ObjectId(preference_id)}
                ).count()

            if preference_data.count() == 0:
                response_data = {"message": "Data Not Found"}
                return JsonResponse(response_data, safe=False, status=404)
            else:
                for pref in preference_data:
                    prefrencr_list = []
                    for pref_value in pref["values"]:
                        prefrencr_list.append(
                            {
                                "prefDataId": pref_value["id"],
                                "name": pref_value["values"][language]
                                if "values" in pref_value
                                else pref_value["value"][language],
                            }
                        )
                    prefernce_list.append(
                        {
                            "preferenceId": str(pref["_id"]),
                            "preferenceName": pref["preferenceTitle"][language],
                            "preferenceDesc": pref["description"][language],
                            "preferenceData": prefrencr_list,
                        }
                    )
                respose_message = {
                    "data": prefernce_list,
                    "message": "data found",
                    "total_count": preference_data_count,
                }
                return JsonResponse(respose_message, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "total_count": 0}
            return JsonResponse(error_message, status=500)

    # ==========================patch api for the prefrence======================================================

    @swagger_auto_schema(
        method="patch",
        tags=["User Preferences"],
        operation_description="API for update the user with the selected prefernces",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
        ],
        responses={
            200: "successfully. prefernce updated for user",
            401: "Unauthorized. token expired",
            404: "data not found. it might be user not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            prefernce_list = []
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            data = request.data
            user_data = db.customer.find({"_id": ObjectId(user_id)}).count()
            if user_data == 0:
                response_data = {
                    "message": "User Not Found",
                }
                return JsonResponse(response_data, safe=False, status=404)
            else:
                db.customer.update(
                    {"_id": ObjectId(user_id)},
                    {"$set": {"preferences": data}},
                    upsert=True,
                    multi=False,
                )
                response_data = {
                    "message": "Data added successfully",
                }
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "total_count": 0}
            return JsonResponse(error_message, status=500)


"""
    ratable attribute for 
"""


class RatableAttribute(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Products"],
        operation_description="API for getting the ratable attributes list of the product",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="productId",
                default="5f3510f80285b3b62a2eee22",
                in_=openapi.IN_QUERY,
                required=False,
                type=openapi.TYPE_STRING,
                description="central product id of the product. which product ratable attribute need",
            ),
            openapi.Parameter(
                name="childProductId",
                default="5f453a4d0794f663886cd408",
                in_=openapi.IN_QUERY,
                required=False,
                type=openapi.TYPE_STRING,
                description="central product id of the product. which product ratable attribute need",
            ),
            openapi.Parameter(
                name="driverId",
                default="5f48f075bafa961090f6fba2",
                in_=openapi.IN_QUERY,
                required=False,
                type=openapi.TYPE_STRING,
                description="driver id for get the details for the driver rating and review",
            ),
            openapi.Parameter(
                name="isStorePage",
                default="0",
                in_=openapi.IN_QUERY,
                required=True,
                type=openapi.TYPE_STRING,
                description="if calling api for seller and driver rating need to send value as 1 and for product rating page need to send value as 0",
            ),
            openapi.Parameter(
                name="orderId",
                default="10361598855802636",
                in_=openapi.IN_QUERY,
                required=False,
                type=openapi.TYPE_STRING,
                description="order id from which order need to get driver rating and review. NOTE: Need to send Store Order Id",
            ),
            openapi.Parameter(
                name="userId",
                default="6035358b339cd23edbd8f1ed",
                in_=openapi.IN_QUERY,
                required=False,
                type=openapi.TYPE_STRING,
                description="from which user we need to get the rating",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
        ],
        responses={
            200: "successfully. ratable attributes found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be ratable attributes not found for the product",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = (
                request.META["HTTP_STORECATEGORYID"]
                if "HTTP_STORECATEGORYID" in request.META
                else ""
            )
            hyper_local = False
            store_listing = False
            ecommerce = False
            is_full_by_dc = False
            last_json = []
            seller_attribute = []
            driver_attribute = []
            store_details = {}

            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                user_id = request.GET.get("userId", "")
                if user_id != "":
                    pass
                else:
                    try:
                        user_id = json.loads(token)["userId"]
                    except:
                        pass
                parent_id = request.GET.get("productId", "")
                is_store_page = int(request.GET.get("isStorePage", 0))
                child_parent_id = request.GET.get("childProductId", "")
                driver_id = request.GET.get("driverId", "")
                order_id = request.GET.get("orderId", "")
                request_order_id = request.GET.get("orderId", "")
                req_order_id = request.GET.get("orderId", "")
                service_type = (request.GET.get("serviceType", "2"))

                order_query = {"status.status": 7}
                if parent_id != "":
                    order_query["products.centralProductId"] = str(parent_id)
                if child_parent_id != "":
                    order_query["products.productId"] = str(child_parent_id)
                if order_id != "":
                    order_query["storeOrderId"] = str(order_id)
                else:
                    order_query["customerId"] = str(user_id)
                order_details = db.storeOrder.find(order_query).sort([("_id", -1)]).limit(1)

                if order_details.count() > 0 and order_id == "":
                    for seller in order_details:
                        seller_id = seller["storeId"]
                        master_order_id = seller["storeOrderId"]
                        order_id = seller["storeOrderId"]
                        store_category_id = seller["storeCategoryId"]
                elif order_details.count() > 0 and order_id != "":
                    for seller in order_details:
                        seller_id = seller["storeId"]
                        master_order_id = seller["storeOrderId"]
                        order_id = seller["storeOrderId"]
                        store_category_id = seller["storeCategoryId"]
                else:
                    seller_id = ""
                    store_category_id = ""
                    master_order_id = order_id

                try:
                    if seller_id not in ["", "0"]:
                        store_details = db.stores.find_one({"_id": ObjectId(seller_id)})
                        if store_details is not None:
                            city_id = store_details["cityId"] if "cityId" in store_details else ""
                            if city_id not in ["", None]:
                                store_category_details = db.cities.find_one(
                                    {"_id": ObjectId(city_id)},
                                    {
                                        "storeCategory.hyperlocal": 1,
                                        "storeCategory.storeListing": 1,
                                        "storeCategory.ecommerce": 1,
                                        "storeCategory.storeCategoryId": 1,
                                    },
                                )
                                if "storeCategory" in store_category_details:
                                    for store_cat in store_category_details["storeCategory"]:
                                        if store_cat["storeCategoryId"] == store_category_id:
                                            try:
                                                hyper_local = (
                                                    store_cat["hyperlocal"]
                                                    if "hyperlocal" in store_cat
                                                    else False
                                                )
                                            except:
                                                hyper_local = False
                                            try:
                                                store_listing = (
                                                    True
                                                    if store_cat["storeListing"] == 1
                                                    else False
                                                )
                                            except:
                                                store_listing = False
                                            try:
                                                ecommerce = (
                                                    store_cat["ecommerce"]
                                                    if "ecommerce" in store_cat
                                                    else False
                                                )
                                            except:
                                                ecommerce = True
                                        else:
                                            pass
                                else:
                                    hyper_local = False
                                    store_listing = False
                                    ecommerce = False
                    else:
                        hyper_local = False
                        store_listing = False
                        ecommerce = False
                except:
                    hyper_local = False
                    store_listing = False
                    ecommerce = False

                if (
                        req_order_id != ""
                        or hyper_local == False
                        and store_listing == False
                        and ecommerce == True
                ):
                    order_details_new = db.storeOrder.find(order_query).sort([("_id", -1)]).limit(1)
                    if order_details_new.count() > 0 and order_id == "":
                        for seller in order_details_new:
                            master_order_id = seller["storeOrderId"]
                            order_id = seller["storeOrderId"]
                            req_order_id = seller["storeOrderId"]
                    elif order_details_new.count() > 0 and order_id != "":
                        for seller in order_details_new:
                            master_order_id = seller["storeOrderId"]
                            order_id = seller["storeOrderId"]
                            req_order_id = seller["storeOrderId"]
                    else:
                        seller_id = ""
                        req_order_id = ""
                        master_order_id = order_id
                if parent_id != "":
                    res = db.products.find_one({"_id": ObjectId(parent_id)})
                else:
                    res = None
                seller_review = {}
                if (
                        req_order_id != ""
                        or hyper_local == False
                        and store_listing == False
                        and ecommerce == True
                ):
                    # =========================================seller rating and review========================================
                    user_order_details = db.storeOrder.find(
                        {"customerId": str(user_id), "storeOrderId": str(order_id)}
                    )
                    if user_order_details.count() > 0:
                        for order in user_order_details:
                            if store_category_id == "":
                                store_category_id = (
                                    order["storeCategoryId"] if "storeCategoryId" in order else ""
                                )
                            if order["storeId"] == "0":
                                store_id = "0"
                                store_name = central_store
                            else:
                                store_id = order["storeId"]
                                store_name = order["storeName"]
                    else:
                        store_id = "0"
                        store_name = central_store
                    seller_details = db.ratingParams.find(
                        {"status": 1, "storeId": store_category_id, "associated": 2}
                    )
                    for seller in seller_details:
                        attr_count = db.sellerReviewRatings.find_one(
                            {
                                "userId": user_id,
                                "sellerId": str(store_id),
                                "orderId": order_id,
                                "status": 1,
                                "attributeId": str(seller["_id"]),
                            },
                            {"rating": 1},
                        )
                        if attr_count == None:
                            attr_rating = 0
                        else:
                            attr_rating = attr_count["rating"]
                        seller_attribute.append(
                            {
                                "attributeId": str(seller["_id"]),
                                "attributeName": seller["name"][language],
                                "attributeRating": attr_rating,
                            }
                        )

                    seller_rating = db.sellerReviewRatings.find_one(
                        {
                            "userId": user_id,
                            "status": 1,
                            "orderId": order_id,
                            "sellerId": store_id,
                            "sellerReview": {"$ne": ""},
                        },
                        {"rating": 1, "reviewTitle": 1, "sellerReview": 1},
                    )

                    if seller_rating != None:
                        rating = seller_rating["rating"]
                        review_title = seller_rating["reviewTitle"]
                        review_description = (
                            seller_rating["sellerReview"] if "sellerReview" in seller_rating else ""
                        )
                    else:
                        rating = 0
                        review_title = ""
                        review_description = ""
                    seller_review = {
                        "storeName": store_name,
                        "rating": rating,
                        "attribute": seller_attribute,
                        "sellerReview": review_description,
                        "storeId": store_id,
                    }
                else:
                    seller_review = {}
                # ===================================driver======================================
                if driver_id != "":  # and is_store_page == 1:
                    # =========================================driver rating and review========================================
                    user_order_details = db.driver.find({"_id": ObjectId(driver_id)})
                    if user_order_details.count() > 0:
                        for order in user_order_details:
                            driver_name = order["firstName"] + " " + order["lastName"]
                            driver_profile_pic = order["profilePic"]
                    else:
                        driver_name = ""
                        driver_profile_pic = ""

                    param_query = {"status": 1, "associated": 1}
                    # =========================================seller rating and review========================================
                    if request_order_id != "":
                        user_order_details = db.storeOrder.find_one(
                            {"storeOrderId": str(request_order_id)}
                        )
                        if user_order_details is not None:
                            store_category_id = user_order_details[
                                "storeCategoryId"] if "storeCategoryId" in user_order_details else ""
                        else:
                            pass
                    # if store_category_id != "" and service_type != "4":
                    #     param_query["storeId"] = store_category_id
                    if service_type != "":
                        param_query['service_type'] = service_type
                    else:
                        param_query = {}
                    print(param_query)
                    if len(param_query) > 0:
                        driver_details = db.ratingParams.find(param_query)
                        for dv in driver_details:
                            attr_count = db.driverRatingReview.find_one(
                                {
                                    "userId": user_id,
                                    "orderId": order_id,
                                    "driverId": str(driver_id),
                                    "status": 1,
                                    "attributeId": str(dv["_id"]),
                                },
                                {"rating": 1},
                            )
                            if attr_count == None:
                                attr_rating = 0
                            else:
                                attr_rating = attr_count["rating"]
                            driver_attribute.append(
                                {
                                    "attributeId": str(dv["_id"]),
                                    "attributeName": dv["name"][language],
                                    "attributeRating": attr_rating,
                                }
                            )

                    driver_rating_details = db.driverRatingReview.find_one(
                        {
                            "userId": user_id,
                            "status": 1,
                            "orderId": order_id,
                            "driverId": driver_id,
                            "reviewDescription": {"$ne": ""},
                        },
                        {"rating": 1, "reviewTitle": 1, "reviewDescription": 1},
                    )

                    if driver_rating_details != None:
                        driver_rating = driver_rating_details["rating"]
                        driver_review_title = driver_rating_details["reviewDescription"]
                        driver_review_description = (
                            driver_rating_details["reviewDescription"]
                            if "reviewDescription" in driver_rating_details
                            else ""
                        )
                    else:
                        driver_rating = 0
                        driver_review_title = ""
                        driver_review_description = ""
                    driver_json = {
                        "driverName": driver_name,
                        "profilePic": driver_profile_pic,
                        "rating": driver_rating,
                        "attribute": driver_attribute,
                        "driverReview": driver_review_description,
                        "driverId": driver_id,
                    }
                else:
                    driver_json = {}
                # =============================product rating and reviw===============================
                if res is not None and is_store_page == 0:
                    attribute_list = []
                    variant_data = []
                    for attr in res["units"][0]["attributes"]:
                        if "attrlist" in attr:
                            for attr_ratable in attr["attrlist"]:
                                try:
                                    if type(attr_ratable) == str or attr_ratable == None:
                                        pass
                                    else:
                                        if "rateable" in attr_ratable:
                                            if int(attr_ratable["rateable"]) == 1:
                                                attribute_details = db.productAttribute.find_one(
                                                    {
                                                        "_id": ObjectId(
                                                            attr_ratable["attributeId"]
                                                        ),
                                                        "status": 1,
                                                    }
                                                )
                                                if attribute_details is not None:
                                                    attr_count = db.reviewRatings.find_one(
                                                        {
                                                            "userId": user_id,
                                                            "orderId": master_order_id,
                                                            "productId": str(parent_id),
                                                            "childProductId": child_parent_id,
                                                            "attributeId": attr_ratable[
                                                                "attributeId"
                                                            ],
                                                            "status": 1,
                                                        },
                                                        {"rating": 1},
                                                    )
                                                    if attr_count == None:
                                                        attr_rating = 0
                                                    else:
                                                        attr_rating = attr_count["rating"]
                                                    attribute_list.append(
                                                        {
                                                            "attributeId": attr_ratable[
                                                                "attributeId"
                                                            ],
                                                            "attributeName": attr_ratable[
                                                                "attrname"
                                                            ][language],
                                                            "attributeRating": int(attr_rating),
                                                        }
                                                    )
                                                else:
                                                    pass
                                            else:
                                                if int(attr_ratable["linkedtounit"]) == 1:
                                                    attribute_details = (
                                                        db.productAttribute.find_one(
                                                            {
                                                                "_id": ObjectId(
                                                                    attr_ratable["attributeId"]
                                                                ),
                                                                "status": 1,
                                                            }
                                                        )
                                                    )
                                                    if attribute_details is not None:
                                                        if attr_ratable["measurementUnit"] == "":
                                                            attr_name = (
                                                                str(attr_ratable["value"][language])
                                                                if language in attr_ratable["value"]
                                                                else str(
                                                                    attr_ratable["value"]["en"]
                                                                )
                                                            )
                                                        else:
                                                            attr_name = (
                                                                str(attr_ratable["value"][language])
                                                                + " "
                                                                + attr_ratable["measurementUnit"]
                                                                if language in attr_ratable["value"]
                                                                else str(
                                                                    attr_ratable["value"]["en"]
                                                                )
                                                                     + " "
                                                                     + attr_ratable["measurementUnit"]
                                                            )
                                                        variant_data.append(
                                                            {
                                                                "attrname": attr_ratable[
                                                                    "attrname"
                                                                ]["en"],
                                                                "value": str(attr_name),
                                                                "name": attr_ratable["attrname"][
                                                                    "en"
                                                                ],
                                                            }
                                                        )
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                        else:
                                            if int(attr_ratable["linkedtounit"]) == 1:
                                                attribute_details = db.productAttribute.find_one(
                                                    {
                                                        "_id": ObjectId(
                                                            attr_ratable["attributeId"]
                                                        ),
                                                        "status": 1,
                                                    }
                                                )
                                                if attribute_details is not None:
                                                    if attr_ratable["measurementUnit"] == "":
                                                        attr_name = (
                                                            str(attr_ratable["value"][language])
                                                            if language in attr_ratable["value"]
                                                            else str(attr_ratable["value"]["en"])
                                                        )
                                                    else:
                                                        attr_name = (
                                                            str(attr_ratable["value"][language])
                                                            + " "
                                                            + attr_ratable["measurementUnit"]
                                                            if language in attrlist["value"]
                                                            else str(attr_ratable["value"]["en"])
                                                                 + " "
                                                                 + attr_ratable["measurementUnit"]
                                                        )
                                                    variant_data.append(
                                                        {
                                                            "attrname": attr_ratable["attrname"][
                                                                "en"
                                                            ],
                                                            "value": str(attr_name),
                                                            "name": attr_ratable["attrname"]["en"],
                                                        }
                                                    )
                                                else:
                                                    pass
                                except:
                                    pass
                        else:
                            pass

                    product_review = db.reviewRatings.find_one(
                        {
                            "userId": user_id,
                            "status": 1,
                            "productId": str(parent_id),
                            "childProductId": str(child_parent_id),
                            "orderId": master_order_id,
                        },
                        {
                            "rating": 1,
                            "reviewDescription": 1,
                            "reviewTitle": 1,
                            "productName": 1,
                            "images": 1,
                        },
                    )
                    product_name = db.products.find_one({"_id": ObjectId(parent_id)}, {"pPName": 1})
                    if product_review != None:
                        user_review = {
                            "productName": product_review["productName"],
                            "rating": product_review["rating"],
                            "attribute": attribute_list,
                            "variantData": variant_data,
                            "reviewTitle": product_review["reviewTitle"],
                            "reviewDescription": product_review["reviewDescription"],
                            "image": product_review["images"] if "images" in product_review else [],
                        }
                    else:
                        if product_name != None:
                            user_review = {
                                "productName": product_name["pPName"]["en"],
                                "rating": 0,
                                "attribute": attribute_list,
                                "variantData": variant_data,
                                "reviewTitle": "",
                                "reviewDescription": "",
                                "image": [],
                            }
                        else:
                            user_review = {}

                    order_query = {
                        "customerId": str(user_id),
                        "products.centralProductId": str(parent_id),
                        "products.status.status": 7,
                    }
                    if child_parent_id != "":
                        order_query["products.productId"] = str(child_parent_id)
                    order_details = db.storeOrder.find(order_query).sort([("_id", -1)]).limit(1)
                    if order_details.count() == 0:
                        isOrder = False
                    else:
                        isOrder = True

                    try:
                        image_product = (
                            res["images"][0]["small"]
                            if "small" in res["images"][0]
                            else product["_source"]["images"][0]["thumbnail"]
                        )
                    except:
                        image_product = ""
                    last_json.append(
                        {
                            "productId": parent_id,
                            "productName": res["pPName"][language],
                            "image": image_product,
                            "isOrder": isOrder,
                            "userReview": user_review,
                        }
                    )
                else:
                    last_json = []

                if order_id == "":
                    pass
                else:
                    order_details = (
                        db.storeOrder.find({"masterOrderId": str(order_id)})
                            .sort([("_id", -1)])
                            .limit(1)
                    )
                    for store_order_details in order_details:
                        if "fullFilledByDC" in store_order_details:
                            is_full_by_dc = store_order_details["fullFilledByDC"]
                        else:
                            is_full_by_dc = False

                if len(seller_review) == 0 and len(last_json) == 0 and len(driver_json) == 0:
                    response = {
                        "data": {
                            "sellerData": seller_review,
                            "reviewData": last_json,
                            "fullFilledByDC": is_full_by_dc,
                            "driverData": driver_json,
                            "message": "Data not Found",
                        }
                    }
                    return JsonResponse(response, safe=False, status=404)
                else:
                    response = {
                        "data": {
                            "sellerData": seller_review,
                            "reviewData": last_json,
                            "fullFilledByDC": is_full_by_dc,
                            "driverData": driver_json,
                            "message": "Data Found",
                        }
                    }
                    return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "total_count": 0}
            return JsonResponse(error_message, status=500)


"""
	product listing for the suppliers
"""


class SupplierProducts(APIView):
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            supplierId = request.GET["storeId"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            from_product = int(request.META["HTTP_FROM"]) if "HTTP_FROM" in request.META else 0
            to_product = int(request.META["HTTP_TO"]) if "HTTP_TO" in request.META else 10
            query = {
                "from": int(from_product),
                "size": int(to_product),
                "query": {
                    "bool": {"must": [{"match": {"status": 1}}, {"match": {"storeId": supplierId}}]}
                },
            }
            supplier_data = []
            res = es.search(
                index=index_products,
                body=query,
                filter_path=[
                    "hits.total",
                    "hits.hits._id",
                    "hits.hits._source.name",
                    "hits.hits._source.units",
                    "hits.hits._source.brandTitle",
                    "hits.hits._source.images",
                    "hits.hits._source.currencySymbol",
                    "hits.hits._source.currency",
                    "hits.hits._source.isAdded",
                    "hits.hits._source.childProductId",
                ],
            )
            if res["hits"]["total"]["value"] > 0:
                for i in res["hits"]["hits"]:
                    for u in i["_source"]["units"]:
                        supplier_data.append(
                            {
                                "childProductId": str(i["_id"]),
                                "isAdded": i["_source"]["isAdded"]
                                if "isAdded" in i["_source"]
                                else False,
                                "productName": i["_source"]["name"][language],
                                "brand": i["_source"]["brandTitle"][language],
                                "color": u["colorName"],
                                "rgb": str("rgb(") + u["color"] + ")",
                                "images": i["_source"]["images"],
                                "finalPriceList": {
                                    "basePrice": float(u["floatValue"]),
                                    "finalPrice": float(u["floatValue"]),
                                    "discountPrice": 0,
                                },
                                "currency": i["_source"]["currency"],
                                "currencySymbol": i["_source"]["currencySymbol"],
                                "supplierProductId": i["_source"]["childProductId"]
                                if "childProductId" in i["_source"]
                                else "",
                            }
                        )
                response = {
                    "penCount": res["hits"]["total"]["value"],
                    "data": supplier_data,
                    "message": "Supplier Found",
                }
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"penCount": 0, "data": supplier_data, "message": "Supplier Not Found"}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


class ProductReviewList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Products"],
        operation_description="API for getting all the reviewslist of the products",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="skip",
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="limit",
                default="10",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="parentProductId",
                default="5df8efcae2c05798aa40e67f",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product which product review we need to show",
            ),
        ],
        responses={
            200: "successfully. reviews found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be review not found for the product",
            422: "required feild missing. it might be central product id is missing or blank",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            # user_id = "5df9cbceb1f73a18c396aa11"
            parent_productId = request.GET.get("parentProductId", "")
            skip = request.GET.get("skip", 0)
            limit = request.GET.get("limit", 10)
            lan = request.META["HTTP_LANGUAGE"]
            if parent_productId == "":
                response_data = {
                    "message": "Product id empty",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                review_response = product_reviews(
                    parent_productId, lan, int(skip), int(limit), user_id, res20
                )
                if len(review_response["userReviews"]) == 0:
                    response = {
                        "data": {
                            "review": [],
                        }
                    }
                    return JsonResponse(response, safe=False, status=404)
                else:
                    response = {
                        "data": {
                            "review": review_response,
                        }
                    }
                    return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


class StoreProductDetails(APIView):
    """
    API for the get the product details for the store based on search
    """

    def post(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "Token Error",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            query = request.data
            res = es.search(
                index=index_central_product,
                # # doc_type=doc_central_product,
                body=query,
                filter_path=[
                    "hits.hits._id",
                    "hits.hits._source.pPName",
                    "hits.hits._source.firstCategoryId",
                    "hits.hits._source.secondCategoryId",
                    "hits.hits._source.thirdCategoryId",
                    "hits.hits._source.manufacturer",
                    "hits.hits._source.manufactureName",
                    "hits.hits._source.brand",
                    "hits.hits._source.brandTitle",
                    "hits.hits._source.catName",
                    "hits.hits._source.subCatName",
                    "hits.hits._source.subSubCatName",
                    "hits.hits._source.detailDescription",
                    "hits.hits._source.childProducts",
                    "hits.hits._source.storeCategoryId",
                    "hits.hits._source.storeType",
                    "hits.hits._source.isMembersOnly",
                ],
            )
            productData = []
            if len(res) > 0:
                for i in res["hits"]["hits"]:
                    units_data = []
                    final_price_list = []
                    for j in i["_source"]["childProducts"]:
                        for u in j["units"]:
                            units_data.append(u)
                            memberPrice = 0
                            nonMemberPrice = 0
                            if "discountPriceForNonMembers" in u:
                                nonMemberPrice = u["discountPriceForNonMembers"]
                            if "memberPrice" in u:
                                nonMemberPrice = u["memberPrice"]
                            final_price_list.append({
                                "discountPriceForNonMembers": nonMemberPrice,
                                "memberPrice": memberPrice,
                            })
                    productData.append(
                        {
                            "productId": j["_id"],
                            "productname": i["_source"]["pPName"][language],
                            "storeCategoryId": i["_source"]["storeCategoryId"],
                            "storeType": i["_source"]["storeType"],
                            "images": j["images"],
                            "currencySymbol": i["currencySymbol"] if "currencySymbol" in i else "₹",
                            "currency": i["currency"] if "currency" in i else "INR",
                            "units": units_data,
                            "finalPriceList": final_price_list,
                            "firstCategoryId": i["_source"]["firstCategoryId"],
                            "secondCategoryId": i["_source"]["secondCategoryId"],
                            "thirdCategoryId": i["_source"]["thirdCategoryId"],
                            "brand": i["_source"]["brand"],
                            "brandTitle": i["_source"]["brandTitle"][language],
                            "catName": i["_source"]["catName"][language],
                            "subCatName": i["_source"]["subCatName"][language],
                            "subSubCatName": i["_source"]["subSubCatName"][language],
                            "manufactureId": i["_source"]["manufacturer"],
                            "manufactureName": i["_source"]["manufactureName"][language],
                            "detailDescription": i["_source"]["detailDescription"][language],
                            "isMembersOnly": i["_source"]['isMembersOnly'] if "isMembersOnly" in i["_source"] else False
                        }
                    )
                df = pd.DataFrame(productData)
                df = df.drop_duplicates(subset="productname", keep="last")
                finalSuggestions = {
                    "data": df.to_dict(orient="records"),
                    "message": "Product Suggestions Found",
                }
                return JsonResponse(finalSuggestions, safe=False, status=200)
            else:
                error = {"data": [], "message": "No Products Found"}
                return JsonResponse(error, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {"message": message, "data": []}
            return JsonResponse(finalResponse, safe=False, status=500)


class StoreProductSearch(APIView):
    """
    api for the find the cental product in store search in admin
    """

    def post(self, request):
        try:
            print('here---')
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            query = request.data

            for inner_query in query["query"]["bool"]["must"]:
                if "match" in inner_query:
                    if "pName.en" in inner_query["match"]:
                        product_name = inner_query["match"]["pName.en"]
                        del inner_query["match"]
                        inner_query["match_phrase_prefix"] = {"pPName.en": product_name}
                elif "match_phrase_prefix" in inner_query:
                    if "pName.en" in inner_query["match_phrase_prefix"]:
                        product_name = inner_query["match_phrase_prefix"]["pName.en"]
                        del inner_query["match_phrase_prefix"]
                        inner_query["match_phrase_prefix"] = {"pPName.en": product_name}
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "Token Error",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            print(query)
            res = es.search(
                index=index_central_product,
                # # doc_type=doc_central_product,
                body=query,
                filter_path=[
                    "hits.hits._id",
                    "hits.hits._source.pPName",
                    "hits.hits._source.catName",
                    "hits.hits._source.subCatName",
                    "hits.hits._source.subSubCatName",
                    "hits.hits._source.childProducts",
                ],
            )
            productData = []
            if len(res) > 0:
                for i in res["hits"]["hits"]:
                    productData.append(
                        {
                            "productId": i["_id"],
                            "productname": i["_source"]["pPName"][language],
                        }
                    )
                newlist = sorted(productData, key=lambda k: k["productId"], reverse=True)
                df = pd.DataFrame(newlist)
                # df = df.drop_duplicates(subset="productname", keep="first")
                finalSuggestions = {
                    "data": df.to_dict(orient="records"),
                    "message": "Product Suggestions Found",
                }
                return JsonResponse(finalSuggestions, safe=False, status=200)
            else:
                error = {"data": [], "message": "No Products Found"}
                return JsonResponse(error, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {"message": message, "data": []}
            return JsonResponse(finalResponse, safe=False, status=500)


"""
	API for the get the product from the QR code...may be it's based on upc or based on barcode
"""


class QrScanProducts(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Products"],
        operation_description="API for getting products based on qr code",
        required=["Authorization", "language"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="qrcode",
                default="889877889989",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="scanned qrcode for the product. it's might be barcode or upc",
            ),
            openapi.Parameter(
                name="storeId",
                default="5ed0c7861db3c601bdbe23b6",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id from which store product is added",
            ),
        ],
        responses={
            200: "successfully. substitute products found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product data not found",
            422: "required fields are not found. it might be qrcode is empty",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            variant_data = []
            token = (
                request.META["HTTP_AUTHORIZATION"] if "HTTP_AUTHORIZATION" in request.META else ""
            )
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            qr_code = request.GET.get("qrcode", "")
            store_id = request.GET.get("storeId", "")
            if qr_code == "":
                response_data = {
                    "message": "qrcode id empty",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                if store_id != "":
                    search_item_query = {
                        "size": 1,
                        "from": 0,
                        "query": {
                            "bool": {
                                "must": [
                                    {"match": {"units.upc": str(qr_code)}},
                                    {"match": {"storeId": str(store_id)}},
                                ]
                            }
                        },
                    }
                else:
                    search_item_query = {
                        "size": 1,
                        "from": 0,
                        "query": {"bool": {"must": [{"match": {"units.upc": str(qr_code)}}]}},
                    }
                res_central_parameters = es.search(
                    index=index_products,
                    body=search_item_query,
                    filter_path=[
                        "hits.hits._id",
                        "hits.hits._source.parentProductId",
                        "hits.hits._source.suppliers",
                        "hits.hits._source.storeId",
                    ],
                )
                if len(res_central_parameters) == 0:
                    if store_id != "":
                        must_query = []
                        must_query.append({"match": {"units.barcode": str(qr_code)}})
                        zone_details = db.zones.find_one({"DCStoreId": store_id})
                        if zone_details is not None:
                            zone_id = str(zone_details["_id"])
                            store_data = db.stores.find(
                                {
                                    "serviceZones.zoneId": zone_id,
                                    "categoryId": MEAT_STORE_CATEGORY_ID,
                                    "status": 1,
                                }
                            )
                            store_details = []
                            for store in store_data:
                                store_details.append(str(store["_id"]))
                            must_query.append({"terms": {"storeId": store_details}})
                        else:
                            must_query.append({"match": {"storeId": str(store_id)}})

                        search_item_query = {
                            "size": 1,
                            "from": 0,
                            "query": {"bool": {"must": must_query}},
                        }
                    else:
                        search_item_query = {
                            "size": 1,
                            "from": 0,
                            "query": {
                                "bool": {
                                    "must": [
                                        {"match": {"units.barcode": str(qr_code)}},
                                    ]
                                }
                            },
                        }
                    res_central_parameters = es.search(
                        # index=index_central_varient_product,
                        index=index_products,
                        # doc_type=doc_central_product,
                        body=search_item_query,
                        filter_path=[
                            "hits.hits._id",
                            "hits.hits._source.parentProductId",
                            "hits.hits._source.suppliers",
                            "hits.hits._source.storeId",
                        ],
                    )
                if len(res_central_parameters) > 0:
                    for variant in res_central_parameters["hits"]["hits"]:
                        supplier_list = []
                        central_product_id = variant["_source"]["parentProductId"]
                        product_id = variant["_id"]
                        response = {
                            "data": {
                                "parentProductId": central_product_id,
                                "childProductId": product_id,
                            }
                        }
                        return JsonResponse(response, safe=False, status=200)
                else:
                    response = {"data": {}, "message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
	API for the notify me for product while outofstock or sold out
"""


class ProductNotify(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Products"],
        operation_description="API for add the product in notify collection",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["parentproductId", "childproductId", "email"],
            properties={
                "childproductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product",
                    example="5df85105e80e605065d3cdff",
                ),
                "parentproductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="central product id of the product",
                    example="5df85105e80e605065d3cdfe",
                ),
                "email": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="email address on which email need to send email for notify",
                    example="nil@mobifyi.com",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="Saved. We will send you a notification when it is available",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            422: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required fields are missing",
                        example="Feilds are missing. required Feilds are missing",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            review_data = []
            response = []
            data = request.data
            print(data)
            central_product_id = data["parentproductId"] if "parentproductId" in data else ""
            if central_product_id == "":
                central_product_id = data["parentProductId"] if "parentProductId" in data else ""
            child_product_id = data["childproductId"] if "childproductId" in data else ""
            if child_product_id == "":
                child_product_id = data["childProductId"] if "childProductId" in data else ""
            email_address = data["email"] if "email" in data else ""

            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)

            if central_product_id == "":
                response_data = {
                    "message": "parent product id is blank",
                }
                return JsonResponse(response_data, safe=False, status=422)
            elif child_product_id == "":
                response_data = {
                    "message": "child product id is blank",
                }
                return JsonResponse(response_data, safe=False, status=422)
            elif email_address == "":
                response_data = {
                    "message": "email id is blank",
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5df88ea3db72a50c970a99bc"
                child_product_details = db.childProducts.find_one(
                    {"_id": ObjectId(child_product_id)}, {"storeCategoryId": 1, "units": 1}
                )
                if "storeCategoryId" in child_product_details:
                    if child_product_details["storeCategoryId"] != MEAT_STORE_CATEGORY_ID:
                        notify_data = {
                            "parentProductId": central_product_id,
                            "childProductId": child_product_id,
                            "status": 1,
                            "emailAddress": email_address,
                            "userId": user_id,
                            "timestamp": int(timeStamp),
                        }
                        db.productNotify.insert(notify_data)
                    else:
                        dc_product_data = db.childProducts.find(
                            {
                                "units.unitId": child_product_details["units"][0]["unitId"],
                                "status": 1,
                            }
                        )
                        for dc_product in dc_product_data:
                            time.sleep(0.1)
                            product_notify_count = db.productNotify.find(
                                {
                                    "userId": user_id,
                                    "parentProductId": central_product_id,
                                    "childProductId": str(dc_product["_id"]),
                                    "status": 1,
                                }
                            ).count()
                            if product_notify_count == 0:
                                notify_data = {
                                    "parentProductId": central_product_id,
                                    "childProductId": str(dc_product["_id"]),
                                    "emailAddress": email_address,
                                    "status": 1,
                                    "userId": user_id,
                                    "timestamp": int(timeStamp),
                                }
                                db.productNotify.insert(notify_data)
                            else:
                                pass
                else:
                    notify_data = {
                        "parentProductId": central_product_id,
                        "childProductId": child_product_id,
                        "emailAddress": email_address,
                        "userId": user_id,
                        "status": 1,
                        "timestamp": int(timeStamp),
                    }
                    db.productNotify.insert(notify_data)
                response_data = {
                    "message": "We will let you know as soon as this product is back in stock",
                }
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
	API for the add the searched address in cassandra
"""


class UserAddress(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Address"],
        operation_description="API for add the searched address in cassandra",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["placeName", "addressLine1"],
            properties={
                "placeName": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="Name of the place which user searched",
                    example="3Embed",
                ),
                "addressLine1": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="address Line of the address which user searched",
                    example="10th Cross St",
                ),
                "addressLine2": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="address Line of the address which user searched",
                    example="RBI Colony",
                ),
                "areaName": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="area name of the address which user searched",
                    example="Ganganagar",
                ),
                "ipAddress": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="ip address of the user's system or network",
                    example="100.110.109.185",
                ),
                "zipCode": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="zip code of the user address location",
                    example="560024",
                ),
                "latitute": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="latitute of the user address location",
                    example="13.05176",
                ),
                "longitude": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="longitude of the user address location",
                    example="77.580448",
                ),
                "cityname": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="city name of the user address location",
                    example="Mumbai",
                ),
                "countryname": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="country name of the user address location",
                    example="India",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data added successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            review_data = []
            response = []
            data = request.data
            place_name = data["placeName"] if "placeName" in data else ""
            address_line_1 = data["addressLine1"] if "addressLine1" in data else ""

            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)

            if place_name == "":
                response_data = {
                    "message": "place name is empty",
                }
                return JsonResponse(response_data, safe=False, status=422)
            elif address_line_1 == "":
                response_data = {
                    "message": "address line 1 is empty",
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5df88ea3db72a50c970a99bc"
                area_name = data["areaName"] if "areaName" in data else ""
                address_line_2 = data["addressLine2"] if "addressLine2" in data else ""
                ip_address = data["ipAddress"] if "ipAddress" in data else ""
                zip_code = data["zipCode"] if "zipCode" in data else "560024"
                latitute = data["latitute"] if "latitute" in data else ""
                longitude = data["longitude"] if "longitude" in data else ""
                cityname = data["cityname"] if "cityname" in data else ""
                countryname = data["countryname"] if "countryname" in data else ""

                session.execute(
                    """
					   INSERT INTO addresslogs (place_name, address_line_1, address_line_2, area_name, 
					   ip_address, zip_code, latitude, 
					   longitude, cityname, countryname, userid, createdtimestamp)
					   VALUES (%(place_name)s, %(address_line_1)s, %(address_line_2)s, 
					   %(area_name)s, %(ip_address)s,%(zip_code)s, %(latitude)s, 
					   %(longitude)s, %(cityname)s, %(countryname)s, %(userid)s,
						%(createdtimestamp)s)
					   """,
                    {
                        "place_name": place_name,
                        "address_line_1": address_line_1,
                        "address_line_2": address_line_2,
                        "area_name": area_name,
                        "ip_address": ip_address,
                        "zip_code": zip_code,
                        "latitude": latitute,
                        "longitude": longitude,
                        "cityname": cityname,
                        "countryname": countryname,
                        "userid": user_id,
                        "createdtimestamp": int(datetime.datetime.now().timestamp()) * 1000,
                    },
                )
                response_data = {
                    "message": "data added successfully",
                }
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


def user_recent_views(
        language, user_id, store_category_id, zone_id, store_id, login_type, remove_central, out_res5
):
    try:
        start = time.time()
        resData = []
        recent_data = []
        mongo_query = {"userid": user_id, "store_category_id": store_category_id}
        if store_id == "":
            pass
        else:
            mongo_query["storeid"] = store_id
        product_details = (
            db.userRecentView.find(mongo_query).sort([("createdtimestamp", -1)]).skip(0).limit(10)
        )
        total_count = db.userRecentView.find(mongo_query).count()

        if product_details.count() == 0:
            response = {
                "id": "",
                "catName": "",
                "imageUrl": "",
                "bannerImageUrl": "",
                "websiteImageUrl": "",
                "websiteBannerImageUrl": "",
                "offers": [],
                "penCount": total_count,
                "categoryData": [],
                "type": 5,
                "seqId": 7,
            }
            out_res5.put(response)
            return response

        for product in product_details:
            query = {"_id": ObjectId(product["productId"]), "status": 1}
            res_filter_parameters = db.childProducts.find_one(query)
            if res_filter_parameters is not None:
                product_tag = ""
                supplier_list = []
                if store_category_id == MEAT_STORE_CATEGORY_ID:
                    status_query = {"terms": {"status": [1, 2]}}
                else:
                    status_query = {"match": {"status": 1}}
                query_res = {
                    "size": 1,
                    "from": 0,
                    "query": {
                        "bool": {
                            "must": [
                                status_query,
                                {"match": {"_id": res_filter_parameters["parentProductId"]}},
                            ]
                        }
                    },
                }
                res_central_parameters = es.search(
                    index=index_central_product,
                    body=query_res,
                    filter_path=[
                        "hits.hits._id",
                        "hits.hits._source.units",
                        "hits.hits._source.suppliers",
                        "hits.hits._source.avgRating",
                        "hits.hits._source.productSeo",
                        "hits.hits._source.images",
                        "hits.hits._source.maxQuantity",
                    ],
                )

                best_supplier = {
                    "id": str(res_filter_parameters["storeId"]),
                    "productId": str(res_filter_parameters["_id"]),
                    "retailerQty": res_filter_parameters["units"][0]["availableQuantity"],
                    "distributorQty": res_filter_parameters["units"][0]["availableQuantity"],
                }
                # ==============================get all details from child products collection===============
                child_product_query = {}
                if len(best_supplier) > 0:
                    child_product_id = best_supplier["productId"]
                else:
                    child_product_id = i["_id"]
                child_product_query["_id"] = ObjectId(child_product_id)
                if best_supplier["id"] == "0":
                    child_product_query["storeId"] = best_supplier["id"]
                else:
                    child_product_query["storeId"] = ObjectId(best_supplier["id"])

                if len(best_supplier) != 0:
                    if int(login_type) == 1 or int(login_type) != 2:
                        if best_supplier["retailerQty"] > 0:
                            outOfStock = False
                            availableQuantity = best_supplier["retailerQty"]
                        else:
                            outOfStock = True
                            availableQuantity = 0
                    else:
                        if best_supplier["distributorQty"] != 0:
                            outOfStock = False
                            availableQuantity = best_supplier["distributorQty"]
                        else:
                            outOfStock = True
                            availableQuantity = 0
                else:
                    outOfStock = True
                    availableQuantity = 0

                if product_tag != "":
                    outOfStock = True
                else:
                    pass

                child_product_details = db.childProducts.find_one(child_product_query)
                if child_product_details != None:
                    # ========================= for the get the linked the unit data============================
                    variant_data = get_linked_unit_attribute(child_product_details["units"])
                    tax_value = []
                    if type(child_product_details["tax"]) == list:
                        for tax in child_product_details["tax"]:
                            tax_value.append({"value": tax["taxValue"]})
                    else:
                        if child_product_details["tax"] != None:
                            if "taxValue" in child_product_details["tax"]:
                                tax_value.append(
                                    {"value": child_product_details["tax"]["taxValue"]}
                                )
                            else:
                                tax_value.append({"value": child_product_details["tax"]})
                        else:
                            tax_value = []
                    offers_details = []
                    parent_product_id = child_product_details["parentProductId"]
                    if "offer" in child_product_details:
                        for offer in child_product_details["offer"]:
                            if "offerFor" in offer:
                                if login_type == 1:
                                    if offer["offerFor"] == 1 or offer["offerFor"] == 0:
                                        if offer["status"] == 1:
                                            offer_query = {
                                                "_id": ObjectId(offer["offerId"]),
                                                "status": 1,
                                            }
                                            offer_count = db.offers.find_one(offer_query)
                                            if offer_count is not None:
                                                if offer_count["startDateTime"] <= int(time.time()):
                                                    offers_details.append(offer)
                                                else:
                                                    pass
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass
                                else:
                                    if offer["offerFor"] == 0 or offer["offerFor"] == 2:
                                        if offer["status"] == 1:
                                            offers_details.append(offer)
                                        else:
                                            pass
                                    else:
                                        pass
                            else:
                                pass
                    else:
                        pass
                    if len(offers_details) > 0:
                        best_offer = max(offers_details, key=lambda x: x["discountValue"])
                        offer_details = db.offers.find(
                            {
                                "_id": ObjectId(best_offer["offerId"]),
                                "status": 1,
                                "storeId": best_supplier["id"],
                            }
                        ).count()
                        if offer_details != 0:
                            best_offer = best_offer
                        else:
                            best_offer = {}
                    else:
                        best_offer = {}

                    model_data = []
                    if "modelImage" in child_product_details["units"][0]:
                        if len(child_product_details["units"][0]["modelImage"]) > 0:
                            model_data = child_product_details["units"][0]["modelImage"]
                        else:
                            model_data = [
                                {
                                    "extraLarge": "",
                                    "medium": "",
                                    "altText": "",
                                    "large": "",
                                    "small": "",
                                }
                            ]
                    else:
                        model_data = [
                            {
                                "extraLarge": "",
                                "medium": "",
                                "altText": "",
                                "large": "",
                                "small": "",
                            }
                        ]

                    # ================================product seo==================================================
                    if "productSeo" in child_product_details:
                        if "title" in child_product_details["productSeo"]:
                            if len(child_product_details["productSeo"]["title"]) > 0:
                                title = (
                                    child_product_details["productSeo"]["title"][language]
                                    if language in child_product_details["productSeo"]["title"]
                                    else child_product_details["productSeo"]["title"]["en"]
                                )
                            else:
                                title = ""
                        else:
                            title = ""

                        if "description" in child_product_details["productSeo"]:
                            if len(child_product_details["productSeo"]["description"]) > 0:
                                description = (
                                    child_product_details["productSeo"]["description"][language]
                                    if language
                                       in child_product_details["productSeo"]["description"]
                                    else child_product_details["productSeo"]["description"]["en"]
                                )
                            else:
                                description = ""
                        else:
                            description = ""

                        if "metatags" in child_product_details["productSeo"]:
                            if len(child_product_details["productSeo"]["metatags"]) > 0:
                                metatags = (
                                    child_product_details["productSeo"]["metatags"][language]
                                    if language in child_product_details["productSeo"]["metatags"]
                                    else child_product_details["productSeo"]["metatags"]["en"]
                                )
                            else:
                                metatags = ""
                        else:
                            metatags = ""

                        if "slug" in child_product_details["productSeo"]:
                            if len(child_product_details["productSeo"]["slug"]) > 0:
                                slug = (
                                    child_product_details["productSeo"]["slug"][language]
                                    if language in child_product_details["productSeo"]["slug"]
                                    else child_product_details["productSeo"]["slug"]["en"]
                                )
                            else:
                                slug = ""
                        else:
                            slug = ""
                        product_seo = {
                            "title": title,
                            "description": description,
                            "metatags": metatags,
                            "slug": slug,
                        }
                    else:
                        product_seo = {"title": "", "description": "", "metatags": "", "slug": ""}

                    # =========================================pharmacy details=========================================
                    if "prescriptionRequired" in child_product_details:
                        if child_product_details["prescriptionRequired"] == 0:
                            prescription_required = False
                        else:
                            prescription_required = True
                    else:
                        prescription_required = False

                    if "saleOnline" in child_product_details:
                        if child_product_details["saleOnline"] == 0:
                            sales_online = False
                        else:
                            sales_online = True
                    else:
                        sales_online = False

                    if "uploadProductDetails" in child_product_details:
                        upload_details = child_product_details["uploadProductDetails"]
                    else:
                        upload_details = ""

                    # ==================================================================================================

                    # =========================for max quantity=================================================
                    if "maxQuantity" in child_product_details:
                        if child_product_details["maxQuantity"] != "":
                            max_quantity = int(child_product_details["maxQuantity"])
                        else:
                            max_quantity = 30
                    else:
                        max_quantity = 30
                    # ==========================================================================================

                    if "allowOrderOutOfStock" in child_product_details:
                        allow_out_of_stock = child_product_details["allowOrderOutOfStock"]
                    else:
                        allow_out_of_stock = False

                    currency_symbol = child_product_details["currencySymbol"]
                    currency = child_product_details["currency"]

                    # ===============================variant data=================================================
                    query = {"parentProductId": parent_product_id, "status": 1}
                    if best_supplier["id"] == "0":
                        query["storeId"] = best_supplier["id"]
                    else:
                        query["storeId"] = ObjectId(best_supplier["id"])

                    variant_count_data = db.childProducts.find(query).count()
                    if variant_count_data > 1:
                        variant_count = True
                    else:
                        variant_count = False

                    isFavourite = False
                    response_casandra = session.execute(
                        """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                        {"userid": user_id, "productid": child_product_id},
                    )

                    if not response_casandra:
                        isFavourite = False
                    else:
                        for fav in response_casandra:
                            isFavourite = True

                    currency_symbol, currency, product_status, product_tag = next_availbale_time(
                        child_product_id
                    )

                    avg_product_rating_value = 0
                    product_rating = db.reviewRatings.aggregate(
                        [
                            {
                                "$match": {
                                    "productId": str(parent_product_id),
                                    "rating": {"$ne": 0},
                                    "status": 1,
                                }
                            },
                            {"$group": {"_id": "$orderId", "avgRating": {"$avg": "$rating"}}},
                        ]
                    )
                    for avg_product_rating in product_rating:
                        avg_product_rating_value = avg_product_rating["avgRating"]
                    try:
                        avg_product_rating_value_new = round(avg_product_rating_value, 2)
                    except:
                        avg_product_rating_value_new = 0

                    resData.append(
                        {
                            "maxQuantity": max_quantity,
                            "childProductId": child_product_id,
                            "availableQuantity": availableQuantity,
                            "productStatus": product_status,
                            "isFavourite": isFavourite,
                            "productTag": product_tag,
                            "allowOrderOutOfStock": allow_out_of_stock,
                            "productName": child_product_details["pName"][language]
                            if language in child_product_details["pName"]
                            else child_product_details["pName"]["en"],
                            "brandName": child_product_details["brandTitle"][language]
                            if language in child_product_details["brandTitle"]
                            else child_product_details["brandTitle"]["en"],
                            "parentProductId": parent_product_id,
                            "suppliers": best_supplier,
                            "prescriptionRequired": prescription_required,
                            "saleOnline": sales_online,
                            "uploadProductDetails": upload_details,
                            "tax": tax_value,
                            "variantData": variant_data,
                            "productTag": product_tag,
                            "outOfStock": outOfStock,
                            "productSeo": product_seo,
                            "variantCount": variant_count,
                            "TotalStarRating": avg_product_rating_value_new,
                            "storeCategoryId": child_product_details["storeCategoryId"]
                            if "storeCategoryId" in child_product_details
                            else "",
                            "timestamp": (product["createdtimestamp"]),
                            "currencySymbol": currency_symbol,
                            "currency": currency,
                            "images": child_product_details["images"],
                            "modelImage": model_data,
                            "finalPriceList": child_product_details["units"],
                            "units": child_product_details["units"],
                            "unitId": child_product_id,
                            "manufactureName": child_product_details["manufactureName"][language]
                            if language in child_product_details["manufactureName"]
                            else "",
                            "offer": best_offer,
                        }
                    )
                    # except:
                    #     pass
            else:
                pass
        if len(resData) > 0:
            dataframe = pd.DataFrame(resData)
            dataframe["unitsData"] = dataframe.apply(
                home_units_data,
                lan=language,
                sort=0,
                status=0,
                axis=1,
                logintype=int(login_type),
                store_category_id=store_category_id,
                margin_price=False, city_id=""
            )
            dataframe = dataframe.drop_duplicates(subset="parentProductId", keep="last")
            details = dataframe.to_json(orient="records")
            data = json.loads(details)
            for k in data:
                if k["unitsData"]["basePrice"] == 0:
                    pass
                else:
                    if len(k["offer"]) != 0:
                        if "discountType" in k["offer"]:
                            if k["offer"]["discountType"] == 0:
                                percentage = 0
                            else:
                                percentage = int(k["offer"]["discountValue"])
                        else:
                            percentage = 0
                    else:
                        percentage = 0

                    recent_data.append(
                        {
                            "outOfStock": k["outOfStock"],
                            "parentProductId": k["parentProductId"],
                            "childProductId": k["childProductId"],
                            "productName": k["productName"],
                            "availableQuantity": k["availableQuantity"],
                            "images": k["images"],
                            "productStatus": k["productStatus"],
                            "productTag": k["productTag"],
                            "maxQuantity": k["maxQuantity"],
                            "brandName": k["brandName"],
                            "timestamp": k["timestamp"],
                            "manufactureName": k["manufactureName"],
                            "allowOrderOutOfStock": k["allowOrderOutOfStock"],
                            "variantCount": k["variantCount"],
                            "productSeo": k["productSeo"],
                            "variantData": k["variantData"],
                            "supplier": k["suppliers"],
                            "discountType": k["offer"]["discountType"]
                            if "discountType" in k["offer"]
                            else 0,
                            "isFavourite": k["isFavourite"] if "isFavourite" in k else False,
                            "modelImage": k["modelImage"] if "modelImage" in k else [],
                            "TotalStarRating": k["TotalStarRating"],
                            "prescriptionRequired": k["prescriptionRequired"],
                            "saleOnline": k["saleOnline"],
                            "uploadProductDetails": k["uploadProductDetails"],
                            "finalPriceList": {
                                "basePrice": round(k["unitsData"]["basePrice"], 2),
                                "finalPrice": round(k["unitsData"]["finalPrice"], 2),
                                "discountPrice": round(k["unitsData"]["discountPrice"], 2),
                                "discountPercentage": percentage,
                            },
                            "unitId": k["unitId"],
                            "productTag": k["productTag"],
                            "storeCategoryId": k["storeCategoryId"],
                            "offers": k["offer"],
                            "currencySymbol": k["currencySymbol"],
                            "currency": k["currency"],
                            "mouData": {
                                "mou": "",
                                "mouUnit": "",  # k['unitsData']['mouUnit'],
                                "mouQty": 0,
                                "minimumPurchaseUnit": "",
                            },
                        }
                    )
        newlist = sorted(recent_data, key=lambda k: k["timestamp"], reverse=True)
        # newlist = recent_data
        response = {
            "id": "",
            "catName": "Recently Viewed",
            "imageUrl": "",
            "bannerImageUrl": "",
            "websiteImageUrl": "",
            "websiteBannerImageUrl": "",
            "offers": [],
            "penCount": total_count,
            "categoryData": newlist,
            "type": 5,
            "seqId": 7,
        }
        out_res5.put(response)
        return response
    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        error = {
            "id": "",
            "catName": "Recently Viewed",
            "imageUrl": "",
            "bannerImageUrl": "",
            "websiteImageUrl": "",
            "websiteBannerImageUrl": "",
            "offers": [],
            "penCount": 0,
            "categoryData": [],
            "type": 5,
            "seqId": 7,
        }
        out_res5.put(error)
        return error


"""
	API for the get the recent views of the users
"""


class UserRecentView(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Recent View"],
        operation_description="API for get the all the products list which user recent viewed",
        required=["Authorization"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="loginType",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="getting the data for retailer or distributor. "
                            "1 for retailer \n"
                            "2 for distributor",
                default="1",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="zoneId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular zone",
            ),
            openapi.Parameter(
                name="storeId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular store",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data added successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for data not found",
                        example="product not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            login_type = (
                int(request.META["HTTP_LOGINTYPE"]) if "HTTP_LOGINTYPE" in request.META else 1
            )
            # if "HTTP_STORECATEGORYID" in request.META else ECOMMERCE_STORE_CATEGORY_ID
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            zone_id = str(request.META["HTTP_ZONEID"]) if "HTTP_ZONEID" in request.META else ""
            if zone_id == "":
                zone_id = request.GET.get("z_id", "")
            store_id = str(request.META["HTTP_STOREID"]) if "HTTP_STOREID" in request.META else ""
            if store_id == "":
                store_id = request.GET.get("s_id", "")
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5e1738e2b04a1b64c7173cec"
                categoty_details = db.cities.find_one(
                    {"storeCategory.storeCategoryId": store_category_id}, {"storeCategory": 1}
                )
                remove_central = False
                if store_category_id == ECOMMERCE_STORE_CATEGORY_ID:
                    is_ecommerce = True
                    remove_central = False
                    hide_recent_view = False
                else:
                    if "storeCategory" in categoty_details:
                        for cat in categoty_details["storeCategory"]:
                            if cat["storeCategoryId"] == store_category_id:
                                if cat["hyperlocal"] == True and cat["storeListing"] == 1:
                                    is_ecommerce = False
                                    remove_central = True
                                    hide_recent_view = False
                                elif cat["hyperlocal"] == True and cat["storeListing"] == 0:
                                    is_ecommerce = False
                                    remove_central = True
                                    hide_recent_view = True
                                else:
                                    is_ecommerce = True
                                    remove_central = False
                                    hide_recent_view = False
                            else:
                                pass
                    else:
                        is_ecommerce = True
                        remove_central = False
                        hide_recent_view = False

                if is_ecommerce == True:
                    store_id = ""
                    zone_id = ""

                # user_recent_view = user_recent_views(language, user_id, store_category_id, zone_id, login_type, res14)
                user_recent_view = user_recent_views(
                    language,
                    user_id,
                    store_category_id,
                    zone_id,
                    store_id,
                    login_type,
                    remove_central,
                    res14,
                )
                if len(user_recent_view["categoryData"]) == 0:
                    response_data = {"message": "products not found", "data": []}
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    response_data = {"message": "data found", "data": user_recent_view}
                    return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
	API for the shopping list of the product and user
"""


class ShoppingList(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Shopping List"],
        operation_description="API for add the shopping list for the user",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="storeId",
                default="0",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store id for which store need to add this shopping list",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["title", "image"],
            properties={
                "title": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="Name of the shopping list",
                    example="Daily Needs",
                ),
                "image": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="Image for the background",
                    example="https://shoppd.s3.ap-south-1.amazonaws.com/350x350/Vivo-V5s-Perfect-Selfie-_1580311083.jpeg",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data added successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            # if "HTTP_STORECATEGORYID" in request.META else ECOMMERCE_STORE_CATEGORY_ID
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            store_id = str(request.META["HTTP_STOREID"]) if "HTTP_STOREID" in request.META else "0"
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5d92f959fc2045620ce36c92"
                shopping_list_query = {}
                user_shopping_list = db.userShoppingList.find(
                    {
                        "title": {"$regex": request.data["title"], "$options": "i"},
                        "userId": user_id,
                        "storeId": store_id,
                        "status": 1,
                    }
                ).count()
                if user_shopping_list > 0:
                    response_data = {
                        "message": "data already added",
                    }
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    shopping_id = ObjectId()
                    shopping_data = {
                        "_id": shopping_id,
                        "title": request.data["title"],
                        "storeId": store_id,
                        "storeCategoryId": store_category_id,
                        "userId": user_id,
                        "status": 1,
                        "timestamp": int(timeStamp),
                        "image": request.data["image"],
                    }
                    db.userShoppingList.insert(shopping_data)
                    response_data = {
                        "message": "data added successfully",
                        "shoppingId": str(shopping_id),
                    }
                    return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["Shopping List"],
        operation_description="API for add the product into the shopping list",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            )
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "data": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(
                        type=openapi.TYPE_OBJECT,
                        required=["id", "centralproductid", "childproductid", "storeId"],
                        properties={
                            "id": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="id of the shopping list",
                                example="5e32dce6326c5468cea82abd",
                            ),
                            "centralProductId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="central product id of the product",
                                example="5dfa1c2cbd309205c3ccdeaa",
                            ),
                            "childProductId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="child product id of the product",
                                example="5e5f4ca081d8dd95226cc4a8",
                            ),
                            "storeId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="store id of the product. From which store product will add",
                                example=GROCERY_STORE_CATEGORY_ID,
                            ),
                        },
                    ),
                )
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data updated successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="shopping list not found",
                        example="shopping list not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                data_json = request.data["data"]
                for shopping_id in data_json:
                    user_shopping_list = db.userShoppingList.find(
                        {"_id": ObjectId(shopping_id["id"])}
                    )
                    if user_shopping_list.count() == 0:
                        response_data = {
                            "message": "shopping list not found",
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                    elif "centralProductId" not in shopping_id:
                        response_data = {
                            "message": "Central Product Id is blank",
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                    elif "childProductId" not in shopping_id:
                        response_data = {
                            "message": "Child Product Id is blank",
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                    else:
                        product_data = {
                            "centralProductId": shopping_id["centralProductId"],
                            "childProductId": shopping_id["childProductId"],
                            "storeId": shopping_id["storeId"] if "storeId" in shopping_id else "0",
                        }
                        db.userShoppingList.update(
                            {"_id": ObjectId(shopping_id["id"])},
                            {"$push": {"products": product_data}},
                            upsert=True,
                        )
                response_data = {
                    "message": "data updated successfully",
                }
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)

    @swagger_auto_schema(
        method="delete",
        tags=["Shopping List"],
        operation_description="API for remove the product into the shopping list",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            )
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["id", "centralproductid", "childproductid"],
            properties={
                "id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="id of the shopping list",
                    example="5e32dce6326c5468cea82abd",
                ),
                "centralProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="central product id of the product",
                    example="5df888d7dd77d6ca2752bcdc",
                ),
                "childProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product",
                    example="5df888d7dd77d6ca2752bcdd",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data updated successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="shopping list not found",
                        example="shopping list not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["delete"])
    def delete(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                user_shopping_list = db.userShoppingList.find({"_id": ObjectId(request.data["id"])})
                if user_shopping_list.count() == 0:
                    response_data = {
                        "message": "shopping list not found",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                elif "centralProductId" not in request.data:
                    response_data = {
                        "message": "Central Product Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                elif "childProductId" not in request.data:
                    response_data = {
                        "message": "Child Product Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    db.userShoppingList.update(
                        {"_id": ObjectId(request.data["id"])},
                        {
                            "$pull": {
                                "products": {"centralProductId": request.data["centralProductId"]},
                                "products": {"childProductId": request.data["childProductId"]},
                            }
                        },
                        upsert=True,
                    )
                    response_data = {
                        "message": "data removed successfully",
                    }
                    return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)

    @swagger_auto_schema(
        method="get",
        tags=["Shopping List"],
        operation_description="API for get all the product details for the shoping list",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language of in which language need data",
                example="en",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b6ea8798dc19d926bd28",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="zone id if need to get the zone seller only",
            ),
            openapi.Parameter(
                name="cityId",
                default="5df7b7218798dc2c1114e6bf",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular city",
            ),
            openapi.Parameter(
                name="countryId",
                default="5df7b7218798dc2c1114e6bf",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular country",
            ),
            openapi.Parameter(
                name="storeId",
                default="5f06db3d58644149e5cbe9d4",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store id for which store need to add this shopping list",
            ),
            openapi.Parameter(
                name="integrationType",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for filter out the products base on product setup configuration, value should be"
                            "0 for All products, "
                            "1 for Only Magento Products, "
                            "2 for Only Shopify Products, "
                            "3 for Only Roadyo or shopar products",
            ),
            openapi.Parameter(
                name="q",
                default="",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="search string for search the shopping list",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="shopping list not found",
                        example="shopping list not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = (
                request.META["HTTP_STORECATEGORYID"]
                if "HTTP_STORECATEGORYID" in request.META
                else ""
            )
            store_id = str(request.META["HTTP_STOREID"]) if "HTTP_STOREID" in request.META else "0"
            zone_id = str(request.META["HTTP_ZONEID"]) if "HTTP_ZONEID" in request.META else ""
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            search_text = request.GET.get("q", "")
            integration_type = int(request.GET.get("integrationType", 0))
            shopar_user_id = request.GET.get("userId", "")
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                if shopar_user_id != "":
                    user_id = shopar_user_id
                else:
                    user_id = json.loads(token)["userId"]
                # user_id = "5ead5f0806975248bf3c6caa"
                shopping_list_query = {"userId": user_id}
                country_id = request.GET.get("countryId", "")
                if zone_id != "":
                    city_details = db.zones.find_one({"_id": ObjectId(zone_id)}, {"city_ID": 1})
                    categoty_details = db.cities.find_one(
                        {
                            "storeCategory.storeCategoryId": store_category_id,
                            "_id": ObjectId(city_details["city_ID"]),
                        },
                        {"storeCategory": 1},
                    )
                elif store_id != "" and store_id != "0":
                    store_details = db.stores.find_one({"_id": ObjectId(store_id)}, {"cityId": 1})
                    categoty_details = db.cities.find_one(
                        {
                            "storeCategory.storeCategoryId": store_category_id,
                            "_id": ObjectId(store_details["cityId"]),
                        },
                        {"storeCategory": 1},
                    )
                else:
                    categoty_details = db.cities.find_one(
                        {"storeCategory.storeCategoryId": store_category_id}, {"storeCategory": 1}
                    )
                is_ecommerce = True
                hyperlocal = False
                storelisting = False
                remove_central = False
                if categoty_details is not None:
                    if "storeCategory" in categoty_details:
                        for cat in categoty_details["storeCategory"]:
                            if cat["storeCategoryId"] == store_category_id:
                                if cat["hyperlocal"] == True and cat["storeListing"] == 1:
                                    remove_central = True
                                    hyperlocal = True
                                    storelisting = True
                                    is_ecommerce = False
                                elif cat["hyperlocal"] == True and cat["storeListing"] == 0:
                                    hyperlocal = True
                                    storelisting = False
                                    remove_central = True
                                    is_ecommerce = False
                                else:
                                    remove_central = False
                                    hyperlocal = False
                                    storelisting = False
                                    is_ecommerce = True
                            else:
                                pass
                    else:
                        remove_central = False
                        hyperlocal = False
                        storelisting = False
                        is_ecommerce = True
                else:
                    remove_central = False
                    hyperlocal = False
                    storelisting = False
                    is_ecommerce = True

                if hyperlocal == True and storelisting == False:
                    store_id = ""

                if store_id != "" and store_id != "0":
                    shopping_list_query["storeId"] = store_id
                if search_text != "":
                    shopping_list_query["title"] = {
                        "$regex": (search_text).replace("%20", " "),
                        "$options": "i",
                    }
                if store_category_id != "":
                    shopping_list_query["storeCategoryId"] = store_category_id
                user_shopping_list = db.userShoppingList.find(shopping_list_query)

                store_details = db.stores.find(
                    {"serviceZones.zoneId": zone_id, "storeFrontTypeId": 5, "status": 1}
                )
                dc_seller_list = []
                store_data_json = []
                if zone_id != "":
                    store_query = {"categoryId": store_category_id, "serviceZones.zoneId": zone_id, "status": 1}
                elif country_id != "":
                    store_query = {
                        "categoryId": store_category_id,
                        "countryId": country_id,
                        "status": 1,
                    }
                else:
                    store_query = None

                if store_query is not None:
                    store_data = db.stores.find(store_query)
                    for store in store_data:
                        store_data_json.append(ObjectId(store["_id"]))
                else:
                    pass
                for dc_seller in store_details:
                    dc_seller_list.append(str(dc_seller["_id"]))
                    # store_data_json.append(ObjectId(dc_seller['_id']))

                if zone_id != "":
                    driver_roaster = next_availbale_driver_roaster(zone_id)
                    next_availbale_driver_time = driver_roaster["productText"]
                else:
                    next_availbale_driver_time = ""

                if user_shopping_list.count() == 0:
                    response_data = {
                        "message": "shopping list not found",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    last_response = []
                    store_list_json = []
                    product_tag = ""
                    for sp_list in user_shopping_list:
                        response_data_json = []
                        product_data_json = []
                        if "products" in sp_list:
                            for product in sp_list["products"]:
                                product_count = db.childProducts.find(
                                    {"_id": ObjectId(product["childProductId"]), "status": 1}
                                ).count()
                                if product_count > 0:
                                    offers_details = []
                                    hard_limit = 0
                                    central_query = {
                                        "size": 1,
                                        "from": 0,
                                        "query": {
                                            "bool": {
                                                "must": [
                                                    {
                                                        "match": {
                                                            "_id": str(product["centralProductId"])
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                    }
                                    varient_query = {"_id": ObjectId(product["centralProductId"])}
                                    res_central_parameters = es.search(
                                        index=index_central_product,
                                        # # doc_type=doc_central_product,
                                        body=central_query,
                                        filter_path=[
                                            "hits.hits._id",
                                            "hits.hits._source.brandTitle",
                                            "hits.hits._source.manufactureName",
                                            "hits.hits._source.currency",
                                            "hits.hits._source.storeCategoryId",
                                            "hits.hits._source.prescriptionRequired",
                                            "hits.hits._source.needsIdProof",
                                            "hits.hits._source.currencySymbol",
                                            "hits.hits._source.offer",
                                        ],
                                    )
                                    res_varient_parameters = db.products.find_one(varient_query)
                                    if (
                                            len(res_central_parameters) == 0
                                            or res_varient_parameters is None
                                    ):
                                        pass
                                    else:
                                        is_dc_linked = False
                                        store_category_id = res_central_parameters["hits"]["hits"][
                                            0
                                        ]["_source"]["storeCategoryId"]
                                        if (
                                                zone_id != ""
                                                and store_category_id == PHARMACY_STORE_CATEGORY_ID
                                        ):
                                            stores_list = db.stores.find(
                                                {"status": 1, "serviceZones.zoneId": zone_id}
                                            )
                                            for s in stores_list:
                                                store_list_json.append(str(s["_id"]))
                                        else:
                                            pass
                                        categoty_details = db.cities.find_one(
                                            {
                                                "storeCategory.storeCategoryId": res_central_parameters[
                                                    "hits"
                                                ][
                                                    "hits"
                                                ][
                                                    0
                                                ][
                                                    "_source"
                                                ][
                                                    "storeCategoryId"
                                                ]
                                            },
                                            {"storeCategory": 1},
                                        )
                                        # ==============================pres===================================

                                        brand_name = (
                                            res_central_parameters["hits"]["hits"][0]["_source"][
                                                "brandTitle"
                                            ][language]
                                            if language
                                               in res_central_parameters["hits"]["hits"][0]["_source"][
                                                   "brandTitle"
                                               ]
                                            else res_central_parameters["hits"]["hits"][0][
                                                "_source"
                                            ]["brandTitle"]["en"]
                                        )
                                        manufacture_name = (
                                            res_central_parameters["hits"]["hits"][0]["_source"][
                                                "manufactureName"
                                            ][language]
                                            if language
                                               in res_central_parameters["hits"]["hits"][0]["_source"][
                                                   "manufactureName"
                                               ]
                                            else ""
                                        )
                                        offer_data = (
                                            res_central_parameters["hits"]["hits"][0]["_source"][
                                                "offer"
                                            ]
                                            if "offer"
                                               in res_central_parameters["hits"]["hits"][0]["_source"]
                                            else []
                                        )
                                        if (
                                                res_central_parameters["hits"]["hits"][0]["_source"][
                                                    "storeCategoryId"
                                                ]
                                                == MEAT_STORE_CATEGORY_ID
                                        ):
                                            child_unit_product_details = db.childProducts.find_one(
                                                {"_id": ObjectId(product["childProductId"])}
                                            )
                                            if child_unit_product_details is not None:
                                                try:
                                                    zone_details = zone_find(
                                                        {"_id": ObjectId(zone_id)}
                                                    )
                                                    child_product_query = {
                                                        "units.unitId": child_unit_product_details[
                                                            "units"
                                                        ][0]["unitId"],
                                                        "storeId": ObjectId(
                                                            zone_details["DCStoreId"]
                                                        ),
                                                    }
                                                except:
                                                    child_product_query = {
                                                        "units.unitId": child_unit_product_details[
                                                            "units"
                                                        ][0]["unitId"],
                                                        "storeId": "0",
                                                    }
                                            else:
                                                child_product_query = {
                                                    "_id": ObjectId(product["childProductId"])
                                                }
                                        else:
                                            child_product_query = {
                                                "_id": ObjectId(product["childProductId"])
                                            }

                                        if int(integration_type) == 0:
                                            pass
                                        elif int(integration_type) == 1:
                                            child_product_query["magentoId"] = {"$ne": -1}
                                        elif int(integration_type) == 2:
                                            child_product_query["shopify_id"] = {"$ne": ""}
                                        elif int(integration_type) == 3:
                                            or_mongo_query = []
                                            or_mongo_query.append({"magentoId": -1})
                                            or_mongo_query.append({"shopify_id": ""})
                                            or_mongo_query.append({"magentoId": {"$exists": False}})
                                            or_mongo_query.append(
                                                {"shopify_id": {"$exists": False}}
                                            )
                                            child_product_query["$or"] = or_mongo_query
                                        child_product = db.childProducts.find_one(
                                            child_product_query
                                        )
                                        if child_product is None:
                                            child_product = db.childProducts.find_one(
                                                {"_id": ObjectId(product["childProductId"])}
                                            )
                                        if child_product is not None:
                                            best_supplier = {
                                                "productId": str(product["childProductId"]),
                                                "id": str(child_product["storeId"]),
                                                "retailerQty": child_product["units"][0][
                                                    "availableQuantity"
                                                ],
                                            }
                                            best_dc = {}
                                            if len(best_dc) > 0:
                                                child_product = db.childProducts.find_one(
                                                    {"_id": ObjectId(best_dc["productId"])}
                                                )
                                                if "seller" in child_product:
                                                    for seller in child_product["seller"]:
                                                        if seller["storeId"] == best_supplier["id"]:
                                                            hard_limit = seller["hardLimit"]
                                                            pre_order = seller["preOrder"]
                                                        else:
                                                            pass
                                                else:
                                                    pass
                                            else:
                                                pass

                                            if "availableQuantity" in child_product["units"][0]:
                                                if (
                                                        child_product["units"][0]["availableQuantity"]
                                                        > 0
                                                ):
                                                    availableStock = int(
                                                        child_product["units"][0][
                                                            "availableQuantity"
                                                        ]
                                                    )
                                                else:
                                                    availableStock = 0
                                            else:
                                                availableStock = 0

                                            try:
                                                product_name = child_product["units"][0][
                                                    "unitName"
                                                ][language]
                                            except:
                                                product_name = res_varient_parameters["pPName"][
                                                    "en"
                                                ]

                                                # ====================================best offers ==========================================================

                                            if len(best_supplier) > 0:
                                                if "productId" in best_supplier:
                                                    product_id = best_supplier["productId"]
                                                    available_stock = int(
                                                        best_supplier["retailerQty"]
                                                    )
                                                else:
                                                    product_id = str(child_product["_id"])
                                                    available_stock = 0
                                            else:
                                                product_id = str(child_product["_id"])
                                                available_stock = 0

                                            if available_stock > 0:
                                                out_of_stock = False
                                            else:
                                                out_of_stock = True

                                            if store_category_id == GROCERY_STORE_CATEGORY_ID:
                                                prescription_required = False
                                            else:
                                                if "prescriptionRequired" in child_product:
                                                    if child_product["prescriptionRequired"] == 0:
                                                        prescription_required = False
                                                    else:
                                                        prescription_required = True
                                                else:
                                                    prescription_required = False

                                            if "needsIdProof" in child_product:
                                                if child_product["needsIdProof"] == False:
                                                    needsIdProof = False
                                                else:
                                                    needsIdProof = True
                                            else:
                                                needsIdProof = False

                                            if "offer" in child_product:
                                                for offer in child_product["offer"]:
                                                    offer_details = db.offers.find_one(
                                                        {"_id": ObjectId(offer["offerId"])}
                                                    )
                                                    if offer_details is not None:
                                                        if offer_details["startDateTime"] <= int(
                                                                time.time()
                                                        ):
                                                            if offer["status"] == 1:
                                                                offers_details.append(offer)
                                                            else:
                                                                pass
                                            else:
                                                pass

                                            if len(offers_details) > 0:
                                                best_offer = max(
                                                    offers_details, key=lambda x: x["discountValue"]
                                                )
                                                offer_details = db.offers.find(
                                                    {
                                                        "_id": ObjectId(best_offer["offerId"]),
                                                        "status": 1,
                                                        "storeId": best_supplier["id"],
                                                    }
                                                ).count()
                                                if offer_details != 0:
                                                    best_offer = best_offer
                                                else:
                                                    best_offer = {}
                                            else:
                                                best_offer = {}

                                            if len(best_offer) == 0:
                                                percentage = 0
                                                discount_type = 0
                                            else:
                                                if "discountType" in best_offer:
                                                    if best_offer["discountType"] == 0:
                                                        percentage = 0
                                                        discount_type = 0
                                                    else:
                                                        percentage = (
                                                            best_offer["discountValue"]
                                                            if "discountValue" in best_offer
                                                            else 0
                                                        )
                                                        discount_type = best_offer["discountType"]
                                                else:
                                                    percentage = 0
                                                    discount_type = 0

                                            if len(best_offer) > 0:
                                                discount_type = (
                                                    int(best_offer["discountType"])
                                                    if "discountType" in best_offer
                                                    else 0
                                                )
                                                discount_value = (
                                                    best_offer["discountValue"]
                                                    if "discountValue" in best_offer
                                                    else 0
                                                )
                                            else:
                                                discount_type = 2

                                            tax_value = []
                                            # ===================================for tax====================================
                                            if child_product != None:
                                                if type(child_product["tax"]) == list:
                                                    for tax in child_product["tax"]:
                                                        tax_value.append({"value": tax["taxValue"]})
                                                else:
                                                    if child_product["tax"] != None:
                                                        if "taxValue" in child_product["tax"]:
                                                            tax_value.append(
                                                                {
                                                                    "value": child_product["tax"][
                                                                        "taxValue"
                                                                    ]
                                                                }
                                                            )
                                                        else:
                                                            tax_value.append(
                                                                {"value": child_product["tax"]}
                                                            )
                                                    else:
                                                        tax_value = []
                                            else:
                                                tax_value = []

                                            tax_price = 0
                                            if (
                                                    res_central_parameters["hits"]["hits"][0][
                                                        "_source"
                                                    ]["storeCategoryId"]
                                                    != DINE_STORE_CATEGORY_ID
                                            ):
                                                if len(tax_value) == 0:
                                                    tax_price = 0
                                                else:
                                                    for amount in tax_value:
                                                        tax_price = tax_price + (
                                                            int(amount["value"])
                                                        )
                                            else:
                                                tax_price = 0
                                            # ==========================unit data================================================================
                                            try:
                                                price = child_product["units"][0]["b2cPricing"][0][
                                                    "b2cproductSellingPrice"
                                                ]
                                            except:
                                                price = child_product["units"][0]["floatValue"]

                                            # ==================================get currecny rate============================
                                            try:
                                                currency_rate = currency_exchange_rate[
                                                    str(child_product["currency"])
                                                    + "_"
                                                    + str(currency_code)
                                                    ]
                                            except:
                                                currency_rate = 0

                                            currency_details = db.currencies.find_one(
                                                {"currencyCode": currency_code}
                                            )
                                            if currency_details is not None:
                                                currency_symbol = currency_details["currencySymbol"]
                                                currency = currency_details["currencyCode"]
                                            else:
                                                currency_symbol = child_product["currencySymbol"]
                                                currency = child_product["currency"]

                                            if float(currency_rate) > 0:
                                                price = price * float(currency_rate)

                                            if price == 0 or price == "":
                                                final_price = 0
                                                discount_price = 0
                                            else:
                                                price = price + ((float(price) * tax_price) / 100)
                                                if discount_type == 0:
                                                    discount_price = float(discount_value)
                                                elif discount_type == 1:
                                                    discount_price = (
                                                                             float(price) * float(discount_value)
                                                                     ) / 100
                                                else:
                                                    discount_price = 0
                                                final_price = price - discount_price

                                            images = (
                                                child_product["units"][0]["image"]
                                                if "image" in child_product["units"][0]
                                                else []
                                            )
                                            attribute_data = []
                                            for attr in child_product["units"][0]["attributes"]:
                                                if "attrlist" in attr:
                                                    for attr_data in attr["attrlist"]:
                                                        try:
                                                            if attr_data["linkedtounit"] == 1:
                                                                attr_value = ""
                                                                if "measurementUnit" in attr_data:
                                                                    measurement_unit = attr_data[
                                                                        "measurementUnit"
                                                                    ]
                                                                else:
                                                                    measurement_unit = ""
                                                                if (
                                                                        type(
                                                                            attr_data["value"][language]
                                                                        )
                                                                        == list
                                                                ):
                                                                    for li in attr_data["value"][
                                                                        language
                                                                    ]:
                                                                        if attr_value == "":
                                                                            attr_value = (
                                                                                    str(li)
                                                                                    + " "
                                                                                    + measurement_unit
                                                                            )
                                                                        else:
                                                                            attr_value = (
                                                                                    str(attr_value)
                                                                                    + ", "
                                                                                    + str(li)
                                                                                    + " "
                                                                                    + measurement_unit
                                                                            )
                                                                else:
                                                                    attr_value = (
                                                                            str(
                                                                                attr_data["value"][
                                                                                    language
                                                                                ]
                                                                            )
                                                                            + " "
                                                                            + measurement_unit
                                                                    )
                                                                attribute_data.append(
                                                                    {
                                                                        "attrname": attr_data[
                                                                            "attrname"
                                                                        ][language]
                                                                        if language
                                                                           in attr_data["attrname"]
                                                                        else attr_data["attrname"][
                                                                            "en"
                                                                        ],
                                                                        "value": attr_value,
                                                                        "name": attr_data[
                                                                            "attrname"
                                                                        ][language]
                                                                        if language
                                                                           in attr_data["attrname"]
                                                                        else attr_data["attrname"][
                                                                            "en"
                                                                        ],
                                                                    }
                                                                )
                                                            else:
                                                                pass
                                                        except:
                                                            pass

                                            review_details = db.reviewRatings.find(
                                                {
                                                    "productId": str(product["centralProductId"]),
                                                    "status": 1,
                                                }
                                            )
                                            if review_details.count() > 0:
                                                review_data = []
                                                for review in review_details:
                                                    review_data.append(review["rating"])
                                                avg_rating = sum(review_data) / len(review_data)
                                                avg_rating = round(avg_rating, 2)
                                            else:
                                                avg_rating = 0

                                            # ===============================variant data=================================================
                                            variant_count = validate_variant(
                                                str(
                                                    res_central_parameters["hits"]["hits"][0]["_id"]
                                                ),
                                                best_supplier["id"],
                                                zone_id,
                                                store_category_id,
                                            )
                                            if "allowOrderOutOfStock" in child_product:
                                                allow_out_of_order = child_product[
                                                    "allowOrderOutOfStock"
                                                ]
                                            else:
                                                allow_out_of_order = False

                                            if child_product != None:
                                                linked_attribute = get_linked_unit_attribute(
                                                    child_product["units"]
                                                )
                                            else:
                                                linked_attribute = []

                                            dc_child_product = db.childProducts.find_one(
                                                {
                                                    "units.unitId": child_product["units"][0][
                                                        "unitId"
                                                    ],
                                                    "storeId": {"$in": store_data_json},
                                                    "status": 1,
                                                }
                                            )
                                            hard_limit = 0
                                            pre_order = False
                                            if dc_child_product is not None:
                                                if "seller" in dc_child_product:
                                                    if len(dc_child_product["seller"]) > 0:
                                                        is_dc_linked = True
                                                        dc_id = str(dc_child_product["_id"])
                                                        for seller in dc_child_product["seller"]:
                                                            if seller["storeId"] == str(
                                                                    child_product["storeId"]
                                                            ):
                                                                hard_limit = seller["hardLimit"]
                                                                pre_order = seller["preOrder"]
                                                            else:
                                                                pass
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                            else:
                                                pass

                                            # ===============================get the best slot for product
                                            if (
                                                    res_central_parameters["hits"]["hits"][0][
                                                        "_source"
                                                    ]["storeCategoryId"]
                                                    == MEAT_STORE_CATEGORY_ID
                                            ):
                                                if str(child_product["storeId"]) == "0":
                                                    out_of_stock = True
                                                    next_availbale_driver_time = ""
                                                else:
                                                    if (
                                                            available_stock > 0
                                                            and is_dc_linked == True
                                                            and next_availbale_driver_time != ""
                                                    ):
                                                        next_delivery_slot = driver_roaster["text"]
                                                        next_availbale_driver_time = driver_roaster[
                                                            "productText"
                                                        ]
                                                        if (
                                                                next_delivery_slot != ""
                                                                and next_availbale_driver_time != ""
                                                        ):
                                                            out_of_stock = False
                                                        else:
                                                            out_of_stock = True
                                                    elif (
                                                            available_stock < 0
                                                            and hard_limit != 0
                                                            and is_dc_linked == True
                                                            and next_availbale_driver_time != ""
                                                    ):
                                                        delivery_slot = (
                                                            next_availbale_driver_shift_out_stock(
                                                                zone_id,
                                                                0,
                                                                hard_limit,
                                                                str(child_product["_id"]),
                                                            )
                                                        )
                                                        try:
                                                            next_availbale_driver_time = (
                                                                delivery_slot["productText"]
                                                            )
                                                        except:
                                                            next_availbale_driver_time = ""
                                                        if next_availbale_driver_time != "":
                                                            out_of_stock = False
                                                        else:
                                                            out_of_stock = True
                                                    elif (
                                                            available_stock <= 0
                                                            and is_dc_linked == True
                                                            and pre_order == True
                                                    ):
                                                        if "seller" in dc_child_product:
                                                            if len(dc_child_product["seller"]) > 0:
                                                                best_buffer = min(
                                                                    dc_child_product["seller"],
                                                                    key=lambda x: x[
                                                                        "procurementTime"
                                                                    ],
                                                                )
                                                                delivery_slot = next_availbale_driver_shift_out_stock(
                                                                    zone_id,
                                                                    best_buffer["procurementTime"],
                                                                    hard_limit,
                                                                    str(child_product["_id"]),
                                                                )
                                                            else:
                                                                delivery_slot = next_availbale_driver_shift_out_stock(
                                                                    zone_id,
                                                                    0,
                                                                    hard_limit,
                                                                    str(child_product["_id"]),
                                                                )
                                                            try:
                                                                next_availbale_driver_time = (
                                                                    delivery_slot["productText"]
                                                                )
                                                            except:
                                                                next_availbale_driver_time = ""
                                                            if (
                                                                    allow_out_of_order == True
                                                                    and next_availbale_driver_time != ""
                                                            ):
                                                                out_of_stock = False
                                                            else:
                                                                out_of_stock = True
                                                        else:
                                                            next_availbale_driver_time = ""
                                                            out_of_stock = True
                                                    elif (
                                                            available_stock == 0
                                                            and is_dc_linked == False
                                                    ):
                                                        next_availbale_driver_time = ""
                                                        out_of_stock = True
                                                    else:
                                                        next_availbale_driver_time = ""
                                                        out_of_stock = True
                                            else:
                                                next_availbale_driver_time = ""
                                            product_type = combo_special_type_validation(product_id)
                                            response_data_json.append(
                                                {
                                                    "parentProductId": res_central_parameters[
                                                        "hits"
                                                    ]["hits"][0]["_id"],
                                                    "childProductId": product_id,
                                                    "storeId": best_supplier["id"],
                                                    "supplier": best_supplier,
                                                    "suppliers": best_supplier,
                                                    "productType": product_type,
                                                    "productName": product_name,
                                                    "prescriptionRequired": prescription_required,
                                                    "needsIdProof": needsIdProof,
                                                    "nextSlotTime": next_availbale_driver_time,
                                                    "avgRating": avg_rating,
                                                    "brandName": brand_name,
                                                    "linkedAttribute": linked_attribute,
                                                    "manufactureName": manufacture_name,
                                                    "currency": currency,
                                                    "variantCount": variant_count,
                                                    "variantData": attribute_data,
                                                    "currencySymbol": currency_symbol,
                                                    "attributes": attribute_data,
                                                    "images": images,
                                                    "offers": best_offer,
                                                    "offer": best_offer,
                                                    "unitId": child_product["units"][0]["unitId"],
                                                    "discountType": discount_type,
                                                    "TotalStarRating": avg_rating,
                                                    "finalPriceList": {
                                                        "basePrice": round(price, 2),
                                                        "finalPrice": round(final_price, 2),
                                                        "discountPrice": round(discount_price, 2),
                                                        "discountType": discount_type,
                                                        "discountPercentage": percentage,
                                                    },
                                                    "availableQuantity": available_stock,
                                                    "outOfStock": out_of_stock,
                                                }
                                            )
                                        else:
                                            pass
                                else:
                                    pass
                            for productlist in sp_list["products"]:
                                product_count = db.childProducts.find(
                                    {"_id": ObjectId(productlist["childProductId"]), "status": 1}
                                ).count()
                                if product_count > 0:
                                    product_data_json.append(productlist)
                            last_response.append(
                                {
                                    "shoppingId": str(sp_list["_id"]),
                                    "title": sp_list["title"],
                                    "backgroundImage": sp_list["image"],
                                    "penCount": len(response_data_json),
                                    "products": response_data_json,
                                }
                            )
                        else:
                            last_response.append(
                                {
                                    "shoppingId": str(sp_list["_id"]),
                                    "title": sp_list["title"],
                                    "penCount": 0,
                                    "backgroundImage": sp_list["image"],
                                    "products": response_data_json,
                                }
                            )
                    response_data = {"message": "data found successfully", "data": last_response}
                    return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
	API for update and delete the shopping list
"""


class ProductShoppingList(APIView):
    @swagger_auto_schema(
        method="patch",
        tags=["Shopping List"],
        operation_description="API for update the shopping list name",
        required=["Authorization"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            )
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["title", "image"],
            properties={
                "id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="id of the shopping list",
                    example="5e32f39c54f0370c51710233",
                ),
                "title": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="Name of the shopping list",
                    example="Monthly Needs",
                ),
                "image": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="Image for the background",
                    example="https://shoppd.s3.ap-south-1.amazonaws.com/350x350/Vivo-V5s-Perfect-Selfie-_1580311083.jpeg",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data updated successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            # if "HTTP_STORECATEGORYID" in request.META else ECOMMERCE_STORE_CATEGORY_ID
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5d92f959fc2045620ce36c92"
                user_shopping_list = db.userShoppingList.find(
                    {"_id": ObjectId(request.data["id"]), "userId": user_id}
                )
                if user_shopping_list.count() > 0:
                    db.userShoppingList.update(
                        {"_id": ObjectId(request.data["id"]), "userId": user_id},
                        {"$set": {"title": request.data["title"], "image": request.data["image"]}},
                        upsert=True,
                        multi=False,
                    )
                    response_data = {
                        "message": "data updated successfully",
                        "shoppingId": str(request.data["id"]),
                    }
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {"message": "data not found"}
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)

    @swagger_auto_schema(
        method="delete",
        tags=["Shopping List"],
        operation_description="API for delete the shopping list from the user's list permanatly",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            )
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["title", "image"],
            properties={
                "id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="id of the shopping list",
                    example="5e32f39c54f0370c51710233",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="shopping list deleted successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="shopping list not found",
                        example="shopping list not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["delete"])
    def delete(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                data_json = request.data
                user_shopping_list = db.userShoppingList.find({"_id": ObjectId(data_json["id"])})
                if user_shopping_list.count() == 0:
                    response_data = {
                        "message": "shopping list not found",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                elif "id" not in data_json:
                    response_data = {
                        "message": "Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    db.userShoppingList.remove({"_id": ObjectId(data_json["id"])})
                response_data = {
                    "message": "data removed successfully",
                }
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
	API for the give the recent searches of the user
"""


class UserRecentSearch(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Product Sugestion"],
        operation_description="API for get the recent searches based on user search",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization", in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, required=True
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="storeId",
                default="5e9d219b696c826a3792d0e9",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store id for getting the products from only that particular stores",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY,
                        items=openapi.Items(type=openapi.TYPE_STRING, example="Puma Casual Shoes"),
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the success",
                        example="Recent Search Found",
                    ),
                    "totalCount": openapi.Schema(
                        type=openapi.TYPE_INTEGER, description="total number of product", example=1
                    ),
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY, items=openapi.Items(type=openapi.TYPE_STRING)
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    ),
                    "totalCount": openapi.Schema(
                        type=openapi.TYPE_INTEGER, description="total number of product", example=0
                    ),
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "data": openapi.Schema(
                        type=openapi.TYPE_ARRAY, items=openapi.Items(type=openapi.TYPE_STRING)
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="Product Not Found",
                    ),
                    "totalCount": openapi.Schema(
                        type=openapi.TYPE_INTEGER, description="total number of product", example=0
                    ),
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            total_count = 0
            productData = []
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {"message": "unauthorized", "totalCount": 0, "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            user_id = json.loads(token)["userId"]
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            if store_category_id == "0" or store_category_id == 0:
                store_category_id = ECOMMERCE_STORE_CATEGORY_ID
            recent_search_query = {
                "userid": user_id,
                "store_category_id": str(store_category_id)
            }

            store_id = request.GET.get("storeId", "")
            if store_id == "":
                store_id = request.META["HTTP_STOREID"] if "HTTP_STOREID" in request.META else ""

            if store_id != "" and store_id != "0":
                recent_search_query['storeid'] = str(store_id)

            response_casandra = db.userRecentSearch.find(recent_search_query).sort([("_id", -1)]).skip(0).limit(20)
            total_count = db.userRecentSearch.find(recent_search_query).count()
            for search in response_casandra:
                if search['categoryname'] != "" and search['categoryname'] != " " and search['categoryname'] != "  ":
                    if search['categoryname'] != "undefined":
                        if search['categoryname'] is None:
                            is_product = False
                        else:
                            is_product = search['categoryname']

                        if search['parent_product_id'] == "":
                            parent_product_id = ""
                        else:
                            parent_product_id = search['parent_product_id']

                        if search['child_product_id'] == "":
                            child_product_id = ""
                        else:
                            child_product_id = search['child_product_id']
                        if child_product_id == "":
                            is_product = False

                        if child_product_id != "":
                            child_pro_count = db.childProducts.find(
                                {"_id": ObjectId(child_product_id), "status": 1}).count()
                            if child_pro_count == 0:
                                is_product = False

                        productData.append(
                            {
                                "isProduct": is_product,
                                "productId": parent_product_id,
                                "childProductId": child_product_id,
                                "searchText": search['categoryname'],
                                "searchIn": search['search_in'],
                                "timestamp": search['createdtimestamp'],
                            }
                        )
            if len(productData) > 0:
                dataframe = pd.DataFrame(productData)
                dataframe = dataframe.drop_duplicates(subset="searchText", keep="last")
                product_list = dataframe.to_dict(orient="records")
                newlist = sorted(product_list, key=lambda k: k["timestamp"], reverse=True)
                finalSuggestions = {
                    "data": {
                        # dataframe.to_dict(orient="records"),
                        "data": newlist,
                        "message": "Recent Search Found",
                        "totalCount": total_count,
                    }
                }
                return JsonResponse(finalSuggestions, safe=False, status=200)
            else:
                error = {"data": [], "message": "No Products Found"}
                return JsonResponse(error, status=404, safe=False)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)


"""
	API for the get the products rating details which user order the products
"""


class RatingProductsList(APIView):
    def post(self, request):
        try:
            data = request.data
            user_id = data["userId"] if "userId" in data else ""
            rating_data = []
            if user_id == "":
                response = {"message": "user id is blank", "data": []}
                return JsonResponse(response, safe=False, status=422)
            else:
                parent_products = []
                for products in data["productId"]:
                    central_product_id = db.childProducts.find_one(
                        {"_id": ObjectId(products)}, {"pName": 1, "parentProductId": 1}
                    )
                    if central_product_id != None:
                        rating_details = db.reviewRatings.find_one(
                            {
                                "userId": user_id,
                                "productId": str(central_product_id["parentProductId"]),
                                "childProductId": products,
                            }
                        )
                        if rating_details != None:
                            rating_data.append(
                                {
                                    "rating": rating_details["rating"],
                                    "reviewTitle": rating_details["reviewTitle"]
                                    if "reviewTitle" in rating_details
                                    else "",
                                    "reviewDescription": rating_details["reviewDescription"]
                                    if "reviewDescription" in rating_details
                                    else "",
                                    "isRated": True,
                                    "productId": products,
                                }
                            )
                        else:
                            rating_data.append(
                                {
                                    "rating": 0,
                                    "reviewTitle": "",
                                    "reviewDescription": "",
                                    "isRated": False,
                                    "productId": products,
                                }
                            )
                    else:
                        rating_data.append(
                            {
                                "rating": 0,
                                "reviewTitle": "",
                                "reviewDescription": "",
                                "isRated": False,
                                "productId": products,
                            }
                        )
                response = {"message": "data found", "data": rating_data}
                return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)


"""
	Api for the get the details of the shopping data list for the users
"""


class ShoppingListData(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Shopping List"],
        operation_description="API for get the shopping list for the product in which shopping list product is available",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                in_=openapi.IN_HEADER,
                default=ECOMMERCE_STORE_CATEGORY_ID,
                type=openapi.TYPE_STRING,
                required=True,
                description="store category id for which category data we need to get",
            ),
            openapi.Parameter(
                name="storeId",
                in_=openapi.IN_HEADER,
                default="0",
                type=openapi.TYPE_STRING,
                required=True,
                description="store id for which store data we need to get",
            ),
            openapi.Parameter(
                name="centralProductId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="central product id of the product",
                default="5e4401ff40c14024e1d6cccc",
            ),
            openapi.Parameter(
                name="childProductId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="child product id of the product",
                default="5e4401ff40c14024e1d6cccd",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found.",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            store_category_id = (
                request.META["HTTP_STORECATEGORYID"]
                if "HTTP_STORECATEGORYID" in request.META
                else ""
            )
            store_id = request.META["HTTP_STOREID"] if "HTTP_STOREID" in request.META else "0"
            timeStamp = datetime.datetime.now().timestamp()
            central_product_id = request.GET.get("centralProductId", "")
            child_product_id = request.GET.get("childProductId", "")
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif central_product_id == "":
                response_data = {
                    "message": "central product id is blank",
                }
                return JsonResponse(response_data, safe=False, status=404)
            elif store_category_id == "":
                response_data = {
                    "message": "store category id is blank",
                }
                return JsonResponse(response_data, safe=False, status=422)
            elif child_product_id == "":
                response_data = {
                    "message": "child product id is blank",
                }
                return JsonResponse(response_data, safe=False, status=404)
            else:
                user_id = json.loads(token)["userId"]
                shopping_list_data = []
                if store_id != "" and store_id != "0":
                    user_shopping_list = db.userShoppingList.find(
                        {
                            "userId": user_id,
                            "storeId": store_id,
                            "storeCategoryId": store_category_id,
                        }
                    )
                else:
                    user_shopping_list = db.userShoppingList.find(
                        {"userId": user_id, "storeCategoryId": store_category_id}
                    )
                if user_shopping_list.count() > 0:
                    for list_data in user_shopping_list:
                        if "products" in list_data:
                            if any(
                                    d["childProductId"] == child_product_id
                                    and d["centralProductId"] == central_product_id
                                    for d in list_data["products"]
                            ):
                                is_added = True
                            else:
                                is_added = False
                        else:
                            is_added = False
                        shopping_list_data.append(
                            {
                                "title": list_data["title"],
                                "shoppingListId": str(list_data["_id"]),
                                "image": list_data["image"],
                                "isAdded": is_added,
                            }
                        )
                    response_data = {
                        "message": "data updated successfully",
                        "data": shopping_list_data,
                    }
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {"message": "data not found"}
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            response_data = {
                "message": message,
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
	Api for the get the products of the user's shopping list more products
"""


class ShoppingListProducts(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Shopping List"],
        operation_description="API for get all list of the user's shopping list",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language of in which language need data",
                default="en",
            ),
            openapi.Parameter(
                name="shoppingId",
                default="5e32dce6326c5468cea82abd",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="shopping list id from which shopping list need data",
            ),
            openapi.Parameter(
                name="sortType",
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="sort type for the sorting the data. 0 for newest first, 1 for low to high price and 2 for high to low price",
            ),
            openapi.Parameter(
                name="maxprice",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="maximum price for the product while applying price filter",
            ),
            openapi.Parameter(
                name="minprice",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="minimum price for the product while applying price filter",
            ),
            openapi.Parameter(
                name="bname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="brand name for the product which want to display. ex. Nike, H&M",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b6ea8798dc19d926bd28",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="zone id if need to get the zone seller only",
            ),
            openapi.Parameter(
                name="integrationType",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for filter out the products base on product setup configuration, value should be"
                            "0 for All products, "
                            "1 for Only Magento Products, "
                            "2 for Only Shopify Products, "
                            "3 for Only Roadyo or shopar products",
            ),
            openapi.Parameter(
                name="cityId",
                default="5df7b7218798dc2c1114e6bf",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular city",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="shopping list not found",
                        example="shopping list not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            tax_price = 0
            brand_list = []
            filter_responseJson = []
            price_data = []
            currency = "INR"
            currency_symbol = "$"
            filters_json = []
            store_category_id = (
                request.META["HTTP_STORECATEGORYID"]
                if "HTTP_STORECATEGORYID" in request.META
                else ""
            )
            token = request.META["HTTP_AUTHORIZATION"]
            city_id = request.META["HTTP_CITYID"] if "HTTP_CITYID" in request.META else ""
            zone_id = request.META["HTTP_ZONEID"] if "HTTP_ZONEID" in request.META else ""
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            shopping_list_id = request.GET.get("shoppingId", "")
            sort_type = int(request.GET.get("sortType", 0))
            integration_type = int(request.GET.get("integrationType", 0))
            sort_type = int(sort_type)
            bname = request.GET.get("bname", "")  # brand name for the search
            max_price = request.GET.get("maxprice", "")  # maximum price
            min_price = request.GET.get("minprice", "")  # minimum price
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif shopping_list_id == "":
                response_data = {
                    "message": "shopping list id is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5ead5f0806975248bf3c6caa"
                user_shopping_list = db.userShoppingList.find(
                    {"userId": user_id, "status": 1, "_id": ObjectId(shopping_list_id)}
                )

                if zone_id != "":
                    driver_roaster = next_availbale_driver_roaster(zone_id)
                    next_availbale_driver_time = driver_roaster["productText"]
                else:
                    next_availbale_driver_time = ""

                dc_seller_list = []
                store_data_json = []
                if zone_id != "":
                    store_query = {"categoryId": "0", "serviceZones.zoneId": zone_id, "status": 1}
                else:
                    store_query = None

                if store_query is not None:
                    store_data = db.stores.find(store_query)
                    for store in store_data:
                        store_data_json.append(ObjectId(store["_id"]))
                else:
                    pass

                if user_shopping_list.count() == 0:
                    response_data = {
                        "message": "shopping list not found",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    product_tag = ""
                    for sp_list in user_shopping_list:
                        store_list_json = []
                        if (
                                zone_id != ""
                                and sp_list["storeCategoryId"] == PHARMACY_STORE_CATEGORY_ID
                        ):
                            stores_list = db.stores.find(
                                {"status": 1, "serviceZones.zoneId": zone_id}
                            )
                            for s in stores_list:
                                store_list_json.append(str(s["_id"]))
                        else:
                            pass
                        if "products" in sp_list:
                            for product in sp_list["products"]:
                                product_count = db.childProducts.find(
                                    {"_id": ObjectId(product["childProductId"]), "status": 1}
                                ).count()
                                if product_count > 0:
                                    try:
                                        supplier_list = []
                                        dc_data = []
                                        is_dc_linked = False
                                        hard_limit = 0
                                        query = []
                                        # ==================================based on login type====================================================
                                        if max_price != "" and min_price != "":
                                            query.append(
                                                {
                                                    "range": {
                                                        "units.price.en": {
                                                            "gte": float(min_price),
                                                            "lte": float(max_price),
                                                        }
                                                    }
                                                }
                                            )
                                        else:
                                            pass

                                        query.append(
                                            {"match": {"_id": str(product["centralProductId"])}}
                                        )
                                        if bname != "":
                                            if "," in bname or "%2C" in bname:
                                                query.append(
                                                    {
                                                        "match": {
                                                            "brandTitle."
                                                            + language: bname.replace("%20", " ")
                                                        }
                                                    }
                                                )
                                            else:
                                                query.append(
                                                    {
                                                        "match_phrase_prefix": {
                                                            "brandTitle."
                                                            + language: bname.replace("%20", " ")
                                                        }
                                                    }
                                                )
                                        else:
                                            pass

                                        query.append({"match": {"status": 1}})
                                        filter_parameters_query = {
                                            "query": {"bool": {"must": query}},
                                            "size": 1,
                                            "from": 0,
                                        }

                                        if sp_list["storeCategoryId"] == MEAT_STORE_CATEGORY_ID:
                                            child_unit_product_details = db.childProducts.find_one(
                                                {"_id": ObjectId(product["childProductId"])}
                                            )
                                            if child_unit_product_details is not None:
                                                try:
                                                    zone_details = zone_find(
                                                        {"_id": ObjectId(zone_id)}
                                                    )
                                                    variant_query = {
                                                        "units.unitId": child_unit_product_details[
                                                            "units"
                                                        ][0]["unitId"],
                                                        "storeId": ObjectId(
                                                            zone_details["DCStoreId"]
                                                        ),
                                                    }
                                                except:
                                                    variant_query = {
                                                        "units.unitId": child_unit_product_details[
                                                            "units"
                                                        ][0]["unitId"],
                                                        "storeId": "0",
                                                    }
                                            else:
                                                variant_query = {
                                                    "_id": ObjectId(product["childProductId"])
                                                }
                                        else:
                                            variant_query = {
                                                "parentProductId": str(product["centralProductId"]),
                                                "_id": ObjectId(product["childProductId"]),
                                            }

                                        res_central_parameters = es.search(
                                            index=index_central_product,
                                            body=filter_parameters_query,
                                            filter_path=[
                                                "hits.hits._id",
                                                "hits.hits._source.brandTitle",
                                                "hits.hits._source.manufactureName",
                                                "hits.hits._source.currency",
                                                "hits.hits._source.prescriptionRequired",
                                                "hits.hits._source.needsIdProof",
                                                "hits.hits._source.currencySymbol",
                                                "hits.hits._source.storeCategoryId",
                                                "hits.hits._source.createdTimestamp",
                                                "hits.hits._source.offer",
                                            ],
                                        )
                                        if int(integration_type) == 0:
                                            pass
                                        elif int(integration_type) == 1:
                                            variant_query["magentoId"] = {"$ne": -1}
                                        elif int(integration_type) == 2:
                                            variant_query["shopify_id"] = {"$ne": ""}
                                        elif int(integration_type) == 3:
                                            or_mongo_query = []
                                            or_mongo_query.append({"magentoId": 0})
                                            or_mongo_query.append({"shopify_id": ""})
                                            or_mongo_query.append({"magentoId": {"$exists": False}})
                                            or_mongo_query.append(
                                                {"shopify_id": {"$exists": False}}
                                            )
                                            variant_query["$or"] = or_mongo_query
                                        res_varient_parameters = db.childProducts.find_one(
                                            variant_query
                                        )
                                        if res_varient_parameters is None:
                                            res_varient_parameters = db.childProducts.find_one(
                                                {
                                                    "parentProductId": str(
                                                        product["centralProductId"]
                                                    ),
                                                    "_id": ObjectId(product["childProductId"]),
                                                }
                                            )
                                        if (
                                                res_varient_parameters is not None
                                                and len(res_central_parameters) > 0
                                        ):
                                            # ======================for the best supplier=======================================
                                            categoty_details = db.cities.find_one(
                                                {
                                                    "storeCategory.storeCategoryId": res_central_parameters[
                                                        "hits"
                                                    ][
                                                        "hits"
                                                    ][
                                                        0
                                                    ][
                                                        "_source"
                                                    ][
                                                        "storeCategoryId"
                                                    ]
                                                },
                                                {"storeCategory": 1},
                                            )
                                            remove_central = False
                                            if sp_list["storeCategoryId"] == MEAT_STORE_CATEGORY_ID:
                                                pass
                                            else:
                                                if categoty_details is not None:
                                                    if "storeCategory" in categoty_details:
                                                        for cat in categoty_details["storeCategory"]:
                                                            if (
                                                                    cat["storeCategoryId"]
                                                                    == res_central_parameters["hits"][
                                                                "hits"
                                                            ][0]["_source"]["storeCategoryId"]
                                                            ):
                                                                if (
                                                                        cat["hyperlocal"] == True
                                                                        and cat["storeListing"] == 1
                                                                ):
                                                                    remove_central = True
                                                                elif (
                                                                        cat["hyperlocal"] == True
                                                                        and cat["storeListing"] == 0
                                                                ):
                                                                    remove_central = True
                                                                else:
                                                                    remove_central = False
                                                            else:
                                                                pass
                                                    else:
                                                        remove_central = False
                                                else:
                                                    remove_central = False

                                            try:
                                                product_tag = ""
                                                best_supplier = {
                                                    "productId": str(res_varient_parameters["_id"]),
                                                    "storeId": str(
                                                        res_varient_parameters["storeId"]
                                                    ),
                                                }
                                            except:
                                                best_supplier = {}
                                            # ==============================pres===================================
                                            if "prescriptionRequired" in res_varient_parameters:
                                                if (
                                                        res_varient_parameters["prescriptionRequired"]
                                                        == 0
                                                ):
                                                    prescription_required = False
                                                else:
                                                    prescription_required = True
                                            else:
                                                prescription_required = False

                                            # ===============check product is linked with dc or not=====================
                                            dc_child_product = db.childProducts.find_one(
                                                {
                                                    "units.unitId": res_varient_parameters["units"][
                                                        0
                                                    ]["unitId"],
                                                    "storeId": {"$in": store_data_json},
                                                    "status": 1,
                                                }
                                            )
                                            hard_limit = 0
                                            pre_order = False
                                            if dc_child_product is not None:
                                                if "seller" in dc_child_product:
                                                    if len(dc_child_product["seller"]) > 0:
                                                        is_dc_linked = True
                                                        dc_id = str(dc_child_product["_id"])
                                                        for seller in dc_child_product["seller"]:
                                                            if seller["storeId"] == str(
                                                                    res_varient_parameters["storeId"]
                                                            ):
                                                                hard_limit = seller["hardLimit"]
                                                                pre_order = seller["preOrder"]
                                                            else:
                                                                pass
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                            else:
                                                pass

                                            if "needsIdProof" in res_varient_parameters:
                                                if not res_varient_parameters["needsIdProof"]:
                                                    needsIdProof = False
                                                else:
                                                    needsIdProof = True
                                            else:
                                                needsIdProof = False

                                            # ===============================for best offers====================================
                                            offers_details = []

                                            if "offer" in res_varient_parameters:
                                                for offer in res_varient_parameters["offer"]:
                                                    offer_details = db.offers.find_one(
                                                        {"_id": ObjectId(offer["offerId"])}
                                                    )
                                                    if offer_details is not None:
                                                        if offer_details["startDateTime"] <= int(
                                                                time.time()
                                                        ):
                                                            if offer["status"] == 1:
                                                                offers_details.append(offer)
                                                            else:
                                                                pass
                                                        else:
                                                            pass
                                                    else:
                                                        pass
                                            else:
                                                pass

                                            if len(offers_details) > 0:
                                                best_offer = max(
                                                    offers_details, key=lambda x: x["discountValue"]
                                                )
                                                offer_details = db.offers.find(
                                                    {
                                                        "_id": ObjectId(best_offer["offerId"]),
                                                        "status": 1,
                                                        "storeId": str(
                                                            res_varient_parameters["storeId"]
                                                        ),
                                                    }
                                                ).count()
                                                if offer_details != 0:
                                                    best_offer = best_offer
                                                else:
                                                    best_offer = {}
                                            else:
                                                best_offer = {}

                                            product_name = (
                                                res_varient_parameters["units"][0]["unitName"][
                                                    language
                                                ]
                                                if language
                                                   in res_varient_parameters["units"][0]["unitName"]
                                                else res_varient_parameters["units"][0]["unitName"][
                                                    "en"
                                                ]
                                            )
                                            unit_id = res_varient_parameters["units"][0]["unitId"]
                                            image = (
                                                res_varient_parameters["units"][0]["image"]
                                                if "image" in res_varient_parameters["units"][0]
                                                else res_varient_parameters["units"][0]["image"]
                                            )
                                            brand_name = (
                                                res_central_parameters["hits"]["hits"][0][
                                                    "_source"
                                                ]["brandTitle"][language]
                                                if language
                                                   in res_central_parameters["hits"]["hits"][0][
                                                       "_source"
                                                   ]["brandTitle"]
                                                else res_central_parameters["hits"]["hits"][0][
                                                    "_source"
                                                ]["brandTitle"]["en"]
                                            )
                                            manufacture_name = (
                                                res_central_parameters["hits"]["hits"][0][
                                                    "_source"
                                                ]["manufactureName"][language]
                                                if language
                                                   in res_central_parameters["hits"]["hits"][0][
                                                       "_source"
                                                   ]["manufactureName"]
                                                else ""
                                            )
                                            brand_list.append({"name": brand_name})
                                            currency = res_central_parameters["hits"]["hits"][0][
                                                "_source"
                                            ]["currency"]
                                            currency_symbol = res_central_parameters["hits"][
                                                "hits"
                                            ][0]["_source"]["currencySymbol"]

                                            created_timestamp = res_central_parameters["hits"][
                                                "hits"
                                            ][0]["_source"]["createdTimestamp"]

                                            # ===================for the price things===========================================
                                            if len(best_offer) == 0:
                                                percentage = 0
                                                discount_type = 0
                                            else:
                                                if "discountType" in best_offer:
                                                    if best_offer["discountType"] == 0:
                                                        percentage = 0
                                                        discount_type = 0
                                                    else:
                                                        percentage = (
                                                            best_offer["discountValue"]
                                                            if "discountValue" in best_offer
                                                            else 0
                                                        )
                                                        discount_type = best_offer["discountType"]
                                                else:
                                                    percentage = 0
                                                    discount_type = 0

                                            if len(best_offer) > 0:
                                                discount_type = (
                                                    int(best_offer["discountType"])
                                                    if "discountType" in best_offer
                                                    else 0
                                                )
                                                discount_value = (
                                                    best_offer["discountValue"]
                                                    if "discountValue" in best_offer
                                                    else 0
                                                )
                                            else:
                                                discount_type = 2

                                            # ==========================tax calculation=================================
                                            tax_value = []
                                            if res_varient_parameters is not None:
                                                if type(res_varient_parameters["tax"]) == list:
                                                    for tax in res_varient_parameters["tax"]:
                                                        tax_value.append({"value": tax["taxValue"]})
                                                else:
                                                    if res_varient_parameters["tax"] is not None:
                                                        if (
                                                                "taxValue"
                                                                in res_varient_parameters["tax"]
                                                        ):
                                                            tax_value.append(
                                                                {
                                                                    "value": res_varient_parameters[
                                                                        "tax"
                                                                    ]["taxValue"]
                                                                }
                                                            )
                                                        else:
                                                            tax_value.append(
                                                                {
                                                                    "value": res_varient_parameters[
                                                                        "tax"
                                                                    ]
                                                                }
                                                            )
                                                    else:
                                                        pass
                                            else:
                                                tax_value = []

                                            if (
                                                    res_central_parameters["hits"]["hits"][0][
                                                        "_source"
                                                    ]["storeCategoryId"]
                                                    != DINE_STORE_CATEGORY_ID
                                            ):
                                                if len(tax_value) == 0:
                                                    tax_price = 0
                                                else:
                                                    for amount in tax_value:
                                                        tax_price = tax_price + (
                                                            int(amount["value"])
                                                        )
                                            else:
                                                tax_price = 0

                                            if "b2cPricing" in res_varient_parameters["units"][0]:
                                                price = res_varient_parameters["units"][0][
                                                    "b2cPricing"
                                                ][0]["b2cproductSellingPrice"]
                                            else:
                                                price = varient["_source"]["floatValue"]

                                            # ==================================get currecny rate============================
                                            try:
                                                currency_rate = currency_exchange_rate[
                                                    str(res_varient_parameters["currency"])
                                                    + "_"
                                                    + str(currency_code)
                                                    ]
                                            except:
                                                currency_rate = 0
                                            currency_details = db.currencies.find_one(
                                                {"currencyCode": currency_code}
                                            )
                                            if currency_details is not None:
                                                currency_symbol = currency_details["currencySymbol"]
                                                currency = currency_details["currencyCode"]
                                            else:
                                                currency_symbol = res_varient_parameters[
                                                    "currencySymbol"
                                                ]
                                                currency = res_varient_parameters["currency"]

                                            if float(currency_rate) > 0:
                                                price = price * float(currency_rate)

                                            price_data.append(price)
                                            best_price = price + ((price * tax_price) / 100)
                                            price = best_price

                                            if price == 0 or price == "":
                                                final_price = 0
                                                discount_price = 0
                                                isPrimary = True
                                            else:
                                                if discount_type == 0:
                                                    discount_price = float(discount_value)
                                                elif discount_type == 1:
                                                    discount_price = (
                                                                             float(price) * float(discount_value)
                                                                     ) / 100
                                                else:
                                                    discount_price = 0

                                            final_price = price - discount_price
                                            if (
                                                    res_varient_parameters["units"][0][
                                                        "availableQuantity"
                                                    ]
                                                    > 0
                                            ):
                                                product_id = str(res_varient_parameters["_id"])
                                                outOfStock = False
                                                availableStock = int(
                                                    res_varient_parameters["units"][0][
                                                        "availableQuantity"
                                                    ]
                                                )
                                            else:
                                                product_id = str(res_varient_parameters["_id"])
                                                outOfStock = True
                                                availableStock = res_varient_parameters["units"][0][
                                                    "availableQuantity"
                                                ]
                                            # ===========for the linked to unit=================================================
                                            variant_data = []
                                            # ========================= for the get the linked the unit data============================
                                            for attr in res_varient_parameters["units"][0][
                                                "attributes"
                                            ]:
                                                if "attrlist" in attr:
                                                    for attr_data in attr["attrlist"]:
                                                        try:
                                                            if attr_data["linkedtounit"] == 1:
                                                                attr_value = ""
                                                                if (
                                                                        type(
                                                                            attr_data["value"][language]
                                                                        )
                                                                        == list
                                                                ):
                                                                    for li in attr_data["value"][
                                                                        language
                                                                    ]:
                                                                        if attr_value == "":
                                                                            attr_value = str(li)
                                                                        else:
                                                                            attr_value = (
                                                                                    str(attr_value)
                                                                                    + ", "
                                                                                    + str(li)
                                                                            )
                                                                else:
                                                                    attr_value = attr_data["value"][
                                                                        language
                                                                    ]
                                                                variant_data.append(
                                                                    {
                                                                        "attrname": attr_data[
                                                                            "attrname"
                                                                        ][language]
                                                                        if language
                                                                           in attr_data["attrname"]
                                                                        else attr_data["attrname"][
                                                                            "en"
                                                                        ],
                                                                        "value": attr_value,
                                                                        "name": attr_data[
                                                                            "attrname"
                                                                        ][language]
                                                                        if language
                                                                           in attr_data["attrname"]
                                                                        else attr_data["attrname"][
                                                                            "en"
                                                                        ],
                                                                    }
                                                                )
                                                            else:
                                                                pass
                                                        except:
                                                            pass
                                            # ===============end of the link to unit============================================
                                            if len(best_offer) == 0:
                                                percentage = 0
                                                discount_type = 0
                                            else:
                                                if "discountType" in best_offer:
                                                    if best_offer["discountType"] == 0:
                                                        percentage = 0
                                                        discount_type = 0
                                                    else:
                                                        percentage = (
                                                            best_offer["discountValue"]
                                                            if "discountValue" in best_offer
                                                            else 0
                                                        )
                                                        discount_type = best_offer["discountType"]
                                                else:
                                                    percentage = 0
                                                    discount_type = 0

                                            if "allowOrderOutOfStock" in res_varient_parameters:
                                                allow_out_of_order = res_varient_parameters[
                                                    "allowOrderOutOfStock"
                                                ]
                                            else:
                                                allow_out_of_order = False

                                            review_details = db.reviewRatings.find(
                                                {
                                                    "productId": str(product["centralProductId"]),
                                                    "status": 1,
                                                }
                                            )
                                            if review_details.count() > 0:
                                                review_data = []
                                                for review in review_details:
                                                    review_data.append(review["rating"])
                                                avg_rating = sum(review_data) / len(review_data)
                                                avg_rating = round(avg_rating, 2)
                                            else:
                                                avg_rating = 0

                                            # =======================for the variant data========================
                                            variant_count = validate_variant(
                                                str(product["centralProductId"]),
                                                str(res_varient_parameters["storeId"]),
                                                zone_id,
                                                res_central_parameters["hits"]["hits"][0][
                                                    "_source"
                                                ]["storeCategoryId"],
                                            )
                                            linked_attribute = get_linked_unit_attribute(
                                                res_varient_parameters["units"]
                                            )

                                            if product_tag != "":
                                                outOfStock = True

                                            # ===============================get the best slot for product
                                            if sp_list["storeCategoryId"] == MEAT_STORE_CATEGORY_ID:
                                                if str(res_varient_parameters["storeId"]) == "0":
                                                    outOfStock = True
                                                    next_availbale_driver_time = ""
                                                else:
                                                    if availableStock > 0 and is_dc_linked == True:
                                                        outOfStock = False
                                                        next_availbale_driver_time = (
                                                            next_availbale_driver_time
                                                        )
                                                    elif (
                                                            availableStock < 0
                                                            and hard_limit != 0
                                                            and is_dc_linked == True
                                                            and next_availbale_driver_time != ""
                                                    ):
                                                        if (
                                                                -(availableStock) < hard_limit
                                                                and pre_order == True
                                                        ):
                                                            outOfStock = False
                                                            next_availbale_driver_time = (
                                                                next_availbale_driver_time
                                                            )
                                                        else:
                                                            outOfStock = True
                                                            next_availbale_driver_time = ""
                                                    elif (
                                                            availableStock <= 0
                                                            and is_dc_linked == True
                                                            and pre_order == True
                                                    ):
                                                        if res_varient_parameters is not None:
                                                            if "seller" in res_varient_parameters:
                                                                if (
                                                                        len(
                                                                            res_varient_parameters[
                                                                                "seller"
                                                                            ]
                                                                        )
                                                                        > 0
                                                                ):
                                                                    best_buffer = min(
                                                                        child_product["seller"],
                                                                        key=lambda x: x[
                                                                            "procurementTime"
                                                                        ],
                                                                    )
                                                                    delivery_slot = next_availbale_driver_shift_out_stock(
                                                                        zone_id,
                                                                        best_buffer[
                                                                            "procurementTime"
                                                                        ],
                                                                    )
                                                                else:
                                                                    delivery_slot = next_availbale_driver_shift_out_stock(
                                                                        zone_id, 0
                                                                    )
                                                                if allow_out_of_order:
                                                                    outOfStock = False
                                                                else:
                                                                    outOfStock = True
                                                            else:
                                                                next_availbale_driver_time = ""
                                                                outOfStock = True
                                                        else:
                                                            next_availbale_driver_time = ""
                                                            outOfStock = True
                                                    elif (
                                                            availableStock == 0
                                                            and is_dc_linked == False
                                                    ):
                                                        next_availbale_driver_time = ""
                                                        outOfStock = True
                                                    else:
                                                        next_availbale_driver_time = ""
                                                        outOfStock = True
                                            else:
                                                next_availbale_driver_time = ""

                                            try:
                                                attribute_data = get_linked_unit_attribute(
                                                    product["units"]
                                                )
                                            except:
                                                attribute_data = []

                                            product_type = combo_special_type_validation(product_id)

                                            model_data = []
                                            if "units" in res_varient_parameters:
                                                if "modelImage" in res_varient_parameters["units"][0]:
                                                    if len(res_varient_parameters["units"][0]["modelImage"]) > 0:
                                                        model_data = res_varient_parameters["units"][0]["modelImage"]
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                            else:
                                                pass

                                            filter_responseJson.append(
                                                {
                                                    "outOfStock": outOfStock,
                                                    "childProductId": product_id,
                                                    "productName": product_name,
                                                    "productType": product_type,
                                                    "brandName": brand_name,
                                                    "avgRating": avg_rating,
                                                    "linkedAttribute": linked_attribute,
                                                    "manufactureName": manufacture_name,
                                                    "unitId": unit_id,
                                                    "parentProductId": str(
                                                        product["centralProductId"]
                                                    ),
                                                    "offers": best_offer,
                                                    "availableQuantity": availableStock,
                                                    "images": image,
                                                    "modelImage": model_data,
                                                    "variantCount": variant_count,
                                                    "prescriptionRequired": prescription_required,
                                                    "needsIdProof": needsIdProof,
                                                    "variantData": linked_attribute,
                                                    "currencySymbol": currency_symbol,
                                                    "attributes": attribute_data,
                                                    "discountPrice": discount_price,
                                                    "discountType": discount_type,
                                                    "price": round(final_price, 2),
                                                    "nextSlotTime": next_availbale_driver_time,
                                                    "finalPrice": round(final_price, 2),
                                                    "TotalStarRating": avg_rating,
                                                    "finalPriceList": {
                                                        "basePrice": round(price, 2),
                                                        "finalPrice": round(final_price, 2),
                                                        "discountPrice": round(discount_price, 2),
                                                        "discountType": discount_type,
                                                        "discountPercentage": percentage,
                                                    },
                                                    "timestamp": created_timestamp,
                                                    "currencySymbol": currency_symbol,
                                                    "currency": currency,
                                                    "suppliers": best_supplier,
                                                }
                                            )
                                    except Exception as ex:
                                        template = (
                                            "An exception of type {0} occurred. Arguments:\n{1!r}"
                                        )
                                        message = template.format(type(ex).__name__, ex.args)
                                        print(
                                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                                            type(ex).__name__,
                                            ex,
                                        )
                                        pass
                    if int(sort_type) == 0:
                        sorted_data = sorted(
                            filter_responseJson, key=lambda k: k["timestamp"], reverse=True
                        )
                    elif int(sort_type) == 1:
                        sorted_data = sorted(
                            filter_responseJson, key=lambda k: k["finalPrice"], reverse=False
                        )
                    elif int(sort_type) == 2:
                        sorted_data = sorted(
                            filter_responseJson, key=lambda k: k["finalPrice"], reverse=True
                        )

                    # ========================filter data==============================================================================
                    if len(brand_list) > 0:
                        brand_dataframe = pd.DataFrame(brand_list)
                        brand_dataframe["penCount"] = brand_dataframe.groupby("name")[
                            "name"
                        ].transform("count")
                        brand_dataframe = brand_dataframe.drop_duplicates("name", keep="last")
                        brand_list = brand_dataframe.to_json(orient="records")
                        brand_list = json.loads(brand_list)
                        brand_list = sorted(brand_list, key=lambda k: k["name"])
                    else:
                        brand_list = []
                    brands = {"name": "BRAND", "data": brand_list, "selType": 1, "filterType": 4}

                    if len(price_data) > 0:
                        max_price = max(list(set(price_data)))
                        min_price = min(list(set(price_data)))
                        if min_price == max_price:
                            min_price = 0

                        p_data = {
                            "name": "PRICE",
                            "data": [{"maxPrice": max_price, "minPrice": min_price}],
                            "selType": 3,
                            "filterType": 7,
                            "currency": currency,
                            "currencySymbol": currency_symbol,
                        }
                    else:
                        p_data = {
                            "name": "PRICE",
                            "data": [{"maxPrice": 0, "minPrice": 0}],
                            "selType": 3,
                            "filterType": 7,
                            "currency": currency,
                            "currencySymbol": currency_symbol,
                        }
                    filters_json.append(p_data)
                    filters_json.append(brands)

                    response = {
                        "filters": filters_json,
                        "data": sorted_data,
                        "message": "data found",
                    }
                    return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)


"""
	Api for the get the products of the user's shopping list more products
"""


class StoreList(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Store List"],
        operation_description="API for get all list of the store which nearest to user's location and the nearest location store",
        manual_parameters=[
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language of in which language need data",
                default="en",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "latitude": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="latitude of the user where browser or app opened if not there value should be 0",
                    example=19.41204412917645,
                ),
                "longtitude": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="longitude of the user where browser or app opened if not there value should be 0",
                    example=-99.16853751124961,
                ),
                "s_id": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    description="array of the store ids",
                    items=openapi.Items(
                        type=openapi.TYPE_STRING, example="5e3d42a27f707e608a617187"
                    ),
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="stores not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            user_data = request.data
            user_latitude = float(user_data["latitude"])
            user_longtitude = float(user_data["longtitude"])
            store_ids = user_data["s_id"]

            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif store_ids == "":
                response_data = {
                    "message": "store id is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            elif user_latitude == float(0):
                response_data = {
                    "message": "latitide is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            elif user_longtitude == float(0):
                response_data = {
                    "message": "longtitude is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "606559d24d9e3715bdc0293c"

                parent_stores = []
                all_store_ids = []
                for store in store_ids:
                    all_store_ids.append(store)
                    parent_stores_details = db.stores.find({"_id": ObjectId(store), "status": 1})
                    child_stores = db.stores.find(
                        {"parentSellerIdOrSupplierId": store, "status": 1}
                    )
                    child_store_checkin_count_agg_q = [
                        {"$match": {"parentSellerIdOrSupplierId": str(store)}},
                        {"$group": {"_id": "$storeId", "count": {"$sum": 1}}},
                    ]
                    child_store_checkins = db.stores.aggregate(child_store_checkin_count_agg_q)
                    child_store_checkin_count = [
                        x for x in child_store_checkins if child_store_checkins is not None
                    ]
                    if parent_stores_details.count() == 0:
                        pass
                    else:
                        # process parent stores
                        for st_list in parent_stores_details:
                            store_lat = float(st_list["businessLocationAddress"]["lat"])
                            store_long = float(st_list["businessLocationAddress"]["long"])
                            distance_km, distance_miles = calculate_distance(
                                user_latitude, user_longtitude, store_lat, store_long
                            )
                            parent_stores.append(
                                {
                                    "lat": float(st_list["businessLocationAddress"]["lat"])
                                    if "lat" in st_list["businessLocationAddress"]
                                    else float(0),
                                    "long": float(st_list["businessLocationAddress"]["long"])
                                    if "long" in st_list["businessLocationAddress"]
                                    else float(0),
                                    "address": st_list["businessLocationAddress"]["address"]
                                    if "address" in st_list["businessLocationAddress"]
                                    else "",
                                    "locality": st_list["businessLocationAddress"]["locality"]
                                    if "locality" in st_list["businessLocationAddress"]
                                    else "",
                                    "location": st_list["location"]
                                    if "location" in st_list
                                    else {},
                                    "postCode": st_list["businessLocationAddress"]["postCode"]
                                    if "postCode" in st_list["businessLocationAddress"]
                                    else "",
                                    "state": st_list["businessLocationAddress"]["state"]
                                    if "state" in st_list["businessLocationAddress"]
                                    else "",
                                    "country": st_list["businessLocationAddress"]["country"]
                                    if "country" in st_list["businessLocationAddress"]
                                    else "",
                                    "distanceKm": round(distance_km, 2),
                                    "distanceMiles": distance_miles,
                                    "storeName": st_list["storeName"][language],
                                    "storeId": str(st_list["storeId"]),
                                    "favorite": False,
                                    "childStores": [],
                                }
                            )

                        # process child stores for current parent store
                        if child_stores.count():
                            child_stores_data = []
                            for cs in child_stores:
                                all_store_ids.append(store)
                                store_lat = float(cs["businessLocationAddress"]["lat"])
                                store_long = float(cs["businessLocationAddress"]["long"])
                                distance_km, distance_miles = calculate_distance(
                                    user_latitude, user_longtitude, store_lat, store_long
                                )
                                child_stores_data.append(
                                    {
                                        "lat": float(cs["businessLocationAddress"]["lat"])
                                        if "lat" in cs["businessLocationAddress"]
                                        else float(0),
                                        "long": float(cs["businessLocationAddress"]["long"])
                                        if "long" in cs["businessLocationAddress"]
                                        else float(0),
                                        "address": cs["businessLocationAddress"]["address"]
                                        if "address" in cs["businessLocationAddress"]
                                        else "",
                                        "locality": cs["businessLocationAddress"]["locality"]
                                        if "locality" in cs["businessLocationAddress"]
                                        else "",
                                        "location": cs["location"] if "location" in cs else {},
                                        "postCode": cs["businessLocationAddress"]["postCode"]
                                        if "postCode" in cs["businessLocationAddress"]
                                        else "",
                                        "state": cs["businessLocationAddress"]["state"]
                                        if "state" in cs["businessLocationAddress"]
                                        else "",
                                        "country": cs["businessLocationAddress"]["country"]
                                        if "country" in cs["businessLocationAddress"]
                                        else "",
                                        "distanceKm": round(distance_km, 2),
                                        "distanceMiles": distance_miles,
                                        "storeName": cs["storeName"][language],
                                        "storeId": str(cs["storeId"]),
                                        "bannerImages": cs["bannerImages"],
                                        "logoImages": cs["logoImages"],
                                        "avgRating": cs["avgRating"],
                                        "favorite": False,
                                        "checkinCount": 0,
                                    }
                                )
                            # sort by distance child store
                            child_stores_data_nearest = sorted(
                                child_stores_data, key=lambda k: k["distanceKm"], reverse=False
                            )
                            for list_data in range(0, len(child_stores_data_nearest)):
                                if list_data == 0:
                                    child_stores_data_nearest[0]["isNear"] = True
                                else:
                                    child_stores_data_nearest[list_data]["isNear"] = False
                                if child_stores_data_nearest[list_data]["storeId"] in [
                                    x["_id"] for x in child_store_checkin_count
                                ]:
                                    store_id_current = child_stores_data_nearest[list_data][
                                        "storeId"
                                    ]
                                    for x in child_store_checkin_count:
                                        if str(x["_id"]) == store_id_current:
                                            child_stores_data_nearest[list_data][
                                                "checkinCount"
                                            ] = x["count"]
                            # add child store to parent store
                            for x in parent_stores:
                                if str(x["storeId"]) == str(store):
                                    x["childStores"] = child_stores_data_nearest

                # get the favorite details for the user
                response_cassandra = session.execute(
                    """SELECT * FROM favouritesellersuserwise where userid=%(userid)s AND seller_id IN %(seller_id)s ALLOW FILTERING""",
                    {"userid": user_id, "seller_id": ValueSequence(list(set(all_store_ids)))},
                )

                # process the data
                if response_cassandra:
                    cassandra_data = pd.DataFrame(response_cassandra._current_rows).to_dict(
                        "record"
                    )

                    for cass_result in cassandra_data:
                        # check for parent store
                        if str(cass_result["seller_id"]) in [
                            str(x["storeId"]) for x in parent_stores
                        ]:
                            for pstore in parent_stores:
                                if pstore["storeId"] == str(cass_result["seller_id"]):
                                    pstore["favorite"] = True

                        # check for child store
                        if str(cass_result["seller_id"]) in [
                            y["storeId"] for x in parent_stores for y in x["childStores"]
                        ]:
                            for pstore in parent_stores:
                                for cstore in pstore["childStores"]:
                                    if cstore["storeId"] == str(cass_result["seller_id"]):
                                        cstore["favorite"] = True

                # sort parent store by distance
                parent_stores_sorted = sorted(
                    parent_stores, key=lambda k: k["distanceKm"], reverse=False
                )
                for list_data in range(0, len(parent_stores_sorted)):
                    if list_data == 0:
                        parent_stores_sorted[0]["isNear"] = True
                    else:
                        parent_stores_sorted[list_data]["isNear"] = False

                # success response
                response = {"data": parent_stores_sorted, "message": "data found"}
                return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)

    @swagger_auto_schema(
        method="get",
        tags=["Store List"],
        operation_description="API for get all list of the store which nearest to user's location",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language of in which language need data",
                default="en",
            ),
            openapi.Parameter(
                name="latitude",
                default="19.41204412917645",
                in_=openapi.IN_QUERY,
                required=True,
                type=openapi.TYPE_STRING,
                description="shopping list id from which shopping list need data",
            ),
            openapi.Parameter(
                name="longitude",
                default="-99.16853751124961",
                in_=openapi.IN_QUERY,
                required=True,
                type=openapi.TYPE_STRING,
                description="shopping list id from which shopping list need data",
            ),
            openapi.Parameter(
                name="s_id",
                default="5e3d42a27f707e608a617187",
                in_=openapi.IN_QUERY,
                required=True,
                type=openapi.TYPE_STRING,
                description="store id from which parent store data need",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="stores not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            tax_price = 0
            filter_responseJson = []
            token = request.META["HTTP_AUTHORIZATION"]
            user_latitude = float(request.GET.get("latitude", 0))
            user_longtitude = float(request.GET.get("longitude", 0))
            store_id = request.GET.get("s_id", "")
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif store_id == "":
                response_data = {
                    "message": "store id is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            elif user_latitude == float(0):
                response_data = {
                    "message": "latitide is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            elif user_longtitude == float(0):
                response_data = {
                    "message": "longtitude is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5d92f959fc2045620ce36c92"
                stores_details = db.stores.find(
                    {"parentSellerIdOrSupplierId": store_id, "status": 1}
                )
                parent_stores_details = db.stores.find({"_id": ObjectId(store_id), "status": 1})
                if stores_details.count() == 0 and parent_stores_details.count() == 0:
                    response_data = {
                        "message": "store list not found",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    last_response = []
                    for st_list in stores_details:
                        store_lat = float(st_list["businessLocationAddress"]["lat"])
                        store_long = float(st_list["businessLocationAddress"]["long"])
                        address = st_list["businessLocationAddress"]["address"]
                        locality = st_list["businessLocationAddress"]["locality"]
                        post_code = st_list["businessLocationAddress"]["postCode"]
                        state = st_list["businessLocationAddress"]["state"]
                        country = st_list["businessLocationAddress"]["country"]
                        distance_km, distance_miles = calculate_distance(
                            user_latitude, user_longtitude, store_lat, store_long
                        )
                        is_near = False
                        store_name = st_list["storeName"][language]
                        store_id = str(st_list["_id"])
                        last_response.append(
                            {
                                "lat": store_lat,
                                "long": store_long,
                                "address": address,
                                "locality": locality,
                                "postCode": post_code,
                                "state": state,
                                "isNear": is_near,
                                "country": country,
                                "distanceKm": round(distance_km, 2),
                                "distanceMiles": distance_miles,
                                "storeName": store_name,
                                "storeId": store_id,
                            }
                        )
                    for p_store in parent_stores_details:
                        parent_store_lat = float(p_store["businessLocationAddress"]["lat"])
                        parent_store_long = float(p_store["businessLocationAddress"]["long"])
                        parent_address = p_store["businessLocationAddress"]["address"]
                        parent_locality = (
                            p_store["businessLocationAddress"]["locality"]
                            if "locality" in p_store["businessLocationAddress"]
                            else ""
                        )
                        parent_post_code = (
                            p_store["businessLocationAddress"]["postCode"]
                            if "postCode" in p_store["businessLocationAddress"]
                            else ""
                        )
                        parent_state = (
                            p_store["businessLocationAddress"]["state"]
                            if "state" in p_store["businessLocationAddress"]
                            else ""
                        )
                        parent_country = (
                            p_store["businessLocationAddress"]["country"]
                            if "country" in p_store["businessLocationAddress"]
                            else ""
                        )
                        parent_distance_km, parent_distance_miles = calculate_distance(
                            user_latitude, user_longtitude, parent_store_lat, parent_store_long
                        )
                        is_near = True
                        parent_store_name = p_store["storeName"][language]
                        parent_store_id = str(p_store["_id"])
                        last_response.append(
                            {
                                "lat": parent_store_lat,
                                "long": parent_store_long,
                                "address": parent_address,
                                "locality": parent_locality,
                                "postCode": parent_post_code,
                                "state": parent_state,
                                "isNear": is_near,
                                "country": parent_country,
                                "distanceKm": parent_distance_km,
                                "distanceMiles": parent_distance_miles,
                                "storeName": parent_store_name,
                                "storeId": parent_store_id,
                            }
                        )

                    response = {"data": last_response, "message": "data found"}
                    return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)


class StoreLastCheckins(APIView):
    """
    API for store checkins.
    """

    @swagger_auto_schema(
        method="get",
        tags=["StoreCheckin"],
        operation_description="API to get the last checkin time.",
        required=["Authorization"],
        manual_parameters=ResponseHelper.STORE_LAST_CHECKIN_MANUAL_PARAMS,
        responses=ResponseHelper.RESPONSES,
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            # check for authorization
            err = OperationHelper.check_authentication(request)
            if err:
                return err
            token = OperationHelper.get_auth_token(request)
            userId = json.loads(token).get("userId", "")
            store_id = request.GET.get("storeId", "")

            if store_id != "" and store_id is not None:
                store_checkins = db.checkIns.find({"storeId": store_id})
            elif userId != "" and userId is not None:
                store_checkins = db.checkIns.find({"userId": str(userId)})
            else:
                response_data = {
                    "message": "userId or storeId empty.",
                }
                return JsonResponse(response_data, safe=False, status=404)

            if store_checkins.count():
                store_chins = []
                for sc in store_checkins:
                    data = {}
                    timeStamp = datetime.datetime.now().timestamp()
                    checkin_time = int(sc["checkInTime"])
                    time_diff = abs(int(timeStamp - checkin_time))
                    data["storeId"] = sc["storeId"]
                    data["checkinTime"] = time_diff
                    data["profilePic"] = sc["profilePic"]
                    data["firstName"] = sc["firstName"]
                    data["nickName"] = sc["nickName"]
                    data["lastName"] = sc["lastName"]
                    data["email"] = sc["email"]
                    data["phone"] = sc["phone"]
                    data["countryCode"] = sc["countryCode"]
                    store_chins.append(data)
                response_data = {
                    "message": "Data found successfully.",
                    "data": store_chins,
                }
                return JsonResponse(response_data, safe=False, status=200)
            response_data = {"message": "checkins not found", "data": []}
            return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            resp = OperationHelper.generate_exception(ex)
            return JsonResponse(resp, safe=False, status=500)


class StoreDetails(APIView):
    """
    API for store details.
    """

    @swagger_auto_schema(
        method="get",
        tags=["StoreDetails"],
        operation_description="API to get the store details.",
        required=["Authorization"],
        manual_parameters=ResponseHelper.STORE_DETAILS_MANUAL_PARAMS,
        responses=ResponseHelper.RESPONSES,
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            # check for authorization
            err = OperationHelper.check_authentication(request)
            if err:
                return err

            token = OperationHelper.get_auth_token(request)
            store_id = request.GET.get("storeId", "")
            lat = request.GET.get("lat")
            long = request.GET.get("long")
            try:
                user_id = OperationHelper.get_userId(request)
            except:
                user_id = "6163d4c0f0bc9e04404d094f"

            req_param = ["storeId", "lat", "long"]
            err = OperationHelper.check_req_params(request.GET, req_param)
            if err:
                return err

            # get the store details
            store_details = db.stores.find_one({"_id": ObjectId(store_id)})
            if store_details != None:
                data = OperationHelper.parse_json(store_details)

                # favourite store
                if user_id in data["favouriteUsers"]:
                    data["isFavourite"] = True
                else:
                    data["isFavourite"] = False

                # store distance query
                store_must_query = [{"match": {"_id": str(store_id)}}]
                geo_distance_sort = {
                    "_geo_distance": {
                        "distance_type": "plane",
                        "location": {"lat": float(lat), "lon": float(long)},
                        "order": "asc",
                        "unit": "km",
                    }
                }
                sort_query = [geo_distance_sort]
                store_must_query.append(
                    {
                        "geo_distance": {
                            "distance": "500km",
                            "location": {"lat": float(lat), "lon": float(long)},
                        }
                    }
                )
                store_geo_query = {
                    "query": {
                        "bool": {
                            "must": store_must_query,
                        }
                    },
                    "size": 1,
                    "from": 0,
                    "sort": sort_query,
                }
                res = es.search(
                    index=index_store,
                    body=store_geo_query,
                    filter_path=[
                        "hits.total",
                        "hits.hits._id",
                        "hits.hits.sort",
                        "hits.hits._source",
                    ],
                )
                if res["hits"]["total"] > 0:
                    if "hits" in res["hits"]:
                        for seller_distance in res["hits"]["hits"]:
                            distance_km = round(seller_distance["sort"][0], 2)
                            data["distance_km"] = distance_km
                            data["distance_miles"] = round(distance_km * float(conv_fac), 2)
                    else:
                        data["distance_km"] = 0
                        data["distance_miles"] = 0
                else:
                    data["distance_km"] = 0
                    data["distance_miles"] = 0

                # store checking count
                store_checkins_count = db.checkIns.find({"storeId": str(store_id)}).count()
                data["checkinsCount"] = store_checkins_count
            else:
                data = []

            if len(data):
                response_data = {
                    "message": "Data found successfully.",
                    "data": data,
                }
                return JsonResponse(response_data, safe=False, status=200)
            return JsonResponse({"message": "store not found", "data": []}, safe=False, status=404)
        except Exception as ex:
            resp = OperationHelper.generate_exception(ex)
            return JsonResponse(resp, safe=False, status=500)


"""
    API for the get the one particular reviews details for the review
"""


class ProductReviewDetails(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Review Details"],
        operation_description="API for get details for the one particular review",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="reviewId",
                default="5e4e6e731d80bf399fb2d225",
                in_=openapi.IN_QUERY,
                required=True,
                type=openapi.TYPE_STRING,
                description="review id from which review need to get the data",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="stores not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            review_id = request.GET.get("reviewId", "")
            timeStamp = datetime.datetime.now().timestamp()
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif review_id == "":
                response_data = {
                    "message": "review id is blank",
                }
                return JsonResponse(response_data, safe=False, status=411)
            else:
                review_details = db.reviewRatings.find({"_id": ObjectId(review_id)})
                if review_details.count() == 0:
                    response_data = {
                        "message": "review not found",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
                else:
                    last_response = []
                    for review_list in review_details:
                        last_response.append(
                            {
                                "userName": review_list["userName"],
                                "likes": review_list["likes"],
                                "sellerId": review_list["sellerId"],
                                "reviewDescription": review_list["reviewDescription"],
                                "rating": review_list["rating"],
                                "userId": review_list["userId"],
                                "productId": review_list["productId"],
                                "reviewTitle": review_list["reviewTitle"],
                                "attributeId": review_list["attributeId"],
                                "productName": review_list["productName"],
                                "disLikes": review_list["disLikes"],
                            }
                        )

                    response = {"data": last_response, "message": "data found"}
                    return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)


"""
    API for the get the list of the notification which sent by FCM
"""


class UserNotificationDetails(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Notification Details"],
        operation_description="API for get details for the one particular review",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="appName",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                default="Shoppd",
                description="Name of the application. from which app need to get the data for user",
            ),
            openapi.Parameter(
                name="from",
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="to",
                default="10",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default="5cc0846e087d924456427975",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="to get base on store category id",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="stores not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            # store_category_id = (
            #     request.META["HTTP_STORECATEGORYID"]
            #     if "HTTP_STORECATEGORYID" in request.META
            #     else ""
            # )
            store_category_id = ""
            app_name = APP_NAME  # request.META["HTTP_APPNAME"] if "HTTP_APPNAME" in request.META else APP_NAME
            from_data = request.GET.get("from", 0)
            to_data = request.GET.get("to", 10)
            from_data = int(from_data)
            to_data = int(to_data)
            if token == "":
                response_data = {"message": "Unauthorized", "total_count": 0, "data": []}
                return ResponseHelper.get_status_401(response_data)
            elif app_name == "":
                response_data = {"message": "app name is blank", "total_count": 0, "data": []}
                return ResponseHelper.get_status_404(response_data)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5ee9d7888df6272aa96fca75"
                response = OperationHelper.process_user_notification_get_api(
                    user_id, app_name, store_category_id, to_data, from_data,language
                )
                return response
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["Notification Details"],
        operation_description="API for patch details for the one particular review",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            )
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["notificationId"],
            properties={
                "notificationId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="notification id for which we need to update",
                    example="603caa3765340900015c45c5",
                )
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="stores not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            timeStamp = datetime.datetime.now().timestamp()
            json_data = request.data
            notification_id = json_data["notificationId"] if "notificationId" in json_data else ""
            if token == "":
                response_data = {"message": "Unauthorized", "total_count": 0, "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            elif notification_id == "":
                response_data = {
                    "message": "notification id is blank",
                    "total_count": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=404)
            else:
                notification_count = db.notificationLogs.find(
                    {"_id": ObjectId(notification_id)}
                ).count()
                if notification_count > 0:
                    db.notificationLogs.update(
                        {"_id": ObjectId(notification_id)}, {"$set": {"isSeen": True}}, upsert=False
                    )
                    response_data = {"message": "updated successfully"}
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {"message": "data not found"}
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)



class UserNotificationCount(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Notification Count"],
        operation_description="API for get notification count for the one particular review",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default="5cc0846e087d924456427975",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="to get base on store category id",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="notification not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = (request.META["HTTP_STORECATEGORYID"] if "HTTP_STORECATEGORYID" in request.META else "")
            if token == "":
                response_data = {"message": "Unauthorized", "total_count": 0, "data": []}
                return ResponseHelper.get_status_401(response_data)
            else:
                query={"isSeen" : False, "app_name": APP_NAME}
                try:
                    user_id = json.loads(token)["userId"]
                except:
                    user_id=""
                query["userid"]= user_id
                if store_category_id !="":
                    query["store_category_id"]=store_category_id
                print(query)
                notification_count = db.notificationLogs.aggregate([
                        {"$match":query},
                        {
                            "$group":
                                {
                                    "_id": {
                                        "notificationId": "$notificationMongoId",
                                    },
                                    "id": {"$first": "$_id"}
                                }
                        },
                        {
                            "$count": "totalNotifications"
                        }
                        ]
                    )
                final_count = list(notification_count)
                count = final_count[0]['totalNotifications'] if final_count else 0
                if count > 0:
                    response = {"total_count": count, "message": "data found"}
                    return JsonResponse(response, safe=False, status=200)
                else:
                    response = {"message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)


class LocalFoodies(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Local Foodies"],
        operation_description="API for get connect with local foodies",
        required=["Authorization"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default="650d5735254a6ac50f0fff44",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="to get base on store category id",
            ),
            openapi.Parameter(
                name="zoneId",
                default="650d5e2de920bc92760fe094",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from which zone we need to get the stores",
            ),
            openapi.Parameter(
                name="userType",
                default="Retailer",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from which zone we need to get the stores",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="data found successfully",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="notification not found",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="Internal Server Error. if server is not working that time",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        ''' userType
        1:Retailer
        3:Wholesaler
        4:Manufacturer
        9:business
        '''
        try:
            token = request.META.get("HTTP_AUTHORIZATION")
            language = request.META.get("HTTP_LANGUAGE", "en")
            store_category_id = request.META.get("HTTP_STORECATEGORYID", "")
            
            if token == "":
                response_data = {"message": "Unauthorized", "data": []}
                return ResponseHelper.get_status_401(response_data)
            try:
                user_id = json.loads(token)["userId"]
            except:
                user_id=""
            page = int(request.GET.get("page",1))
            search = request.GET.get("search","")
            zoneId = request.GET.get("zoneId", "")
            userType = int(request.GET.get("userType", 0))
            from_data = (page * 10) - 10
            to_data = 10
            pipeline = []
            query1 = {"status": 1}

            if store_category_id == "":
                response_data = {"message": "store category id is blank"}
                return JsonResponse(response_data, safe=False, status=422)

            if zoneId == "":
                response_data = {"message": "zoneId is blank"}
                return JsonResponse(response_data, safe=False, status=422)

            if userType:
                if userType == 2:
                    query1["userType"] = 1
                    query1["isStarUser"] = True
                else:
                    query1["userType"] = userType
                    query1["$or"] =[
                        {"isStarUser": False},  # Match documents where isStarUser is false
                        {"isStarUser": {"$exists": False}}  # Match documents where isStarUser does not exist
                    ]
            # if user_id:
            #     user_data = db.customer.find_one({"userId" :str(user_id)},{"follow":1})
            #     if user_data and "follow" in user_data:
            #         targetIds = user_data["follow"]
            #         targetIds.append(ObjectId(str(user_id)))
            #         query1["_id"] = {"$nin": targetIds}
            if search:
                query1["$or"] =[
                    {
                    "$expr": {
                        "$regexMatch": {
                        "input": {
                            "$concat": ["$firstName", " ", "$lastName"]
                        },
                        "regex": f"^{str(search)}",
                        "options": "i"
                        }
                    }
                    },
                    {
                    "userName": {
                        "$regex": f"^{str(search)}",  # Add the ^ anchor to match the start of the string
                        "$options": "i"  # Case-insensitive search
                    }
                }
                ]
            else:
                pipeline = [{
                    "$addFields": {
                        "sortField": {
                            "$switch": {
                                "branches": [
                                    {
                                        "case": {"$regexMatch": {"input": "$firstName", "regex": "^[a-zA-Z]"}},
                                        "then": {"$concat": ["0", "$firstName"]}
                                    },
                                    {
                                        "case": {"$regexMatch": {"input": "$firstName", "regex": "^[0-9]"}},
                                        "then": {"$concat": ["1", "$firstName"]}
                                    }
                                ],
                                "default": {"$concat": ["2", "$firstName"]}
                            }
                        }
                    }
                },
                {"$sort": {"sortField": 1}},
                {"$project": {"sortField": 0}}]
                zone_data = db.zones.find_one({"_id": ObjectId(str(zoneId))}, {"cityId": 1,"city_ID":1})
                if zone_data is not None:
                    try:
                        query1["cityId"] = zone_data["cityId"]
                        zone_cityid = zone_data["cityId"]
                    except:
                        query1["cityId"] = zone_data["city_ID"]
                        zone_cityid = zone_data["city_ID"]
                else:
                    response = {"message": "zone not found"}
                    return JsonResponse(response, safe=False, status=404)
                count_customer_query = {"cityId":zone_cityid,'_id': {'$nin': [ObjectId(str(user_id))]}}

                if userType:
                    if userType == 2:
                        count_customer_query["userType"] = 1
                        count_customer_query["isStarUser"] = True
                    else:
                        count_customer_query["userType"] = userType
                        count_customer_query["$or"] =[
                        {"isStarUser": False},  # Match documents where isStarUser is false
                        {"isStarUser": {"$exists": False}}  # Match documents where isStarUser does not exist
                    ]
                count_customer = db.customer.find(count_customer_query).count()
                print("count_customer",count_customer)
                if from_data == count_customer or from_data > count_customer:
                    del query1["cityId"]
                
            pipeline.append({"$match": query1})
            pipeline.append({"$skip": from_data})
            pipeline.append({"$limit": to_data})
            pipeline.append({"$project": {
                        "_id": 1,
                        "mobile": 1,
                        "userName": 1,
                        "firstName": 1,
                        "lastName": 1,
                        "email": 1,
                        "profilePic": 1,
                        "profileCoverImage": 1,
                        "statusBio": 1,
                        "isStarUser": 1,
                        "isBusinessUser": 1,
                        "name": 1,
                        "userTypeText": 1,
                        "userType": 1,
                        "userId": 1,
                        "user_id":1,
                        "status": 1,
                        "private":1
                    }})
            print("pipeline",pipeline)
                    
            local_foodies_cursor = db.customer.aggregate(pipeline)
            count_pipeline = pipeline.copy()
            count_pipeline.pop()  # Remove the $limit stage
            count_pipeline.pop()  # Remove the $skip stage
            count_pipeline.pop()
            if "cityId" in query1:
                del query1["cityId"]
            count_pipeline.append({"$count": "total_count"})  # Add a $count stage to count the documents
            # Execute the count pipeline to get the total count
            print("count_pipeline",count_pipeline)
            count_result = list(db.customer.aggregate(count_pipeline))
            total_count = count_result[0]["total_count"] if count_result else 0
            local_getfudo_data =  (list(local_foodies_cursor))
            local_customer_data = []
            for customer in local_getfudo_data:
                    ''' here user followed customer '''
                    is_follow_user = db.follow.count_documents({"type.status": 1,"follower": ObjectId(user_id), "followee": ObjectId(str(customer["_id"])), 'type.status': 1, "end": False})
                    ''' is requested '''
                    is_follow_user_requested = db.follow.count_documents({"type.status": 2,"follower": ObjectId(user_id), "followee": ObjectId(str(customer["_id"])), 'type.status': 1, "end": False})
                    ''' here client followed customer '''
                    is_follow_back = db.follow.count_documents({"follower": ObjectId(str(customer["_id"])), "followee": ObjectId(str(user_id)), 'type.status': 1, "end": False})
                    local_customer_data.append({
                        "_id": str(customer["_id"]),
                        "userId": str(customer["_id"]),
                        "userName": customer["userName"],
                        "firstName": customer["firstName"],
                        "lastName": customer["lastName"],
                        "email": customer["email"],
                        "userType": customer["userType"],
                        "userTypeText": customer["userTypeText"],
                        "mobile": customer["mobile"],
                        "status": customer["status"],
                        "statusBio": customer["statusBio"] if 'statusBio' in customer else "",
                        "profilePic": customer["profilePic"] if 'profilePic' in customer else "",
                        "followd": True if is_follow_user > 0 else False,
                        "isRequested": True if is_follow_user_requested > 0 else False,
                        "isFollowdBack": True if is_follow_back > 0 else False,
                        "profileCoverImage": customer["profileCoverImage"] if 'profileCoverImage' in customer else "",
                        "private": customer["private"] if 'private' in customer else 0,
                        "name": customer["name"] if 'name' in customer else "",
                        "isStarUser": customer["isStarUser"] if 'isStarUser' in customer else False,
                        "isBusinessUser": customer["isBusinessUser"] if 'isBusinessUser' in customer else False,
                        
                    })
            # if not local_foodies_df.empty:
            #     local_foodies_df['_id'] = local_foodies_df['_id'].astype(str)
            #     # local_foodies_df = local_foodies_df.fillna("")
            #     if 'isBusinessUser' in local_foodies_df:
            #         local_foodies_df['isBusinessUser'] = local_foodies_df['isBusinessUser'].fillna(False)
            #     else:
            #         # Handle the case where 'isBusinessUser' key is not present
            #         local_foodies_df['isBusinessUser'] = False
            #     if 'isStarUser' in local_foodies_df:
            #         local_foodies_df['isStarUser'] = local_foodies_df['isStarUser'].fillna(False)
            #     else:
            #         local_foodies_df['isStarUser'] = False
            #     if 'private' in local_foodies_df:
            #         local_foodies_df['private'] = local_foodies_df['private'].fillna(0.0)
            #     else:
            #         local_foodies_df['private'] = 0.0
                # local_foodies_df = local_fooresponsedies_df.fillna("")
            response = {"data": local_customer_data,"total_count": total_count,"message": "data found"}
            return JsonResponse(response, safe=False, status=200)
            # else:
            #     response = {"message": "data not found"}
            #     return JsonResponse(, safe=False, status=404)

        except Exception as ex:
            traceback.print_exc()
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error:", message)
            finalResponse = {"message": message}
            return JsonResponse(finalResponse, safe=False, status=500)

class UserFavouriteStores(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Favourite Stores"],
        operation_description="API for add the store into favourite list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["storeid"],
            properties={
                "ipaddress": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="ip address of the network",
                    example="168.10.19.8",
                ),
                "platform": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="from which platform requested for data.values will be 0 for website, 1 for iOS and 2 for android",
                    example="0",
                ),
                "latitude": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="latitude of the user where browser or app opened if not there value should be 0",
                    example=77.5946,
                ),
                "longitude": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="longitude of the user where browser or app opened if not there value should be 0",
                    example=12.9716,
                ),
                "cityid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="city id of the user where browser or app opened if not there value should be empty string",
                    example="5df7b7218798dc2c1114e6bf",
                ),
                "countryid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="country id of the user where browser or app opened if not there value should be empty string",
                    example="5df7b7218798dc2c1114e6c0",
                ),
                "storeid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id which we need to add into the favourite list",
                    example="5e157a1851580f744c1f9b2f",
                ),
            },
        ),
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="Added to your Favourite List",
                    )
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="Product Not Found",
                    )
                },
            ),
            409: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="while data conflict",
                        example="already added in your favourite list",
                    )
                },
            ),
            422: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="required field is missing",
                        example="store id is missing",
                    )
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "error": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="error message",
                        default="Invalid request",
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    ),
                },
            ),
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            data = request.data
            if "storeid" not in data:
                response_data = {
                    "message": "store id is missing",
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                user_id = json.loads(token)["userId"]
                store_id = data["storeid"]
                # user_id = "5d92f959fc2045620ce36c92"
                time_stamp = int(datetime.datetime.now().timestamp()) * 1000
                stores_details = db.stores.find_one({"_id": ObjectId(store_id)})
                if stores_details != None:
                    store_front_type = str(stores_details["storeFrontTypeId"])
                    seller_type_id = str(stores_details["sellerTypeId"])
                    store_type_id = str(stores_details["storeTypeId"])
                    category_id = str(stores_details["categoryId"])
                    latitude = str(data["latitude"]) if data["latitude"] != "" else "0"
                    longitude = str(data["longitude"]) if data["longitude"] != "" else "0"
                    response_casandra = session.execute(
                        """SELECT * FROM favouritesellersuserwise where userid=%(userid)s AND seller_id=%(seller_id)s ALLOW FILTERING""",
                        {"userid": user_id, "seller_id": str(store_id)},
                    )
                    if not response_casandra:
                        session.execute(
                            """ INSERT INTO favouritesellersuserwise (seller_id,store_front_type, seller_type_id,store_type_id, 
                            category_id, userid, createdtimestamp,
                            ipaddress,latitude,longitude,cityid,countryid)
                            VALUES (%(seller_id)s,%(store_front_type)s, %(seller_type_id)s ,%(store_type_id)s,
                            %(category_id)s,%(userid)s, 
                            %(createdtimestamp)s,%(ipaddress)s,
                            %(latitude)s,%(longitude)s,%(cityid)s,%(countryid)s)
                            """,
                            {
                                "seller_id": str(store_id),
                                "store_front_type": str(store_front_type),
                                "seller_type_id": str(seller_type_id),
                                "store_type_id": str(store_type_id),
                                "category_id": category_id,
                                "userid": user_id,
                                "createdtimestamp": time_stamp,
                                "ipaddress": str(data["ipaddress"]),
                                "latitude": latitude,
                                "longitude": longitude,
                                "cityid": str(data["cityid"]),
                                "countryid": str(data["countryid"]),
                            },
                        )
                        db.stores.update(
                            {"_id": ObjectId(store_id)},
                            {"$push": {"favouriteUsers": str(user_id)}},
                            multi=False,
                            upsert=True,
                        )
                        try:
                            store_details = db.stores.find_one(
                                {"_id": ObjectId(store_id)}, {"favouriteUsers": 1}
                            )
                            if store_details != None:
                                res = es.update(
                                    index=index_store,
                                    doc_type=doc_type_store,
                                    id=str(store_details["_id"]),
                                    body={
                                        "doc": {"favouriteUsers": store_details["favouriteUsers"]}
                                    },
                                )
                        except:
                            pass
                        response = {"message": "Successfully added into the favourite list"}
                        return JsonResponse(response, safe=False, status=200)
                    else:
                        response = {"message": "already added into the favourite list"}
                        return JsonResponse(response, safe=False, status=409)

                else:
                    response = {"message": "store is missing"}
                    return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)

    @swagger_auto_schema(
        method="patch",
        tags=["Favourite Stores"],
        operation_description="API for remove the favourite store from the list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["storeid"],
            properties={
                "storeid": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="storeid which need to remove from the favourite list",
                    default="5e6f564466830c7aba82c046",
                )
            },
        ),
        responses={
            200: "successfully added product in your wishlist",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required feild missing. it might be user missing or product id blank",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)

            user_id = json.loads(token)["userId"]
            # user_id = "5d92f959fc2045620ce36c92"
            data = request.data
            if user_id == "":
                response = {"message": "User Not Found....!!!!"}
                return JsonResponse(response, safe=False, status=422)
            elif "storeid" not in data:
                response = {"message": "Store Id is missing"}
                return JsonResponse(response, safe=False, status=422)
            elif data["storeid"] == "":
                response = {"message": "Store Id Should be Non-Empty....!!!!"}
                return JsonResponse(response, safe=False, status=422)
            else:
                session.execute(
                    """DELETE FROM favouritesellersuserwise WHERE userid=%(userid)s AND 
                    seller_id=%(seller_id)s""",
                    {"userid": user_id, "seller_id": str(data["storeid"])},
                )
                db.stores.update(
                    {"_id": ObjectId(data["storeid"])},
                    {"$pull": {"favouriteUsers": str(user_id)}},
                    multi=False,
                    upsert=True,
                )
                try:
                    store_details = db.stores.find_one(
                        {"_id": ObjectId(data["storeid"])}, {"favouriteUsers": 1}
                    )
                    if store_details != None:
                        res = es.update(
                            index=index_store,
                            doc_type=doc_type_store,
                            id=str(store_details["_id"]),
                            body={"doc": {"favouriteUsers": store_details["favouriteUsers"]}},
                        )
                except:
                    pass
                response = {"message": "Removed from Favourite list"}
                return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)

    @swagger_auto_schema(
        method="get",
        tags=["Favourite Stores"],
        operation_description="API for get the favourite store from the list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="categoryId",
                default=GROCERY_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category od for the getting the data for store",
            ),
            openapi.Parameter(
                name="isExpress",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="is express delivery for the get the only express delivery stores. value should be 0 for normal and 1 for express",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)

            user_id = json.loads(token)["userId"]
            # user_id = "5d92f959fc2045620ce36c92"
            category_id = request.GET.get("categoryId", "")
            is_express = request.GET.get("isExpress", "0")

            if category_id == "":
                response = {"data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=404)

            else:
                store_details = session.execute(
                    """SELECT * FROM favouritesellersuserwise where userid=%(userid)s AND category_id=%(category_id)s ALLOW FILTERING""",
                    {"userid": user_id, "category_id": category_id},
                )
                store_count = session.execute(
                    """SELECT COUNT(*) FROM favouritesellersuserwise where userid=%(userid)s AND category_id=%(category_id)s ALLOW FILTERING""",
                    {"userid": user_id, "category_id": category_id},
                )

                for count in store_count:
                    for j in count:
                        total_count = j

                if not store_details:
                    response = {"data": [], "penCount": 0}
                    return JsonResponse(response, safe=False, status=404)
                else:
                    store_list = []
                    store_data_json = []
                    for store in store_details:
                        store_list.append(ObjectId(store.seller_id))

                    if int(is_express) == 0:
                        store_data = db.stores.find(
                            {"_id": {"$in": list(set(store_list))}, "status": 1}
                        )
                    else:
                        store_data = db.stores.find(
                            {
                                "_id": {"$in": list(set(store_list))},
                                "isExpressDelivery": 1,
                                "status": 1,
                            }
                        )
                    if store_data.count() > 0:
                        for seller in store_data:
                            avg_rating_value = 0
                            seller_rating = db.sellerReviewRatings.aggregate(
                                [
                                    {
                                        "$match": {
                                            "sellerId": str(seller["_id"]),
                                            "rating": {"$ne": 0},
                                            "status": 1,
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": "$sellerId",
                                            "avgRating": {"$avg": "$rating"},
                                        }
                                    },
                                ]
                            )
                            for avg_rating in seller_rating:
                                avg_rating_value = avg_rating["avgRating"]
                            store_data_json.append(
                                {
                                    "_id": str(seller["_id"]),
                                    "avgRating": round(avg_rating_value, 2),
                                    "businessLocationAddress": seller["businessLocationAddress"],
                                    "billingAddress": seller["billingAddress"]
                                    if "billingAddress" in seller
                                    else {},
                                    "headOffice": seller["headOffice"]
                                    if "headOffice" in seller
                                    else {},
                                    "logoImages": seller["logoImages"],
                                    "bannerImages": seller["bannerImages"],
                                    "galleryImages": seller["galleryImages"],
                                    "cityId": seller["cityId"],
                                    "citiesOfOperation": seller["citiesOfOperation"],
                                    "isExpressDelivery": int(seller["isExpressDelivery"])
                                    if "isExpressDelivery" in seller
                                    else 0,
                                    "parentSellerIdOrSupplierId": seller[
                                        "parentSellerIdOrSupplierId"
                                    ],
                                    "storeName": seller["storeName"][language],
                                    "address": seller["headOffice"]["headOfficeAddress"]
                                    if "headOfficeAddress" in seller["headOffice"]
                                    else "",
                                    "categoryName": seller["categoryName"],
                                    "categoryId": seller["categoryId"],
                                    "sellerTypeId": seller["sellerTypeId"],
                                    "sellerType": seller["sellerType"],
                                    "storeFrontTypeId": seller["storeFrontTypeId"],
                                    "storeFrontType": seller["storeFrontType"],
                                    "status": seller["status"],
                                    "buyerAccountId": seller["buyerAccountId"],
                                    "statusLogs": seller["statusLogs"],
                                    "registrationDateTimeStamp": seller[
                                        "registrationDateTimeStamp"
                                    ],
                                    "buyerAccountLinked": True
                                    if seller["buyerAccountId"] != ""
                                    else False,
                                }
                            )
                        response = {"data": store_data_json, "message": "data found"}
                        return JsonResponse(response, safe=False, status=200)
                    else:
                        response = {"data": [], "penCount": 0}
                        return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


class FavouriteProductAndStores(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Favourite Stores And Products"],
        operation_description="API for get the favourite store and produtcs from the list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="categoryId",
                default=GROCERY_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category od for the getting the data for store",
            ),
            openapi.Parameter(
                name="isExpress",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="is express delivery for the get the only express delivery stores. value should be 0 for normal and 1 for express",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            product_details = []
            store_details_list = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            skip = int(request.GET.get("skip", 0))
            limit = int(request.GET.get("limit", 10))
            user_id = json.loads(token)["userId"]
            
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            store_category_id = request.GET.get("categoryId", "")
            is_express = request.GET.get("isExpress", "0")
            timezone_data = request.GET.get("timezone") if "timezone" in request.GET else ""
            timezone_data_error = request.GET.get(
                "timezone") if "timezone" in request.GET else "Asia/Calcutta"  # request.GET.get("timezone", "Asia/Calcutta")
            try:
                timezone_data = timezone_data.replace("%2F", "/")
            except:
                timezone_data = timezone_data
            try:
                timezone_data_error = timezone_data_error.replace("%2F", "/")
            except:
                timezone_data_error = timezone_data_error
            lat = request.GET.get("lat") if "lat" in request.GET else 0
            long = request.GET.get("long") if "long" in request.GET else 0
            zone_id = request.GET.get("zoneId") if "zoneId" in request.GET else ""
            if zone_id == "":
                zone_id = "650d5e2de920bc92760fe094"
            if store_category_id == "":
                response = {"data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=404)
        

            else:
                # ===========================================store query===================================
                try:
                    current_time = datetime.datetime.now(pytz.timezone(timezone_data_error))
                except:
                    current_time = datetime.datetime.now()
                current_hour = current_time.hour

                if int(current_hour) >= 0 and int(current_hour) < 5:
                    current_text = "latenightdinner"
                elif int(current_hour) >= 5 and int(current_hour) < 10:
                    current_text = "breakfast"
                elif int(current_hour) >= 10 and int(current_hour) < 11:
                    current_text = "brunch"
                elif int(current_hour) >= 11 and int(current_hour) < 15:
                    current_text = "lunch"
                elif int(current_hour) >= 15 and int(current_hour) < 19:
                    current_text = "tea"
                else:
                    current_text = "dinner"
                should_query = []
                search_query = []
                search_query.append({"match": {"status": 1}})
                search_query.append({"match": {"categoryId": store_category_id}})
                search_query.append({"terms": {"favouriteUsers": [user_id]}})
                query = {
                    "query": {
                        "bool": {
                            "must": search_query,
                            "boost": 1.0,
                        }
                    },
                    "size": limit,
                    "from": skip
                }
                res = es.search(
                    index=index_store,
                    body=query,
                    filter_path=[
                        "hits.hits._score",
                        "hits.hits.sort",
                        "hits.hits._id",
                        "hits.hits._source"
                    ],
                )
                store_json_data = []

                print("query",query)
                print("resssssssssssssssssss",res)
                store_score = 0
                if len(res) > 0:
                    print("startingggggggggg")
                    store_zone_details = []
                    for store_details in res["hits"]["hits"]:
                        store_id = store_details["_id"]
                        try:
                            store_details = db.stores.find_one(
                                {
                                    "_id": ObjectId(store_id),
                                    "storeFrontTypeId": {"$ne": 5},
                                }
                            )  # "status": 1,
                            cusine_name = ""
                            if store_details != None:
                                # ===========================offer data==============================
                                offer_details = db.offers.find(
                                    {
                                        "storeId": {
                                            "$in": [str(store_details["_id"])]
                                        },
                                        "status": 1,
                                    }
                                )
                                offer_json = []
                                for offer in offer_details:
                                    offer_json.append(
                                        {
                                            "offerName": offer["name"][language]
                                            if language in offer["name"]
                                            else offer["name"]["en"],
                                            "offerId": str(offer["_id"]),
                                            "discountValue": offer["discountValue"],
                                            "offerType": offer["offerType"],
                                        }
                                    )
                                if len(offer_json) > 0:
                                    best_offer_store = max(offer_json, key=lambda x: x['discountValue'])
                                    if best_offer_store['offerType'] == 1:
                                        percentage_text = str(best_offer_store['discountValue']) + "%" + " " + "off"
                                    else:
                                        try:
                                            percentage_text = store_details['currencySymbol'] + str(best_offer_store['discountValue']) + " off"
                                        except:
                                            percentage_text = "₹" + str(best_offer_store['discountValue']) + " off"
                                    offer_name = best_offer_store["offerName"]
                                else:
                                    offer_name = ""
                                    percentage_text = ""
                                # ===== get safetyStandards ========
                                try:
                                    safety_standards = store_details[
                                        'safetyStandards'] if 'safetyStandards' in store_details else 0
                                except:
                                    safety_standards = 0
                                try:
                                    store_lat = (
                                        float(
                                            store_details[
                                                "businessLocationAddress"
                                            ]["lat"]
                                        )
                                        if "businessLocationAddress"
                                            in store_details
                                        else 0
                                    )
                                    store_long = (
                                        float(
                                            store_details[
                                                "businessLocationAddress"
                                            ]["long"]
                                        )
                                        if "businessLocationAddress"
                                            in store_details
                                        else 0
                                    )
                                    address = (
                                        store_details["businessLocationAddress"][
                                            "address"
                                        ]
                                        if "businessLocationAddress"
                                            in store_details
                                        else ""
                                    )
                                    addressArea = (
                                        store_details["businessLocationAddress"][
                                            "addressArea"
                                        ]
                                        if "addressArea"
                                            in store_details["businessLocationAddress"]
                                        else ""
                                    )
                                    locality = (
                                        store_details["businessLocationAddress"][
                                            "locality"
                                        ]
                                        if "locality"
                                            in store_details["businessLocationAddress"]
                                        else ""
                                    )
                                    post_code = (
                                        store_details["businessLocationAddress"][
                                            "postCode"
                                        ]
                                        if "postCode"
                                            in store_details["businessLocationAddress"]
                                        else ""
                                    )
                                    state = (
                                        store_details["businessLocationAddress"][
                                            "state"
                                        ]
                                        if "state"
                                            in store_details["businessLocationAddress"]
                                        else ""
                                    )
                                    country = (
                                        store_details["businessLocationAddress"][
                                            "country"
                                        ]
                                        if "country"
                                            in store_details["businessLocationAddress"]
                                        else ""
                                    )
                                    city = (
                                        store_details["businessLocationAddress"][
                                            "city"
                                        ]
                                        if "city"
                                            in store_details["businessLocationAddress"]
                                        else ""
                                    )
                                except:
                                    store_lat = 0
                                    store_long = 0
                                    address = ""
                                    addressArea = ""
                                    locality = ""
                                    post_code = ""
                                    state = ""
                                    country = ""
                                    city = ""

                                if post_code == None:
                                    post_code = ""
                                if state == None:
                                    state = ""
                                if country == None:
                                    country = ""
                                if city == None:
                                    city = ""
                                # ============================query for get the distance by geo query==============
                                must_query = []
                                must_query.append(
                                    {"match": {"_id": str(store_details["_id"])}}
                                )
                                must_query.append({"match": {"status": 1}})
                                geo_distance_sort = {
                                    "_geo_distance": {
                                        "distance_type": "plane",
                                        "location": {
                                            "lat": float(lat),
                                            "lon": float(long),
                                        },
                                        "order": "asc",
                                        "unit": "km",
                                    }
                                }
                                sort_query = [geo_distance_sort]
                                must_query.append(
                                    {
                                        "geo_distance": {
                                            "distance": "50km",
                                            "location": {
                                                "lat": float(lat),
                                                "lon": float(long),
                                            },
                                        }
                                    }
                                )
                                query = {
                                    "query": {
                                        "bool": {
                                            "must": must_query,
                                        }
                                    },
                                    "size": 1,
                                    "from": 0,
                                    "sort": sort_query,
                                }
                                res = es.search(
                                    index=index_store,
                                    body=query,
                                    filter_path=[
                                        "hits.total",
                                        "hits.hits._id",
                                        "hits.hits.sort",
                                        "hits.hits._source",
                                    ],
                                )
                                if res["hits"]["total"]["value"] > 0:
                                    if "hits" in res["hits"]:
                                        for seller in res["hits"]["hits"]:
                                            distance_km = round(
                                                seller["sort"][0], 2
                                            )
                                            distance_miles = round(
                                                distance_km * conv_fac, 2
                                            )
                                    else:
                                        distance_km = 0
                                        distance_miles = 0
                                else:
                                    distance_km = 0
                                    distance_miles = 0

                                store_name = (
                                    store_details["storeName"][language]
                                    if language in store_details["storeName"]
                                    else store_details["storeName"]["en"]
                                )
                                store_id = str(store_details["_id"])
                                # ===================================for the cusines=============================================
                                if "specialities" in store_details:
                                    if len(store_details["specialities"]):
                                        for spec in store_details["specialities"]:
                                            spec_data = db.specialities.find_one(
                                                {"_id": ObjectId(spec)},
                                                {"specialityName": 1, "image": 1},
                                            )
                                            if spec_data != None:
                                                if cusine_name == "":
                                                    cusine_name = (
                                                        spec_data["specialityName"][
                                                            language
                                                        ]
                                                        if language
                                                            in spec_data[
                                                                "specialityName"
                                                            ]
                                                        else spec_data[
                                                            "specialityName"
                                                        ]["en"]
                                                    )
                                                else:
                                                    cusine_name = (
                                                        cusine_name
                                                        + ", "
                                                        + spec_data[
                                                            "specialityName"
                                                        ][language]
                                                        if language
                                                            in spec_data[
                                                                "specialityName"
                                                            ]
                                                        else spec_data[
                                                            "specialityName"
                                                        ]["en"]
                                                    )
                                            else:
                                                pass
                                    else:
                                        pass
                                else:
                                    pass

                                if "averageCostForMealForTwo" in store_details:
                                    cost_for_two = store_details[
                                        "averageCostForMealForTwo"
                                    ]
                                else:
                                    cost_for_two = 0

                                # =====================================about store tags=================================
                                if "storeIsOpen" in store_details:
                                    store_is_open = store_details["storeIsOpen"]
                                else:
                                    store_is_open = False

                                if "nextCloseTime" in store_details:
                                    next_close_time = store_details["nextCloseTime"]
                                else:
                                    next_close_time = ""

                                if "nextOpenTime" in store_details:
                                    next_open_time = store_details["nextOpenTime"]
                                else:
                                    next_open_time = ""

                                try:
                                    if "timeZoneWorkingHour" in store_details["_source"]:
                                        timeZoneWorkingHour = store_details["_source"][
                                            'timeZoneWorkingHour']
                                    else:
                                        timeZoneWorkingHour = ""
                                except:
                                    timeZoneWorkingHour = ""

                                if any(
                                        supplier["zoneId"] == str(zone_id)
                                        for supplier in store_details["serviceZones"]
                                ):
                                    is_delivery = True
                                    if (
                                            next_close_time == ""
                                            and next_open_time == ""
                                    ):
                                        store_tag = "Temporarily Closed"
                                    elif (
                                            next_open_time != ""
                                            and store_is_open == False
                                    ):
                                        # next_open_time = int(
                                        #     next_open_time + timezone * 60
                                        # )
                                        next_open_time = time_zone_converter(timezone, next_open_time,
                                                                                timeZoneWorkingHour)
                                        local_time = (
                                            datetime.datetime.fromtimestamp(
                                                next_open_time
                                            )
                                        )
                                        next_day = (
                                                datetime.datetime.now()
                                                + datetime.timedelta(days=1)
                                        )
                                        next_day_midnight = next_day.replace(
                                            hour=0, minute=0, second=0
                                        )
                                        next_day_midnight_timestamp = int(
                                            next_day_midnight.timestamp()
                                        )
                                        if (
                                                next_day_midnight_timestamp
                                                > next_open_time
                                        ):
                                            open_time = local_time.strftime(
                                                "%I:%M %p"
                                            )
                                            store_tag = "Opens Next At " + open_time
                                        else:
                                            open_time = local_time.strftime(
                                                "%I:%M %p"
                                            )
                                            store_tag = (
                                                    "Opens Tomorrow At " + open_time
                                            )
                                    else:
                                        store_tag = ""
                                else:
                                    is_delivery = False
                                    next_open_time = ""
                                    next_close_time = ""
                                    store_is_open = False
                                    store_tag = (
                                        "Does Not Deliver To Selected Location"
                                    )

                                if "shopifyStoreDetails" in store_details:
                                    if (
                                            "enable"
                                            in store_details["shopifyStoreDetails"]
                                    ):
                                        shopify_enable = store_details[
                                            "shopifyStoreDetails"
                                        ]["enable"]
                                    else:
                                        shopify_enable = False
                                else:
                                    shopify_enable = False

                                avg_rating_value = 0
                                seller_rating = db.sellerReviewRatings.aggregate(
                                    [
                                        {
                                            "$match": {
                                                "sellerId": str(
                                                    store_details["_id"]
                                                ),
                                                "rating": {"$ne": 0},
                                                "status": 1,
                                            }
                                        },
                                        {
                                            "$group": {
                                                "_id": "$sellerId",
                                                "avgRating": {"$avg": "$rating"},
                                            }
                                        },
                                    ]
                                )
                                for avg_rating in seller_rating:
                                    avg_rating_value = avg_rating["avgRating"]

                                # product count for store
                                product_count = db.childProducts.find(
                                    {
                                        "storeId": ObjectId(store_id),
                                        "status": 1,
                                        "units.isPrimary": True
                                    }
                                ).count()
                                try:
                                    store_user_count = seller["_source"]['favouriteUsers']
                                    fav_store_user_count = len(store_user_count)
                                except Exception as e:
                                    print(e)
                                    fav_store_user_count = 0

                                store_details_json = {
                                    "productCount": product_count,
                                    "lat": store_lat,
                                    "shopifyEnable": shopify_enable,
                                    "long": store_long,
                                    "address": address,
                                    "locality": locality,
                                    "cuisines": cusine_name,
                                    "addressArea": addressArea,
                                    "averageCostForMealForTwo": cost_for_two,
                                    "logoImages": store_details["logoImages"],
                                    "listingImage": store_details["listingImage"]
                                    if "listingImage" in store_details
                                    else {},
                                    "bannerImages": store_details["bannerImages"],
                                    "averageDeliveryTimeInMins": store_details[
                                        "averageDeliveryTimeInMins"
                                    ]
                                    if "averageDeliveryTimeInMins" in store_details
                                    else 0,
                                    "avgRating": round(avg_rating_value, 2),
                                    "storeIsOpen": store_is_open,
                                    "safetyStandards": safety_standards,
                                    "storeType": store_details[
                                        "storeType"] if "storeType" in store_details else "Food",
                                    "postCode": post_code,
                                    "nextCloseTime": next_close_time,
                                    "averageDeliveryTime": str(
                                        store_details["averageDeliveryTimeInMins"]
                                    )
                                                            + " "
                                                            + "Mins"
                                    if "averageDeliveryTimeInMins" in store_details
                                    else "",
                                    "nextOpenTime": next_open_time,
                                    "city": city,
                                    "minimumOrder": store_details["minimumOrder"]
                                    if "minimumOrder" in store_details
                                    else 0,
                                    "tableReservations": store_details["tableReservations"]
                                    if "tableReservations" in store_details
                                    else False,
                                    "priceForBookingTable": store_details["priceForBookingTable"]
                                    if "priceForBookingTable" in store_details
                                    else 0,
                                    "driverTypeId": store_details["driverTypeId"]
                                    if "driverTypeId" in store_details
                                    else 0,
                                    "driverType": store_details["driverType"]
                                    if "driverType" in store_details
                                    else "",
                                    "currencySymbol": store_details["currencySymbol"]
                                    if "currencyCode" in store_details
                                    else "INR",
                                    "currency": store_details["currencyCode"]
                                    if "currencyCode" in store_details
                                    else "INR",
                                    "supportedOrderTypes": store_details[
                                        "supportedOrderTypes"
                                    ]
                                    if "supportedOrderTypes" in store_details
                                    else 3,
                                    "storeTag": store_tag,
                                    "state": state,
                                    "country": country,
                                    "percentageText": percentage_text,
                                    "offerName": offer_name,
                                    "distanceKm": round(distance_km, 2),
                                    "uniqStoreId": store_details["uniqStoreId"]
                                    if "uniqStoreId" in store_details
                                    else "",
                                    "seqId": 1,
                                    "distanceMiles": distance_miles,
                                    "storeName": store_name,
                                    "storeId": store_id,
                                    "isDelivery": is_delivery,
                                    "userLikeCount": fav_store_user_count
                                }
                    
                                store_details_json["storeScore"] = store_score
                                store_details_list.append(store_details_json)
                        except Exception as ex:
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print(
                                "Error on line {}".format(
                                    sys.exc_info()[-1].tb_lineno
                                ),
                                type(ex).__name__,
                                ex,
                            )
                            pass
                pipeline = [
                    {
                        '$match': {
                            'storecategoryid': str(store_category_id),
                            'userid': str(user_id)
                        }
                    },
                    {
                        "$group": {
                            "_id": "$storeid",
                            "child_products": {"$push": "$childproductid"}
                        }
                    },
                    {
                        "$sort": {"_id": 1}
                    }
                ]
                result = list(db.likesProducts.aggregate(pipeline))
                product_data = []
                for store_data_ids in result:
                    store_id = store_data_ids["_id"]
                    fav_prod_id = store_data_ids["child_products"]
                    store_details_json = db.stores.find_one(
                        {
                            "_id": ObjectId(store_id)
                        },
                        {
                            "averageCostForMealForTwo": 1,
                            "favouriteUsers": 1,
                            "safetyStandards": 1,
                            "businessLocationAddress": 1,
                            "specialities": 1,
                            "storeName": 1,
                            "storeFrontTypeId": 1,
                            "uniqStoreId": 1,
                            "storeIsOpen": 1,
                            "nextCloseTime": 1,
                            "nextOpenTime": 1,
                            "serviceZones": 1,
                            "logoImages": 1,
                            "bannerImages": 1,
                            "listingImage": 1,
                            "cityId": 1,
                            "minimumOrder": 1,
                            "citiesOfOperation": 1,
                            "freeDeliveryAbove": 1,
                            "safetyStandardsSortDiscription": 1,
                            "safetyStandardsDynamicContent": 1,
                            "averageDeliveryTimeInMins": 1,
                            "supportedOrderTypes": 1,
                            "driverTypeId": 1,
                            "driverType": 1,
                            "storeType": 1,
                            "currencySymbol": 1,
                            "currencyCode": 1,
                            "tableReservations": 1,
                            "priceForBookingTable":1,
                        }
                    )
                    offer_details = db.offers.find(
                        {
                            "storeId": {"$in": [str(store_id)]}, "status": 1
                        },
                        {
                            "termscond": 1,
                            "name": 1,
                            "discountValue": 1,
                            "offerType": 1,
                            "webimages": 1,
                            "images": 1
                        }
                    )
                    offer_json = []
                    cusine_name = ""
                    for offer in offer_details:
                        terms_condition = html2text.html2text(offer["termscond"])
                        offer_json.append(
                            {
                                "offerName": offer["name"][language]
                                if language in offer["name"]
                                else offer["name"]["en"],
                                "termscond": terms_condition,
                                "offerId": str(offer["_id"]),
                                "discountValue": int(offer["discountValue"]),
                                "offerType": offer["offerType"],
                                "webimages": offer["webimages"],
                                "images": offer["images"],
                            }
                        )
                    if len(offer_json) > 0:
                        best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                        if best_offer_store["offerType"] == 0:
                            percentage_text = (
                                    str(best_offer_store["discountValue"]) + "%" + " " + "off"
                            )
                        else:
                            percentage_text = "₹" + str(best_offer_store["discountValue"]) + " off"
                        offer_name = best_offer_store["offerName"]
                    else:
                        best_offer_store = {}
                        offer_name = ""
                        percentage_text = ""
                    if store_details_json != None:
                        if "averageCostForMealForTwo" in store_details_json:
                            cost_for_two = store_details_json["averageCostForMealForTwo"]
                        else:
                            cost_for_two = 0

                        if "favouriteUsers" in store_details_json:
                            if user_id in store_details_json["favouriteUsers"]:
                                favourite_store = True
                            else:
                                favourite_store = False
                        else:
                            favourite_store = False
                        if "safetyStandards" in store_details_json:
                            if int(store_details_json["safetyStandards"]) == 0:
                                safety_standard = False
                                safety_standards_sort_discription = ""
                                safety_standards_dynamic_content = ""
                            else:
                                safety_standard = True
                                safety_standards_sort_discription = store_details_json[
                                    "safetyStandardsSortDiscription"
                                ] if "safetyStandardsSortDiscription" in store_details_json else ""
                                safety_standards_dynamic_content = store_details_json[
                                    "safetyStandardsDynamicContent"
                                ] if "safetyStandardsDynamicContent" in store_details_json else ""
                        else:
                            safety_standard = False
                            safety_standards_sort_discription = ""
                            safety_standards_dynamic_content = ""
                        try:
                            safety_standards = store_details_json['safetyStandards'] if 'safetyStandards' in store_details else 0
                        except:
                            safety_standards = 0
                        store_lat = (
                            float(store_details_json["businessLocationAddress"]["lat"])
                            if "lat" in store_details_json["businessLocationAddress"]
                            else 0
                        )
                        store_long = (
                            float(store_details_json["businessLocationAddress"]["long"])
                            if "long" in store_details_json["businessLocationAddress"]
                            else 0
                        )
                        address = (
                            store_details_json["businessLocationAddress"]["address"]
                            if "address" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        locality = (
                            store_details_json["businessLocationAddress"]["locality"]
                            if "locality" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        post_code = (
                            store_details_json["businessLocationAddress"]["postCode"]
                            if "postCode" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        state = (
                            store_details_json["businessLocationAddress"]["state"]
                            if "state" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        country = (
                            store_details_json["businessLocationAddress"]["country"]
                            if "country" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        addressArea = (
                            store_details_json["businessLocationAddress"]["addressArea"]
                            if "addressArea" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        city = (
                            store_details_json["businessLocationAddress"]["city"]
                            if "city" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        # ===================================for the cusines=============================================
                        if "specialities" in store_details_json:
                            if len(store_details_json["specialities"]):
                                for spec in store_details_json["specialities"]:
                                    spec_data = db.specialities.find_one(
                                        {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                    )
                                    if spec_data != None:
                                        if cusine_name == "":
                                            cusine_name = (
                                                spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                        else:
                                            cusine_name = (
                                                cusine_name
                                                + ", "
                                                + spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                    else:
                                        pass
                            else:
                                pass
                        else:
                            pass

                        store_name = (
                            store_details_json["storeName"][language]
                            if language in store_details_json["storeName"]
                            else store_details_json["storeName"]["en"]
                        )

                        # ================================for more stores==================================
                        if (
                                int(store_details_json["storeFrontTypeId"]) == 6
                                or int(store_details_json["storeFrontTypeId"]) == 2
                        ):
                            more_must_query = []
                            more_should_query = []
                            if "uniqStoreId" not in store_details_json:
                                more_must_query.append(
                                    {
                                        "match": {
                                            "storeName.en": store_details_json["storeName"]["en"]
                                        }
                                    }
                                )
                            else:
                                more_must_query.append(
                                    {
                                        "match_phrase_prefix": {
                                            "uniqStoreId": store_details_json["uniqStoreId"]
                                        }
                                    }
                                )
                            more_must_query.append({"match": {"status": 1}})
                            more_must_query.append(
                                {"match": {"categoryId": DINE_STORE_CATEGORY_ID}}
                            )
                            geo_distance_sort = {
                                "_geo_distance": {
                                    "distance_type": "plane",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                    "order": "asc",
                                    "unit": "km",
                                }
                            }
                            sort_query = [geo_distance_sort]
                            more_must_query.append(
                                {
                                    "geo_distance": {
                                        "distance": "50km",
                                        "location": {"lat": float(lat), "lon": float(long)},
                                    }
                                }
                            )
                            store_more_geo_query = {
                                "query": {
                                    "bool": {
                                        "must": more_must_query,
                                        "must_not": [
                                            {"match": {"_id": str(store_details_json["_id"])}}
                                        ],
                                    }
                                },
                                "size": 100,
                                "from": 0,
                                "sort": sort_query,
                            }
                            res_more = es.search(
                                index=index_store,
                                body=store_more_geo_query,
                                filter_path=["hits.total", "hits.hits._id", "hits.hits._source"],
                            )
                            more_seller_count = res_more["hits"]["total"]["value"]
                        else:
                            more_seller_count = 0
                        # ============================query for get the distance by geo query==============
                        store_must_query = []

                        store_must_query.append({"match": {"_id": str(store_details_json["_id"])}})
                        geo_distance_sort = {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {"lat": float(lat), "lon": float(long)},
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                        sort_query = [geo_distance_sort]
                        store_must_query.append(
                            {
                                "geo_distance": {
                                    "distance": "50km",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                }
                            }
                        )
                        store_geo_query = {
                            "query": {
                                "bool": {
                                    "must": store_must_query,
                                }
                            },
                            "size": 1,
                            "from": 0,
                            "sort": sort_query,
                        }
                        res = es.search(
                            index=index_store,
                            body=store_geo_query,
                            filter_path=[
                                "hits.total",
                                "hits.hits._id",
                                "hits.hits.sort",
                                "hits.hits._source",
                            ],
                        )
                        if res["hits"]["total"]["value"] > 0:
                            if "hits" in res["hits"]:
                                for seller in res["hits"]["hits"]:
                                    distance_km = round(seller["sort"][0], 2)
                                    distance_miles = round(distance_km * conv_fac, 2)
                            else:
                                distance_km = 0
                                distance_miles = 0
                        else:
                            distance_km = 0
                            distance_miles = 0

                        store_id = str(store_details_json["_id"])
                        # =====================================about store tags=================================
                        if "storeIsOpen" in store_details_json:
                            store_is_open = store_details_json["storeIsOpen"]
                        else:
                            store_is_open = False

                        if "nextCloseTime" in store_details_json:
                            next_close_time = store_details_json["nextCloseTime"]
                        else:
                            next_close_time = ""

                        if "nextOpenTime" in store_details_json:
                            next_open_time = store_details_json["nextOpenTime"]
                        else:
                            next_open_time = ""

                        try:
                            if "timeZoneWorkingHour" in seller["_source"]:
                                timeZoneWorkingHour = seller["_source"]['timeZoneWorkingHour']
                            else:
                                timeZoneWorkingHour = ""
                        except:
                            timeZoneWorkingHour = ""
                        if "shopifyStoreDetails" in store_details_json:
                            if (
                                    "enable"
                                    in store_details_json["shopifyStoreDetails"]
                            ):
                                shopify_enable = store_details_json[
                                    "shopifyStoreDetails"
                                ]["enable"]
                            else:
                                shopify_enable = False
                        else:
                            shopify_enable = False

                        if any(
                                supplier["zoneId"] == str(zone_id)
                                for supplier in store_details_json["serviceZones"]
                        ):
                            is_delivery = True
                            if next_close_time == "" and next_open_time == "":
                                is_temp_close = True
                                store_tag = "Temporarily Closed"
                            elif next_open_time != "" and store_is_open == False:
                                is_temp_close = False
                                # next_open_time = int(next_open_time + timezone * 60)
                                next_open_time = time_zone_converter(timezone_data, next_open_time, timeZoneWorkingHour)
                                local_time = datetime.datetime.fromtimestamp(next_open_time)
                                next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                                next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                                if next_day_midnight_timestamp > next_open_time:
                                    open_time = local_time.strftime("%I:%M %p")
                                    store_tag = "Opens Next At " + open_time
                                else:
                                    open_time = local_time.strftime("%I:%M %p")
                                    store_tag = "Opens Tomorrow At " + open_time
                            else:
                                is_temp_close = False
                                store_tag = ""
                        else:
                            is_temp_close = True
                            is_delivery = False
                            next_open_time = ""
                            next_close_time = ""
                            store_is_open = False
                            store_tag = "Does Not Deliver To Selected Location"

                        avg_rating_value = 0
                        seller_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "sellerId": str(store_details_json["_id"]),
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_rating in seller_rating:
                            avg_rating_value = avg_rating["avgRating"]
                        
                        try:
                            store_user_count = store_details_json['favouriteUsers']
                            fav_store_user_count = len(store_user_count)
                        except Exception as e:
                            print(e)
                            fav_store_user_count = 0

                        store_details = {
                            "productCount": 0,
                            "lat": store_lat,
                            "shopifyEnable": shopify_enable,
                            "long": store_long,
                            "address": address,
                            "locality": locality,
                            "cuisines": cusine_name,
                            "addressArea": addressArea,
                            "averageCostForMealForTwo": cost_for_two,
                            "logoImages": store_details_json["logoImages"],
                            "listingImage": store_details_json["listingImage"]
                            if "listingImage" in store_details_json
                            else {},
                            "bannerImages": store_details_json["bannerImages"],
                            "averageDeliveryTimeInMins": store_details_json[
                                "averageDeliveryTimeInMins"
                            ]
                            if "averageDeliveryTimeInMins" in store_details_json
                            else 0,
                            "avgRating": round(avg_rating_value, 2),
                            "storeIsOpen": store_is_open,
                            "safetyStandards": safety_standards,
                            "storeType": store_details_json[
                                "storeType"] if "storeType" in store_details_json else "Food",
                            "postCode": post_code,
                            "nextCloseTime": next_close_time,
                            "averageDeliveryTime": str(
                                store_details_json["averageDeliveryTimeInMins"]
                            )
                                                    + " "
                                                    + "Mins"
                            if "averageDeliveryTimeInMins" in store_details_json
                            else "",
                            "nextOpenTime": next_open_time,
                            "city": city,
                            "minimumOrder": store_details_json["minimumOrder"]
                            if "minimumOrder" in store_details_json
                            else 0,
                            "tableReservations": store_details_json["tableReservations"]
                            if "tableReservations" in store_details_json
                            else False,
                            "priceForBookingTable": store_details_json["priceForBookingTable"]
                            if "priceForBookingTable" in store_details_json
                            else 0,
                            "driverTypeId": store_details_json["driverTypeId"]
                            if "driverTypeId" in store_details_json
                            else 0,
                            "driverType": store_details_json["driverType"]
                            if "driverType" in store_details_json
                            else "",
                            "currencySymbol": store_details_json["currencySymbol"]
                            if "currencyCode" in store_details_json
                            else "INR",
                            "currency": store_details_json["currencyCode"]
                            if "currencyCode" in store_details_json
                            else "INR",
                            "supportedOrderTypes": store_details_json[
                                "supportedOrderTypes"
                            ]
                            if "supportedOrderTypes" in store_details_json
                            else 3,
                            "storeTag": store_tag,
                            "state": state,
                            "country": country,
                            "percentageText": percentage_text,
                            "offerName": offer_name,
                            "distanceKm": round(distance_km, 2),
                            "uniqStoreId": store_details_json["uniqStoreId"]
                            if "uniqStoreId" in store_details_json
                            else "",
                            "seqId": 1,
                            "distanceMiles": distance_miles,
                            "storeName": store_name,
                            "storeId": store_id,
                            "isDelivery": is_delivery,
                            "userLikeCount": fav_store_user_count
                            }

                        # =========================================================query for the get the products=======================================
                        must_query = []
                        must_query.append({"terms": {"status": [1, 2]}})
                        must_query.append({"match": {"storeId": str(store_id)}})
                        must_query.append({"match": {"units.isPrimary": True}})
                        bool_query = {"must": must_query}
                        # ==============================category+subcategory wise grouping=================
                        query = {
                            "query": {
                                "bool": bool_query
                            },
                            "aggs": {
                                "top_sales_hits": {
                                    "top_hits": {
                                        "_source": {
                                            "includes": [
                                                "_id",
                                                "parentProductId",
                                                "firstCategoryId",
                                                "catName",
                                                "secondCategoryId",
                                                "subCatName",
                                                "childproductid",
                                                "storeId",
                                                "thirdCategoryId",
                                                "detailDescription",
                                                "subSubCatName",
                                                "offer",
                                                "images",
                                                "suppliers",
                                                "containsMeat",
                                                "consumptionTime",
                                                "currencySymbol",
                                                "currency",
                                                "tax",
                                                "units",
                                                "pName",
                                                "storeCategoryId",
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                        
                        query["query"]["bool"]["must"].append({"terms": {"_id": fav_prod_id}})

                        res = es.search(index=index_products, body=query)
                        favourite_data = []
                        recomended_data = []
                        category_details = []
                        count = 2
                        product_data = []
                        for hits in res["aggregations"]["top_sales_hits"]["hits"]["hits"]:
                            try:
                                tax_value = []
                                # =========================for addons=======================================
                                try:
                                    if "addOns" in hits["_source"]["units"][0]:
                                        if (
                                                hits["_source"]["units"][0]["addOns"]
                                                != None
                                        ):
                                            if (
                                                    len(
                                                        hits["_source"]["units"][0][
                                                            "addOns"
                                                        ]
                                                    )
                                                    > 0
                                            ):
                                                addons_count = True
                                            else:
                                                addons_count = False
                                        else:
                                            addons_count = False
                                    else:
                                        addons_count = False
                                except:
                                    addons_count = False

                                if addons_count == False:
                                    product_count = db.childProducts.find(
                                        {
                                            "storeId": ObjectId(
                                                hits["_source"]["storeId"]
                                            ),
                                            "parentProductId": hits["_source"][
                                                "parentProductId"
                                            ],
                                            "status": 1,
                                        }
                                    ).count()
                                    if product_count > 1:
                                        addons_count = True

                                best_supplier = {}
                                best_supplier["id"] = hits["_source"]["storeId"]
                                best_supplier["productId"] = hits["_id"]
                                try:
                                    best_supplier["retailerQty"] = (
                                        hits["_source"]["units"][0][
                                            "availableQuantity"
                                        ]
                                        if hits["_source"]["units"][0][
                                                "availableQuantity"
                                            ]
                                            != ""
                                        else 0
                                    )
                                except:
                                    best_supplier["retailerQty"] = 0

                                try:
                                    best_supplier["distributorQty"] = (
                                        hits["_source"]["units"][0]["distributor"][
                                            "availableQuantity"
                                        ]
                                        if hits["_source"]["units"][0][
                                                "distributor"
                                            ]["availableQuantity"]
                                            != ""
                                        else 0
                                    )
                                except:
                                    best_supplier["distributorQty"] = 0

                                sorted_price_data = sorted(hits["_source"]["units"][0]["b2cPricing"], key=lambda x: x['b2cproductSellingPrice'])
                                base_price_max = sorted_price_data[0]["b2cproductSellingPrice"]
                                allPrice = hits["_source"]["units"][0]["b2cPricing"]
                                try:
                                    best_supplier["retailerPrice"] = (
                                        base_price_max if "b2cproductSellingPrice"
                                        in hits["_source"]["units"][0]["b2cPricing"][0]
                                        else hits["_source"]["units"][0]["floatValue"]
                                    )
                                except:
                                    best_supplier["retailerPrice"] = hits["_source"][
                                        "units"
                                    ][0]["floatValue"]

                                try:
                                    best_supplier["distributorPrice"] = (
                                        base_price_max if "b2bproductSellingPrice"
                                        in hits["_source"]["units"][0]["b2bPricing"][0]
                                        else hits["_source"]["units"][0]["floatValue"]
                                    )
                                except:
                                    best_supplier["distributorPrice"] = hits["_source"][
                                        "units"
                                    ][0]["floatValue"]

                                if len(best_supplier) > 0:
                                    # ===========================tax for the product=========================================================
                                    tax_details = db.childProducts.find_one(
                                        {
                                            "_id": ObjectId(
                                                best_supplier["productId"]
                                            )
                                        }
                                    )
                                    detail_description = (
                                        tax_details["detailDescription"][language]
                                        if language
                                            in tax_details["detailDescription"]
                                        else tax_details["detailDescription"]["en"]
                                    )
                                    if detail_description == None:
                                        detail_description = ""
                                    # =================================price calculation===================================================================
                                    price = best_supplier["retailerPrice"]
                                    if type(price) == str:
                                        price = float(price)

                                    tax_price = 0
                                    offer_data = []
                                    if tax_details != None:
                                        if "offer" in tax_details:
                                            for offer in tax_details["offer"]:
                                                if offer["status"] == 1:
                                                    offer_terms = (
                                                        db.offers.find_one(
                                                            {
                                                                "_id": ObjectId(
                                                                    offer["offerId"]
                                                                )
                                                            }
                                                        )
                                                    )
                                                    if offer_terms != None:
                                                        terms_condition = (
                                                            html2text.html2text(
                                                                offer_terms[
                                                                    "termscond"
                                                                ]
                                                            )
                                                        )
                                                        offer[
                                                            "termscond"
                                                        ] = terms_condition
                                                        if offer_terms[
                                                            "startDateTime"
                                                        ] <= int(time.time()):
                                                            offer_data.append(offer)
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                    else:
                                        pass

                                    if len(offer_data) > 0:
                                        best_offer = max(
                                            offer_data,
                                            key=lambda x: x["discountValue"],
                                        )
                                    else:
                                        best_offer = {}

                                    if len(best_offer) == 0:
                                        percentage = 0
                                        discount_type = 0
                                    else:
                                        if "discountType" in best_offer:
                                            percentage = int(
                                                best_offer["discountValue"]
                                            )
                                            discount_type = best_offer[
                                                "discountType"
                                            ]
                                        else:
                                            percentage = 0
                                            discount_type = 0

                                    if tax_details != None:
                                        try:
                                            if type(tax_details['units'][0]["tax"]) == list:
                                                for tax in tax_details['units'][0]["tax"]:
                                                    tax_value.append(
                                                        {"value": tax["taxValue"]}
                                                    )
                                            else:
                                                if tax_details["tax"] != None:
                                                    if "taxValue" in tax_details["tax"]:
                                                        tax_value.append(
                                                            {
                                                                "value": tax_details[
                                                                    "tax"
                                                                ]["taxValue"]
                                                            }
                                                        )
                                                    else:
                                                        tax_value.append(
                                                            {
                                                                "value": tax_details[
                                                                    "tax"
                                                                ]
                                                            }
                                                        )
                                                else:
                                                    pass
                                        except:pass
                                    else:
                                        pass
                                    tax_price = 0

                                    # ==================================get currecny rate============================
                                    try:
                                        currency_rate = currency_exchange_rate[
                                            str(tax_details["currency"])
                                            + "_"
                                            + str(currency_code)
                                            ]
                                    except:
                                        currency_rate = 0
                                    currency_details = db.currencies.find_one(
                                        {"currencyCode": currency_code}
                                    )
                                    if currency_details is not None:
                                        currency_symbol = currency_details[
                                            "currencySymbol"
                                        ]
                                        currency = currency_details["currencyCode"]
                                    else:
                                        currency_symbol = tax_details[
                                            "currencySymbol"
                                        ]
                                        currency = tax_details["currency"]

                                    if float(currency_rate) > 0:
                                        price = price * float(currency_rate)

                                    tax_price_data = price + (
                                            (price * tax_price) / 100
                                    )
                                    if discount_type == 0:
                                        discount_price = float(percentage)
                                    elif discount_type == 1:
                                        discount_price = (
                                                                    float(tax_price_data)
                                                                    * float(percentage)
                                                            ) / 100
                                    else:
                                        discount_price = 0
                                    base_price = tax_price_data - discount_price

                                    try:
                                        ch_pro = db.childProducts.find_one(
                                            {"_id": ObjectId(str(best_supplier["productId"]))},
                                            {"isMembersOnly": 1, "units": 1})
                                        isMembersOnly = ch_pro.get("isMembersOnly", False)
                                        nonMemberPrice = ch_pro["units"][0][
                                            "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                                ch_pro["units"][
                                                                                    0] else round(
                                            discount_price, 2)
                                        memberPrice = ch_pro["units"][0][
                                            "memberPrice"] if "memberPrice" in ch_pro["units"][
                                            0] else round(discount_price, 2)
                                    except:
                                        isMembersOnly = False
                                        nonMemberPrice = round(discount_price, 2)
                                        memberPrice = round(discount_price, 2)

                                    final_price_list = {
                                        "basePrice": round(tax_price_data, 2),
                                        "finalPrice": round(base_price, 2),
                                        "discountPrice": round(discount_price, 2),
                                        "discountPercentage": percentage,
                                        "discountPriceForNonMembers": nonMemberPrice,
                                        "memberPrice": memberPrice
                                    }
                                    try:
                                        response_casandra = session.execute(
                                            """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                            {
                                                "userid": user_id,
                                                "productid": str(
                                                    best_supplier["productId"]
                                                ),
                                            },
                                        )

                                        if not response_casandra:
                                            response_casandra = session.execute(
                                                """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                {
                                                    "userid": user_id,
                                                    "productid": str(
                                                        hits["_source"][
                                                            "childproductid"
                                                        ]
                                                    ),
                                                },
                                            )
                                            if not response_casandra:
                                                isFavourite = False
                                            else:
                                                isFavourite = True
                                        else:
                                            for fav in response_casandra:
                                                isFavourite = True
                                    except Exception as e:
                                        print(e)
                                        isFavourite = False
                                        response_casandra = None
                                    # =================================recomanded products===========================

                                    try:
                                        product_name = (
                                            tax_details["pName"][language]
                                            if language in tax_details["pName"]
                                            else tax_details["pName"]["en"]
                                        )
                                    except:
                                        product_name = (
                                            tax_details["units"][0]["unitName"][
                                                language
                                            ]
                                            if language
                                                in tax_details["units"][0]["unitName"]
                                            else tax_details["units"][0][
                                                "unitName"
                                            ]["en"]
                                        )

                                    (
                                        currency_symbol,
                                        currency,
                                        product_status,
                                        product_tag,
                                    ) = next_availbale_time(
                                        best_supplier["productId"]
                                    )
                                    if tax_details["status"] == 1:
                                        if "mealConsumptionTime" in tax_details:
                                            if (
                                                    current_text
                                                    in tax_details[
                                                "mealConsumptionTime"
                                            ]
                                            ):
                                                pass
                                            elif (
                                                    len(
                                                        tax_details[
                                                            "mealConsumptionTime"
                                                        ]
                                                    )
                                                    > 0
                                            ):
                                                if (
                                                        int(current_hour) >= 0
                                                        and int(current_hour) < 5
                                                ):
                                                    current_text = "latenightdinner"
                                                    currenct_text_value = [
                                                        "breakfast",
                                                        "brunch",
                                                        "lunch",
                                                        "tea",
                                                        "dinner",
                                                    ]
                                                elif (
                                                        int(current_hour) >= 5
                                                        and int(current_hour) < 10
                                                ):
                                                    current_text = "breakfast"
                                                    currenct_text_value = [
                                                        "brunch",
                                                        "lunch",
                                                        "tea",
                                                        "dinner",
                                                    ]
                                                elif (
                                                        int(current_hour) >= 10
                                                        and int(current_hour) < 11
                                                ):
                                                    current_text = "brunch"
                                                    currenct_text_value = [
                                                        "lunch",
                                                        "tea",
                                                        "dinner",
                                                    ]
                                                elif (
                                                        int(current_hour) >= 11
                                                        and int(current_hour) < 15
                                                ):
                                                    current_text = "lunch"
                                                    currenct_text_value = [
                                                        "tea",
                                                        "dinner",
                                                    ]
                                                elif (
                                                        int(current_hour) >= 15
                                                        and int(current_hour) < 19
                                                ):
                                                    current_text = "tea"
                                                    currenct_text_value = ["dinner"]
                                                else:
                                                    current_text = "dinner"
                                                    currenct_text_value = []
                                                for k, v in tax_details[
                                                    "mealConsumptionTime"
                                                ].items():
                                                    if k in currenct_text_value:
                                                        product_status = True
                                                        next_day = (
                                                            datetime.datetime.now()
                                                        )
                                                        next_day_midnight = (
                                                            next_day.replace(
                                                                hour=int(
                                                                    meal_timing[k]
                                                                ),
                                                                minute=00,
                                                                second=00,
                                                            )
                                                        )
                                                        open_time = next_day_midnight.strftime(
                                                            "%I:%M %p"
                                                        )
                                                        product_tag = (
                                                                "Available On Today At "
                                                                + open_time
                                                        )
                                                    else:
                                                        product_status = True
                                                        next_day = (
                                                                datetime.datetime.now()
                                                                + datetime.timedelta(
                                                            days=1
                                                        )
                                                        )
                                                        next_day_midnight = (
                                                            next_day.replace(
                                                                hour=meal_timing[k],
                                                                minute=00,
                                                                second=00,
                                                            )
                                                        )
                                                        open_time = next_day_midnight.strftime(
                                                            "%I:%M %p"
                                                        )
                                                        product_tag = (
                                                                "Next available at "
                                                                + open_time
                                                                + " tomorrow"
                                                        )
                                            else:
                                                product_tag = ""
                                                product_status = False
                                        else:
                                            pass
                                    else:
                                        pass
                                    #get total like count for influencer and normal user
                                    likesByUsers=0
                                    likesByInfluencers=0
                                    try:
                                        likesByUsers=db.likesProducts.find({"childproductid": str(best_supplier["productId"]),"isInfluencer":False}).count()
                                        likesByInfluencers=db.likesProducts.find({"childproductid": str(best_supplier["productId"]),"isInfluencer":True}).count()
                                    except:
                                        likesByUsers=0
                                        likesByInfluencers=0
                                    try:
                                        reseller_commission = tax_details['units'][0]['b2cPricing'][0][
                                            'b2cresellerCommission']
                                    except:
                                        reseller_commission = 0

                                    try:
                                        reseller_commission_type = tax_details['units'][0]['b2cPricing'][
                                            'b2cpercentageCommission']
                                    except:
                                        reseller_commission_type = 0
                                    additional_info = []
                                    if "THC" in tax_details["units"][0]:
                                        additional_info.append(
                                            {
                                                "seqId": 2,
                                                "attrname": "THC",
                                                "value": str(tax_details["units"][0]["THC"]) + " %",
                                            }
                                        )
                                    else:
                                        pass

                                    if "CBD" in tax_details["units"][0]:
                                        additional_info.append(
                                            {
                                                "seqId": 1,
                                                "attrname": "CBD",
                                                "value": str(tax_details["units"][0]["CBD"]) + " %",
                                            }
                                        )
                                    else:
                                        pass
                                    child_product = db.childProducts.find_one(
                                        {"_id": ObjectId(best_supplier["productId"])},
                                        {
                                            "currencySymbol": 1,
                                            "currency": 1,
                                            "brandTitle": 1,
                                            "manufactureName": 1,
                                        },
                                    )

                                    if child_product != None:
                                        brand_name = (
                                            child_product["brandTitle"][language]
                                            if language in child_product["brandTitle"]
                                            else child_product["brandTitle"]["en"]
                                        )
                                        brand_title = (
                                            child_product["brandTitle"][language]
                                            if language in child_product["brandTitle"]
                                            else child_product["brandTitle"]["en"]
                                        )
                                        manufacture_name = (
                                            child_product["manufactureName"][language]
                                            if language in child_product["manufactureName"]
                                            else ""
                                        )
                                    else:
                                        brand_name = (
                                            tax_details["brandTitle"]["en"]
                                            if "brandTitle" in tax_details
                                            else ""
                                        )
                                        brand_title = (
                                            tax_details["brandTitle"]["en"]
                                            if "brandTitle" in tax_details
                                            else ""
                                        )
                                        manufacture_name = (
                                            tax_details["manufactureName"]["en"]
                                            if "manufactureName" in tax_details
                                            else ""
                                        )
                                    varinat_boolean = validate_variant(
                                        str(tax_details['parentProductId']),
                                        best_supplier["id"],
                                        zone_id,
                                        store_category_id,
                                    )
                                    attribute_data = []
                                    if "attributes" in tax_details["units"][0]:
                                        for attr in tax_details["units"][0]["attributes"]:
                                            for att in attr["attrlist"]:
                                                if "linkedtounit" in att:
                                                    if att["linkedtounit"] == 0:
                                                        pass
                                                    else:
                                                        if att["value"] == None:
                                                            pass
                                                        else:
                                                            if "measurementUnit" in att:
                                                                measurement_unit = att["measurementUnit"]
                                                            else:
                                                                measurement_unit = ""
                                                            try:
                                                                attr_value = (
                                                                    str(att["value"][language])
                                                                    + " "
                                                                    + str(measurement_unit)
                                                                )
                                                            except:
                                                                attr_value = ""
                                                            attribute_data.append(
                                                                {
                                                                    "name": att["attrname"][language]
                                                                    if language in att["attrname"]
                                                                    else att["attrname"]["en"],
                                                                    "value": attr_value,
                                                                    "name": att["attrname"][language]
                                                                    if language in att["attrname"]
                                                                    else att["attrname"]["en"],
                                                                }
                                                            )
                                    else:
                                        pass
                                    if tax_details["storeCategoryId"] != DINE_STORE_CATEGORY_ID:
                                        if tax_details["units"][0]["availableQuantity"] > 0:
                                            out_of_stock = False
                                        else:
                                            out_of_stock = True
                                    else:
                                        out_of_stock = False


                                    json_data = {
                                        "resellerCommission": reseller_commission,
                                        "resellerCommissionType": reseller_commission_type,
                                        "parentProductId": str(
                                            tax_details["parentProductId"]
                                        ),
                                        "extraAttributeDetails": additional_info,
                                        "childProductId": best_supplier[
                                            "productId"
                                        ],
                                        "finalPriceList": final_price_list,
                                        "productName": tax_details[
                                            "pPName"
                                        ][language]
                                        if language
                                            in tax_details["pPName"]
                                        else tax_details["pPName"][
                                            "en"
                                        ],
                                        "unitId": tax_details["units"][
                                            0
                                        ]["unitId"],
                                        "avgRating": tax_details[
                                            "avgRating"
                                        ]
                                        if "avgRating" in tax_details
                                        else 0,
                                        "images": tax_details["images"],
                                        "needsIdProof": tax_details[
                                            "needsIdProof"
                                        ]
                                        if "needsIdProof" in tax_details
                                        else False,
                                        "addOnsCount": addons_count,
                                        "productType": tax_details[
                                            "productType"] if "productType" in tax_details else 1,
                                        "offer": best_offer,
                                        "brandName": brand_name,
                                        "containsMeat": tax_details['containsMeat'] if 'containsMeat' in tax_details else False,
                                        "brandTitle": brand_title,
                                        "manufactureName": manufacture_name,
                                        "variantCount": varinat_boolean,
                                        "variantData": attribute_data,
                                        "suppliers": best_supplier,
                                        "containsMeat": tax_details['containsMeat'] if 'containsMeat' in tax_details else False,
                                        "supplier": best_supplier,
                                        "isAddOns": addons_count,
                                        "currencySymbol": currency_symbol,
                                        "currency": currency,
                                        "availableQuantity": best_supplier[
                                            "retailerQty"
                                        ],
                                        "outOfStock": out_of_stock,
                                        "isFavourite": isFavourite,
                                        "LikesByUsers":likesByUsers,
                                        "LikesByInfluencers":likesByInfluencers,
                                        "allPrice":allPrice,
                                        "productStatus": product_status,
                                        "productTag": product_tag,
                                    }
                                    if isFavourite == True:
                                        product_data.append(json_data)
                            except Exception as ex:
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(
                                    type(ex).__name__, ex.args
                                )
                                print(
                                    "Error on line {}".format(
                                        sys.exc_info()[-1].tb_lineno
                                    ),
                                    type(ex).__name__,
                                    ex,
                                )
                                        
                    if len(product_data) > 0:
                        newlist = sorted(
                            product_data,
                            key=lambda k: k["availableQuantity"],
                            reverse=True,
                        )
                        res_data_dataframe = pd.DataFrame(newlist)
                        res_data_dataframe = (
                            res_data_dataframe.drop_duplicates(
                                "parentProductId", keep="first"
                            )
                        )
                        res_data_dataframe_newlist = (
                            res_data_dataframe.to_dict(orient="records")
                        )
                        try:
                            product_details.append(
                                    {
                                        "storeScore": 0,
                                        "storeData": store_details,
                                        "products": res_data_dataframe_newlist,
                                        "isDelivery": is_delivery,
                                        "storeIsOpen": store_is_open,
                                        "storeName": store_name,
                                        "distanceKm": round(distance_km, 2),
                                        "uniqStoreId": store_details["uniqStoreId"] if "uniqStoreId" in store_details else "",
                                        "seqId": 1,
                                    }
                                )
                        except:
                            product_details.append(
                                    {
                                        "storeScore": 0,
                                        "storeData": store_details,
                                        "products": res_data_dataframe_newlist,
                                        "isDelivery": is_delivery,
                                        "storeIsOpen": store_is_open,
                                        "storeName": store_name,
                                        "distanceKm": round(distance_km, 2),
                                        "uniqStoreId": "0",
                                        "seqId": 1,
                                    }
                                )

                            
                store_category_details = db.storeCategory.find_one({"_id": ObjectId(store_category_id)})
                if store_category_details is not None:
                    store_type = int(store_category_details['type'])
                else:
                    store_type = 0

                if len(store_details_list) > 0 and store_type != 8:
                    new_store_list = sorted(store_details_list, key=lambda k: k["distanceKm"], reverse=False)
                    dataframe = pd.DataFrame(new_store_list)
                    dataframe = dataframe.drop_duplicates(
                        subset="uniqStoreId", keep="first"
                    )
                    new_store_list = dataframe.to_dict(orient="records")
                elif len(store_details_list) > 0 and store_type == 8:
                    new_store_list = sorted(store_details_list, key=lambda k: k["storeScore"], reverse=False)
                    dataframe = pd.DataFrame(new_store_list)
                    dataframe = dataframe.drop_duplicates(subset="uniqStoreId", keep="first")
                    new_store_list = dataframe.to_dict(orient="records")
                else:
                    new_store_list = []

                if len(product_details) > 0 and store_type != 8:
                    new_product_list = sorted(product_details, key=lambda k: k["distanceKm"], reverse=False)
                    dataframe = pd.DataFrame(new_product_list)
                    dataframe = dataframe.drop_duplicates(
                        subset="uniqStoreId", keep="first"
                    )
                    new_product_list = dataframe.to_dict(orient="records")
                elif len(product_details) > 0 and store_type == 8:
                    new_product_list = sorted(product_details, key=lambda k: k["storeScore"], reverse=False)
                    dataframe = pd.DataFrame(new_product_list)
                    dataframe = dataframe.drop_duplicates(subset="uniqStoreId", keep="first")
                    new_product_list = dataframe.to_dict(orient="records")
                else:
                    new_product_list = []

                new_store_list = sorted(new_store_list, key=lambda k: k["storeIsOpen"], reverse=True)
                new_product_list = sorted(new_product_list, key=lambda k: k["storeIsOpen"], reverse=True)
                last_response = {
                    "data": {
                        "storeData": new_store_list,
                        "productsData": new_product_list,
                        "isSameStore": True,
                    }
                }
                return JsonResponse(last_response, safe=False, status=200)
        except Exception as ex: 
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


class SellerRatingRating(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Seller Rating Review"],
        operation_description="API for get the rating for the seller",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="sellerId",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id for the getting the data for store",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            ##### get parameters from header and query #####
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return ResponseHelper.get_status_401(response_data)

            user_id = json.loads(token)["userId"]
            # user_id = "5d92f959fc2045620ce36c92"
            seller_id = request.GET.get("sellerId", "")
            if seller_id == "":
                response = {"data": [], "penCount": 0}
                return ResponseHelper.get_status_404(response)
            else:
                response = OperationHelper.process_seller_rating_get_api(seller_id)
                return response

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return ResponseHelper.get_status_500(error_message)


class SellerRatingReview(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Seller Rating Review"],
        operation_description="API for get the review for the seller",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="sellerId",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category od for the getting the data for store",
            ),
            openapi.Parameter(
                name="from",
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="to",
                default="10",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            ##### Get parameters from header and token #####
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return ResponseHelper.get_status_401(response_data)

            # user_id = json.loads(token)['userId']
            # user_id = "5d92f959fc2045620ce36c92"
            seller_id = request.GET.get("sellerId", "")
            from_data = request.GET.get("from", "0")
            to_data = 5
            if seller_id == "":
                response = {"data": [], "penCount": 0}
                return ResponseHelper.get_status_404(response)
            else:
                response = OperationHelper.process_seller_reviews_get_api(
                    seller_id, from_data, to_data
                )
                return response

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


class StoreSearchProduct(APIView):
    """
    seach type
        0 for category
        1 for sub-category
        2 for sub-sub-category
    seach platform
        0 for website
        1 for ios
        2 for android
    click type
        1 for category
        2 for subcategory
        3 for subsubcategory"""

    @swagger_auto_schema(
        method="get",
        tags=["Store Search & Filter"],
        operation_description="API for getting the category, sub-category, sub-sub-category and search and filter",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            # openapi.Parameter(name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="ipAddress",
                default="124.40.244.94",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="ip address of the network",
            ),
            openapi.Parameter(
                name="platform",
                default="0",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="from which platform requested for data.values will be 0 for website, 1 for iOS and 2 for android",
            ),
            openapi.Parameter(
                name="city",
                default="5df7b7218798dc2c1114e6bf",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="city id of the user where browser or app opened if not there value should be empty string",
            ),
            openapi.Parameter(
                name="country",
                default="5df7b7218798dc2c1114e6c0",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="country id of the user where browser or app opened if not there value should be empty string",
            ),
            openapi.Parameter(
                name="latitude",
                default="12.9716",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="latitude of the user where website or application opened",
            ),
            openapi.Parameter(
                name="longitude",
                default="77.5946",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="longitude of the user where website or application opened",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default="5e6115b3a13e000016003b67",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="q",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the search the item in search bar ex. ni, nik, addi",
            ),
            openapi.Parameter(
                name="page",
                default="1",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="page number. which page number data want to display",
            ),
            openapi.Parameter(
                name="s_id",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="while need to display particular stores product. ex.5df89d3edd77d6ca2752bd10",
            ),
        ],
        responses={
            200: "successfully. data found",
            404: "data not found. it might be product not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request, *args, **kwargs):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            # user_id = json.loads(token)['userId']
            user_id = "5d92f959fc2045620ce36c92"
            start_time = time.time()
            finalfilter_responseJson_products = []
            filter_responseJson = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            # store_category_id = GROCERY_STORE_CATEGORY_ID

            # ========================================query parameter====================================================
            # for the search the item in search bar
            search_query = request.GET.get("q", "")
            page = int(request.GET.get("page", 1))  # for the pagination

            # get particular offer data
            store_id = request.GET.get("s_id", "0")
            to_data = 30  # page*30
            from_data = int(page * 30) - 30

            search_item_query = {
                "query": {
                    "bool": {
                        "must": [
                            {"terms": {"status": [0, 1]}},
                            {"match": {"units.suppliers.id": str(store_id)}},
                            {"match": {"storeCategoryId": str(store_category_id)}},
                        ]
                    }
                },
                "aggs": {
                    "top_cat_name": {
                        "terms": {"field": "catName.en.keyword"},
                        "aggs": {
                            "top_sub_cat_name": {
                                "terms": {"field": "subCatName.en.keyword", "size": 10},
                                "aggs": {
                                    "top_sales_hits": {
                                        "top_hits": {
                                            "_source": {
                                                "includes": [
                                                    "_id",
                                                    "firstCategoryId",
                                                    "catName",
                                                    "secondCategoryId",
                                                    "subCatName",
                                                    "thirdCategoryId",
                                                    "subSubCatName",
                                                    "offer",
                                                    "suppliers",
                                                    "tax",
                                                    "units",
                                                    "storeCategoryId",
                                                ]
                                            },
                                            "size": 20,
                                        }
                                    }
                                },
                            }
                        },
                    }
                },
            }
            res = es.search(
                index=index_central_product,
                # # doc_type=doc_central_product,
                body=search_item_query,
            )
            if res["hits"]["total"]["value"] > 0:
                cat_data = []
                for cat_product in res["aggregations"]["top_cat_name"]["buckets"]:
                    try:
                        cat_name = cat_product["key"]
                        sub_cat_product_data = []
                        for sub_product in cat_product["top_sub_cat_name"]["buckets"]:
                            try:
                                sub_cat_name = sub_product["key"]
                                product_data = []
                                if sub_product["top_sales_hits"]["hits"]["total"]["value"] > 0:
                                    for product in sub_product["top_sales_hits"]["hits"]["hits"]:
                                        try:
                                            tax_value = []
                                            tax_price = 0
                                            best_supplier = min(
                                                product["_source"]["units"][0]["suppliers"],
                                                key=lambda x: x["retailerPrice"],
                                            )
                                            if best_supplier["retailerQty"] == 0:
                                                best_supplier = max(
                                                    product["_source"]["units"][0]["suppliers"],
                                                    key=lambda x: x["retailerQty"],
                                                )
                                            else:
                                                best_supplier = best_supplier

                                            # ===========================tax for the product=========================================================
                                            tax_details = db.childProducts.find_one(
                                                {"_id": ObjectId(best_supplier["productId"])},
                                                {"tax": 1},
                                            )
                                            if tax_details != None:
                                                if type(tax_details["tax"]) == list:
                                                    for tax in tax_details['units'][0]["tax"]:
                                                        tax_value.append({"value": tax["taxValue"]})
                                                else:
                                                    if tax_details["tax"] != None:
                                                        if "taxValue" in tax_details["tax"]:
                                                            tax_value.append(
                                                                {
                                                                    "value": tax_details["tax"][
                                                                        "taxValue"
                                                                    ]
                                                                }
                                                            )
                                                        else:
                                                            tax_value.append(
                                                                {"value": tax_details["tax"]}
                                                            )
                                                    else:
                                                        pass
                                            else:
                                                pass

                                            # =================================price calculation===================================================================
                                            if "price" in product["_source"]["units"][0]:
                                                normal_price = float(
                                                    product["_source"]["units"][0]["price"]["en"]
                                                )
                                            else:
                                                normal_price = best_supplier["retailerPrice"]

                                            if "expressPrice" in product["_source"]["units"][0]:
                                                express_price = float(
                                                    product["_source"]["units"][0]["expressPrice"][
                                                        "en"
                                                    ]
                                                )
                                                isExpress = True
                                            else:
                                                express_price = best_supplier["retailerPrice"]
                                                isExpress = False

                                            if "bufferTime" in product["_source"]["units"][0]:
                                                normal_buffer_time = (
                                                        str(
                                                            product["_source"]["units"][0][
                                                                "bufferTime"
                                                            ]["en"]
                                                        )
                                                        + " hr"
                                                )
                                            else:
                                                normal_buffer_time = "24 hr"

                                            if (
                                                    "expressBufferTime"
                                                    in product["_source"]["units"][0]
                                            ):
                                                normal_express_time = (
                                                        str(
                                                            product["_source"]["units"][0][
                                                                "expressBufferTime"
                                                            ]["en"]
                                                        )
                                                        + " hr"
                                                )
                                            else:
                                                normal_express_time = "24 hr"

                                            if store_category_id != DINE_STORE_CATEGORY_ID:
                                                if len(tax_value) == 0:
                                                    tax_price = 0
                                                else:
                                                    for amount in tax_value:
                                                        tax_price = tax_price + (
                                                            int(amount["value"])
                                                        )
                                            else:
                                                tax_price = 0
                                            base_normal_price = normal_price + (
                                                    (normal_price * tax_price) / 100
                                            )
                                            base_express_price = express_price + (
                                                    (express_price * tax_price) / 100
                                            )

                                            final_price_list = {
                                                "basePrice": round(normal_price, 2),
                                                "finalPrice": round(base_normal_price, 2),
                                                "finalExpressPrice": round(base_express_price, 2),
                                            }
                                            product_data.append(
                                                {
                                                    "parentProductId": str(product["_id"]),
                                                    "childProductId": best_supplier["productId"],
                                                    "finalPriceList": final_price_list,
                                                    "productName": product["_source"]["units"][0][
                                                        "unitName"
                                                    ][language],
                                                    "unitId": product["_source"]["units"][0][
                                                        "unitId"
                                                    ],
                                                    "availableQuantity": best_supplier[
                                                        "retailerQty"
                                                    ],
                                                    "normalBufferTime": normal_buffer_time,
                                                    "normalExpressTime": normal_express_time,
                                                    "isExpress": isExpress,
                                                }
                                            )
                                        except:
                                            pass
                                else:
                                    pass
                            except:
                                pass
                            sub_cat_product_data.append(
                                {"subCatName": sub_cat_name, "products": product_data}
                            )
                        if len(sub_cat_product_data) > 0:
                            cat_data.append(
                                {"catName": cat_name, "catProducts": sub_cat_product_data}
                            )
                    except:
                        pass

                response = {"data": cat_data, "message": "data found"}
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"data": [], "message": "data not found"}
                return JsonResponse(response, safe=False, status=404)

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


class StoreFilter(APIView):
    """
    seach type
        0 for category
        1 for sub-category
        2 for sub-sub-category
    seach platform
        0 for website
        1 for ios
        2 for android
    click type
        1 for category
        2 for subcategory
        3 for subsubcategory"""

    @swagger_auto_schema(
        method="get",
        tags=["Store Search & Filter"],
        operation_description="API for getting filters for the stores",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default="5e6115b3a13e000016003b67",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
        ],
        responses={
            200: "successfully. data found",
            404: "data not found. it might be product not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request, *args, **kwargs):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)

            start_time = time.time()
            finalfilter_responseJson_products = []
            filter_responseJson = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            # store_category_id = "5e6115b3a13e000016003b67"
            seller_attribute = db.sellerAttributes.find(
                {"sellerCategoryId": ObjectId(store_category_id), "filterable": True}
            )
            if seller_attribute.count() > 0:
                seller_data = []
                for seller in seller_attribute:
                    value_attr = []
                    for value in seller["values"]:
                        value_attr.append(value["text"][language])
                    seller_data.append(
                        {
                            "name": seller["attributeTitle"][language],
                            "values": value_attr,
                            "icons": seller["icons"],
                        }
                    )
                response = {"data": seller_data, "message": "data found"}
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"data": seller_data, "message": "data found"}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    api for get the food products based on store
"""


class FoodProductList(APIView):
    """
    parameter
    s_id - store id from which store we need to get the data
    latitude - user's latitude
    longitude - user's longitude
    """

    @swagger_auto_schema(
        method="post",
        tags=["Food Store Products List"],
        operation_description="API for getting the products for the food store",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            # openapi.Parameter(
            #     name='currencySymbol', default="INR", required=True, in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, description="currencySymbol for the currency..INR, INR"),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["s_id"],
            properties={
                "s_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id from which store we need to get the data",
                    example="5e9d219b696c826a3792d0e9",
                ),
                "search": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="searched text for the search the product in particular store",
                    example="Burg",
                ),
                "lat": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="latitude of the user's location",
                    example="12.957888",
                ),
                "long": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="longitude of the user's location",
                    example="77.599349",
                ),
                "containsMeat": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while applying filter for the containsMeat (veg or non veg). value should be boolean, if apply that time value should be True",
                    example=True,
                ),
                "o_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="offer id while clicking on offer banner on store listing page",
                    example="5ef73d368dfa2fac7bd7194c",
                ),
            },
        ),
        responses={
            200: "data found",
            404: "data not found.",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request, *args, **kwargs):
        try:
            start_time = time.time()
            category_details = []
            isFavourite = False
            recommanded_details = []
            token = request.META["HTTP_AUTHORIZATION"]
            user_id = json.loads(token)["userId"]
            # user_id = "5ee31cdf0fa15b0c05a8cdde"
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            if token == "":
                response_data = {"message": "unauthorized", "data": {}, "penCount": 0}
                return JsonResponse(response_data, safe=False, status=401)
            else:
                try:
                    request_data = request.data
                except:
                    request_data = json.dumps(request.data)

                search_text = request_data["search"] if "search" in request_data else ""
                contains_meat = (
                    request_data["containsMeat"] if "containsMeat" in request_data else False
                )

                must_query = []
                store_id = request_data["s_id"] if "s_id" in request_data else ""
                if "o_id" in request_data:
                    store_id = request_data["o_id"]  # offer_data['storeId'][0]

                lat = request_data["lat"] if "lat" in request_data else 0
                long = request_data["long"] if "long" in request_data else 0

                if search_text != "":
                    search_type = 4
                    try:
                        session_id = json.loads(token)["sessionId"]
                    except:
                        session_id = ""
                    thread_logs = threading.Thread(
                        target=category_search_logs,
                        args=(
                            "",
                            "",
                            "",
                            str(search_type),
                            user_id,
                            1,
                            "127.0.0.1",
                            lat,
                            long,
                            "",
                            "",
                            search_text,
                            DINE_STORE_CATEGORY_ID,
                            "",
                            session_id,
                            store_id,
                            False,
                            "",
                            "",
                        ),
                    )
                    thread_logs.start()

                # if store_id
                store_details = db.stores.find_one(
                    {"_id": ObjectId(store_id)},
                    {
                        "listingImage": 1,
                        "logoImages": 1,
                        "specialities": 1,
                        "bannerImages": 1,
                        "storeName": 1,
                        "avgRating": 1,
                        "businessLocationAddress": 1,
                        "storeIsOpen": 1,
                        "storeType": 1,
                        "averageCostForMealForTwo": 1,
                        "freeDeliveryAbove": 1,
                        "currencyCode": 1,
                        "minimumOrder": 1,
                        "storeFrontTypeId": 1,
                        "parentSellerIdOrSupplierId": 1,
                        "favouriteUsers": 1,
                        "safetyStandards": 1,
                        "cityId": 1,
                        "citiesOfOperation": 1,
                        "safetyStandardsDynamicContent": 1,
                        "safetyStandardsSortDiscription": 1,
                    },
                )

                offer_details = db.offers.find({"storeId": {"$in": [str(store_id)]}, "status": 1})
                offer_json = []
                cusine_name = ""
                for offer in offer_details:
                    if offer["startDateTime"] <= int(time.time()):
                        offer_json.append(
                            {
                                "offerName": offer["name"][language],
                                "offerId": str(offer["_id"]),
                                "discountValue": offer["discountValue"],
                                "offerType": offer["offerType"],
                            }
                        )
                if len(offer_json) > 0:
                    best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                    if best_offer_store["offerType"] == 0:
                        percentage_text = str(best_offer_store["discountValue"]) + "%" + " " + "off"
                    else:
                        percentage_text = "₹" + str(best_offer_store["discountValue"]) + " off"
                    offer_name = best_offer_store["offerName"]
                else:
                    offer_name = ""
                    percentage_text = ""

                if store_details != None:
                    if "averageCostForMealForTwo" in store_details:
                        cost_for_two = store_details["averageCostForMealForTwo"]
                    else:
                        cost_for_two = 0

                    if "favouriteUsers" in store_details:
                        if user_id in store_details["favouriteUsers"]:
                            favourite_store = True
                        else:
                            favourite_store = False
                    else:
                        favourite_store = False

                    if "safetyStandards" in store_details:
                        if int(store_details["safetyStandards"]) == 0:
                            safety_standard = False
                            safety_standards_sort_discription = ""
                            safety_standards_dynamic_content = ""
                        else:
                            safety_standard = True
                            safety_standards_sort_discription = store_details[
                                "safetyStandardsSortDiscription"
                            ]
                            safety_standards_dynamic_content = store_details[
                                "safetyStandardsDynamicContent"
                            ]
                    else:
                        safety_standard = False
                        safety_standards_sort_discription = ""
                        safety_standards_dynamic_content = ""
                    store_lat = (
                        float(store_details["businessLocationAddress"]["lat"])
                        if "lat" in store_details["businessLocationAddress"]
                        else 0
                    )
                    store_long = (
                        float(store_details["businessLocationAddress"]["long"])
                        if "long" in store_details["businessLocationAddress"]
                        else 0
                    )
                    address = (
                        store_details["businessLocationAddress"]["address"]
                        if "address" in store_details["businessLocationAddress"]
                        else ""
                    )
                    locality = (
                        store_details["businessLocationAddress"]["locality"]
                        if "locality" in store_details["businessLocationAddress"]
                        else ""
                    )
                    post_code = (
                        store_details["businessLocationAddress"]["postCode"]
                        if "postCode" in store_details["businessLocationAddress"]
                        else ""
                    )
                    state = (
                        store_details["businessLocationAddress"]["state"]
                        if "state" in store_details["businessLocationAddress"]
                        else ""
                    )
                    country = (
                        store_details["businessLocationAddress"]["country"]
                        if "country" in store_details["businessLocationAddress"]
                        else ""
                    )
                    addressArea = (
                        store_details["businessLocationAddress"]["addressArea"]
                        if "addressArea" in store_details["businessLocationAddress"]
                        else ""
                    )
                    city = (
                        store_details["businessLocationAddress"]["city"]
                        if "city" in store_details["businessLocationAddress"]
                        else ""
                    )
                    # ===================================for the cusines=============================================
                    if "specialities" in store_details:
                        if len(store_details["specialities"]):
                            for spec in store_details["specialities"]:
                                spec_data = db.specialities.find_one(
                                    {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                )
                                if spec_data != None:
                                    if cusine_name == "":
                                        cusine_name = (
                                            spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                    else:
                                        cusine_name = (
                                            cusine_name
                                            + ", "
                                            + spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                else:
                                    pass
                        else:
                            pass
                    else:
                        pass

                    store_name = store_details["storeName"][language]

                    # ================================for more stores==================================
                    if (
                            int(store_details["storeFrontTypeId"]) == 6
                            or int(store_details["storeFrontTypeId"]) == 2
                    ):
                        more_must_query = []
                        more_should_query = []
                        more_must_query.append(
                            {
                                "match_phrase_prefix": {
                                    "storeName.en": store_details["storeName"]["en"]
                                }
                            }
                        )
                        more_must_query.append({"match": {"status": 1}})
                        more_must_query.append({"terms": {"storeFrontTypeId": [2, 6]}})
                        more_must_query.append({"match": {"categoryId": DINE_STORE_CATEGORY_ID}})
                        geo_distance_sort = {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {"lat": float(lat), "lon": float(long)},
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                        sort_query = [geo_distance_sort]
                        more_must_query.append(
                            {
                                "geo_distance": {
                                    "distance": "50km",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                }
                            }
                        )
                        store_more_geo_query = {
                            "query": {
                                "bool": {
                                    "must": more_must_query,
                                    "must_not": [{"match": {"_id": str(store_details["_id"])}}],
                                }
                            },
                            "size": 100,
                            "from": 0,
                            "sort": sort_query,
                        }
                        res_more = es.search(
                            index=index_store,
                            body=store_more_geo_query,
                            filter_path=["hits.total", "hits.hits._id", "hits.hits._source"],
                        )
                        more_seller_count = res_more["hits"]["total"]["value"]
                    else:
                        more_seller_count = 0
                    # ============================query for get the distance by geo query==============
                    store_must_query = []

                    store_must_query.append({"match": {"_id": str(store_details["_id"])}})
                    geo_distance_sort = {
                        "_geo_distance": {
                            "distance_type": "plane",
                            "location": {"lat": float(lat), "lon": float(long)},
                            "order": "asc",
                            "unit": "km",
                        }
                    }
                    sort_query = [geo_distance_sort]
                    store_must_query.append(
                        {
                            "geo_distance": {
                                "distance": "50km",
                                "location": {"lat": float(lat), "lon": float(long)},
                            }
                        }
                    )
                    store_geo_query = {
                        "query": {
                            "bool": {
                                "must": store_must_query,
                            }
                        },
                        "size": 1,
                        "from": 0,
                        "sort": sort_query,
                    }
                    res = es.search(
                        index=index_store,
                        body=store_geo_query,
                        filter_path=[
                            "hits.total",
                            "hits.hits._id",
                            "hits.hits.sort",
                            "hits.hits._source",
                        ],
                    )
                    if res["hits"]["total"]["value"] > 0:
                        if "hits" in res["hits"]:
                            for seller in res["hits"]["hits"]:
                                distance_km = round(seller["sort"][0], 2)
                                distance_miles = round(distance_km * conv_fac, 2)
                        else:
                            distance_km = 0
                            distance_miles = 0
                    else:
                        distance_km = 0
                        distance_miles = 0

                    store_id = store_id
                    store_details = {
                        "lat": store_lat,
                        "long": store_long,
                        "isFavourite": favourite_store,
                        "address": address,
                        "locality": locality,
                        "addressArea": addressArea,
                        "offerName": offer_name,
                        "safetyStandards": safety_standard,
                        "safetyStandardsSortDiscription": safety_standards_sort_discription,
                        "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                        "cuisines": cusine_name,
                        "averageCostForMealForTwo": cost_for_two,
                        "logoImages": store_details["logoImages"],
                        "bannerImages": store_details["bannerImages"],
                        "listingImage": store_details["listingImage"]
                        if "listingImage" in store_details
                        else {},
                        "cityId": store_details["cityId"],
                        "minimumOrder": store_details["minimumOrder"],
                        "citiesOfOperation": store_details["citiesOfOperation"],
                        "freeDeliveryAbove": store_details["freeDeliveryAbove"]
                        if "freeDeliveryAbove" in store_details
                        else 0,
                        "nextCloseTime": store_details["nextCloseTime"]
                        if "nextCloseTime" in store_details
                        else "",
                        "nextOpenTime": store_details["nextOpenTime"]
                        if "nextOpenTime" in store_details
                        else "",
                        "avgRating": round(store_details["avgRating"], 2)
                        if "avgRating" in store_details
                        else 0,
                        "storeIsOpen": store_details["storeIsOpen"]
                        if "storeIsOpen" in store_details
                        else False,
                        "driverTypeId": store_details["driverTypeId"]
                        if "driverTypeId" in store_details
                        else 0,
                        "driverType": store_details["driverType"]
                        if "driverType" in store_details
                        else "",
                        "storeType": store_details["storeType"]
                        if "storeType" in store_details
                        else "Food",
                        "postCode": post_code,
                        "averageDeliveryTime": str(store_details["averageDeliveryTimeInMins"])
                                               + " "
                                               + "Mins"
                        if "averageDeliveryTimeInMins" in store_details
                        else "",
                        "percentageText": percentage_text,
                        "state": state,
                        "moreSellerCount": more_seller_count,
                        "country": country,
                        "city": city,
                        "distanceKm": round(distance_km, 2),
                        "distanceMiles": distance_miles,
                        "currencySymbol": store_details["currencyCode"]
                        if "currencyCode" in store_details
                        else "₹",
                        "currency": store_details["currencyCode"]
                        if "currencyCode" in store_details
                        else "INR",
                        "distanceMiles": distance_miles,
                        "storeName": store_name,
                        "storeId": store_id,
                    }

                    # =========================================================query for the get the products=======================================
                    should_query = []
                    must_query.append({"match": {"status": 1}})
                    must_query.append({"match": {"storeId": str(store_id)}})
                    must_query.append({"match": {"units.isPrimary": True}})
                    if search_text != "":
                        must_query.append(
                            {"match_phrase_prefix": {"pPName." + language: search_text}}
                        )

                    if contains_meat != False:
                        must_query.append({"match": {"containsMeat": False}})

                    # ==============================category+subcategory wise grouping=================
                    favourite_data = []
                    recomended_data = []
                    category_details = []
                    count = 2
                    if len(should_query) > 0:
                        all_query = {"bool": {"must": must_query, "should": should_query}}
                    else:
                        all_query = {
                            "bool": {
                                "must": must_query,
                            }
                        }
                    query = {
                        "query": all_query,
                        "aggs": {
                            "group_by_catName": {
                                "terms": {
                                    "field": "categoryList.parentCategory.categoryName.en.keyword",
                                    "size": int(10),
                                },
                                "aggs": {
                                    "top_sales_hits": {
                                        "top_hits": {
                                            "_source": {
                                                "includes": [
                                                    "_id",
                                                    "parentProductId",
                                                    "firstCategoryId",
                                                    "catName",
                                                    "secondCategoryId",
                                                    "subCatName",
                                                    "childproductid",
                                                    "storeId",
                                                    "thirdCategoryId",
                                                    "detailDescription",
                                                    "subSubCatName",
                                                    "offer",
                                                    "images",
                                                    "suppliers",
                                                    "containsMeat",
                                                    "consumptionTime",
                                                    "currencySymbol",
                                                    "currency",
                                                    "tax",
                                                    "units",
                                                    "pName",
                                                    "pPName",
                                                    "storeCategoryId",
                                                ]
                                            },
                                            "size": 20,
                                        }
                                    }
                                },
                            }
                        },
                    }
                    res = es.search(index=index_products, body=query)
                    # if len(res['aggregations']['group_by_catName']['buckets']) > 0:
                    for bucket in res["aggregations"]["group_by_catName"]["buckets"]:
                        count = count + 1
                        product_data = []
                        category_name = bucket["key"]
                        if any(category_name in d["catName"] for d in category_details):
                            pass
                        else:
                            for hits in bucket["top_sales_hits"]["hits"]["hits"]:
                                tax_value = []
                                # =========================for addons=======================================
                                if "addOns" in hits["_source"]["units"][0]:
                                    if hits["_source"]["units"][0]["addOns"] != None:
                                        if len(hits["_source"]["units"][0]["addOns"]) > 0:
                                            addons_count = True
                                        else:
                                            addons_count = False
                                    else:
                                        addons_count = False
                                else:
                                    addons_count = False

                                best_supplier = {}
                                best_supplier["id"] = hits["_source"]["storeId"]
                                best_supplier["productId"] = hits["_id"]
                                try:
                                    best_supplier["retailerQty"] = (
                                        hits["_source"]["units"][0]["availableQuantity"]
                                        if hits["_source"]["units"][0]["availableQuantity"] != ""
                                        else 0
                                    )
                                except:
                                    best_supplier["retailerQty"] = 0

                                try:
                                    best_supplier["distributorQty"] = (
                                        hits["_source"]["units"][0]["distributor"][
                                            "availableQuantity"
                                        ]
                                        if hits["_source"]["units"][0]["distributor"][
                                               "availableQuantity"
                                           ]
                                           != ""
                                        else 0
                                    )
                                except:
                                    best_supplier["distributorQty"] = 0

                                try:
                                    best_supplier["retailerPrice"] = (
                                        hits["_source"]["units"][0]["b2cPricing"][0][
                                            "b2cproductSellingPrice"
                                        ]
                                        if "b2cproductSellingPrice"
                                           in hits["_source"]["units"][0]["b2cPricing"][0]
                                        else hits["_source"]["units"][0]["floatValue"]
                                    )
                                except:
                                    best_supplier["retailerPrice"] = hits["_source"]["units"][0][
                                        "floatValue"
                                    ]

                                try:
                                    best_supplier["distributorPrice"] = (
                                        hits["_source"]["units"][0]["b2bPricing"][0][
                                            "b2bproductSellingPrice"
                                        ]
                                        if "b2bproductSellingPrice"
                                           in hits["_source"]["units"][0]["b2bPricing"][0]
                                        else hits["_source"]["units"][0]["floatValue"]
                                    )
                                except:
                                    best_supplier["distributorPrice"] = hits["_source"]["units"][0][
                                        "floatValue"
                                    ]

                                if len(best_supplier) > 0:
                                    child_product_details = db.childProducts.find_one(
                                        {"_id": ObjectId(best_supplier["productId"]), "status": 1}
                                    )
                                    if child_product_details != None:
                                        detail_description = (
                                            child_product_details["detailDescription"][language]
                                            if language
                                               in child_product_details["detailDescription"]
                                            else child_product_details["detailDescription"]["en"]
                                        )
                                        if detail_description == None:
                                            detail_description = ""

                                        # =================================price calculation===================================================================
                                        price = best_supplier["retailerPrice"]
                                        if type(price) == str:
                                            price = float(price)

                                        tax_price = 0
                                        offer_data = []

                                        if "offer" in child_product_details:
                                            for offer in child_product_details["offer"]:
                                                if offer["status"] == 1:
                                                    offer_terms = db.offers.find_one(
                                                        {"_id": ObjectId(offer["offerId"])}
                                                    )
                                                    if offer_terms != None:
                                                        offer["termscond"] = offer_terms[
                                                            "termscond"
                                                        ]
                                                    else:
                                                        offer["termscond"] = ""
                                                    if offer_terms["startDateTime"] <= int(
                                                            time.time()
                                                    ):
                                                        offer_data.append(offer)
                                                else:
                                                    pass

                                        if len(offer_data) > 0:
                                            best_offer = max(
                                                offer_data, key=lambda x: x["discountValue"]
                                            )
                                        else:
                                            best_offer = {}

                                        if len(best_offer) == 0:
                                            percentage = 0
                                            discount_type = 0
                                            discount_value = 0
                                        else:
                                            if "discountType" in best_offer:
                                                if best_offer["discountType"] == 0:
                                                    percentage = 0
                                                    discount_value = int(
                                                        best_offer["discountValue"]
                                                    )
                                                    discount_type = 0
                                                else:
                                                    percentage = int(best_offer["discountValue"])
                                                    discount_value = int(
                                                        best_offer["discountValue"]
                                                    )
                                                    discount_type = best_offer["discountType"]
                                            else:
                                                percentage = 0
                                                discount_value = 0
                                                discount_type = 0

                                        base_price = price + ((price * tax_price) / 100)
                                        if discount_type == 0:
                                            discount_price = float(discount_value)
                                        elif discount_type == 1:
                                            discount_price = (
                                                                     float(price) * float(discount_value)
                                                             ) / 100
                                        else:
                                            discount_price = 0

                                        base_price = base_price - discount_price
                                        final_price_list = {
                                            "basePrice": round(price, 2),
                                            "finalPrice": round(base_price, 2),
                                            "discountPrice": round(discount_price, 2),
                                            "percentage": percentage,
                                        }
                                        # ========================================favourite products=========================
                                        response_casandra = session.execute(
                                            """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                            {
                                                "userid": user_id,
                                                "productid": str(best_supplier["productId"]),
                                            },
                                        )

                                        if not response_casandra:
                                            isFavourite = False
                                        else:
                                            for fav in response_casandra:
                                                isFavourite = True
                                        # =================================recomanded products===========================
                                        current_time = datetime.datetime.now(
                                            pytz.timezone("Asia/Calcutta")
                                        )
                                        current_hour = current_time.hour
                                        if int(current_hour) >= 0 and int(current_hour) < 5:
                                            current_text = "latenightdinner"
                                        elif int(current_hour) >= 5 and int(current_hour) < 10:
                                            current_text = "breakfast"
                                        elif int(current_hour) >= 10 and int(current_hour) < 11:
                                            current_text = "brunch"
                                        elif int(current_hour) >= 11 and int(current_hour) < 15:
                                            current_text = "lunch"
                                        elif int(current_hour) >= 15 and int(current_hour) < 19:
                                            current_text = "tea"
                                        else:
                                            current_text = "dinner"
                                        try:
                                            product_name = hits["_source"]["pName"][language]
                                        except:
                                            try:
                                                product_name = hits["_source"]["pPName"][language]
                                            except:
                                                product_name = hits["_source"]["units"][0][
                                                    "unitName"
                                                ][language]

                                        currency_symbol = child_product_details["currencySymbol"]
                                        currency = child_product_details["currency"]
                                        json_data = {
                                            "parentProductId": str(
                                                hits["_source"]["parentProductId"]
                                            ),
                                            "childProductId": best_supplier["productId"],
                                            "unitId": hits["_source"]["units"][0]["unitId"],
                                            "finalPriceList": final_price_list,
                                            "catName": category_name,
                                            "detailDescription": detail_description,
                                            "containsMeat": hits["_source"]["containsMeat"]
                                            if "containsMeat" in hits["_source"]
                                            else False,
                                            "addOnsCount": addons_count,
                                            "isFavourite": isFavourite,
                                            "productName": product_name.strip(),
                                            "images": hits["_source"]["images"],
                                            "currencySymbol": currency_symbol,
                                            "currency": currency,
                                            "availableQuantity": best_supplier["retailerQty"],
                                        }
                                        if "consumptionTime" in hits["_source"]:
                                            if current_text in hits["_source"]["consumptionTime"]:
                                                recomended_data.append(json_data)
                                            if isFavourite == True:
                                                favourite_data.append(json_data)
                                            else:
                                                product_data.append(json_data)
                                        if isFavourite == True:
                                            favourite_data.append(json_data)
                                        else:
                                            product_data.append(json_data)
                            if len(product_data) > 0:
                                dataframe = pd.DataFrame(product_data)
                                dataframe = dataframe.drop_duplicates(
                                    subset="productName", keep="last"
                                )
                                new_product_list = dataframe.to_dict(orient="records")

                                recommanded_details.append(
                                    {
                                        "catName": category_name,
                                        "penCount": len(new_product_list),
                                        "seqId": count,
                                    }
                                )
                                category_details.append(
                                    {
                                        "catName": category_name,
                                        "products": new_product_list,
                                        "seqId": count,
                                    }
                                )

                    if len(favourite_data) > 0:
                        dataframe_fav = pd.DataFrame(favourite_data)
                        dataframe_fav = dataframe_fav.drop_duplicates(
                            subset="childProductId", keep="last"
                        )
                        new_fav_list = dataframe_fav.to_dict(orient="records")
                    else:
                        new_fav_list = []

                    if len(new_fav_list) > 0:
                        category_details.append(
                            {
                                "catName": "Added to product as favorite",
                                "products": new_fav_list,
                                "seqId": 2,
                            }
                        )

                    if len(recomended_data) > 0:
                        dataframe = pd.DataFrame(recomended_data)
                        dataframe = dataframe.drop_duplicates(subset="productName", keep="last")
                        new_product_list = dataframe.to_dict(orient="records")
                    else:
                        new_product_list = []

                    category_details.append(
                        {"catName": "Recommended", "products": new_product_list, "seqId": 1}
                    )
                    recommanded_details.append(
                        {"catName": "Recommended", "penCount": len(new_product_list), "seqId": 1}
                    )
                    newlist = sorted(category_details, key=lambda k: k["seqId"], reverse=False)
                    newlist_recomnded = sorted(
                        recommanded_details, key=lambda k: k["seqId"], reverse=False
                    )

                    last_response = {
                        "data": {
                            "storeData": store_details,
                            "productsData": newlist,  # category_details,
                            "recommFilter": newlist_recomnded,
                        }
                    }
                    return JsonResponse(last_response, safe=False, status=200)
                else:
                    response = {"data": {}, "message": "data not found", "penCount": 0}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    api for get the food products based on store
"""


class FoodProducts(APIView):
    """
    parameter
    s_id - store id from which store we need to get the data
    latitude - user's latitude
    longitude - user's longitude
    """

    @swagger_auto_schema(
        method="post",
        tags=["Food Store Products List"],
        operation_description="API for getting the products for the food store",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["s_id"],
            properties={
                "s_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id from which store we need to get the data",
                    example="5e9d219b696c826a3792d0e9",
                ),
                "z_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="zone id from which zone this store is",
                    example="5df8b6ea8798dc19d926bd28",
                ),
                "search": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="searched text for the search the product in particular store",
                    example="Burg",
                ),
                "lat": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="latitude of the user's location",
                    example="12.957888",
                ),
                "long": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="longitude of the user's location",
                    example="77.599349",
                ),
                "containsMeat": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while applying filter for the containsMeat (veg or non veg). value should be boolean, if apply that time value should be True",
                    example=True,
                ),
                "mealAvailable": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while applying filter for the product available. value should be boolean, if apply that time value should be True",
                    example=True,
                ),
                "o_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="offer id while clicking on offer banner on store listing page",
                    example="5ef73d368dfa2fac7bd7194c",
                ),
                "timezone": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="offset of the user timezone",
                    example="Asia/Calcutta",
                ),
            },
        ),
        responses={
            200: "data found",
            404: "data not found.",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request, *args, **kwargs):
        try:
            start_time = time.time()
            category_details = []
            isFavourite = False
            recommanded_details = []
            token = request.META["HTTP_AUTHORIZATION"]
            currency_code = ""  # request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            user_id = json.loads(token)["userId"]
            # user_id = "5ef2293a9bc66c3806820117"
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            limit = int(request.META["HTTP_SKIP"]) if "HTTP_SKIP" in request.META else 1
            size = int(request.META["HTTP_SIZE"]) if "HTTP_SIZE" in request.META else 100
            print(limit,"limit")
            size_product = 10  # Number of products per category
            translator = t(to_lang=language)
            if token == "":
                response_data = {"message": "unauthorized", "data": {}, "penCount": 0}
                return JsonResponse(response_data, safe=False, status=401)
            else:
                try:
                    request_data = request.data
                except:
                    request_data = json.dumps(request.data)
                print('data----',request_data)
                search_text = request_data["search"] if "search" in request_data else ""
                categoryId = request_data["categoryId"] if "categoryId" in request_data else ""
                page_number = int(request_data["page"]) if "page" in request_data else 1
                from_category = (page_number - 1) * 10  # Calculate the starting category index for pagination
                # started thread for inserting the data for search and category click data stored
                size_category = page_number * 10  # Number of categories per page
                limit = (limit - 1) * 10
                contains_meat = (
                    request_data["containsMeat"] if "containsMeat" in request_data else False
                )
                isSearch = (
                    request_data["isSearch"] if "isSearch" in request_data else False
                )
                meal_available = (
                    request_data["mealAvailable"] if "mealAvailable" in request_data else False
                )
                if contains_meat == True:
                    contains_meat = False
                else:
                    contains_meat = True

                must_query = []
                should_query = []
                store_id = request_data["s_id"] if "s_id" in request_data else ""
                if "o_id" in request_data:
                    store_id = request_data["o_id"]  # offer_data['storeId'][0]

                lat = request_data["lat"] if "lat" in request_data else 0
                # timezone = int(request_data['timezone']) if "timezone" in request_data else 330
                timezone_data = request_data["timezone"] if "timezone" in request_data else ""
                timezone_data_error = request_data[
                    "timezone"] if "timezone" in request_data else "Asia/Calcutta"  # request.GET.get("timezone", "Asia/Calcutta")
                try:
                    timezone_data = timezone_data.replace("%2F", "/")
                except:
                    timezone_data = timezone_data
                try:
                    timezone_data_error = timezone_data_error.replace("%2F", "/")
                except:
                    timezone_data_error = timezone_data_error

                long = request_data["long"] if "long" in request_data else 0
                try:
                    session_id = json.loads(token)["sessionId"]
                except:
                    session_id = ""
                if search_text != "":
                    thread_logs = threading.Thread(
                        target=category_search_logs,
                        args=(
                            "",
                            "",
                            "",
                            "4",
                            user_id,
                            1,
                            "",
                            lat,
                            long,
                            "",
                            "",
                            search_text,
                            DINE_STORE_CATEGORY_ID,
                            "",
                            session_id,
                            store_id,
                            False,
                            "",
                            "",
                        ),
                    )
                    thread_logs.start()
                else:
                    pass
                zone_id = (
                    request_data["z_id"] if "z_id" in request_data else "5df8b6ea8798dc19d926bd28"
                )
                if store_id == "":
                    response = {
                        "data": {},
                        "message": "store id is missing or blank",
                        "penCount": 0,
                    }
                    return JsonResponse(response, safe=False, status=422)
                else:
                    if categoryId =="" and search_text =="":
                        find_store_data = db.storeBestProducts.find_one({"storeId": str(store_id)},{"_id":0})
                        if find_store_data is not None:
                            # fatching fav products 
                            # fav_query = {
                            #         "userid": str(user_id),
                            #         "storeid": str(store_id)
                            #     }
                            # result = db.likesProducts.find(fav_query).sort("createdtimestamp", -1)
                            fav_data = {
                                "catName": "Favorites",
                                "isSubCategories": False,
                                "subCategories": [],
                                "penCount": 0,
                                "products" :[],
                                "seqId": 1
                            }
                            try:
                                response_casandra = session.execute(
                                    """SELECT parentproductid, childproductid FROM favouriteproductsuserwise WHERE userid=%(userid)s AND storeid = %(storeid)s ALLOW FILTERING""",
                                    {
                                        "userid": user_id,
                                        "storeid": str(store_id),
                                    },
                                )
                                fav_product_ids = [(str(row.parentproductid), str(row.childproductid)) for row in response_casandra]
                                for category in find_store_data.get("productsData", []):
                                    category_products = category.get("products", [])
                                    fav_category_products = [product for product in category_products if (product["parentProductId"], product["childProductId"]) in fav_product_ids]
                                    for product in fav_category_products:
                                        parent_product_id = product["parentProductId"]
                                        child_product_id = product["childProductId"]
                                        product_data = db.childProducts.find_one(
                                            {
                                                "storeId": ObjectId(str(store_id)),
                                                "parentProductId": str(parent_product_id),  # Access columns directly by name
                                                "_id": ObjectId(str(child_product_id)),     # Access columns directly by name
                                                "status": 1,
                                            }
                                        )                                
                                        if product_data != None:
                                            sorted_price_data = sorted(product_data["units"][0]["b2cPricing"], key=lambda x: x['b2cproductSellingPrice'])
                                            base_price_max = sorted_price_data[0]["b2cproductSellingPrice"]
                                            allPrice = product_data["units"][0]["b2cPricing"]

                                            try:
                                                best_supplier_price = (
                                                    base_price_max if "b2cproductSellingPrice"
                                                    in product_data["units"][0]["b2cPricing"][0]
                                                    else product_data["units"][0]["floatValue"]
                                                )
                                            except:
                                                best_supplier_price = product_data["units"][0]["floatValue"]

                                            price = best_supplier_price
                                            if type(price) == str:
                                                price = float(price)

                                            tax_price = 0
                                            offer_data = []
                                            if "offer" in product_data:
                                                for offer in product_data["offer"]:
                                                    if offer["status"] == 1:
                                                        offer_terms = db.offers.find_one(
                                                            {
                                                                "_id": ObjectId(
                                                                    offer["offerId"]
                                                                ),
                                                                "storeId": store_id,
                                                                "status": 1,
                                                            }
                                                        )
                                                        if offer_terms != None:
                                                            terms_condition = (
                                                                html2text.html2text(
                                                                    offer_terms["termscond"]
                                                                )
                                                            )
                                                            if offer_terms[
                                                                "startDateTime"
                                                            ] <= int(time.time()):
                                                                offer[
                                                                    "termscond"
                                                                ] = terms_condition
                                                                offer_data.append(offer)
                                                        else:
                                                            pass
                                                    else:
                                                        pass
                                            else:
                                                pass

                                            if len(offer_data) > 0:
                                                best_offer = max(
                                                    offer_data, key=lambda x: x["discountValue"]
                                                )
                                            else:
                                                best_offer = {}

                                            if len(best_offer) == 0:
                                                percentage = 0
                                                discount_type = 0
                                            else:
                                                if "discountType" in best_offer:
                                                    percentage = int(
                                                        best_offer["discountValue"]
                                                    )
                                                    discount_type = best_offer["discountType"]
                                                else:
                                                    percentage = 0
                                                    discount_type = 0

                                            # ==================================get currecny rate============================
                                            try:
                                                currency_rate = currency_exchange_rate[
                                                    str(product_data["currency"])
                                                    + "_"
                                                    + str(currency_code)
                                                    ]
                                            except:
                                                currency_rate = 0
                                            currency_details = db.currencies.find_one(
                                                {"currencyCode": currency_code}
                                            )
                                            if currency_details is not None:
                                                currency_symbol = currency_details[
                                                    "currencySymbol"
                                                ]
                                                currency = currency_details["currencyCode"]
                                            else:
                                                currency_symbol = product_data["currencySymbol"]
                                                currency = product_data["currency"]

                                            if float(currency_rate) > 0:
                                                price = price * float(currency_rate)

                                            tax_price_data = price + ((price * tax_price) / 100)
                                            if discount_type == 0:
                                                discount_price = float(percentage)
                                            elif discount_type == 1:
                                                discount_price = (
                                                                            float(tax_price_data) * float(percentage)
                                                                    ) / 100
                                            else:
                                                discount_price = 0
                                            base_price = tax_price_data - discount_price

                                            try:
                                                isMembersOnly = product_data.get("isMembersOnly", False)
                                                nonMemberPrice = product_data["units"][0][
                                                    "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                                        product_data["units"][0] else round(
                                                    discount_price, 2)
                                                memberPrice = product_data["units"][0]["memberPrice"] if "memberPrice" in \
                                                                                                    product_data["units"][
                                                                                                        0] else round(
                                                    discount_price, 2)
                                            except:
                                                isMembersOnly = False
                                                nonMemberPrice = round(discount_price, 2)
                                                memberPrice = round(discount_price, 2)

                                            final_price_list = {
                                                "basePrice": round(tax_price_data, 2),
                                                "finalPrice": round(base_price, 2),
                                                "discountPrice": round(discount_price, 2),
                                                "discountPercentage": percentage,
                                                "discountPriceForNonMembers": nonMemberPrice,
                                                "memberPrice": memberPrice
                                            }

                                            try:
                                                product_name = (
                                                    product_data["pName"]["en"]
                                                    if "en" in product_data["pName"]
                                                    else product_data["pName"]["en"]
                                                )
                                            except:
                                                product_name = (
                                                    product_data["units"][0]["unitName"]["en"
                                                    ]if "en" in product_data["units"][0]["unitName"] 
                                                    else product_data["units"][0]["unitName"]["en"])
                                            print(child_product_id)
                                            try:
                                                liked_users_cursor = db.likesProducts.find({"childproductid": str(child_product_id), "isInfluencer": False}, {"userid": 1})
                                                liked_users_count = liked_users_cursor.count()
                                            except:
                                                traceback.print_exc()
                                                liked_users_count = 0
                                            user_ids = [ObjectId(like["userid"]) for like in liked_users_cursor]
                                            # Step 2: Find the users with the highest follower count, limit to 3, and with non-empty profile pictures
                                            print("max follower users",user_ids)
                                            max_follower_users = db.customer.aggregate([
                                                {"$match": {"_id": {"$in": user_ids}}},
                                                {"$project": {
                                                    "_id": 1,
                                                    "profilePic": 1
                                                }},
                                                {"$match": {"profilePic": {"$exists": True, "$ne": ""}}},  # Match only non-empty profile pics
                                                {"$sort": {"count.followerCount": -1}},
                                                {"$limit": 3}
                                            ])

                                            profile_pics = []
                                            for user in max_follower_users:
                                                profile_pic_url = user.get("profilePic")
                                                if profile_pic_url:
                                                    profile_pics.append(profile_pic_url)
                                            if profile_pics ==[]:
                                                profile_pics =["","",""]
                                            likesByUsers=0
                                            likesByInfluencers=0
                                            try:
                                                likesByUsers=liked_users_count
                                                likesByInfluencers=db.likesProducts.find({"childproductid": str(child_product_id),"isInfluencer":True}).count()
                                            except:
                                                traceback.print_exc()
                                                likesByUsers=0
                                                likesByInfluencers=0

                                            json_data = {
                                                    "parentProductId": str(parent_product_id),
                                                    "childProductId": str(child_product_id),
                                                    "productStatus": False,
                                                    "productTag": "",
                                                    "LikesByUsers":likesByUsers,
                                                    "LikesByInfluencers":likesByInfluencers,
                                                    "allPrice":allPrice,
                                                    "offers": best_offer,
                                                    "unitId": product_data["units"][0]["unitId"],
                                                    "finalPriceList": final_price_list,
                                                    "catName": "",
                                                    "detailDescription":product_data["detailDescription"]["en"] if "en" in product_data["detailDescription"] else product_data["detailDescription"]["en"],
                                                    "containsMeat": product_data["containsMeat"] if "containsMeat" in product_data else False,
                                                    "addOnsCount": False,
                                                    "isFavourite": True,
                                                    "productName": product_name,
                                                    "images": product_data["images"],
                                                    "currencySymbol": currency_symbol,
                                                    "currency": currency,
                                                    "availableQuantity":1,
                                                    "isMembersOnly": isMembersOnly,
                                                    "likeUserProfile" :profile_pics
                                            }
                                            product.update({
                                                "LikesByUsers": likesByUsers,
                                                "LikesByInfluencers": likesByInfluencers,
                                                "likeUserProfile": profile_pics,
                                                "isFavourite": True
                                            })
                                            fav_data["products"].append(json_data)
                                            fav_data["penCount"] = fav_data["penCount"] + 1
                            except Exception as e:
                                print(e)
                                pass    
                            if fav_data["products"]:
                                find_store_data["productsData"].insert(0, fav_data)
                            products_data = find_store_data.get("productsData", [])
                            products_data = products_data[from_category:size_category]
                            find_store_data["productsData"] = products_data
                            find_store_data ={"data":find_store_data}
                            print(f' API exicute time : {time.time() - start_time}')
                            return JsonResponse(find_store_data, safe=False, status=200)
                    try:
                        current_time = datetime.datetime.now(pytz.timezone(timezone_data_error))
                    except:
                        current_time = datetime.datetime.now()
                    current_hour = current_time.hour

                    if int(current_hour) >= 0 and int(current_hour) < 5:
                        current_text = "latenightdinner"
                    elif int(current_hour) >= 5 and int(current_hour) < 10:
                        current_text = "breakfast"
                    elif int(current_hour) >= 10 and int(current_hour) < 11:
                        current_text = "brunch"
                    elif int(current_hour) >= 11 and int(current_hour) < 15:
                        current_text = "lunch"
                    elif int(current_hour) >= 15 and int(current_hour) < 19:
                        current_text = "tea"
                    else:
                        current_text = "dinner"
                    
                    if categoryId:
                        category_id = str(categoryId)
                        parent_cat_details = db.category.find_one(
                                {
                                    "_id": ObjectId(category_id),
                                    "status": 1
                                }
                            )
                        if parent_cat_details is None:
                            parent_cat_details = db.category.find_one(
                                {
                                    "_id": ObjectId(category_id)
                                }
                            )
                        category_descr = ""
                        category_image = ""
                        category_name = ""
                        if parent_cat_details is not None:
                            category_name = parent_cat_details['categoryName']['en']
                            try:
                                category_image = parent_cat_details["mobileImage"]
                                category_descr = parent_cat_details['categoryDesc']
                            except Exception as e:
                                print(e)
                                category_descr = ""
                                category_image = ""
                                category_name = ""
                                
                        product_data = []
                        productsData = []
                        must_query.append({"terms": {"status": [1, 2]}})
                        must_query.append({"match": {"storeId": str(store_id)}})
                        must_query.append({"match": {"units.isPrimary": True}})
                        if meal_available == True:
                            must_query.append(
                                {"match": {"mealConsumptionTime." + str(current_text): True}}
                            )
                        if contains_meat != True:
                            must_query.append({"match": {"containsMeat": contains_meat}})
                        bool_query = {"must": must_query}
                        if len(should_query) > 0:
                            bool_query["should"] = should_query
                            bool_query["minimum_should_match"] = 1
                            bool_query["boost"] = 1.0
                        else:
                            pass
                        print("limit",limit,size_product)
                        query = {
                            "query": {
                                "bool": {
                                    "must": must_query,
                                    "filter": [
                                        {"term": {"categoryList.parentCategory.categoryId": str(categoryId)}}
                                    ]
                                }
                            },
                            "aggs": {
                                "top_sales_hits": {
                                    "top_hits": {
                                        "_source": {
                                            "includes": [
                                                "_id",
                                                "parentProductId",
                                                "firstCategoryId",
                                                "catName",
                                                "secondCategoryId",
                                                "subCatName",
                                                "childproductid",
                                                "storeId",
                                                "thirdCategoryId",
                                                "detailDescription",
                                                "subSubCatName",
                                                "offer",
                                                "images",
                                                "suppliers",
                                                "containsMeat",
                                                "consumptionTime",
                                                "currencySymbol",
                                                "currency",
                                                "tax",
                                                "units",
                                                "pName",
                                                "storeCategoryId",
                                            ]
                                        },
                                        "from": limit,
                                        "size": size_product
                                    }
                                }
                            }
                        }

                        res = es.search(index=index_products, body=query)
                        for hits in res["aggregations"]["top_sales_hits"]["hits"]["hits"]:
                            tax_value = []
                            # =========================for addons=======================================
                            if "addOns" in hits["_source"]["units"][0]:
                                if hits["_source"]["units"][0]["addOns"] != None:
                                    if len(hits["_source"]["units"][0]["addOns"]) > 0:
                                        addons_count = True
                                    else:
                                        addons_count = False
                                else:
                                    addons_count = False
                            else:
                                addons_count = False
                            # category_name = ""
                            # if "catName" in hits["_source"]["catName"]:
                            #     category_name = hits["_source"]["catName"]
                            # else :
                            #     category_name = ""
                                

                            if addons_count == False:
                                product_count = db.childProducts.find(
                                    {
                                        "storeId": ObjectId(hits["_source"]["storeId"]),
                                        "parentProductId": hits["_source"][
                                            "parentProductId"
                                        ],
                                        "status": 1,
                                    }
                                ).count()
                                if product_count > 1:
                                    addons_count = True
                            best_supplier = {}
                            best_supplier["id"] = hits["_source"]["storeId"]
                            best_supplier["productId"] = hits["_id"]
                            try:
                                best_supplier["retailerQty"] = (
                                    hits["_source"]["units"][0]["availableQuantity"]
                                    if hits["_source"]["units"][0]["availableQuantity"]
                                        != ""
                                    else 0
                                )
                            except:
                                best_supplier["retailerQty"] = 0

                            try:
                                best_supplier["distributorQty"] = (
                                    hits["_source"]["units"][0]["distributor"][
                                        "availableQuantity"
                                    ]
                                    if hits["_source"]["units"][0]["distributor"][
                                            "availableQuantity"
                                        ]
                                        != ""
                                    else 0
                                )
                            except:
                                best_supplier["distributorQty"] = 0
                            sorted_price_data = sorted(hits["_source"]["units"][0]["b2cPricing"], key=lambda x: x['b2cproductSellingPrice'])
                            base_price_max = sorted_price_data[0]["b2cproductSellingPrice"]
                            allPrice = hits["_source"]["units"][0]["b2cPricing"]
                            try:
                                best_supplier["retailerPrice"] = (
                                    base_price_max if "b2cproductSellingPrice"
                                    in hits["_source"]["units"][0]["b2cPricing"][0]
                                    else hits["_source"]["units"][0]["floatValue"]
                                )
                            except:
                                best_supplier["retailerPrice"] = hits["_source"][
                                    "units"
                                ][0]["floatValue"]

                            try:
                                best_supplier["distributorPrice"] = (
                                    base_price if "b2bproductSellingPrice"
                                    in hits["_source"]["units"][0]["b2bPricing"][0]
                                    else hits["_source"]["units"][0]["floatValue"]
                                )
                            except:
                                best_supplier["distributorPrice"] = hits["_source"][
                                    "units"
                                ][0]["floatValue"]
                            if len(best_supplier) > 0:
                                detail_description = (
                                    hits["_source"]["detailDescription"][language]
                                    if language in hits["_source"]["detailDescription"]
                                    else hits["_source"]["detailDescription"]["en"]
                                )
                                if detail_description == None:
                                    detail_description = ""
                                # ===========================tax for the product=========================================================
                                tax_details = db.childProducts.find_one(
                                    {"_id": ObjectId(best_supplier["productId"])}
                                )
                                if tax_details != None:
                                    try:
                                        if type(tax_details['units'][0]["tax"]) == list:
                                            for tax in tax_details['units'][0]["tax"]:
                                                tax_value.append({"value": tax["taxValue"]})
                                        else:
                                            if tax_details["tax"] != None:
                                                if "taxValue" in tax_details["tax"]:
                                                    tax_value.append(
                                                        {
                                                            "value": tax_details["tax"][
                                                                "taxValue"
                                                            ]
                                                        }
                                                    )
                                                else:
                                                    tax_value.append(
                                                        {"value": tax_details["tax"]}
                                                    )
                                            else:
                                                pass
                                    except:pass
                                    # =================================price calculation===================================================================
                                    price = best_supplier["retailerPrice"]
                                    if type(price) == str:
                                        price = float(price)

                                    tax_price = 0
                                    offer_data = []
                                    if "offer" in tax_details:
                                        for offer in tax_details["offer"]:
                                            if offer["status"] == 1:
                                                offer_terms = db.offers.find_one(
                                                    {
                                                        "_id": ObjectId(
                                                            offer["offerId"]
                                                        ),
                                                        "storeId": store_id,
                                                        "status": 1,
                                                    }
                                                )
                                                if offer_terms != None:
                                                    terms_condition = (
                                                        html2text.html2text(
                                                            offer_terms["termscond"]
                                                        )
                                                    )
                                                    if offer_terms[
                                                        "startDateTime"
                                                    ] <= int(time.time()):
                                                        offer[
                                                            "termscond"
                                                        ] = terms_condition
                                                        offer_data.append(offer)
                                                else:
                                                    pass
                                            else:
                                                pass
                                    else:
                                        pass

                                    if len(offer_data) > 0:
                                        best_offer = max(
                                            offer_data, key=lambda x: x["discountValue"]
                                        )
                                    else:
                                        best_offer = {}

                                    if len(best_offer) == 0:
                                        percentage = 0
                                        discount_type = 0
                                    else:
                                        if "discountType" in best_offer:
                                            percentage = int(
                                                best_offer["discountValue"]
                                            )
                                            discount_type = best_offer["discountType"]
                                        else:
                                            percentage = 0
                                            discount_type = 0

                                    # ==================================get currecny rate============================
                                    try:
                                        currency_rate = currency_exchange_rate[
                                            str(tax_details["currency"])
                                            + "_"
                                            + str(currency_code)
                                            ]
                                    except:
                                        currency_rate = 0
                                    currency_details = db.currencies.find_one(
                                        {"currencyCode": currency_code}
                                    )
                                    if currency_details is not None:
                                        currency_symbol = currency_details[
                                            "currencySymbol"
                                        ]
                                        currency = currency_details["currencyCode"]
                                    else:
                                        currency_symbol = tax_details["currencySymbol"]
                                        currency = tax_details["currency"]

                                    if float(currency_rate) > 0:
                                        price = price * float(currency_rate)

                                    tax_price_data = price + ((price * tax_price) / 100)
                                    if discount_type == 0:
                                        discount_price = float(percentage)
                                    elif discount_type == 1:
                                        discount_price = (
                                                                    float(tax_price_data) * float(percentage)
                                                            ) / 100
                                    else:
                                        discount_price = 0
                                    base_price = tax_price_data - discount_price

                                    try:
                                        ch_pro = db.childProducts.find_one(
                                            {"_id": ObjectId(str(best_supplier["productId"]))},
                                            {"isMembersOnly": 1, "units": 1})
                                        isMembersOnly = ch_pro.get("isMembersOnly", False)
                                        nonMemberPrice = ch_pro["units"][0][
                                            "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                                ch_pro["units"][0] else round(
                                            discount_price, 2)
                                        memberPrice = ch_pro["units"][0]["memberPrice"] if "memberPrice" in \
                                                                                            ch_pro["units"][
                                                                                                0] else round(
                                            discount_price, 2)
                                    except:
                                        isMembersOnly = False
                                        nonMemberPrice = round(discount_price, 2)
                                        memberPrice = round(discount_price, 2)

                                    final_price_list = {
                                        "basePrice": round(tax_price_data, 2),
                                        "finalPrice": round(base_price, 2),
                                        "discountPrice": round(discount_price, 2),
                                        "discountPercentage": percentage,
                                        "discountPriceForNonMembers": nonMemberPrice,
                                        "memberPrice": memberPrice
                                    }
                                    try:
                                    # ========================================favourite products=========================
                                        response_casandra = session.execute(
                                            """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                            {
                                                "userid": user_id,
                                                "productid": str(
                                                    best_supplier["productId"]
                                                ),
                                            },
                                        )

                                        if not response_casandra:
                                            response_casandra = session.execute(
                                                """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                {
                                                    "userid": user_id,
                                                    "productid": str(
                                                        hits["_source"]["childproductid"]
                                                    ),
                                                },
                                            )
                                            if not response_casandra:
                                                isFavourite = False
                                            else:
                                                isFavourite = True
                                        else:
                                            for fav in response_casandra:
                                                isFavourite = True
                                    except Exception as e:
                                        print(e)
                                        isFavourite = False
                                        response_casandra = None

                                    # =================================recomanded products===========================
                                    try:
                                        product_name = (
                                            hits["_source"]["pName"][language]
                                            if language in hits["_source"]["pName"]
                                            else hits["_source"]["pName"]["en"]
                                        )
                                    except:
                                        product_name = (
                                            hits["_source"]["units"][0]["unitName"][
                                                language
                                            ]
                                            if language
                                                in hits["_source"]["units"][0]["unitName"]
                                            else hits["_source"]["units"][0][
                                                "unitName"
                                            ]["en"]
                                        )

                                    product_tag = ""
                                    product_status = False

                                    try:
                                        isMembersOnly = db.childProducts.find_one(
                                            {"_id": ObjectId(str(best_supplier["productId"]))},
                                            {"isMembersOnly": 1}).get("isMembersOnly", False)
                                    except:
                                        isMembersOnly = False
                                    #get total like count for normal user and influencer



                                    liked_users_cursor = db.likesProducts.find({"childproductid": str(best_supplier["productId"]), "isInfluencer": False}, {"userid": 1})
                                    liked_users_count = liked_users_cursor.count()
                                    user_ids = [ObjectId(like["userid"]) for like in liked_users_cursor]
                                    # Step 2: Find the users with the highest follower count, limit to 3, and with non-empty profile pictures
                                    max_follower_users = db.customer.aggregate([
                                        {"$match": {"_id": {"$in": user_ids}}},
                                        {"$project": {
                                            "_id": 1,
                                            "profilePic": 1
                                        }},
                                        {"$match": {"profilePic": {"$exists": True, "$ne": ""}}},  # Match only non-empty profile pics
                                        {"$sort": {"count.followerCount": -1}},
                                        {"$limit": 3}
                                    ])

                                    profile_pics = []
                                    for user in max_follower_users:
                                        profile_pic_url = user.get("profilePic")
                                        if profile_pic_url:
                                            profile_pics.append(profile_pic_url)
                                    if profile_pics ==[]:
                                        profile_pics =["","",""]
                                    
                                    likesByUsers=0
                                    likesByInfluencers=0
                                    try:
                                        likesByUsers=liked_users_count
                                        likesByInfluencers=db.likesProducts.find({"childproductid": str(best_supplier["productId"]),"isInfluencer":True}).count()
                                    except:
                                        likesByUsers=0
                                        likesByInfluencers=0

                                    json_data = {
                                        "parentProductId": str(
                                            hits["_source"]["parentProductId"]
                                        ),
                                        "childProductId": best_supplier["productId"],
                                        "productStatus": product_status,
                                        "productTag": product_tag,
                                        "LikesByUsers":likesByUsers,
                                        "LikesByInfluencers":likesByInfluencers,
                                        "allPrice":allPrice,
                                        "offers": best_offer,
                                        "unitId": best_supplier["productId"],
                                        "finalPriceList": final_price_list,
                                        "catName": category_name,
                                        "detailDescription": detail_description,
                                        "containsMeat": hits["_source"]["containsMeat"]
                                        if "containsMeat" in hits["_source"]
                                        else False,
                                        "addOnsCount": addons_count,
                                        "isFavourite": isFavourite,
                                        "productName": product_name,
                                        "images": hits["_source"]["images"],
                                        "currencySymbol": currency_symbol,
                                        "currency": currency,
                                        "availableQuantity": best_supplier[
                                            "retailerQty"
                                        ],
                                        "isMembersOnly": isMembersOnly,
                                        "likeUserProfile" :profile_pics
                                    }
                                    
                                    product_data.append(json_data)
                        if product_data:
                            newlist = sorted(product_data, key=lambda k: k["availableQuantity"], reverse=False)
                            productsData.append(
                               {
                                    "catName": category_name,
                                    "isSubCategories": False,
                                    "subCategories": [],
                                    "products": newlist,
                                    "seqId": 0,
                                    "catImage": category_image,
                                    "catDescription": category_descr
                                }
                            )
                        else:
                            productsData = []
                        if productsData:
                            last_response = {
                                "data": {
                                    "productsData": productsData,  # category_details,
                                }
                            }
                            print(f' API exicute time : {time.time() - start_time}')
                            return JsonResponse(last_response, safe=False, status=200)
                        else:
                            response = {"data": {}, "message": "data not found", "penCount": 0}
                            return JsonResponse(response, safe=False, status=404)


                    store_details_json = db.stores.find_one(
                        {
                            "_id": ObjectId(store_id)
                        },
                        {
                            "averageCostForMealForTwo": 1,
                            "favouriteUsers": 1,
                            "safetyStandards": 1,
                            "businessLocationAddress": 1,
                            "specialities": 1,
                            "storeName": 1,
                            "storeFrontTypeId": 1,
                            "uniqStoreId": 1,
                            "storeIsOpen": 1,
                            "nextCloseTime": 1,
                            "nextOpenTime": 1,
                            "serviceZones": 1,
                            "logoImages": 1,
                            "bannerImages": 1,
                            "listingImage": 1,
                            "cityId": 1,
                            "minimumOrder": 1,
                            "citiesOfOperation": 1,
                            "freeDeliveryAbove": 1,
                            "safetyStandardsSortDiscription": 1,
                            "safetyStandardsDynamicContent": 1,
                            "averageDeliveryTimeInMins": 1,
                            "supportedOrderTypes": 1,
                            "driverTypeId": 1,
                            "driverType": 1,
                            "storeType": 1,
                            "currencySymbol": 1,
                            "currencyCode": 1,
                            "tableReservations": 1,
                            "priceForBookingTable":1,
                            
                        }
                    )
                    offer_details = db.offers.find(
                        {
                            "storeId": {"$in": [str(store_id)]}, "status": 1
                        },
                        {
                            "termscond": 1,
                            "name": 1,
                            "discountValue": 1,
                            "offerType": 1,
                            "webimages": 1,
                            "images": 1
                        }
                    )
                    offer_json = []
                    cusine_name = ""
                    for offer in offer_details:
                        terms_condition = html2text.html2text(offer["termscond"])
                        offer_json.append(
                            {
                                "offerName": offer["name"][language]
                                if language in offer["name"]
                                else offer["name"]["en"],
                                "termscond": terms_condition,
                                "offerId": str(offer["_id"]),
                                "discountValue": int(offer["discountValue"]),
                                "offerType": offer["offerType"],
                                "webimages": offer["webimages"],
                                "images": offer["images"],
                            }
                        )
                    if len(offer_json) > 0:
                        best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                        if best_offer_store["offerType"] == 0:
                            percentage_text = (
                                    str(best_offer_store["discountValue"]) + "%" + " " + "off"
                            )
                        else:
                            percentage_text = "₹" + str(best_offer_store["discountValue"]) + " off"
                        offer_name = best_offer_store["offerName"]
                    else:
                        best_offer_store = {}
                        offer_name = ""
                        percentage_text = ""

                    if store_details_json != None:
                        if "averageCostForMealForTwo" in store_details_json:
                            cost_for_two = store_details_json["averageCostForMealForTwo"]
                        else:
                            cost_for_two = 0

                        if "favouriteUsers" in store_details_json:
                            if user_id in store_details_json["favouriteUsers"]:
                                favourite_store = True
                            else:
                                favourite_store = False
                        else:
                            favourite_store = False
                        if "safetyStandards" in store_details_json:
                            if int(store_details_json["safetyStandards"]) == 0:
                                safety_standard = False
                                safety_standards_sort_discription = ""
                                safety_standards_dynamic_content = ""
                            else:
                                safety_standard = True
                                safety_standards_sort_discription = store_details_json[
                                    "safetyStandardsSortDiscription"
                                ] if "safetyStandardsSortDiscription" in store_details_json else ""
                                safety_standards_dynamic_content = store_details_json[
                                    "safetyStandardsDynamicContent"
                                ] if "safetyStandardsDynamicContent" in store_details_json else ""
                        else:
                            safety_standard = False
                            safety_standards_sort_discription = ""
                            safety_standards_dynamic_content = ""
                        store_lat = (
                            float(store_details_json["businessLocationAddress"]["lat"])
                            if "lat" in store_details_json["businessLocationAddress"]
                            else 0
                        )
                        store_long = (
                            float(store_details_json["businessLocationAddress"]["long"])
                            if "long" in store_details_json["businessLocationAddress"]
                            else 0
                        )
                        address = (
                            store_details_json["businessLocationAddress"]["address"]
                            if "address" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        locality = (
                            store_details_json["businessLocationAddress"]["locality"]
                            if "locality" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        post_code = (
                            store_details_json["businessLocationAddress"]["postCode"]
                            if "postCode" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        state = (
                            store_details_json["businessLocationAddress"]["state"]
                            if "state" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        country = (
                            store_details_json["businessLocationAddress"]["country"]
                            if "country" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        addressArea = (
                            store_details_json["businessLocationAddress"]["addressArea"]
                            if "addressArea" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        city = (
                            store_details_json["businessLocationAddress"]["city"]
                            if "city" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        # ===================================for the cusines=============================================
                        if "specialities" in store_details_json:
                            if len(store_details_json["specialities"]):
                                for spec in store_details_json["specialities"]:
                                    spec_data = db.specialities.find_one(
                                        {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                    )
                                    if spec_data != None:
                                        if cusine_name == "":
                                            cusine_name = (
                                                spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                        else:
                                            cusine_name = (
                                                cusine_name
                                                + ", "
                                                + spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                    else:
                                        pass
                            else:
                                pass
                        else:
                            pass

                        store_name = (
                            store_details_json["storeName"][language]
                            if language in store_details_json["storeName"]
                            else store_details_json["storeName"]["en"]
                        )

                        # ================================for more stores==================================
                        if (
                                int(store_details_json["storeFrontTypeId"]) == 6
                                or int(store_details_json["storeFrontTypeId"]) == 2
                        ):
                            more_must_query = []
                            more_should_query = []
                            if "uniqStoreId" not in store_details_json:
                                more_must_query.append(
                                    {
                                        "match": {
                                            "storeName.en": store_details_json["storeName"]["en"]
                                        }
                                    }
                                )
                            else:
                                more_must_query.append(
                                    {
                                        "match_phrase_prefix": {
                                            "uniqStoreId": store_details_json["uniqStoreId"]
                                        }
                                    }
                                )
                            more_must_query.append({"match": {"status": 1}})
                            more_must_query.append(
                                {"match": {"categoryId": DINE_STORE_CATEGORY_ID}}
                            )
                            geo_distance_sort = {
                                "_geo_distance": {
                                    "distance_type": "plane",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                    "order": "asc",
                                    "unit": "km",
                                }
                            }
                            sort_query = [geo_distance_sort]
                            more_must_query.append(
                                {
                                    "geo_distance": {
                                        "distance": "50km",
                                        "location": {"lat": float(lat), "lon": float(long)},
                                    }
                                }
                            )
                            store_more_geo_query = {
                                "query": {
                                    "bool": {
                                        "must": more_must_query,
                                        "must_not": [
                                            {"match": {"_id": str(store_details_json["_id"])}}
                                        ],
                                    }
                                },
                                "size": 100,
                                "from": 0,
                                "sort": sort_query,
                            }
                            res_more = es.search(
                                index=index_store,
                                body=store_more_geo_query,
                                filter_path=["hits.total", "hits.hits._id", "hits.hits._source"],
                            )
                            more_seller_count = res_more["hits"]["total"]["value"]
                        else:
                            more_seller_count = 0
                        # ============================query for get the distance by geo query==============
                        store_must_query = []

                        store_must_query.append({"match": {"_id": str(store_details_json["_id"])}})
                        geo_distance_sort = {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {"lat": float(lat), "lon": float(long)},
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                        sort_query = [geo_distance_sort]
                        store_must_query.append(
                            {
                                "geo_distance": {
                                    "distance": "50km",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                }
                            }
                        )
                        store_geo_query = {
                            "query": {
                                "bool": {
                                    "must": store_must_query,
                                }
                            },
                            "size": 1,
                            "from": 0,
                            "sort": sort_query,
                        }
                        res = es.search(
                            index=index_store,
                            body=store_geo_query,
                            filter_path=[
                                "hits.total",
                                "hits.hits._id",
                                "hits.hits.sort",
                                "hits.hits._source",
                            ],
                        )
                        if res["hits"]["total"]["value"] > 0:
                            if "hits" in res["hits"]:
                                for seller in res["hits"]["hits"]:
                                    distance_km = round(seller["sort"][0], 2)
                                    distance_miles = round(distance_km * conv_fac, 2)
                            else:
                                distance_km = 0
                                distance_miles = 0
                        else:
                            distance_km = 0
                            distance_miles = 0

                        store_id = str(store_details_json["_id"])
                        # =====================================about store tags=================================
                        if "storeIsOpen" in store_details_json:
                            store_is_open = store_details_json["storeIsOpen"]
                        else:
                            store_is_open = False

                        if "nextCloseTime" in store_details_json:
                            next_close_time = store_details_json["nextCloseTime"]
                        else:
                            next_close_time = ""

                        if "nextOpenTime" in store_details_json:
                            next_open_time = store_details_json["nextOpenTime"]
                        else:
                            next_open_time = ""

                        try:
                            if "timeZoneWorkingHour" in seller["_source"]:
                                timeZoneWorkingHour = seller["_source"]['timeZoneWorkingHour']
                            else:
                                timeZoneWorkingHour = ""
                        except:
                            timeZoneWorkingHour = ""

                        if any(
                                supplier["zoneId"] == str(zone_id)
                                for supplier in store_details_json["serviceZones"]
                        ):
                            is_delivery = True
                            if next_close_time == "" and next_open_time == "":
                                is_temp_close = True
                                store_tag = "Temporarily Closed"
                            elif next_open_time != "" and store_is_open == False:
                                is_temp_close = False
                                # next_open_time = int(next_open_time + timezone * 60)
                                next_open_time = time_zone_converter(timezone_data, next_open_time, timeZoneWorkingHour)
                                local_time = datetime.datetime.fromtimestamp(next_open_time)
                                next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                                next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                                if next_day_midnight_timestamp > next_open_time:
                                    open_time = local_time.strftime("%I:%M %p")
                                    store_tag = "Opens Next At " + open_time
                                else:
                                    open_time = local_time.strftime("%I:%M %p")
                                    store_tag = "Opens Tomorrow At " + open_time
                            else:
                                is_temp_close = False
                                store_tag = ""
                        else:
                            is_temp_close = True
                            is_delivery = False
                            next_open_time = ""
                            next_close_time = ""
                            store_is_open = False
                            store_tag = "Does Not Deliver To Selected Location"

                        avg_rating_value = 0
                        seller_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "sellerId": str(store_details_json["_id"]),
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_rating in seller_rating:
                            avg_rating_value = avg_rating["avgRating"]

                        store_details = {
                            "lat": store_lat,
                            "long": store_long,
                            "isFavourite": favourite_store,
                            "offer": best_offer_store,
                            "address": address,
                            "locality": locality,
                            "addressArea": addressArea,
                            "isTempClose": is_temp_close,
                            "offerName": offer_name,
                            "safetyStandards": safety_standard,
                            "safetyStandardsSortDiscription": safety_standards_sort_discription,
                            "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                            "cuisines": cusine_name,
                            "averageCostForMealForTwo": cost_for_two,
                            "logoImages": store_details_json["logoImages"],
                            "bannerImages": store_details_json["bannerImages"],
                            "listingImage": store_details_json["listingImage"]
                            if "listingImage" in store_details_json
                            else {},
                            "priceForBookingTable": store_details_json['priceForBookingTable'] if 'priceForBookingTable'in store_details_json else 0,
                            "tableReservations": store_details_json['tableReservations'] if 'tableReservations'in store_details_json else False,
                            "cityId": store_details_json["cityId"],
                            "minimumOrder": store_details_json["minimumOrder"],
                            "citiesOfOperation": store_details_json["citiesOfOperation"],
                            "freeDeliveryAbove": store_details_json["freeDeliveryAbove"]
                            if "freeDeliveryAbove" in store_details_json
                            else 0,
                            "averageDeliveryTime": str(
                                store_details_json["averageDeliveryTimeInMins"]
                            )
                                                   + " "
                                                   + "Mins"
                            if "averageDeliveryTimeInMins" in store_details_json
                            else "",
                            "nextCloseTime": next_close_time,
                            "nextOpenTime": next_open_time,
                            "supportedOrderTypes": store_details_json["supportedOrderTypes"]
                            if "supportedOrderTypes" in store_details_json
                            else 3,
                            "avgRating": round(avg_rating_value, 2),
                            "storeIsOpen": store_is_open,
                            "storeTag": store_tag,
                            "driverTypeId": store_details_json["driverTypeId"]
                            if "driverTypeId" in store_details_json
                            else 0,
                            "driverType": store_details_json["driverType"]
                            if "driverType" in store_details_json
                            else "",
                            "storeType": store_details_json["storeType"]
                            if "storeType" in store_details_json
                            else "Food",
                            "postCode": post_code,
                            "percentageText": percentage_text,
                            "state": state,
                            "moreSellerCount": more_seller_count,
                            "country": country,
                            "city": city,
                            "distanceKm": round(distance_km, 2),
                            "distanceMiles": distance_miles,
                            "currencySymbol": store_details_json["currencySymbol"]
                            if "currencySymbol" in store_details_json
                            else "₹",
                            "currency": store_details_json["currencyCode"]
                            if "currencyCode" in store_details_json
                            else "INR",
                            "distanceMiles": distance_miles,
                            "storeName": store_name,
                            "storeId": store_id,
                        }

                        # =========================================================query for the get the products=======================================
                        must_query.append({"terms": {"status": [1, 2]}})
                        must_query.append({"match": {"storeId": str(store_id)}})
                        must_query.append({"match": {"units.isPrimary": True}})
                        favourite_data = []
                        recomended_data = []
                        category_details = []
                        count = 2
                        if search_text != "":
                            # must_query.append({"match_phrase_prefix": {"pPName." + language: search_text}})
                            # ===========================product name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "pPName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "pPName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            # ===========================unit name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "units.unitName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "units.unitName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )

                        if meal_available == True:
                            must_query.append(
                                {"match": {"mealConsumptionTime." + str(current_text): True}}
                            )
                        if contains_meat != True:
                            must_query.append({"match": {"containsMeat": contains_meat}})
                        bool_query = {"must": must_query}
                        if len(should_query) > 0:
                            bool_query["should"] = should_query
                            bool_query["minimum_should_match"] = 1
                            bool_query["boost"] = 1.0
                        else:
                            pass
                       
                        # ==============================category+subcategory wise grouping=================
                        query ={
                            "query": {"bool": bool_query},
                            "aggs": {
                                "total_categories": {
                                    "cardinality": {
                                        "field": "categoryList.parentCategory.categoryId.keyword"
                                    }
                                },
                                "group_by_catName": {
                                "terms": {
                                    "field": "categoryList.parentCategory.categoryId.keyword",
                                    "size":1000
                                },
                                "aggs": {
                                    "total_products_per_category": {
                                    "value_count": {
                                        "field": "_id"
                                    }
                                    },
                                    "top_sales_hits": {
                                    "top_hits": {
                                        "_source": {
                                        "includes": [
                                            "_id",
                                            "parentProductId",
                                            "firstCategoryId",
                                            "catName",
                                            "secondCategoryId",
                                            "subCatName",
                                            "childproductid",
                                            "storeId",
                                            "thirdCategoryId",
                                            "detailDescription",
                                            "subSubCatName",
                                            "offer",
                                            "images",
                                            "suppliers",
                                            "containsMeat",
                                            "consumptionTime",
                                            "currencySymbol",
                                            "currency",
                                            "tax",
                                            "units",
                                            "pName",
                                            "storeCategoryId"
                                        ]
                                        },
                                        "from": limit,
                                        "size": size_product
                                    }
                                    }
                                }
                                }
                            }
                            }

                        res = es.search(index=index_products, body=query)
                        print('res---',res)
                        print("page",page_number)
                        print("from_category",from_category)
                        print("size_category",size_category)
                        
                        total_category_count = int(res['aggregations']['total_categories']['value'])                        
                        for bucket in res["aggregations"]["group_by_catName"]["buckets"][from_category:size_category]:
                            total_products = bucket["total_products_per_category"]["value"]
                            count = count + 1
                            product_data = []
                            # category_name = bucket['key']
                            category_id = bucket["key"]
                            parent_cat_details = db.category.find_one(
                                {
                                    "_id": ObjectId(category_id),
                                    "status": 1
                                }
                            )
                            if parent_cat_details is None:
                                parent_cat_details = db.category.find_one(
                                    {
                                        "_id": ObjectId(category_id)
                                    }
                                )
                            category_descr = ""
                            category_image = ""
                            if parent_cat_details is not None:
                                category_name = parent_cat_details['categoryName']['en']
                                try:
                                    category_image = parent_cat_details["mobileImage"]
                                    category_descr = parent_cat_details['categoryDesc']
                                except Exception as e:
                                    print(e)
                                    category_descr = ""
                                    category_image = ""
                                # print('category_details--',category_details)
                                if any(category_name in d["catName"] for d in category_details):
                                    pass
                                else:
                                    # print('name-----------',category_name)
                                    for hits in bucket["top_sales_hits"]["hits"]["hits"]:
                                        tax_value = []
                                        # =========================for addons=======================================
                                        if "addOns" in hits["_source"]["units"][0]:
                                            if hits["_source"]["units"][0]["addOns"] != None:
                                                if len(hits["_source"]["units"][0]["addOns"]) > 0:
                                                    addons_count = True
                                                else:
                                                    addons_count = False
                                            else:
                                                addons_count = False
                                        else:
                                            addons_count = False

                                        if addons_count == False:
                                            product_count = db.childProducts.find(
                                                {
                                                    "storeId": ObjectId(hits["_source"]["storeId"]),
                                                    "parentProductId": hits["_source"][
                                                        "parentProductId"
                                                    ],
                                                    "status": 1,
                                                }
                                            ).count()
                                            if product_count > 1:
                                                addons_count = True
                                        best_supplier = {}
                                        best_supplier["id"] = hits["_source"]["storeId"]
                                        best_supplier["productId"] = hits["_id"]
                                        try:
                                            best_supplier["retailerQty"] = (
                                                hits["_source"]["units"][0]["availableQuantity"]
                                                if hits["_source"]["units"][0]["availableQuantity"]
                                                   != ""
                                                else 0
                                            )
                                        except:
                                            best_supplier["retailerQty"] = 0

                                        try:
                                            best_supplier["distributorQty"] = (
                                                hits["_source"]["units"][0]["distributor"][
                                                    "availableQuantity"
                                                ]
                                                if hits["_source"]["units"][0]["distributor"][
                                                       "availableQuantity"
                                                   ]
                                                   != ""
                                                else 0
                                            )
                                        except:
                                            best_supplier["distributorQty"] = 0
                                        sorted_price_data = sorted(hits["_source"]["units"][0]["b2cPricing"], key=lambda x: x['b2cproductSellingPrice'])
                                        base_price_max = sorted_price_data[0]["b2cproductSellingPrice"]
                                        allPrice = hits["_source"]["units"][0]["b2cPricing"]
                                        try:
                                            best_supplier["retailerPrice"] = (
                                                base_price_max if "b2cproductSellingPrice"
                                                in hits["_source"]["units"][0]["b2cPricing"][0]
                                                else hits["_source"]["units"][0]["floatValue"]
                                            )
                                        except:
                                            best_supplier["retailerPrice"] = hits["_source"][
                                                "units"
                                            ][0]["floatValue"]

                                        try:
                                            best_supplier["distributorPrice"] = (
                                                base_price if "b2bproductSellingPrice"
                                                in hits["_source"]["units"][0]["b2bPricing"][0]
                                                else hits["_source"]["units"][0]["floatValue"]
                                            )
                                        except:
                                            best_supplier["distributorPrice"] = hits["_source"][
                                                "units"
                                            ][0]["floatValue"]
                                        # print(best_supplier)
                                        if len(best_supplier) > 0:
                                            detail_description = (
                                                hits["_source"]["detailDescription"][language]
                                                if language in hits["_source"]["detailDescription"]
                                                else hits["_source"]["detailDescription"]["en"]
                                            )
                                            if detail_description == None:
                                                detail_description = ""
                                            # ===========================tax for the product=========================================================
                                            tax_details = db.childProducts.find_one(
                                                {"_id": ObjectId(best_supplier["productId"])}
                                            )
                                            if tax_details != None:
                                                try:
                                                    if type(tax_details['units'][0]["tax"]) == list:
                                                        for tax in tax_details['units'][0]["tax"]:
                                                            tax_value.append({"value": tax["taxValue"]})
                                                    else:
                                                        if tax_details["tax"] != None:
                                                            if "taxValue" in tax_details["tax"]:
                                                                tax_value.append(
                                                                    {
                                                                        "value": tax_details["tax"][
                                                                            "taxValue"
                                                                        ]
                                                                    }
                                                                )
                                                            else:
                                                                tax_value.append(
                                                                    {"value": tax_details["tax"]}
                                                                )
                                                        else:
                                                            pass
                                                except:pass
                                                # =================================price calculation===================================================================
                                                price = best_supplier["retailerPrice"]
                                                if type(price) == str:
                                                    price = float(price)

                                                tax_price = 0
                                                offer_data = []
                                                if "offer" in tax_details:
                                                    for offer in tax_details["offer"]:
                                                        if offer["status"] == 1:
                                                            offer_terms = db.offers.find_one(
                                                                {
                                                                    "_id": ObjectId(
                                                                        offer["offerId"]
                                                                    ),
                                                                    "storeId": store_id,
                                                                    "status": 1,
                                                                }
                                                            )
                                                            if offer_terms != None:
                                                                terms_condition = (
                                                                    html2text.html2text(
                                                                        offer_terms["termscond"]
                                                                    )
                                                                )
                                                                if offer_terms[
                                                                    "startDateTime"
                                                                ] <= int(time.time()):
                                                                    offer[
                                                                        "termscond"
                                                                    ] = terms_condition
                                                                    offer_data.append(offer)
                                                            else:
                                                                pass
                                                        else:
                                                            pass
                                                else:
                                                    pass

                                                if len(offer_data) > 0:
                                                    best_offer = max(
                                                        offer_data, key=lambda x: x["discountValue"]
                                                    )
                                                else:
                                                    best_offer = {}

                                                if len(best_offer) == 0:
                                                    percentage = 0
                                                    discount_type = 0
                                                else:
                                                    if "discountType" in best_offer:
                                                        percentage = int(
                                                            best_offer["discountValue"]
                                                        )
                                                        discount_type = best_offer["discountType"]
                                                    else:
                                                        percentage = 0
                                                        discount_type = 0

                                                # ==================================get currecny rate============================
                                                try:
                                                    currency_rate = currency_exchange_rate[
                                                        str(tax_details["currency"])
                                                        + "_"
                                                        + str(currency_code)
                                                        ]
                                                except:
                                                    currency_rate = 0
                                                currency_details = db.currencies.find_one(
                                                    {"currencyCode": currency_code}
                                                )
                                                if currency_details is not None:
                                                    currency_symbol = currency_details[
                                                        "currencySymbol"
                                                    ]
                                                    currency = currency_details["currencyCode"]
                                                else:
                                                    currency_symbol = tax_details["currencySymbol"]
                                                    currency = tax_details["currency"]

                                                if float(currency_rate) > 0:
                                                    price = price * float(currency_rate)

                                                tax_price_data = price + ((price * tax_price) / 100)
                                                if discount_type == 0:
                                                    discount_price = float(percentage)
                                                elif discount_type == 1:
                                                    discount_price = (
                                                                             float(tax_price_data) * float(percentage)
                                                                     ) / 100
                                                else:
                                                    discount_price = 0
                                                base_price = tax_price_data - discount_price

                                                try:
                                                    ch_pro = db.childProducts.find_one(
                                                        {"_id": ObjectId(str(best_supplier["productId"]))},
                                                        {"isMembersOnly": 1, "units": 1})
                                                    isMembersOnly = ch_pro.get("isMembersOnly", False)
                                                    nonMemberPrice = ch_pro["units"][0][
                                                        "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                                         ch_pro["units"][0] else round(
                                                        discount_price, 2)
                                                    memberPrice = ch_pro["units"][0]["memberPrice"] if "memberPrice" in \
                                                                                                       ch_pro["units"][
                                                                                                           0] else round(
                                                        discount_price, 2)
                                                except:
                                                    isMembersOnly = False
                                                    nonMemberPrice = round(discount_price, 2)
                                                    memberPrice = round(discount_price, 2)

                                                final_price_list = {
                                                    "basePrice": round(tax_price_data, 2),
                                                    "finalPrice": round(base_price, 2),
                                                    "discountPrice": round(discount_price, 2),
                                                    "discountPercentage": percentage,
                                                    "discountPriceForNonMembers": nonMemberPrice,
                                                    "memberPrice": memberPrice
                                                }
                                                try:
                                                # ========================================favourite products=========================
                                                    response_casandra = session.execute(
                                                        """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                        {
                                                            "userid": user_id,
                                                            "productid": str(
                                                                best_supplier["productId"]
                                                            ),
                                                        },
                                                    )

                                                    if not response_casandra:
                                                        response_casandra = session.execute(
                                                            """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                            {
                                                                "userid": user_id,
                                                                "productid": str(
                                                                    hits["_source"]["childproductid"]
                                                                ),
                                                            },
                                                        )
                                                        if not response_casandra:
                                                            isFavourite = False
                                                        else:
                                                            isFavourite = True
                                                    else:
                                                        for fav in response_casandra:
                                                            isFavourite = True
                                                except Exception as e:
                                                    print(e)
                                                    isFavourite = False
                                                    response_casandra = None

                                                # =================================recomanded products===========================
                                                try:
                                                    product_name = (
                                                        hits["_source"]["pName"][language]
                                                        if language in hits["_source"]["pName"]
                                                        else hits["_source"]["pName"]["en"]
                                                    )
                                                except:
                                                    product_name = (
                                                        hits["_source"]["units"][0]["unitName"][
                                                            language
                                                        ]
                                                        if language
                                                           in hits["_source"]["units"][0]["unitName"]
                                                        else hits["_source"]["units"][0][
                                                            "unitName"
                                                        ]["en"]
                                                    )

                                                (
                                                    currency_symbol,
                                                    currency,
                                                    product_status,
                                                    product_tag,
                                                ) = next_availbale_time(best_supplier["productId"])

                                                if tax_details["status"] == 1:
                                                    if "mealConsumptionTime" in tax_details:
                                                        if (
                                                                current_text
                                                                in tax_details["mealConsumptionTime"]
                                                        ):
                                                            pass
                                                        elif (
                                                                len(tax_details["mealConsumptionTime"])
                                                                > 0
                                                        ):
                                                            if (
                                                                    int(current_hour) >= 0
                                                                    and int(current_hour) < 5
                                                            ):
                                                                current_text = "latenightdinner"
                                                                currenct_text_value = [
                                                                    "breakfast",
                                                                    "brunch",
                                                                    "lunch",
                                                                    "tea",
                                                                    "dinner",
                                                                ]
                                                            elif (
                                                                    int(current_hour) >= 5
                                                                    and int(current_hour) < 10
                                                            ):
                                                                current_text = "breakfast"
                                                                currenct_text_value = [
                                                                    "brunch",
                                                                    "lunch",
                                                                    "tea",
                                                                    "dinner",
                                                                ]
                                                            elif (
                                                                    int(current_hour) >= 10
                                                                    and int(current_hour) < 11
                                                            ):
                                                                current_text = "brunch"
                                                                currenct_text_value = [
                                                                    "lunch",
                                                                    "tea",
                                                                    "dinner",
                                                                ]
                                                            elif (
                                                                    int(current_hour) >= 11
                                                                    and int(current_hour) < 15
                                                            ):
                                                                current_text = "lunch"
                                                                currenct_text_value = [
                                                                    "tea",
                                                                    "dinner",
                                                                ]
                                                            elif (
                                                                    int(current_hour) >= 15
                                                                    and int(current_hour) < 19
                                                            ):
                                                                current_text = "tea"
                                                                currenct_text_value = ["dinner"]
                                                            else:
                                                                current_text = "dinner"
                                                                currenct_text_value = []
                                                            for k, v in tax_details[
                                                                "mealConsumptionTime"
                                                            ].items():
                                                                if k in currenct_text_value:
                                                                    product_status = True
                                                                    next_day = (
                                                                        datetime.datetime.now()
                                                                    )
                                                                    next_day_midnight = (
                                                                        next_day.replace(
                                                                            hour=int(
                                                                                meal_timing[k]
                                                                            ),
                                                                            minute=00,
                                                                            second=00,
                                                                        )
                                                                    )
                                                                    # open_time = next_day_midnight.strftime("%b %d %Y, %I:%M %p")
                                                                    open_time = (
                                                                        next_day_midnight.strftime(
                                                                            "%I:%M %p"
                                                                        )
                                                                    )
                                                                    product_tag = (
                                                                            "Available On Today At "
                                                                            + open_time
                                                                    )
                                                                else:
                                                                    product_status = True
                                                                    next_day = (
                                                                            datetime.datetime.now()
                                                                            + datetime.timedelta(days=1)
                                                                    )
                                                                    next_day_midnight = (
                                                                        next_day.replace(
                                                                            hour=meal_timing[k],
                                                                            minute=00,
                                                                            second=00,
                                                                        )
                                                                    )
                                                                    open_time = (
                                                                        next_day_midnight.strftime(
                                                                            "%I:%M %p"
                                                                        )
                                                                    )
                                                                    product_tag = (
                                                                            "Next available at "
                                                                            + open_time
                                                                            + " tomorrow"
                                                                    )
                                                        else:
                                                            product_tag = ""
                                                            product_status = False
                                                    else:
                                                        pass
                                                else:
                                                    pass

                                                try:
                                                    isMembersOnly = db.childProducts.find_one(
                                                        {"_id": ObjectId(str(best_supplier["productId"]))},
                                                        {"isMembersOnly": 1}).get("isMembersOnly", False)
                                                except:
                                                    isMembersOnly = False
                                                #get total like count for normal user and influencer

                                                liked_users_cursor = db.likesProducts.find({"childproductid": str(best_supplier["productId"]), "isInfluencer": False}, {"userid": 1})
                                                liked_users_count = liked_users_cursor.count()
                                                user_ids = [ObjectId(like["userid"]) for like in liked_users_cursor]
                                                # Step 2: Find the users with the highest follower count, limit to 3, and with non-empty profile pictures
                                                max_follower_users = db.customer.aggregate([
                                                    {"$match": {"_id": {"$in": user_ids}}},
                                                    {"$project": {
                                                        "_id": 1,
                                                        "profilePic": 1
                                                    }},
                                                    {"$match": {"profilePic": {"$exists": True, "$ne": ""}}},  # Match only non-empty profile pics
                                                    {"$sort": {"count.followerCount": -1}},
                                                    {"$limit": 3}
                                                ])

                                                profile_pics = []
                                                for user in max_follower_users:
                                                    profile_pic_url = user.get("profilePic")
                                                    if profile_pic_url:
                                                        profile_pics.append(profile_pic_url)
                                                if profile_pics ==[]:
                                                    profile_pics =["","",""]
                                                likesByUsers=0
                                                likesByInfluencers=0
                                                try:
                                                    likesByUsers=liked_users_count
                                                    likesByInfluencers=db.likesProducts.find({"childproductid": str(best_supplier["productId"]),"isInfluencer":True}).count()
                                                except:
                                                    likesByUsers=0
                                                    likesByInfluencers=0

                                                json_data = {
                                                    "parentProductId": str(
                                                        hits["_source"]["parentProductId"]
                                                    ),
                                                    "childProductId": best_supplier["productId"],
                                                    "productStatus": product_status,
                                                    "productTag": product_tag,
                                                    "LikesByUsers":likesByUsers,
                                                    "LikesByInfluencers":likesByInfluencers,
                                                    "allPrice":allPrice,
                                                    "offers": best_offer,
                                                    "unitId": best_supplier["productId"],
                                                    "finalPriceList": final_price_list,
                                                    "catName": category_name,
                                                    "detailDescription": detail_description,
                                                    "containsMeat": hits["_source"]["containsMeat"]
                                                    if "containsMeat" in hits["_source"]
                                                    else False,
                                                    "addOnsCount": addons_count,
                                                    "isFavourite": isFavourite,
                                                    "productName": product_name,
                                                    "images": hits["_source"]["images"],
                                                    "currencySymbol": currency_symbol,
                                                    "currency": currency,
                                                    "availableQuantity": best_supplier[
                                                        "retailerQty"
                                                    ],
                                                    "isMembersOnly": isMembersOnly,
                                                    "likeUserProfile" :profile_pics
                                                }
                                                if "consumptionTime" in tax_details:
                                                    if (
                                                            current_text
                                                            in tax_details["consumptionTime"]
                                                            and product_status == False
                                                    ):
                                                        recomended_data.append(json_data)
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                                if isFavourite == True:
                                                    favourite_data.append(json_data)
                                                else:
                                                    pass
                                                product_data.append(json_data)
                                    if len(product_data) > 0:
                                        recommanded_details.append(
                                            {
                                                "catId":str(parent_cat_details["_id"]),
                                                "catName": category_name,
                                                "penCount": total_products,
                                                "seqId": count,
                                                "catImage": category_image,
                                                "catDescription": category_descr
                                            }
                                        )
                                        category_details.append(
                                            {
                                                "catName": category_name,
                                                "isSubCategories": False,
                                                "subCategories": [],
                                                "products": product_data,
                                                "seqId": count,
                                                "catImage": category_image,
                                                "catDescription": category_descr
                                            }
                                        )

                        if len(favourite_data) > 0:
                            dataframe_fav = pd.DataFrame(favourite_data)
                            dataframe_fav = dataframe_fav.drop_duplicates(
                                subset="childProductId", keep="last"
                            )
                            new_fav_list = dataframe_fav.to_dict(orient="records")
                        else:
                            new_fav_list = []

                        if len(new_fav_list) > 0:
                            category_details.append(
                                {
                                    "catName": language_change("Favorites", language),
                                    "isSubCategories": False,
                                    "subCategories": [],
                                    "penCount": len(new_fav_list),
                                    "products": new_fav_list,
                                    "seqId": 1,
                                }
                            )
                        if len(favourite_data) > 0:
                            recommanded_details.append(
                                {
                                    "isSubCategories": False,
                                    "subCategories": [],
                                    "catName": language_change("Favorites", language),
                                    "penCount": len(new_fav_list),
                                    "seqId": 1,
                                }
                            )

                        if len(recomended_data) > 0:
                            recomended_datas = recomended_data[:10]
                            dataframe = pd.DataFrame(recomended_datas)
                            dataframe = dataframe.drop_duplicates(subset="productName", keep="last")
                            new_product_list = dataframe.to_dict(orient="records")
                        else:
                            new_product_list = []

                        category_details.append(
                            {
                                "catName": language_change("Recommended", language),
                                "isSubCategories": False,
                                "subCategories": [],
                                "products": new_product_list,
                                "seqId": 2,
                            }
                        )
                        recommanded_details.append(
                            {
                                "catName": language_change("Recommended", language),
                                "penCount": len(recomended_data),
                                "seqId": 2,
                            }
                        )
                        newlist = sorted(category_details, key=lambda k: k["seqId"], reverse=False)
                        newlist_recomnded = sorted(
                            recommanded_details, key=lambda k: k["seqId"], reverse=False
                        )
                        last_response = {
                            "data": {
                                "storeData": store_details,
                                "productsData": newlist,  # category_details,
                                "recommFilter": newlist_recomnded,
                                "offerData": offer_json,
                                "totalCategory":total_category_count
                            }
                        }
                        print(f' API exicute time : {time.time() - start_time}')
                        return JsonResponse(last_response, safe=False, status=200)
                    else:
                        response = {"data": {}, "message": "data not found", "penCount": 0}
                        return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


"""
    API for get the suggestion in food products and resturant
"""

class FoodProductsNew(APIView):
    """
    parameter
    s_id - store id from which store we need to get the data
    latitude - user's latitude
    longitude - user's longitude
    """

    @swagger_auto_schema(
        method="post",
        tags=["Food Store Products List"],
        operation_description="API for getting the products for the food store",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["s_id"],
            properties={
                "s_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id from which store we need to get the data",
                    example="5e9d219b696c826a3792d0e9",
                ),
                "z_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="zone id from which zone this store is",
                    example="5df8b6ea8798dc19d926bd28",
                ),
                "search": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="searched text for the search the product in particular store",
                    example="Burg",
                ),
                "lat": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="latitude of the user's location",
                    example="12.957888",
                ),
                "long": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="longitude of the user's location",
                    example="77.599349",
                ),
                "containsMeat": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while applying filter for the containsMeat (veg or non veg). value should be boolean, if apply that time value should be True",
                    example=True,
                ),
                "mealAvailable": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="while applying filter for the product available. value should be boolean, if apply that time value should be True",
                    example=True,
                ),
                "o_id": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="offer id while clicking on offer banner on store listing page",
                    example="5ef73d368dfa2fac7bd7194c",
                ),
                "timezone": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="offset of the user timezone",
                    example="Asia/Calcutta",
                ),
            },
        ),
        responses={
            200: "data found",
            404: "data not found.",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request, *args, **kwargs):
        try:
            start_time = time.time()
            category_details = []
            isFavourite = False
            recommanded_details = []
            token = request.META["HTTP_AUTHORIZATION"]
            currency_code = ""  # request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            # user_id = json.loads(token)["userId"]
            user_id = "5ef2293a9bc66c3806820117"
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            # translator = t(to_lang=language)
            if token == "":
                response_data = {"message": "unauthorized", "data": {}, "penCount": 0}
                return JsonResponse(response_data, safe=False, status=401)
            else:
                try:
                    request_data = request.data
                except:
                    request_data = json.dumps(request.data)
                search_text = request_data["search"] if "search" in request_data else ""
                # started thread for inserting the data for search and category click data stored
                contains_meat = (
                    request_data["containsMeat"] if "containsMeat" in request_data else False
                )
                meal_available = (
                    request_data["mealAvailable"] if "mealAvailable" in request_data else False
                )
                if contains_meat == True:
                    contains_meat = False
                else:
                    contains_meat = True

                must_query = []
                should_query = []
                store_id = request_data["s_id"] if "s_id" in request_data else ""
                if "o_id" in request_data:
                    store_id = request_data["o_id"]  # offer_data['storeId'][0]

                lat = request_data["lat"] if "lat" in request_data else 0
                # timezone = int(request_data['timezone']) if "timezone" in request_data else 330
                timezone_data = request_data["timezone"] if "timezone" in request_data else ""
                timezone_data_error = request_data[
                    "timezone"] if "timezone" in request_data else "Asia/Calcutta"  # request.GET.get("timezone", "Asia/Calcutta")
                try:
                    timezone_data = timezone_data.replace("%2F", "/")
                except:
                    timezone_data = timezone_data
                try:
                    timezone_data_error = timezone_data_error.replace("%2F", "/")
                except:
                    timezone_data_error = timezone_data_error

                long = request_data["long"] if "long" in request_data else 0
                try:
                    session_id = json.loads(token)["sessionId"]
                except:
                    session_id = ""
                if search_text != "":
                    thread_logs = threading.Thread(
                        target=category_search_logs,
                        args=(
                            "",
                            "",
                            "",
                            "4",
                            user_id,
                            1,
                            "",
                            lat,
                            long,
                            "",
                            "",
                            search_text,
                            DINE_STORE_CATEGORY_ID,
                            "",
                            session_id,
                            store_id,
                            False,
                            "",
                            "",
                        ),
                    )
                    thread_logs.start()
                else:
                    pass
                zone_id = (
                    request_data["z_id"] if "z_id" in request_data else "5df8b6ea8798dc19d926bd28"
                )
                if store_id == "":
                    response = {
                        "data": {},
                        "message": "store id is missing or blank",
                        "penCount": 0,
                    }
                    return JsonResponse(response, safe=False, status=422)
                else:
                    try:
                        current_time = datetime.datetime.now(pytz.timezone(timezone_data_error))
                    except:
                        current_time = datetime.datetime.now()
                    current_hour = current_time.hour
                    start_store = time.time()
                    
                    if int(current_hour) >= 0 and int(current_hour) < 5:
                        current_text = "latenightdinner"
                    elif int(current_hour) >= 5 and int(current_hour) < 10:
                        current_text = "breakfast"
                    elif int(current_hour) >= 10 and int(current_hour) < 11:
                        current_text = "brunch"
                    elif int(current_hour) >= 11 and int(current_hour) < 15:
                        current_text = "lunch"
                    elif int(current_hour) >= 15 and int(current_hour) < 19:
                        current_text = "tea"
                    else:
                        current_text = "dinner"

                    store_details_json = db.stores.find_one(
                        {
                            "_id": ObjectId(store_id)
                        },
                        {
                            "averageCostForMealForTwo": 1,
                            "favouriteUsers": 1,
                            "safetyStandards": 1,
                            "businessLocationAddress": 1,
                            "specialities": 1,
                            "storeName": 1,
                            "storeFrontTypeId": 1,
                            "uniqStoreId": 1,
                            "storeIsOpen": 1,
                            "nextCloseTime": 1,
                            "nextOpenTime": 1,
                            "serviceZones": 1,
                            "logoImages": 1,
                            "bannerImages": 1,
                            "listingImage": 1,
                            "cityId": 1,
                            "minimumOrder": 1,
                            "citiesOfOperation": 1,
                            "freeDeliveryAbove": 1,
                            "safetyStandardsSortDiscription": 1,
                            "safetyStandardsDynamicContent": 1,
                            "averageDeliveryTimeInMins": 1,
                            "supportedOrderTypes": 1,
                            "driverTypeId": 1,
                            "driverType": 1,
                            "storeType": 1,
                            "currencySymbol": 1,
                            "currencyCode": 1,
                            "tableReservations": 1,
                            "priceForBookingTable":1,
                            
                        }
                    )
                    offer_details = db.offers.find(
                        {
                            "storeId": {"$in": [str(store_id)]}, "status": 1
                        },
                        {
                            "termscond": 1,
                            "name": 1,
                            "discountValue": 1,
                            "offerType": 1,
                            "webimages": 1,
                            "images": 1
                        }
                    )
                    offer_json = []
                    cusine_name = ""
                    for offer in offer_details:
                        terms_condition = html2text.html2text(offer["termscond"])
                        offer_json.append(
                            {
                                "offerName": offer["name"][language]
                                if language in offer["name"]
                                else offer["name"]["en"],
                                "termscond": terms_condition,
                                "offerId": str(offer["_id"]),
                                "discountValue": int(offer["discountValue"]),
                                "offerType": offer["offerType"],
                                "webimages": offer["webimages"],
                                "images": offer["images"],
                            }
                        )
                    if len(offer_json) > 0:
                        best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                        if best_offer_store["offerType"] == 0:
                            percentage_text = (
                                    str(best_offer_store["discountValue"]) + "%" + " " + "off"
                            )
                        else:
                            percentage_text = "₹" + str(best_offer_store["discountValue"]) + " off"
                        offer_name = best_offer_store["offerName"]
                    else:
                        best_offer_store = {}
                        offer_name = ""
                        percentage_text = ""

                    if store_details_json != None:
                        if "averageCostForMealForTwo" in store_details_json:
                            cost_for_two = store_details_json["averageCostForMealForTwo"]
                        else:
                            cost_for_two = 0

                        if "favouriteUsers" in store_details_json:
                            if user_id in store_details_json["favouriteUsers"]:
                                favourite_store = True
                            else:
                                favourite_store = False
                        else:
                            favourite_store = False
                        if "safetyStandards" in store_details_json:
                            if int(store_details_json["safetyStandards"]) == 0:
                                safety_standard = False
                                safety_standards_sort_discription = ""
                                safety_standards_dynamic_content = ""
                            else:
                                safety_standard = True
                                safety_standards_sort_discription = store_details_json[
                                    "safetyStandardsSortDiscription"
                                ] if "safetyStandardsSortDiscription" in store_details_json else ""
                                safety_standards_dynamic_content = store_details_json[
                                    "safetyStandardsDynamicContent"
                                ] if "safetyStandardsDynamicContent" in store_details_json else ""
                        else:
                            safety_standard = False
                            safety_standards_sort_discription = ""
                            safety_standards_dynamic_content = ""
                        store_lat = (
                            float(store_details_json["businessLocationAddress"]["lat"])
                            if "lat" in store_details_json["businessLocationAddress"]
                            else 0
                        )
                        store_long = (
                            float(store_details_json["businessLocationAddress"]["long"])
                            if "long" in store_details_json["businessLocationAddress"]
                            else 0
                        )
                        address = (
                            store_details_json["businessLocationAddress"]["address"]
                            if "address" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        locality = (
                            store_details_json["businessLocationAddress"]["locality"]
                            if "locality" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        post_code = (
                            store_details_json["businessLocationAddress"]["postCode"]
                            if "postCode" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        state = (
                            store_details_json["businessLocationAddress"]["state"]
                            if "state" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        country = (
                            store_details_json["businessLocationAddress"]["country"]
                            if "country" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        addressArea = (
                            store_details_json["businessLocationAddress"]["addressArea"]
                            if "addressArea" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        city = (
                            store_details_json["businessLocationAddress"]["city"]
                            if "city" in store_details_json["businessLocationAddress"]
                            else ""
                        )
                        # ===================================for the cusines=============================================
                        if "specialities" in store_details_json:
                            if len(store_details_json["specialities"]):
                                for spec in store_details_json["specialities"]:
                                    spec_data = db.specialities.find_one(
                                        {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                    )
                                    if spec_data != None:
                                        if cusine_name == "":
                                            cusine_name = (
                                                spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                        else:
                                            cusine_name = (
                                                cusine_name
                                                + ", "
                                                + spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                    else:
                                        pass
                            else:
                                pass
                        else:
                            pass

                        store_name = (
                            store_details_json["storeName"][language]
                            if language in store_details_json["storeName"]
                            else store_details_json["storeName"]["en"]
                        )

                        # ================================for more stores==================================
                        if (
                                int(store_details_json["storeFrontTypeId"]) == 6
                                or int(store_details_json["storeFrontTypeId"]) == 2
                        ):
                            more_must_query = []
                            more_should_query = []
                            if "uniqStoreId" not in store_details_json:
                                more_must_query.append(
                                    {
                                        "match": {
                                            "storeName.en": store_details_json["storeName"]["en"]
                                        }
                                    }
                                )
                            else:
                                more_must_query.append(
                                    {
                                        "match_phrase_prefix": {
                                            "uniqStoreId": store_details_json["uniqStoreId"]
                                        }
                                    }
                                )
                            more_must_query.append({"match": {"status": 1}})
                            more_must_query.append(
                                {"match": {"categoryId": DINE_STORE_CATEGORY_ID}}
                            )
                            geo_distance_sort = {
                                "_geo_distance": {
                                    "distance_type": "plane",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                    "order": "asc",
                                    "unit": "km",
                                }
                            }
                            sort_query = [geo_distance_sort]
                            more_must_query.append(
                                {
                                    "geo_distance": {
                                        "distance": "50km",
                                        "location": {"lat": float(lat), "lon": float(long)},
                                    }
                                }
                            )
                            store_more_geo_query = {
                                "query": {
                                    "bool": {
                                        "must": more_must_query,
                                        "must_not": [
                                            {"match": {"_id": str(store_details_json["_id"])}}
                                        ],
                                    }
                                },
                                "size": 100,
                                "from": 0,
                                "sort": sort_query,
                            }
                            res_more = es.search(
                                index=index_store,
                                body=store_more_geo_query,
                                filter_path=["hits.total", "hits.hits._id", "hits.hits._source"],
                            )
                            more_seller_count = res_more["hits"]["total"]["value"]
                        else:
                            more_seller_count = 0
                        # ============================query for get the distance by geo query==============
                        store_must_query = []

                        store_must_query.append({"match": {"_id": str(store_details_json["_id"])}})
                        geo_distance_sort = {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {"lat": float(lat), "lon": float(long)},
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                        sort_query = [geo_distance_sort]
                        store_must_query.append(
                            {
                                "geo_distance": {
                                    "distance": "50km",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                }
                            }
                        )
                        store_geo_query = {
                            "query": {
                                "bool": {
                                    "must": store_must_query,
                                }
                            },
                            "size": 1,
                            "from": 0,
                            "sort": sort_query,
                        }
                        res = es.search(
                            index=index_store,
                            body=store_geo_query,
                            filter_path=[
                                "hits.total",
                                "hits.hits._id",
                                "hits.hits.sort",
                                "hits.hits._source",
                            ],
                        )
                        if res["hits"]["total"]["value"] > 0:
                            if "hits" in res["hits"]:
                                for seller in res["hits"]["hits"]:
                                    distance_km = round(seller["sort"][0], 2)
                                    distance_miles = round(distance_km * conv_fac, 2)
                            else:
                                distance_km = 0
                                distance_miles = 0
                        else:
                            distance_km = 0
                            distance_miles = 0

                        store_id = str(store_details_json["_id"])
                        # =====================================about store tags=================================
                        if "storeIsOpen" in store_details_json:
                            store_is_open = store_details_json["storeIsOpen"]
                        else:
                            store_is_open = False

                        if "nextCloseTime" in store_details_json:
                            next_close_time = store_details_json["nextCloseTime"]
                        else:
                            next_close_time = ""

                        if "nextOpenTime" in store_details_json:
                            next_open_time = store_details_json["nextOpenTime"]
                        else:
                            next_open_time = ""

                        try:
                            if "timeZoneWorkingHour" in seller["_source"]:
                                timeZoneWorkingHour = seller["_source"]['timeZoneWorkingHour']
                            else:
                                timeZoneWorkingHour = ""
                        except:
                            timeZoneWorkingHour = ""

                        if any(
                                supplier["zoneId"] == str(zone_id)
                                for supplier in store_details_json["serviceZones"]
                        ):
                            is_delivery = True
                            if next_close_time == "" and next_open_time == "":
                                is_temp_close = True
                                store_tag = "Temporarily Closed"
                            elif next_open_time != "" and store_is_open == False:
                                is_temp_close = False
                                # next_open_time = int(next_open_time + timezone * 60)
                                next_open_time = time_zone_converter(timezone_data, next_open_time, timeZoneWorkingHour)
                                local_time = datetime.datetime.fromtimestamp(next_open_time)
                                next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                                next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                                if next_day_midnight_timestamp > next_open_time:
                                    open_time = local_time.strftime("%I:%M %p")
                                    store_tag = "Opens Next At " + open_time
                                else:
                                    open_time = local_time.strftime("%I:%M %p")
                                    store_tag = "Opens Tomorrow At " + open_time
                            else:
                                is_temp_close = False
                                store_tag = ""
                        else:
                            is_temp_close = True
                            is_delivery = False
                            next_open_time = ""
                            next_close_time = ""
                            store_is_open = False
                            store_tag = "Does Not Deliver To Selected Location"

                        avg_rating_value = 0
                        seller_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "sellerId": str(store_details_json["_id"]),
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_rating in seller_rating:
                            avg_rating_value = avg_rating["avgRating"]

                        store_details = {
                            "lat": store_lat,
                            "long": store_long,
                            "isFavourite": favourite_store,
                            "offer": best_offer_store,
                            "address": address,
                            "locality": locality,
                            "addressArea": addressArea,
                            "isTempClose": is_temp_close,
                            "offerName": offer_name,
                            "safetyStandards": safety_standard,
                            "safetyStandardsSortDiscription": safety_standards_sort_discription,
                            "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                            "cuisines": cusine_name,
                            "averageCostForMealForTwo": cost_for_two,
                            "logoImages": store_details_json["logoImages"],
                            "bannerImages": store_details_json["bannerImages"],
                            "listingImage": store_details_json["listingImage"]
                            if "listingImage" in store_details_json
                            else {},
                            "priceForBookingTable": store_details_json['priceForBookingTable'] if 'priceForBookingTable'in store_details_json else 0,
                            "tableReservations": store_details_json['tableReservations'] if 'tableReservations'in store_details_json else False,
                            "cityId": store_details_json["cityId"],
                            "minimumOrder": store_details_json["minimumOrder"],
                            "citiesOfOperation": store_details_json["citiesOfOperation"],
                            "freeDeliveryAbove": store_details_json["freeDeliveryAbove"]
                            if "freeDeliveryAbove" in store_details_json
                            else 0,
                            "averageDeliveryTime": str(
                                store_details_json["averageDeliveryTimeInMins"]
                            )
                                                   + " "
                                                   + "Mins"
                            if "averageDeliveryTimeInMins" in store_details_json
                            else "",
                            "nextCloseTime": next_close_time,
                            "nextOpenTime": next_open_time,
                            "supportedOrderTypes": store_details_json["supportedOrderTypes"]
                            if "supportedOrderTypes" in store_details_json
                            else 3,
                            "avgRating": round(avg_rating_value, 2),
                            "storeIsOpen": store_is_open,
                            "storeTag": store_tag,
                            "driverTypeId": store_details_json["driverTypeId"]
                            if "driverTypeId" in store_details_json
                            else 0,
                            "driverType": store_details_json["driverType"]
                            if "driverType" in store_details_json
                            else "",
                            "storeType": store_details_json["storeType"]
                            if "storeType" in store_details_json
                            else "Food",
                            "postCode": post_code,
                            "percentageText": percentage_text,
                            "state": state,
                            "moreSellerCount": more_seller_count,
                            "country": country,
                            "city": city,
                            "distanceKm": round(distance_km, 2),
                            "distanceMiles": distance_miles,
                            "currencySymbol": store_details_json["currencySymbol"]
                            if "currencySymbol" in store_details_json
                            else "₹",
                            "currency": store_details_json["currencyCode"]
                            if "currencyCode" in store_details_json
                            else "INR",
                            "distanceMiles": distance_miles,
                            "storeName": store_name,
                            "storeId": store_id,
                        }
                        print(start_store)
                        print(int(time.time()))
                        print('time---', int(time.time()) - start_store)
                        # =========================================================query for the get the products=======================================
                        must_query.append({"terms": {"status": [1, 2]}})
                        must_query.append({"match": {"storeId": str(store_id)}})
                        must_query.append({"match": {"units.isPrimary": True}})
                        if search_text != "":
                            # must_query.append({"match_phrase_prefix": {"pPName." + language: search_text}})
                            # ===========================product name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "pPName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "pPName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            # ===========================unit name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "units.unitName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "units.unitName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )

                        if meal_available == True:
                            must_query.append(
                                {"match": {"mealConsumptionTime." + str(current_text): True}}
                            )
                        if contains_meat != True:
                            must_query.append({"match": {"containsMeat": contains_meat}})
                        bool_query = {"must": must_query}
                        if len(should_query) > 0:
                            bool_query["should"] = should_query
                            bool_query["minimum_should_match"] = 1
                            bool_query["boost"] = 1.0
                        else:
                            pass
                        # ==============================category+subcategory wise grouping=================
                        # query = {
                        #     "query": {"bool": bool_query},
                        #     "aggs": {
                        #         "group_by_catName": {
                        #             "terms": {
                        #                 "field": "categoryList.parentCategory.categoryName.en.keyword",
                        #                 "size": 100,
                        #             },
                        #             "aggs": {
                        #                 "top_sub_cat_name": {
                        #                     "terms": {
                        #                         # "field": "categoryList.parentCategory.childCategory.categoryName.en.keyword",
                        #                         "field": "categoryList.parentCategory.childCategory.categoryId.keyword",
                        #                         "size": 100,
                        #                     },
                        #                     "aggs": {
                        #                         "top_sales_hits": {
                        #                             "top_hits": {
                        #                                 "_source": {
                        #                                     "includes": [
                        #                                         "_id",
                        #                                         "parentProductId",
                        #                                         "firstCategoryId",
                        #                                         "catName",
                        #                                         "secondCategoryId",
                        #                                         "subCatName",
                        #                                         "childproductid",
                        #                                         "storeId",
                        #                                         "thirdCategoryId",
                        #                                         "detailDescription",
                        #                                         "subSubCatName",
                        #                                         "offer",
                        #                                         "images",
                        #                                         "suppliers",
                        #                                         "containsMeat",
                        #                                         "consumptionTime",
                        #                                         "currencySymbol",
                        #                                         "currency",
                        #                                         "tax",
                        #                                         "units",
                        #                                         "pName",
                        #                                         "storeCategoryId",
                        #                                     ]
                        #                                 },
                        #                                 "size": 100,
                        #                             }
                        #                         }
                        #                     },
                        #                 }
                        #             },
                        #         }
                        #     },
                        # }
                        query_time = time.time()
                        query = {
                            "query": {"bool": bool_query},
                             "aggs": {
                                "group_by_catName": {
                                "terms": {
                                    "field": "categoryList.parentCategory.categoryName.en.keyword",
                                    "size": 100
                                },
                                "aggs": {
                                    "top_sub_cat_name": {
                                    "terms": {
                                        "field": "categoryList.parentCategory.childCategory.categoryId.keyword",
                                        "size": 100
                                    },
                                    "aggs": {
                                        "check_missing_sub_cat": {
                                        "bucket_selector": {
                                            "buckets_path": {
                                            "count": "_count"
                                            },
                                            "script": "if (params.count > 0) { return true; } else { return false; }"
                                        }
                                        },
                                        "top_sales_hits": {
                                        "top_hits": {
                                            "_source": {
                                            "includes": [
                                                "_id",
                                                "parentProductId",
                                                "firstCategoryId",
                                                "catName",
                                                "secondCategoryId",
                                                "subCatName",
                                                "childproductid",
                                                "storeId",
                                                "thirdCategoryId",
                                                "detailDescription",
                                                "subSubCatName",
                                                "offer",
                                                "images",
                                                "suppliers",
                                                "containsMeat",
                                                "consumptionTime",
                                                "currencySymbol",
                                                "currency",
                                                "tax",
                                                "units",
                                                "pName",
                                                "storeCategoryId"
                                            ]
                                            },
                                            "size": 100
                                        }
                                        }
                                    }
                                    },
                                    "check_missing_top_sub_cat": {
                                    "missing": {
                                        "field": "categoryList.parentCategory.childCategory.categoryId.keyword"
                                    }
                                    },
                                    "fallback_to_group_by_catName": {
                                    "terms": {
                                        "field": "categoryList.parentCategory.categoryId.keyword",
                                        "size": 100
                                    },
                                    "aggs": {
                                        "top_sales_hits_fallback": {
                                        "top_hits": {
                                            "_source": {
                                            "includes": [
                                                "_id",
                                                "parentProductId",
                                                "firstCategoryId",
                                                "catName",
                                                "secondCategoryId",
                                                "subCatName",
                                                "childproductid",
                                                "storeId",
                                                "thirdCategoryId",
                                                "detailDescription",
                                                "subSubCatName",
                                                "offer",
                                                "images",
                                                "suppliers",
                                                "containsMeat",
                                                "consumptionTime",
                                                "currencySymbol",
                                                "currency",
                                                "tax",
                                                "units",
                                                "pName",
                                                "storeCategoryId"
                                            ]
                                            },
                                            "size": 100
                                        }
                                        }
                                    }
                                    }
                                }
                                }
                            }
                        }
                        print(query)
                        res = es.search(index=index_products, body=query)
                        print('query exicute time :', time.time() - query_time)
                        favourite_data = []
                        recomended_data = []
                        category_details = []
                        count = 2
                        sub_cate_time = time.time()
                        for bucket in res["aggregations"]["group_by_catName"]["buckets"]:
                            category_name = bucket["key"]
                            main_category_details_data = db.category.find_one(
                                {
                                    "categoryName.en": category_name,
                                    "status": 1,
                                    "storeid": {"$in": [store_id]},
                                }
                            )
                            if main_category_details_data is None:
                                main_category_details_data = db.category.find_one(
                                    {
                                        "categoryName.en": category_name,
                                        "status": 1,
                                        "storeId": store_id,
                                    }
                                )
                            # if main_category_details_data is None:
                            #     main_category_details_data = db.category.find_one(
                            #         {
                            #             "categoryName.en": category_name
                            #         }
                            #     )
                            category_data = []
                            pen_count_product = 0
                            if main_category_details_data is not None:
                                count = count + 1
                                if len(bucket["top_sub_cat_name"]["buckets"]) > 0:
                                    for hits_bucket in bucket["top_sub_cat_name"]["buckets"]:
                                        sub_cat_id = hits_bucket["key"]
                                        category_details_data = db.category.find_one(
                                            {
                                                "_id": ObjectId(sub_cat_id),
                                                "status": 1,
                                                "storeid": {"$in": [store_id]},
                                            }
                                        )
                                        if category_details_data is None:
                                            category_details_data = db.category.find_one(
                                                {"_id": ObjectId(sub_cat_id), "status": 1},
                                                {"categoryName":1}
                                            )
                                        if category_details_data is not None:
                                            # sub_cat_name = hits_bucket['key']
                                            sub_cat_name = category_details_data["categoryName"]["en"]
                                            doc_count = hits_bucket["doc_count"]
                                            product_data = []
                                            for hits in hits_bucket["top_sales_hits"]["hits"]["hits"]:
                                                try:
                                                    tax_value = []
                                                    # =========================for addons=======================================
                                                    # try:
                                                    #     if "addOns" in hits["_source"]["units"][0]:
                                                    #         if (hits["_source"]["units"][0]["addOns"]!= None):
                                                    #             if (
                                                    #                     len(
                                                    #                         hits["_source"]["units"][0][
                                                    #                             "addOns"
                                                    #                         ]
                                                    #                     )
                                                    #                     > 0
                                                    #             ):
                                                    #                 addons_count = True
                                                    #             else:
                                                    #                 addons_count = False
                                                    #         else:
                                                    #             addons_count = False
                                                    #     else:
                                                    #         addons_count = False
                                                    # except:
                                                    #     addons_count = False
                                                    try:
                                                        addons_count = bool(hits["_source"]["units"][0].get("addOns", 0))
                                                    except:
                                                        addons_count = False
                                                    if addons_count == False:
                                                        product_count = db.childProducts.find(
                                                            {
                                                                "storeId": ObjectId(
                                                                    hits["_source"]["storeId"]
                                                                ),
                                                                "parentProductId": hits["_source"][
                                                                    "parentProductId"
                                                                ],
                                                                "status": 1,
                                                            }
                                                        ).count()
                                                        if product_count > 1:
                                                            addons_count = True

                                                    best_supplier = {}
                                                    best_supplier["id"] = hits["_source"]["storeId"]
                                                    best_supplier["productId"] = hits["_id"]
                                                    try:
                                                        best_supplier["retailerQty"] = (
                                                            hits["_source"]["units"][0][
                                                                "availableQuantity"
                                                            ]
                                                            if hits["_source"]["units"][0][
                                                                "availableQuantity"
                                                            ]
                                                            != ""
                                                            else 0
                                                        )
                                                    except:
                                                        best_supplier["retailerQty"] = 0

                                                    try:
                                                        best_supplier["distributorQty"] = (
                                                            hits["_source"]["units"][0]["distributor"][
                                                                "availableQuantity"
                                                            ]
                                                            if hits["_source"]["units"][0][
                                                                "distributor"
                                                            ]["availableQuantity"]
                                                            != ""
                                                            else 0
                                                        )
                                                    except:
                                                        best_supplier["distributorQty"] = 0

                                                    try:
                                                        best_supplier["retailerPrice"] = (
                                                            hits["_source"]["units"][0]["b2cPricing"][
                                                                0
                                                            ]["b2cproductSellingPrice"]
                                                            if "b2cproductSellingPrice"
                                                            in hits["_source"]["units"][0][
                                                                "b2cPricing"
                                                            ][0]
                                                            else hits["_source"]["units"][0][
                                                                "floatValue"
                                                            ]
                                                        )
                                                    except:
                                                        best_supplier["retailerPrice"] = hits[
                                                            "_source"
                                                        ]["units"][0]["floatValue"]

                                                    try:
                                                        best_supplier["distributorPrice"] = (
                                                            hits["_source"]["units"][0]["b2bPricing"][
                                                                0
                                                            ]["b2bproductSellingPrice"]
                                                            if "b2bproductSellingPrice"
                                                            in hits["_source"]["units"][0][
                                                                "b2bPricing"
                                                            ][0]
                                                            else hits["_source"]["units"][0][
                                                                "floatValue"
                                                            ]
                                                        )
                                                    except:
                                                        best_supplier["distributorPrice"] = hits[
                                                            "_source"
                                                        ]["units"][0]["floatValue"]

                                                    if len(best_supplier) > 0:
                                                        # ===========================tax for the product=========================================================
                                                        tax_details = db.childProducts.find_one(
                                                            {
                                                                "_id": ObjectId(
                                                                    best_supplier["productId"]
                                                                )
                                                            },
                                                            {
                                                                "detailDescription":1,
                                                                "offer": 1,
                                                                "currency": 1,
                                                                "pName": 1,
                                                                "units": 1,
                                                                "mealConsumptionTime": 1,
                                                                "tax": 1,
                                                                "currencySymbol": 1,
                                                                "status": 1,
                                                                "parentProductId": 1,
                                                                "images": 1
                                                            }
                                                        )
                                                        # detail_description = (
                                                        #     tax_details["detailDescription"][language]
                                                        #     if language
                                                        #     in tax_details["detailDescription"]
                                                        #     else tax_details["detailDescription"]["en"]
                                                        # )
                                                        # if detail_description == None:
                                                        #     detail_description = ""
                                                        try:
                                                            detail_description = tax_details["detailDescription"].get(language, tax_details["detailDescription"].get("en", ""))
                                                            detail_description = "" if detail_description is None else detail_description
                                                        except:
                                                            detail_description = ""
                                                        # =================================price calculation===================================================================
                                                        price = best_supplier["retailerPrice"]
                                                        if type(price) == str:
                                                            price = float(price)

                                                        tax_price = 0
                                                        offer_data = []
                                                        # if tax_details != None:
                                                        #     if "offer" in tax_details:
                                                        #         for offer in tax_details["offer"]:
                                                        #             if offer["status"] == 1:
                                                        #                 offer_terms = (
                                                        #                     db.offers.find_one(
                                                        #                         {
                                                        #                             "_id": ObjectId(
                                                        #                                 offer["offerId"]
                                                        #                             )
                                                        #                         }
                                                        #                     )
                                                        #                 )
                                                        #                 if offer_terms != None:
                                                        #                     terms_condition = (
                                                        #                         html2text.html2text(
                                                        #                             offer_terms[
                                                        #                                 "termscond"
                                                        #                             ]
                                                        #                         )
                                                        #                     )
                                                        #                     offer[
                                                        #                         "termscond"
                                                        #                     ] = terms_condition
                                                        #                     if offer_terms[
                                                        #                         "startDateTime"
                                                        #                     ] <= int(time.time()):
                                                        #                         offer_data.append(offer)
                                                        #                 else:
                                                        #                     pass
                                                        #             else:
                                                        #                 pass
                                                        # else:
                                                        #     pass

                                                        # if len(offer_data) > 0:
                                                        #     best_offer = max(
                                                        #         offer_data,
                                                        #         key=lambda x: x["discountValue"],
                                                        #     )
                                                        # else:
                                                        #     best_offer = {}

                                                        # if len(best_offer) == 0:
                                                        #     percentage = 0
                                                        #     discount_type = 0
                                                        # else:
                                                        #     if "discountType" in best_offer:
                                                        #         percentage = int(
                                                        #             best_offer["discountValue"]
                                                        #         )
                                                        #         discount_type = best_offer[
                                                        #             "discountType"
                                                        #         ]
                                                        #     else:
                                                        #         percentage = 0
                                                        #         discount_type = 0
                                                        try:
                                                            if tax_details is not None and "offer" in tax_details and tax_details['offer'] != "":
                                                                for offer in tax_details["offer"]:
                                                                    if offer["status"] == 1:
                                                                        offer_terms = db.offers.find_one({"_id": ObjectId(offer["offerId"])}, {"termscond":1 , "startDateTime":1})
                                                                        if offer_terms:
                                                                            terms_condition = html2text.html2text(offer_terms["termscond"])
                                                                            offer["termscond"] = terms_condition
                                                                            if offer_terms["startDateTime"] <= int(time.time()):
                                                                                offer_data.append(offer)

                                                            if offer_data:
                                                                best_offer = max(offer_data, key=lambda x: x.get("discountValue", 0))
                                                            else:
                                                                best_offer = {}
                                                        except Exception as e:
                                                            print(e)
                                                            tax_price = 0
                                                            offer_data = []

                                                        percentage = best_offer.get("discountValue", 0) if best_offer else 0
                                                        discount_type = best_offer.get("discountType", 0) if best_offer else 0
                                                        # if tax_details != None:
                                                        #     if type(tax_details["tax"]) == list:
                                                        #         for tax in tax_details["tax"]:
                                                        #             tax_value.append(
                                                        #                 {"value": tax["taxValue"]}
                                                        #             )
                                                        #     else:
                                                        #         if tax_details["tax"] != None:
                                                        #             if "taxValue" in tax_details["tax"]:
                                                        #                 tax_value.append(
                                                        #                     {
                                                        #                         "value": tax_details[
                                                        #                             "tax"
                                                        #                         ]["taxValue"]
                                                        #                     }
                                                        #                 )
                                                        #             else:
                                                        #                 tax_value.append(
                                                        #                     {
                                                        #                         "value": tax_details[
                                                        #                             "tax"
                                                        #                         ]
                                                        #                     }
                                                        #                 )
                                                        #         else:
                                                        #             pass
                                                        # else:
                                                        #     pass
                                                        # tax_price = 0
                                                        try:
                                                            tax_value = []
                                                            if tax_details and "tax" in tax_details:
                                                                if isinstance(tax_details["tax"], list):
                                                                    for tax in tax_details["tax"]:
                                                                        tax_value.append({"value": tax.get("taxValue", 0)})
                                                                elif tax_details["tax"]:
                                                                    tax_value.append({"value": tax_details["tax"].get("taxValue", tax_details["tax"])})

                                                            tax_price = 0
                                                        except Exception as e:
                                                            print(e)
                                                            tax_price = 0
                                                        # ==================================get currecny rate============================
                                                        try:
                                                            currency_rate = currency_exchange_rate[
                                                                str(tax_details["currency"])
                                                                + "_"
                                                                + str(currency_code)
                                                                ]
                                                        except:
                                                            currency_rate = 0
                                                        currency_details = db.currencies.find_one(
                                                            {"currencyCode": currency_code},
                                                            {"currencyCode": 1, "currencyCode": 1}
                                                        )
                                                        if currency_details is not None:
                                                            currency_symbol = currency_details[
                                                                "currencySymbol"
                                                            ]
                                                            currency = currency_details["currencyCode"]
                                                        else:
                                                            currency_symbol = tax_details[
                                                                "currencySymbol"
                                                            ]
                                                            currency = tax_details["currency"]

                                                        if float(currency_rate) > 0:
                                                            price = price * float(currency_rate)

                                                        tax_price_data = price + (
                                                                (price * tax_price) / 100
                                                        )
                                                        if discount_type == 0:
                                                            discount_price = float(percentage)
                                                        elif discount_type == 1:
                                                            discount_price = (
                                                                                    float(tax_price_data)
                                                                                    * float(percentage)
                                                                            ) / 100
                                                        else:
                                                            discount_price = 0
                                                        base_price = tax_price_data - discount_price

                                                        try:
                                                            ch_pro = db.childProducts.find_one(
                                                                {"_id": ObjectId(str(best_supplier["productId"]))},
                                                                {"isMembersOnly": 1, "units": 1})
                                                            isMembersOnly = ch_pro.get("isMembersOnly", False)
                                                            nonMemberPrice = ch_pro["units"][0][
                                                                "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                                                ch_pro["units"][
                                                                                                    0] else round(
                                                                discount_price, 2)
                                                            memberPrice = ch_pro["units"][0][
                                                                "memberPrice"] if "memberPrice" in ch_pro["units"][
                                                                0] else round(discount_price, 2)
                                                        except:
                                                            isMembersOnly = False
                                                            nonMemberPrice = round(discount_price, 2)
                                                            memberPrice = round(discount_price, 2)

                                                        final_price_list = {
                                                            "basePrice": round(tax_price_data, 2),
                                                            "finalPrice": round(base_price, 2),
                                                            "discountPrice": round(discount_price, 2),
                                                            "discountPercentage": percentage,
                                                            "discountPriceForNonMembers": nonMemberPrice,
                                                            "memberPrice": memberPrice
                                                        }
                                                        try:
                                                            response_casandra = session.execute(
                                                                """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                                {
                                                                    "userid": user_id,
                                                                    "productid": str(
                                                                        best_supplier["productId"]
                                                                    ),
                                                                },
                                                            )

                                                            if not response_casandra:
                                                                response_casandra = session.execute(
                                                                    """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                                    {
                                                                        "userid": user_id,
                                                                        "productid": str(
                                                                            hits["_source"][
                                                                                "childproductid"
                                                                            ]
                                                                        ),
                                                                    },
                                                                )
                                                                if not response_casandra:
                                                                    isFavourite = False
                                                                else:
                                                                    isFavourite = True
                                                            else:
                                                                for fav in response_casandra:
                                                                    isFavourite = True
                                                        except Exception as e:
                                                            print(e)
                                                            isFavourite = False
                                                            response_casandra = None
                                                        # =================================recomanded products===========================

                                                        try:
                                                            product_name = (
                                                                tax_details["pName"][language]
                                                                if language in tax_details["pName"]
                                                                else tax_details["pName"]["en"]
                                                            )
                                                        except:
                                                            product_name = (
                                                                tax_details["units"][0]["unitName"][
                                                                    language
                                                                ]
                                                                if language
                                                                in tax_details["units"][0]["unitName"]
                                                                else tax_details["units"][0][
                                                                    "unitName"
                                                                ]["en"]
                                                            )

                                                        (
                                                            currency_symbol,
                                                            currency,
                                                            product_status,
                                                            product_tag,
                                                        ) = next_availbale_time(
                                                            best_supplier["productId"]
                                                        )
                                                        if tax_details["status"] == 1:
                                                            if "mealConsumptionTime" in tax_details:
                                                                if (
                                                                        current_text
                                                                        in tax_details[
                                                                    "mealConsumptionTime"
                                                                ]
                                                                ):
                                                                    pass
                                                                elif (
                                                                        len(
                                                                            tax_details[
                                                                                "mealConsumptionTime"
                                                                            ]
                                                                        )
                                                                        > 0
                                                                ):
                                                                    if (
                                                                            int(current_hour) >= 0
                                                                            and int(current_hour) < 5
                                                                    ):
                                                                        current_text = "latenightdinner"
                                                                        currenct_text_value = [
                                                                            "breakfast",
                                                                            "brunch",
                                                                            "lunch",
                                                                            "tea",
                                                                            "dinner",
                                                                        ]
                                                                    elif (
                                                                            int(current_hour) >= 5
                                                                            and int(current_hour) < 10
                                                                    ):
                                                                        current_text = "breakfast"
                                                                        currenct_text_value = [
                                                                            "brunch",
                                                                            "lunch",
                                                                            "tea",
                                                                            "dinner",
                                                                        ]
                                                                    elif (
                                                                            int(current_hour) >= 10
                                                                            and int(current_hour) < 11
                                                                    ):
                                                                        current_text = "brunch"
                                                                        currenct_text_value = [
                                                                            "lunch",
                                                                            "tea",
                                                                            "dinner",
                                                                        ]
                                                                    elif (
                                                                            int(current_hour) >= 11
                                                                            and int(current_hour) < 15
                                                                    ):
                                                                        current_text = "lunch"
                                                                        currenct_text_value = [
                                                                            "tea",
                                                                            "dinner",
                                                                        ]
                                                                    elif (
                                                                            int(current_hour) >= 15
                                                                            and int(current_hour) < 19
                                                                    ):
                                                                        current_text = "tea"
                                                                        currenct_text_value = ["dinner"]
                                                                    else:
                                                                        current_text = "dinner"
                                                                        currenct_text_value = []
                                                                    for k, v in tax_details[
                                                                        "mealConsumptionTime"
                                                                    ].items():
                                                                        if k in currenct_text_value:
                                                                            product_status = True
                                                                            next_day = (
                                                                                datetime.datetime.now()
                                                                            )
                                                                            next_day_midnight = (
                                                                                next_day.replace(
                                                                                    hour=int(
                                                                                        meal_timing[k]
                                                                                    ),
                                                                                    minute=00,
                                                                                    second=00,
                                                                                )
                                                                            )
                                                                            open_time = next_day_midnight.strftime(
                                                                                "%I:%M %p"
                                                                            )
                                                                            product_tag = (
                                                                                    "Available On Today At "
                                                                                    + open_time
                                                                            )
                                                                        else:
                                                                            product_status = True
                                                                            next_day = (
                                                                                    datetime.datetime.now()
                                                                                    + datetime.timedelta(
                                                                                days=1
                                                                            )
                                                                            )
                                                                            next_day_midnight = (
                                                                                next_day.replace(
                                                                                    hour=meal_timing[k],
                                                                                    minute=00,
                                                                                    second=00,
                                                                                )
                                                                            )
                                                                            open_time = next_day_midnight.strftime(
                                                                                "%I:%M %p"
                                                                            )
                                                                            product_tag = (
                                                                                    "Next available at "
                                                                                    + open_time
                                                                                    + " tomorrow"
                                                                            )
                                                                else:
                                                                    product_tag = ""
                                                                    product_status = False
                                                            else:
                                                                pass
                                                        else:
                                                            pass

                                                        json_data = {
                                                            "parentProductId": str(
                                                                tax_details["parentProductId"]
                                                            ),
                                                            "childProductId": best_supplier[
                                                                "productId"
                                                            ],
                                                            "unitId": best_supplier["productId"],
                                                            "catName": category_name,
                                                            "offers": best_offer,
                                                            "productStatus": product_status,
                                                            "productTag": product_tag,
                                                            "finalPriceList": final_price_list,
                                                            "addOnsCount": addons_count,
                                                            "detailDescription": detail_description,
                                                            "isFavourite": isFavourite,
                                                            "productName": product_name,
                                                            "images": tax_details["images"],
                                                            "containsMeat": tax_details["containsMeat"]
                                                            if "containsMeat" in tax_details
                                                            else False,
                                                            "currencySymbol": currency_symbol,
                                                            "currency": currency,
                                                            "availableQuantity": best_supplier[
                                                                "retailerQty"
                                                            ],
                                                            "isMembersOnly": isMembersOnly
                                                        }

                                                        if "consumptionTime" in tax_details:
                                                            if (
                                                                    current_text
                                                                    in tax_details["consumptionTime"]
                                                                    and product_status == False
                                                            ):
                                                                recomended_data.append(json_data)
                                                        else:
                                                            pass

                                                        if isFavourite == True:
                                                            favourite_data.append(json_data)
                                                        else:
                                                            pass
                                                        product_data.append(json_data)
                                                except Exception as ex:
                                                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                                    message = template.format(
                                                        type(ex).__name__, ex.args
                                                    )
                                                    print(
                                                        "Error on line {}".format(
                                                            sys.exc_info()[-1].tb_lineno
                                                        ),
                                                        type(ex).__name__,
                                                        ex,
                                                    )

                                            if len(product_data) > 0:
                                                dataframe_fav = pd.DataFrame(product_data)
                                                dataframe_fav = dataframe_fav.drop_duplicates(
                                                    subset="childProductId", keep="last"
                                                )
                                                new_fav_list = dataframe_fav.to_dict(orient="records")
                                                pen_count_product = pen_count_product + len(
                                                    new_fav_list
                                                )
                                                category_data.append(
                                                    {
                                                        "name": sub_cat_name,
                                                        "penCount": len(new_fav_list),
                                                        "products": new_fav_list,
                                                    }
                                                )
                                            else:
                                                pass
                                    if len(category_data) > 0:
                                        category_details.append(
                                            {
                                                "catName": category_name,
                                                "isSubCategories": True,
                                                "products": [],
                                                "subCategories": category_data,
                                                "seqId": count,
                                            }
                                        )
                                        recommanded_details.append(
                                            {
                                                "catName": category_name,
                                                "penCount": pen_count_product,
                                                "seqId": count,
                                            }
                                        )
                                    print('subcate product time -',sub_cate_time)
                                elif len(bucket["fallback_to_group_by_catName"]["buckets"]) > 0:
                                    for bucket in bucket["fallback_to_group_by_catName"]["buckets"]:
                                        category_id = bucket["key"]
                                        parent_cat_details = db.category.find_one(
                                            {
                                                "ca": ObjectId(category_id),
                                                "status": 1
                                            }
                                        )
                                        if parent_cat_details is None:
                                            parent_cat_details = db.category.find_one(
                                                {
                                                    "_id": ObjectId(category_id)
                                                }
                                            )
                                        if parent_cat_details is not None:
                                            category_name = parent_cat_details["categoryName"]["en"]
                                            if any(category_name in d["catName"] for d in category_details):
                                                pass
                                            else:
                                                for hits in bucket["top_sales_hits_fallback"]["hits"]["hits"]:
                                                    tax_value = []
                                                    # =========================for addons=======================================
                                                    # if "addOns" in hits["_source"]["units"][0]:
                                                    #     if hits["_source"]["units"][0]["addOns"] != None:
                                                    #         if len(hits["_source"]["units"][0]["addOns"]) > 0:
                                                    #             addons_count = True
                                                    #         else:
                                                    #             addons_count = False
                                                    #     else:
                                                    #         addons_count = False
                                                    # else:
                                                    #     addons_count = False
                                                    try:
                                                        addons_count = bool(hits["_source"]["units"][0].get("addOns", []))
                                                    except:
                                                        addons_count = False
                                                    if addons_count == False:
                                                        product_count = db.childProducts.find(
                                                            {
                                                                "storeId": ObjectId(hits["_source"]["storeId"]),
                                                                "parentProductId": hits["_source"][
                                                                    "parentProductId"
                                                                ],
                                                                "status": 1,
                                                            }
                                                        ).count()
                                                        if product_count > 1:
                                                            addons_count = True
                                                    best_supplier = {}
                                                    best_supplier["id"] = hits["_source"]["storeId"]
                                                    best_supplier["productId"] = hits["_id"]
                                                    try:
                                                        best_supplier["retailerQty"] = (
                                                            hits["_source"]["units"][0]["availableQuantity"]
                                                            if hits["_source"]["units"][0]["availableQuantity"]
                                                            != ""
                                                            else 0
                                                        )
                                                    except:
                                                        best_supplier["retailerQty"] = 0

                                                    try:
                                                        best_supplier["distributorQty"] = (
                                                            hits["_source"]["units"][0]["distributor"][
                                                                "availableQuantity"
                                                            ]
                                                            if hits["_source"]["units"][0]["distributor"][
                                                                "availableQuantity"
                                                            ]
                                                            != ""
                                                            else 0
                                                        )
                                                    except:
                                                        best_supplier["distributorQty"] = 0

                                                    try:
                                                        best_supplier["retailerPrice"] = (
                                                            hits["_source"]["units"][0]["b2cPricing"][0][
                                                                "b2cproductSellingPrice"
                                                            ]
                                                            if "b2cproductSellingPrice"
                                                            in hits["_source"]["units"][0]["b2cPricing"][0]
                                                            else hits["_source"]["units"][0]["floatValue"]
                                                        )
                                                    except:
                                                        best_supplier["retailerPrice"] = hits["_source"][
                                                            "units"
                                                        ][0]["floatValue"]

                                                    try:
                                                        best_supplier["distributorPrice"] = (
                                                            hits["_source"]["units"][0]["b2bPricing"][0][
                                                                "b2bproductSellingPrice"
                                                            ]
                                                            if "b2bproductSellingPrice"
                                                            in hits["_source"]["units"][0]["b2bPricing"][0]
                                                            else hits["_source"]["units"][0]["floatValue"]
                                                        )
                                                    except:
                                                        best_supplier["distributorPrice"] = hits["_source"][
                                                            "units"
                                                        ][0]["floatValue"]

                                                    if len(best_supplier) > 0:
                                                        # Assuming tax_details is a dictionary and language is a variable containing the desired language
                                                        try:
                                                            detail_description = tax_details["detailDescription"].get(language, tax_details["detailDescription"].get("en", ""))
                                                            detail_description = "" if detail_description is None else detail_description
                                                        except:
                                                            detail_description = ""
                                                        # ===========================tax for the product=========================================================
                                                        tax_details = db.childProducts.find_one(
                                                            {"_id": ObjectId(best_supplier["productId"])},
                                                             {
                                                                "detailDescription":1,
                                                                "offer": 1,
                                                                "currency": 1,
                                                                "pName": 1,
                                                                "units": 1,
                                                                "mealConsumptionTime": 1,
                                                                "tax": 1,
                                                                "currencySymbol": 1,
                                                                "status": 1,
                                                                "parentProductId": 1,
                                                                "images": 1
                                                            }
                                                        )
                                                        if tax_details != None:
                                                            if type(tax_details["tax"]) == list:
                                                                for tax in tax_details['units'][0]["tax"]:
                                                                    tax_value.append({"value": tax["taxValue"]})
                                                            else:
                                                                if tax_details["tax"] != None:
                                                                    if "taxValue" in tax_details["tax"]:
                                                                        tax_value.append(
                                                                            {
                                                                                "value": tax_details["tax"][
                                                                                    "taxValue"
                                                                                ]
                                                                            }
                                                                        )
                                                                    else:
                                                                        tax_value.append(
                                                                            {"value": tax_details["tax"]}
                                                                        )
                                                                else:
                                                                    pass
                                                            # =================================price calculation===================================================================
                                                            price = best_supplier["retailerPrice"]
                                                            if type(price) == str:
                                                                price = float(price)

                                                            tax_price = 0
                                                            offer_data = []
                                                            # if "offer" in tax_details:
                                                            #     for offer in tax_details["offer"]:
                                                            #         if offer["status"] == 1:
                                                            #             offer_terms = db.offers.find_one(
                                                            #                 {
                                                            #                     "_id": ObjectId(
                                                            #                         offer["offerId"]
                                                            #                     ),
                                                            #                     "storeId": store_id,
                                                            #                     "status": 1,
                                                            #                 }
                                                            #             )
                                                            #             if offer_terms != None:
                                                            #                 terms_condition = (
                                                            #                     html2text.html2text(
                                                            #                         offer_terms["termscond"]
                                                            #                     )
                                                            #                 )
                                                            #                 if offer_terms[
                                                            #                     "startDateTime"
                                                            #                 ] <= int(time.time()):
                                                            #                     offer[
                                                            #                         "termscond"
                                                            #                     ] = terms_condition
                                                            #                     offer_data.append(offer)
                                                            #             else:
                                                            #                 pass
                                                            #         else:
                                                            #             pass
                                                            # else:
                                                            #     pass

                                                            # if len(offer_data) > 0:
                                                            #     best_offer = max(
                                                            #         offer_data, key=lambda x: x["discountValue"]
                                                            #     )
                                                            # else:
                                                            #     best_offer = {}

                                                            # if len(best_offer) == 0:
                                                            #     percentage = 0
                                                            #     discount_type = 0
                                                            # else:
                                                            #     if "discountType" in best_offer:
                                                            #         percentage = int(
                                                            #             best_offer["discountValue"]
                                                            #         )
                                                            #         discount_type = best_offer["discountType"]
                                                            #     else:
                                                            #         percentage = 0
                                                            #         discount_type = 0
                                                            
                                                            try:
                                                                if tax_details is not None and "offer" in tax_details and tax_details['offer'] != "":
                                                                    for offer in tax_details["offer"]:
                                                                        if offer["status"] == 1:
                                                                            offer_terms = db.offers.find_one({"_id": ObjectId(offer["offerId"])}, {"termscond":1 , "startDateTime":1})
                                                                            if offer_terms:
                                                                                terms_condition = html2text.html2text(offer_terms["termscond"])
                                                                                offer["termscond"] = terms_condition
                                                                                if offer_terms["startDateTime"] <= int(time.time()):
                                                                                    offer_data.append(offer)

                                                                if offer_data:
                                                                    best_offer = max(offer_data, key=lambda x: x.get("discountValue", 0))
                                                                else:
                                                                    best_offer = {}
                                                            except Exception as e:
                                                                print(e)
                                                                tax_price = 0
                                                                offer_data = []
                                                                best_offer = {}
                                                            percentage = best_offer.get("discountValue", 0) if best_offer else 0
                                                            discount_type = best_offer.get("discountType", 0) if best_offer else 0

                                                            # ==================================get currecny rate============================
                                                            try:
                                                                currency_rate = currency_exchange_rate[
                                                                    str(tax_details["currency"])
                                                                    + "_"
                                                                    + str(currency_code)
                                                                    ]
                                                            except:
                                                                currency_rate = 0
                                                            currency_details = db.currencies.find_one(
                                                                {"currencyCode": currency_code},
                                                                {"currencySymbol":1, "currencyCode": 1}
                                                            )
                                                            if currency_details is not None:
                                                                currency_symbol = currency_details[
                                                                    "currencySymbol"
                                                                ]
                                                                currency = currency_details["currencyCode"]
                                                            else:
                                                                currency_symbol = tax_details["currencySymbol"]
                                                                currency = tax_details["currency"]

                                                            if float(currency_rate) > 0:
                                                                price = price * float(currency_rate)

                                                            tax_price_data = price + ((price * tax_price) / 100)
                                                            if discount_type == 0:
                                                                discount_price = float(percentage)
                                                            elif discount_type == 1:
                                                                discount_price = (
                                                                                        float(tax_price_data) * float(percentage)
                                                                                ) / 100
                                                            else:
                                                                discount_price = 0
                                                            base_price = tax_price_data - discount_price

                                                            try:
                                                                ch_pro = db.childProducts.find_one(
                                                                    {"_id": ObjectId(str(best_supplier["productId"]))},
                                                                    {"isMembersOnly": 1, "units": 1})
                                                                isMembersOnly = ch_pro.get("isMembersOnly", False)
                                                                nonMemberPrice = ch_pro["units"][0][
                                                                    "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                                                    ch_pro["units"][0] else round(
                                                                    discount_price, 2)
                                                                memberPrice = ch_pro["units"][0]["memberPrice"] if "memberPrice" in \
                                                                                                                ch_pro["units"][
                                                                                                                    0] else round(
                                                                    discount_price, 2)
                                                            except:
                                                                isMembersOnly = False
                                                                nonMemberPrice = round(discount_price, 2)
                                                                memberPrice = round(discount_price, 2)

                                                            final_price_list = {
                                                                "basePrice": round(tax_price_data, 2),
                                                                "finalPrice": round(base_price, 2),
                                                                "discountPrice": round(discount_price, 2),
                                                                "discountPercentage": percentage,
                                                                "discountPriceForNonMembers": nonMemberPrice,
                                                                "memberPrice": memberPrice
                                                            }
                                                            try:
                                                            # ========================================favourite products=========================
                                                                response_casandra = session.execute(
                                                                    """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                                    {
                                                                        "userid": user_id,
                                                                        "productid": str(
                                                                            best_supplier["productId"]
                                                                        ),
                                                                    },
                                                                )

                                                                if not response_casandra:
                                                                    response_casandra = session.execute(
                                                                        """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                                        {
                                                                            "userid": user_id,
                                                                            "productid": str(
                                                                                hits["_source"]["childproductid"]
                                                                            ),
                                                                        },
                                                                    )
                                                                    if not response_casandra:
                                                                        isFavourite = False
                                                                    else:
                                                                        isFavourite = True
                                                                else:
                                                                    for fav in response_casandra:
                                                                        isFavourite = True
                                                            except Exception as e:
                                                                print(e)
                                                                isFavourite = False
                                                                response_casandra = None
                                                            isFavourite = False
                                                            response_casandra = None
                                                            # =================================recomanded products===========================
                                                            try:
                                                                product_name = (
                                                                    hits["_source"]["pName"][language]
                                                                    if language in hits["_source"]["pName"]
                                                                    else hits["_source"]["pName"]["en"]
                                                                )
                                                            except:
                                                                product_name = (
                                                                    hits["_source"]["units"][0]["unitName"][
                                                                        language
                                                                    ]
                                                                    if language
                                                                    in hits["_source"]["units"][0]["unitName"]
                                                                    else hits["_source"]["units"][0][
                                                                        "unitName"
                                                                    ]["en"]
                                                                )

                                                            (
                                                                currency_symbol,
                                                                currency,
                                                                product_status,
                                                                product_tag,
                                                            ) = next_availbale_time(best_supplier["productId"])

                                                            if tax_details["status"] == 1:
                                                                if "mealConsumptionTime" in tax_details:
                                                                    if (
                                                                            current_text
                                                                            in tax_details["mealConsumptionTime"]
                                                                    ):
                                                                        pass
                                                                    elif (
                                                                            len(tax_details["mealConsumptionTime"])
                                                                            > 0
                                                                    ):
                                                                        if (
                                                                                int(current_hour) >= 0
                                                                                and int(current_hour) < 5
                                                                        ):
                                                                            current_text = "latenightdinner"
                                                                            currenct_text_value = [
                                                                                "breakfast",
                                                                                "brunch",
                                                                                "lunch",
                                                                                "tea",
                                                                                "dinner",
                                                                            ]
                                                                        elif (
                                                                                int(current_hour) >= 5
                                                                                and int(current_hour) < 10
                                                                        ):
                                                                            current_text = "breakfast"
                                                                            currenct_text_value = [
                                                                                "brunch",
                                                                                "lunch",
                                                                                "tea",
                                                                                "dinner",
                                                                            ]
                                                                        elif (
                                                                                int(current_hour) >= 10
                                                                                and int(current_hour) < 11
                                                                        ):
                                                                            current_text = "brunch"
                                                                            currenct_text_value = [
                                                                                "lunch",
                                                                                "tea",
                                                                                "dinner",
                                                                            ]
                                                                        elif (
                                                                                int(current_hour) >= 11
                                                                                and int(current_hour) < 15
                                                                        ):
                                                                            current_text = "lunch"
                                                                            currenct_text_value = [
                                                                                "tea",
                                                                                "dinner",
                                                                            ]
                                                                        elif (
                                                                                int(current_hour) >= 15
                                                                                and int(current_hour) < 19
                                                                        ):
                                                                            current_text = "tea"
                                                                            currenct_text_value = ["dinner"]
                                                                        else:
                                                                            current_text = "dinner"
                                                                            currenct_text_value = []
                                                                        for k, v in tax_details[
                                                                            "mealConsumptionTime"
                                                                        ].items():
                                                                            if k in currenct_text_value:
                                                                                product_status = True
                                                                                next_day = (
                                                                                    datetime.datetime.now()
                                                                                )
                                                                                next_day_midnight = (
                                                                                    next_day.replace(
                                                                                        hour=int(
                                                                                            meal_timing[k]
                                                                                        ),
                                                                                        minute=00,
                                                                                        second=00,
                                                                                    )
                                                                                )
                                                                                # open_time = next_day_midnight.strftime("%b %d %Y, %I:%M %p")
                                                                                open_time = (
                                                                                    next_day_midnight.strftime(
                                                                                        "%I:%M %p"
                                                                                    )
                                                                                )
                                                                                product_tag = (
                                                                                        "Available On Today At "
                                                                                        + open_time
                                                                                )
                                                                            else:
                                                                                product_status = True
                                                                                next_day = (
                                                                                        datetime.datetime.now()
                                                                                        + datetime.timedelta(days=1)
                                                                                )
                                                                                next_day_midnight = (
                                                                                    next_day.replace(
                                                                                        hour=meal_timing[k],
                                                                                        minute=00,
                                                                                        second=00,
                                                                                    )
                                                                                )
                                                                                open_time = (
                                                                                    next_day_midnight.strftime(
                                                                                        "%I:%M %p"
                                                                                    )
                                                                                )
                                                                                product_tag = (
                                                                                        "Next available at "
                                                                                        + open_time
                                                                                        + " tomorrow"
                                                                                )
                                                                    else:
                                                                        product_tag = ""
                                                                        product_status = False
                                                                else:
                                                                    pass
                                                            else:
                                                                pass

                                                            try:
                                                                isMembersOnly = db.childProducts.find_one(
                                                                    {"_id": ObjectId(str(best_supplier["productId"]))},
                                                                    {"isMembersOnly": 1}).get("isMembersOnly", False)
                                                            except:
                                                                isMembersOnly = False

                                                            json_data = {
                                                                "parentProductId": str(
                                                                    hits["_source"]["parentProductId"]
                                                                ),
                                                                "childProductId": best_supplier["productId"],
                                                                "productStatus": product_status,
                                                                "productTag": product_tag,
                                                                "offers": best_offer,
                                                                "unitId": best_supplier["productId"],
                                                                "finalPriceList": final_price_list,
                                                                "catName": category_name,
                                                                "detailDescription": detail_description,
                                                                "containsMeat": hits["_source"]["containsMeat"]
                                                                if "containsMeat" in hits["_source"]
                                                                else False,
                                                                "addOnsCount": addons_count,
                                                                "isFavourite": isFavourite,
                                                                "productName": product_name,
                                                                "images": hits["_source"]["images"],
                                                                "currencySymbol": currency_symbol,
                                                                "currency": currency,
                                                                "availableQuantity": best_supplier[
                                                                    "retailerQty"
                                                                ],
                                                                "isMembersOnly": isMembersOnly
                                                            }
                                                            if "consumptionTime" in tax_details:
                                                                if (
                                                                        current_text
                                                                        in tax_details["consumptionTime"]
                                                                        and product_status == False
                                                                ):
                                                                    recomended_data.append(json_data)
                                                                else:
                                                                    pass
                                                            else:
                                                                pass
                                                            if isFavourite == True:
                                                                favourite_data.append(json_data)
                                                            else:
                                                                pass
                                                            product_data.append(json_data)
                                                if len(product_data) > 0:
                                                    recommanded_details.append(
                                                        {
                                                            "catName": category_name,
                                                            "penCount": len(product_data),
                                                            "seqId": count,
                                                        }
                                                    )
                                                    category_details.append(
                                                        {
                                                            "catName": category_name,
                                                            "isSubCategories": False,
                                                            "subCategories": [],
                                                            "products": product_data,
                                                            "seqId": count,
                                                        }
                                                    )

                        newlist = sorted(category_details, key=lambda k: k["seqId"], reverse=False)
                        newlist_recomnded = sorted(
                            recommanded_details, key=lambda k: k["seqId"], reverse=False
                        )
                        last_response = {
                            "data": {
                                "storeData": store_details,
                                "productsData": newlist,  # category_details,
                                "recommFilter": newlist_recomnded,
                                "offerData": offer_json,
                            }
                        }
                        print(f' API exicute time : {time.time() - start_time}')
                        return JsonResponse(last_response, safe=False, status=200)
                    else:
                        response = {"data": {}, "message": "data not found", "penCount": 0}
                        return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)

def process_hit(hits,language,currency_code,user_id,zone_id, store_category_id):
    # print("hits",hits)
    product_data = []
    tax_value = []
    product_ids = []
    product_ids = [ObjectId(hit_data['_id']) for hit_data in hits] 
    print("product_ids",product_ids)
    # ===========================tax for the product=========================================================
    prod_details = db.childProducts.find(
        {
            "_id": {"$in": product_ids}
        }
    )
    if prod_details != None:
        # try:           
        #     if type(tax_details['units'][0]["tax"]) == list:
        #         for tax in tax_details['units'][0]["tax"]:
        #             tax_value.append(
        #                 {"value": tax["taxValue"]}
        #             )
        #     else:
        #         try:
        #             if tax_details['units'][0]["tax"] != None:
        #                 if "taxValue" in tax_details['units'][0]["tax"]:
        #                     tax_value.append(
        #                         {
        #                             "value": tax_details['units'][0][
        #                                 "tax"
        #                             ]["taxValue"]
        #                         }
        #                     )
        #                 else:
        #                     tax_value.append(
        #                         {
        #                             "value": tax_details['units'][0][
        #                                 "tax"
        #                             ]
        #                         }
        #                     )
        #             else:
        #                 pass
        #         except:
        #             pass
        # except:pass
        # =================================price calculation===================================================================
        for tax_details in prod_details:
            try:
                price = tax_details["units"][0][
                    "b2cPricing"
                ][0]["b2cproductSellingPrice"]
            except:
                try:
                    price = tax_details["units"][0]['floatValue']
                except:
                    price = tax_details["units"][0]['floatValue']
            tax_price = 0
            # print(hits["_source"]["storeCategoryId"])
            # print(DINE_STORE_CATEGORY_ID)
            # print(tax_value)
            if (
                    tax_details["storeCategoryId"]
                    == DINE_STORE_CATEGORY_ID
            ):
                pass
            else:
                try:
                    if len(tax_value) == 0:
                        tax_price = 0
                    else:
                        for amount in tax_value:
                            tax_price = tax_price + (
                                int(amount["value"])
                            )
                except:pass
            # ==================================get currecny rate============================
            try:
                currency_rate = currency_exchange_rate[
                    str(tax_details["currency"])
                    + "_"
                    + str(currency_code)
                    ]
            except:
                currency_rate = 0
            currency_details = db.currencies.find_one(
                {"currencyCode": currency_code}
            )
            if currency_details is not None:
                currency_symbol = currency_details[
                    "currencySymbol"
                ]
                currency = currency_details[
                    "currencyCode"
                ]
            else:
                currency_symbol = tax_details[
                    "currencySymbol"
                ]
                currency = tax_details["currency"]

            if float(currency_rate) > 0:
                price = price * float(currency_rate)
            base_price = price + (
                    (price * tax_price) / 100
            )

            # =============================offer check======================================
            offer_data = []
            # if "offer" in tax_details:
            #     for offer in tax_details["offer"]:
            #         if offer["status"] == 1:
            #             offer_terms = (
            #                 db.offers.find_one(
            #                     {
            #                         "_id": ObjectId(
            #                             offer["offerId"]
            #                         )
            #                     },
            #                     {"termscond": 1, "startDateTime": 1}
            #                 )
            #             )
            #             if offer_terms != None:
            #                 offer["termscond"] = offer_terms["termscond"]
            #                 if "startDateTime" in offer_terms:
            #                     if offer_terms["startDateTime"] <= int(
            #                             time.time()):
            #                         offer_data.append(offer)
            #         else:
            #             pass
            # else:
            #     pass

            if len(offer_data) > 0:
                best_offer = max(
                    offer_data,
                    key=lambda x: x["discountValue"],
                )
            else:
                best_offer = {}

            if len(best_offer) == 0:
                percentage = 0
                discount_type = 0
            else:
                if "discountType" in best_offer:
                    percentage = int(best_offer["discountValue"])
                    discount_type = best_offer["discountType"]
                else:
                    percentage = 0
                    discount_type = 0

            if discount_type == 0:
                discount_price = float(percentage)
            elif discount_type == 1:
                discount_price = (
                                            float(base_price)
                                            * float(percentage)
                                    ) / 100
            else:
                discount_price = 0

            final_price = base_price - discount_price
            final_price_list = {
                "basePrice": round(base_price, 2),
                "finalPrice": round(final_price, 2),
                "discountPercentage": percentage,
                "discountPrice": round(
                    discount_price, 2
                ),
            }

            # =======================for addons=============================
            # if "addOns" in tax_details["units"][0]:
            #     if (
            #             tax_details["units"][0]["addOns"]
            #             != None
            #     ):
            #         if (
            #                 len(
            #                     tax_details["units"][0][
            #                         "addOns"
            #                     ]
            #                 )
            #                 > 0
            #         ):
            #             addons_count = True
            #         else:
            #             addons_count = False
            #     else:
            #         addons_count = False
            # else:
            #     addons_count = False
            # if addons_count == False:
            #         product_count = db.childProducts.find(
            #             {
            #                 "storeId": ObjectId(
            #                     hits["_source"]["storeId"]
            #                 ),
            #                 "parentProductId": hits["_source"][
            #                     "parentProductId"
            #                 ],
            #                 "status": 1,
            #             }
            #         ).count()
            #         if product_count > 1:
            #             addons_count = True
            addons_count = False
            if (
                    tax_details["storeCategoryId"]
                    != DINE_STORE_CATEGORY_ID
            ):
                if (
                        tax_details["units"][0][
                            "availableQuantity"
                        ]
                        > 0
                ):
                    out_of_stock = False
                else:
                    out_of_stock = True
            else:
                out_of_stock = False

            additional_info = []
            # if "THC" in tax_details["units"][0]:
            #     additional_info.append(
            #         {
            #             "seqId": 2,
            #             "attrname": "THC",
            #             "value": str(
            #                 tax_details["units"][0][
            #                     "THC"
            #                 ]
            #             )
            #                      + " %",
            #         }
            #     )
            # else:
            #     pass
            # if "CBD" in tax_details["units"][0]:
            #     additional_info.append(
            #         {
            #             "seqId": 1,
            #             "attrname": "CBD",
            #             "value": str(
            #                 tax_details["units"][0][
            #                     "CBD"
            #                 ]
            #             )
            #                      + " %",
            #         }
            #     )
            # else:
            #     pass

            # =================================================canniber product type========================
            # if (
            #         "cannabisProductType"
            #         in tax_details["units"][0]
            # ):
            #     if (
            #             tax_details["units"][0][
            #                 "cannabisProductType"
            #             ]
            #             != ""
            #     ):
            #         cannabis_type_details = db.cannabisProductType.find_one(
            #             {
            #                 "_id": ObjectId(
            #                     tax_details["units"][0][
            #                         "cannabisProductType"
            #                     ]
            #                 ),
            #                 "status": 1,
            #             }
            #         )
            #         if (
            #                 cannabis_type_details
            #                 is not None
            #         ):
            #             additional_info.append(
            #                 {
            #                     "seqId": 3,
            #                     "attrname": "Type",
            #                     "value": cannabis_type_details[
            #                         "productType"
            #                     ][
            #                         "en"
            #                     ],
            #                     "id": tax_details[
            #                         "units"
            #                     ][0][
            #                         "cannabisProductType"
            #                     ],
            #                 }
            #             )
            #         else:
            #             pass
            # else:
            #     pass

            if len(additional_info) > 0:
                additional_info = sorted(
                    additional_info,
                    key=lambda k: k["seqId"],
                    reverse=True,
                )
            else:
                additional_info = []

            attribute_data = []
            if "attributes" in tax_details["units"][0]:
                for attr in tax_details["units"][0][
                    "attributes"
                ]:
                    for att in attr["attrlist"]:
                        if "linkedtounit" in att:
                            if att["linkedtounit"] == 0:
                                pass
                            else:
                                if att["value"] == None:
                                    pass
                                else:
                                    if (
                                            "measurementUnit"
                                            in att
                                    ):
                                        measurement_unit = att[
                                            "measurementUnit"
                                        ]
                                    else:
                                        measurement_unit = (
                                            ""
                                        )
                                    try:
                                        attr_value = (
                                                str(
                                                    att[
                                                        "value"
                                                    ][
                                                        language
                                                    ]
                                                )
                                                + " "
                                                + str(
                                            measurement_unit
                                        )
                                        )
                                    except:
                                        attr_value = ""
                                    attribute_data.append(
                                        {
                                            "name": att[
                                                "attrname"
                                            ][language]
                                            if language
                                                in att[
                                                    "attrname"
                                                ]
                                            else att[
                                                "attrname"
                                            ]["en"],
                                            "value": attr_value,
                                            "name": att[
                                                "attrname"
                                            ][language]
                                            if language
                                                in att[
                                                    "attrname"
                                                ]
                                            else att[
                                                "attrname"
                                            ]["en"],
                                        }
                                    )
            else:
                pass

            varinat_boolean = validate_variant(
                tax_details[
                    "parentProductId"
                ], str(tax_details["storeId"]), zone_id, store_category_id
            )

            try:
                reseller_commission = \
                    tax_details['units'][0]['b2cPricing'][0][
                        'b2cresellerCommission']
            except:
                reseller_commission = 0

            try:
                reseller_commission_type = \
                    tax_details['units'][0]['b2cPricing'][
                        'b2cpercentageCommission']
            except:
                reseller_commission_type = 0
            isFavourite = False
            try:
                response_casandra = session.execute(
                        """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                        {
                            "userid": user_id,
                            "productid": str(tax_details["_id"]),
                        },
                    )
                if not response_casandra:
                    isFavourite = False
                else:
                    isFavourite = True
            except Exception as e:
                print(e)
                isFavourite = False
            liked_users_cursor = db.likesProducts.find({"childproductid": str(tax_details["_id"]), "isInfluencer": False}, {"userid": 1})
            liked_users_count = liked_users_cursor.count()
            likesByUsers=0
            likesByInfluencers=0
            try:
                likesByUsers=liked_users_count
                likesByInfluencers=db.likesProducts.find({"childproductid": str(tax_details["_id"]),"isInfluencer":True}).count()
            except:
                likesByUsers=0
                likesByInfluencers=0

            user_ids = [ObjectId(like["userid"]) for like in liked_users_cursor]
            # Step 2: Find the users with the highest follower count, limit to 3, and with non-empty profile pictures
            max_follower_users = db.customer.aggregate([
                {"$match": {"_id": {"$in": user_ids}}},
                {"$project": {
                    "_id": 1,
                    "profilePic": 1
                }},
                {"$match": {"profilePic": {"$exists": True, "$ne": ""}}},  # Match only non-empty profile pics
                {"$sort": {"count.followerCount": -1}},
                {"$limit": 3}
            ])

            profile_pics = []
            for user in max_follower_users:
                profile_pic_url = user.get("profilePic")
                if profile_pic_url:
                    profile_pics.append(profile_pic_url)
            if profile_pics ==[]:
                profile_pics =["","",""]

            allPrice = tax_details["units"][0]["b2cPricing"]
            (
                currency_symbol,
                currency,
                product_status,
                product_tag,
            ) = next_availbale_time(str(tax_details["_id"]))
            # if tax_details["status"] == 1:
            #     if "mealConsumptionTime" in tax_details:
            #         if current_text in tax_details["mealConsumptionTime"]:
            #             pass
            #         elif len(tax_details["mealConsumptionTime"]) > 0:
            #             if int(current_hour) >= 0 and int(current_hour) < 5:
            #                 current_text = "latenightdinner"
            #                 currenct_text_value = ["breakfast", "brunch", "lunch", "tea", "dinner"]
            #             elif int(current_hour) >= 5 and int(current_hour) < 10:
            #                 current_text = "breakfast"
            #                 currenct_text_value = ["brunch", "lunch", "tea", "dinner"]
            #             elif int(current_hour) >= 10 and int(current_hour) < 11:
            #                 current_text = "brunch"
            #                 currenct_text_value = ["lunch", "tea", "dinner"]
            #             elif int(current_hour) >= 11 and int(current_hour) < 15:
            #                 current_text = "lunch"
            #                 currenct_text_value = ["tea", "dinner"]
            #             elif int(current_hour) >= 15 and int(current_hour) < 19:
            #                 current_text = "tea"
            #                 currenct_text_value = ["dinner"]
            #             else:
            #                 current_text = "dinner"
            #                 currenct_text_value = []

            #             for k, v in tax_details["mealConsumptionTime"].items():
            #                 if k in currenct_text_value:
            #                     product_status = True
            #                     next_day = datetime.datetime.now()
            #                     next_day_midnight = next_day.replace(hour=int(meal_timing[k]), minute=00, second=00)
            #                     open_time = next_day_midnight.strftime("%I:%M %p")
            #                     product_tag = "Available On Today At " + open_time
            #                 else:
            #                     product_status = True
            #                     next_day = datetime.datetime.now() + datetime.timedelta(days=1)
            #                     next_day_midnight = next_day.replace(hour=meal_timing[k], minute=00, second=00)
            #                     open_time = next_day_midnight.strftime("%I:%M %p")
            #                     product_tag = "Next available at " + open_time + " tomorrow"
            #         else:
            #             product_tag = ""
            #             product_status = False
            #     else:
            #         pass
            # else:
            #     pass
            product_tag = ""
            product_status = False
            best_supplier = {
                "id": str(tax_details["storeId"]),
                "productId": str(tax_details["_id"]),
            }

            product_data.append(
                {
                    "resellerCommission": reseller_commission,
                    "resellerCommissionType": reseller_commission_type,
                    "parentProductId": str(
                        tax_details["parentProductId"]
                    ),
                    "variantCount": varinat_boolean,
                    "extraAttributeDetails": additional_info,
                    "childProductId": str(tax_details["_id"]),
                    "avgRating": 0,
                    "addOnsCount": False,
                    "offer": best_offer,
                    "brandName": tax_details[
                        "brandTitle"
                    ][language]
                    if language
                        in tax_details["brandTitle"]
                    else tax_details["brandTitle"][
                        "en"
                    ],
                    "brandTitle": tax_details[
                        "brandTitle"
                    ][language]
                    if language
                        in tax_details["brandTitle"]
                    else tax_details["brandTitle"][
                        "en"
                    ],
                    "manufactureName": tax_details[
                        "manufactureName"
                    ][language]
                    if language
                        in tax_details["manufactureName"]
                    else "",
                    "unitId": tax_details["units"][0][
                        "unitId"
                    ],
                    "needsIdProof": tax_details[
                        "needsIdProof"
                    ]
                    if "needsIdProof" in tax_details
                    else False,
                    "containsMeat": tax_details['containsMeat'] if 'containsMeat' in tax_details else False,
                    "finalPriceList": final_price_list,
                    "productName": tax_details["pName"][
                        language
                    ]
                    if language in tax_details["pName"]
                    else tax_details["pName"]["en"],
                    "images": tax_details["images"]
                    if "images" in tax_details
                    else [],
                    "addOnsCount": addons_count,
                    "variantData": attribute_data,
                    "isAddOns": addons_count,
                    "suppliers": best_supplier,
                    "supplier": best_supplier,
                    "currencySymbol": currency_symbol,
                    "currency": currency,
                    "availableQuantity": tax_details[
                        "units"
                    ][0]["availableQuantity"]
                    if "availableQuantity"
                        in tax_details["units"][0]
                    else 0,
                    "productType": tax_details[
                        "productType"] if "productType" in tax_details else 1,
                    "outOfStock": out_of_stock,
                    "isFavourite": isFavourite,
                    "LikesByUsers":likesByUsers,
                    "LikesByInfluencers":likesByInfluencers,
                    "allPrice":allPrice,
                    "productStatus": product_status,
                    "productTag": product_tag,
                    "likeUserProfile" :profile_pics
                }
            )
    return product_data


def process_store_and_products_data(bucket,zone_id,lat,long,language,currency_code,store_category_id,user_id):
    print("start from store data fetching")
    start_time = time.time()
    product_details = []
    store_details_list = []
    total_products_count = bucket['total_products']['value']
    store_details_json = {}
    product_data = []
    store_id = bucket["key"]
    if store_id == "0":
        pass
    else:
        try:
            store_score = 0
            if zone_id != "":
                store_details = db.stores.find_one(
                    {
                        "_id": ObjectId(store_id),
                        "status": 1,
                        "serviceZones.zoneId": zone_id,
                        "storeFrontTypeId": {"$ne": 5},
                    }
                )
            else:
                store_details = db.stores.find_one(
                    {
                        "_id": ObjectId(store_id),
                        "status": 1,
                        "storeFrontTypeId": {"$ne": 5},
                    }
                )
            cusine_name = ""
            if store_details != None:
                # ===========================offer data==============================
                # offer_details = db.offers.find(
                #     {
                #         "storeId": {
                #             "$in": [str(store_details["_id"])]
                #         },
                #         "status": 1,
                #     }
                # )
                # offer_json = []
                # for offer in offer_details:
                #     offer_json.append(
                #         {
                #             "offerName": offer["name"][language]
                #             if language in offer["name"]
                #             else offer["name"]["en"],
                #             "offerId": str(offer["_id"]),
                #             "discountValue":offer["discountValue"],
                #             "offerType": offer["offerType"],
                #         }
                #     )
                # if len(offer_json) > 0:
                #     best_offer_store = max(offer_json, key=lambda x: x['discountValue'])
                #     if best_offer_store['offerType'] == 1:
                #         percentage_text = str(best_offer_store['discountValue']) + "%" + " " + "off"
                #     else:
                #         try:
                #             percentage_text = store_details['currencySymbol'] + str(best_offer_store['discountValue']) + " off"
                #         except:
                #             percentage_text = "₹" + str(best_offer_store['discountValue']) + " off"
                #     offer_name = best_offer_store['offerName']
                # else:
                #     offer_name = ""
                #     percentage_text = ""

                try:
                    store_lat = (
                        float(
                            store_details[
                                "businessLocationAddress"
                            ]["lat"]
                        )
                        if "businessLocationAddress"
                            in store_details
                        else 0
                    )
                    store_long = (
                        float(
                            store_details[
                                "businessLocationAddress"
                            ]["long"]
                        )
                        if "businessLocationAddress"
                            in store_details
                        else 0
                    )
                    address = (
                        store_details["businessLocationAddress"][
                            "address"
                        ]
                        if "businessLocationAddress"
                            in store_details
                        else ""
                    )
                    addressArea = (
                        store_details["businessLocationAddress"][
                            "addressArea"
                        ]
                        if "addressArea"
                            in store_details["businessLocationAddress"]
                        else ""
                    )
                    locality = (
                        store_details["businessLocationAddress"][
                            "locality"
                        ]
                        if "locality"
                            in store_details["businessLocationAddress"]
                        else ""
                    )
                    post_code = (
                        store_details["businessLocationAddress"][
                            "postCode"
                        ]
                        if "postCode"
                            in store_details["businessLocationAddress"]
                        else ""
                    )
                    state = (
                        store_details["businessLocationAddress"][
                            "state"
                        ]
                        if "state"
                            in store_details["businessLocationAddress"]
                        else ""
                    )
                    country = (
                        store_details["businessLocationAddress"][
                            "country"
                        ]
                        if "country"
                            in store_details["businessLocationAddress"]
                        else ""
                    )
                    city = (
                        store_details["businessLocationAddress"][
                            "city"
                        ]
                        if "city"
                            in store_details["businessLocationAddress"]
                        else ""
                    )
                except:
                    store_lat = 0
                    store_long = 0
                    address = ""
                    addressArea = ""
                    locality = ""
                    post_code = ""
                    state = ""
                    country = ""
                    city = ""

                if post_code == None:
                    post_code = ""
                if state == None:
                    state = ""
                if country == None:
                    country = ""
                if city == None:
                    city = ""
                # ============================query for get the distance by geo query==============
                must_query = []
                must_query.append(
                    {"match": {"_id": str(store_details["_id"])}}
                )
                must_query.append({"match": {"status": 1}})
                geo_distance_sort = {
                    "_geo_distance": {
                        "distance_type": "plane",
                        "location": {
                            "lat": float(lat),
                            "lon": float(long),
                        },
                        "order": "asc",
                        "unit": "km",
                    }
                }
                sort_query = [geo_distance_sort]
                must_query.append(
                    {
                        "geo_distance": {
                            "distance": "50km",
                            "location": {
                                "lat": float(lat),
                                "lon": float(long),
                            },
                        }
                    }
                )
                query = {
                    "query": {
                        "bool": {
                            "must": must_query,
                        }
                    },
                    "size": 1,
                    "from": 0,
                    "sort": sort_query,
                }
                res = es.search(
                    index=index_store,
                    body=query,
                    filter_path=[
                        "hits.total",
                        "hits.hits._id",
                        "hits.hits.sort",
                        "hits.hits._source",
                    ],
                )
                if res["hits"]["total"]["value"] > 0:
                    if "hits" in res["hits"]:
                        for seller in res["hits"]["hits"]:
                            distance_km = round(
                                seller["sort"][0], 2
                            )
                            distance_miles = round(
                                distance_km * conv_fac, 2
                            )
                    else:
                        distance_km = 0
                        distance_miles = 0
                else:
                    distance_km = 0
                    distance_miles = 0

                store_name = (
                    store_details["storeName"][language]
                    if language in store_details["storeName"]
                    else store_details["storeName"]["en"]
                )
                store_id = str(store_details["_id"])
                # ===================================for the cusines=============================================
                # if "specialities" in store_details:
                #     if len(store_details["specialities"]):
                #         for spec in store_details["specialities"]:
                #             spec_data = db.specialities.find_one(
                #                 {"_id": ObjectId(spec)},
                #                 {"specialityName": 1, "image": 1},
                #             )
                #             if spec_data != None:
                #                 if cusine_name == "":
                #                     cusine_name = (
                #                         spec_data["specialityName"][
                #                             language
                #                         ]
                #                         if language
                #                            in spec_data[
                #                                "specialityName"
                #                            ]
                #                         else spec_data[
                #                             "specialityName"
                #                         ]["en"]
                #                     )
                #                 else:
                #                     cusine_name = (
                #                         cusine_name
                #                         + ", "
                #                         + spec_data[
                #                             "specialityName"
                #                         ][language]
                #                         if language
                #                            in spec_data[
                #                                "specialityName"
                #                            ]
                #                         else spec_data[
                #                             "specialityName"
                #                         ]["en"]
                #                     )
                #             else:
                #                 pass
                #     else:
                #         pass
                # else:
                #     pass

                if "averageCostForMealForTwo" in store_details:
                    cost_for_two = store_details[
                        "averageCostForMealForTwo"
                    ]
                else:
                    cost_for_two = 0

                # =====================================about store tags=================================
                if "storeIsOpen" in store_details:
                    store_is_open = store_details["storeIsOpen"]
                else:
                    store_is_open = False

                if "nextCloseTime" in store_details:
                    next_close_time = store_details["nextCloseTime"]
                else:
                    next_close_time = ""

                if "nextOpenTime" in store_details:
                    next_open_time = store_details["nextOpenTime"]
                else:
                    next_open_time = ""

                try:
                    if "timeZoneWorkingHour" in store_details:
                        timeZoneWorkingHour = store_details['timeZoneWorkingHour']
                    else:
                        timeZoneWorkingHour = ""
                except:
                    timeZoneWorkingHour = ""
                is_delivery = False
                if any(
                        supplier["zoneId"] == str(zone_id)
                        for supplier in store_details["serviceZones"]
                ):
                    is_delivery = True
                
                store_tag =""

                if "shopifyStoreDetails" in store_details:
                    if (
                            "enable"
                            in store_details["shopifyStoreDetails"]
                    ):
                        shopify_enable = store_details[
                            "shopifyStoreDetails"
                        ]["enable"]
                    else:
                        shopify_enable = False
                else:
                    shopify_enable = False

                avg_rating_value = 0
                seller_rating = db.sellerReviewRatings.aggregate(
                    [
                        {
                            "$match": {
                                "sellerId": str(
                                    store_details["_id"]
                                ),
                                "rating": {"$ne": 0},
                                "status": 1,
                            }
                        },
                        {
                            "$group": {
                                "_id": "$sellerId",
                                "avgRating": {"$avg": "$rating"},
                            }
                        },
                    ]
                )
                for avg_rating in seller_rating:
                    avg_rating_value = avg_rating["avgRating"]

                # product count for store
                product_count = db.childProducts.find(
                    {
                        "storeId": ObjectId(store_id),
                        "status": 1,
                        "units.isPrimary": True
                    }
                ).count()
                try:
                    safety_standar = store_details["safetyStandards"] if "safetyStandards" in store_details else 0
                except:
                    safety_standar = 0
                try:
                    store_user_count = store_details['favouriteUsers']
                    fav_store_user_count = len(store_user_count)
                except Exception as e:
                    print(e)
                    fav_store_user_count = 0
                store_details_json = {
                    "productCount": product_count,
                    "lat": store_lat,
                    "long": store_long,
                    "address": address,
                    "shopifyEnable": shopify_enable,
                    "safetyStandards": safety_standar,
                    "locality": locality,
                    "cuisines": "",
                    "tableReservations": store_details["tableReservations"]
                    if "tableReservations" in store_details
                    else False,
                    "priceForBookingTable": store_details["priceForBookingTable"]
                    if "priceForBookingTable" in store_details
                    else 0,
                    "addressArea": addressArea,
                    "averageCostForMealForTwo": cost_for_two,
                    "logoImages": store_details["logoImages"],
                    "bannerImages": store_details["bannerImages"],
                    "listingImage": store_details["listingImage"]
                    if "listingImage" in store_details
                    else {},
                    "averageDeliveryTimeInMins": store_details[
                        "averageDeliveryTimeInMins"
                    ]
                    if "averageDeliveryTimeInMins" in store_details
                    else 0,
                    "avgRating": round(avg_rating_value, 2),
                    "storeIsOpen": store_is_open,
                    "storeType": store_details["storeType"]
                    if "storeType" in store_details
                    else "Food",
                    "postCode": post_code,
                    "nextCloseTime": next_close_time,
                    "averageDeliveryTime": str(
                        store_details["averageDeliveryTimeInMins"]
                    )
                                            + " "
                                            + "Mins"
                    if "averageDeliveryTimeInMins" in store_details
                    else "",
                    "nextOpenTime": next_open_time,
                    "city": city,
                    "driverTypeId": store_details["driverTypeId"]
                    if "driverTypeId" in store_details
                    else 0,
                    "driverType": store_details["driverType"]
                    if "driverType" in store_details
                    else "",
                    "currencySymbol": store_details["currencySymbol"]
                    if "currencyCode" in store_details
                    else "INR",
                    "currency": store_details["currencyCode"]
                    if "currencyCode" in store_details
                    else "INR",
                    "supportedOrderTypes": store_details[
                        "supportedOrderTypes"
                    ]
                    if "supportedOrderTypes" in store_details
                    else 3,
                    "minimumOrder": store_details["minimumOrder"]
                    if "minimumOrder" in store_details
                    else 0,
                    "storeTag": store_tag,
                    "state": state,
                    "country": country,
                    "percentageText": "",
                    "offerName": "",
                    "distanceKm": round(distance_km, 2),
                    "uniqStoreId": store_details["uniqStoreId"]
                    if "uniqStoreId" in store_details
                    else "",
                    "distanceMiles": distance_miles,
                    "storeName": store_name,
                    "storeId": store_id,
                    "seqId": 2,
                    "isDelivery": is_delivery,
                    "userLikeCount": fav_store_user_count
                }
                print(f'store data got : {time.time() - start_time}')
                start_time1 = time.time()
                top_sales_hits = bucket["top_sales_hits"]["hits"]["hits"]
                product_data_list = process_hit(top_sales_hits,language,currency_code,user_id,zone_id, store_category_id)
                product_data.extend(product_data_list)
                print(f'products data got : {time.time() - start_time1}')

                if len(product_data) > 0:
                    newlist = sorted(
                        product_data,
                        key=lambda k: k["availableQuantity"],
                        reverse=True,
                    )
                    res_data_dataframe = pd.DataFrame(newlist)
                    res_data_dataframe = (
                        res_data_dataframe.drop_duplicates(
                            "parentProductId", keep="first"
                        )
                    )
                    res_data_dataframe_newlist = (
                        res_data_dataframe.to_dict(orient="records")
                    )
                    product_details.append(
                        {
                            "storeScore": store_score,
                            "storeData": store_details_json,
                            "products": res_data_dataframe_newlist,
                            "productsCount" :total_products_count,
                            "seqId": 2,
                            "storeIsOpen": store_is_open,
                            "isDelivery": is_delivery,
                            "storeName": store_name,
                            "distanceKm": round(distance_km, 2),
                            "uniqStoreId": store_details[
                                "uniqStoreId"
                            ]
                            if "uniqStoreId" in store_details
                            else "",
                        }
                    )
                    store_details_json["storeScore"] = store_score
                    store_details_list.append(store_details_json)
            
        except Exception as ex:
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                    type(ex).__name__, ex)
    print(f'one store data and each products: {time.time() - start_time}')
    return product_details,store_details_list

class FoodProductSuggestion(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Food Store Products List"],
        operation_description="API for getting the suggestion for the food products",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="ipAddress",
                default="124.40.244.94",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="ip address of the network",
            ),
            openapi.Parameter(
                name="platform",
                default="0",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="from which platform requested for data.values will be 0 for website, 1 for iOS and 2 for android",
            ),
            openapi.Parameter(
                name="city",
                default="5df7b7218798dc2c1114e6bf",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="city id of the user where browser or app opened if not there value should be empty string",
            ),
            openapi.Parameter(
                name="country",
                default="5df7b7218798dc2c1114e6c0",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="country id of the user where browser or app opened if not there value should be empty string",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=GROCERY_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["search"],
            properties={
                "lat": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="latitude of the user's location",
                    example="12.957888",
                ),
                "long": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="longitude of the user's location",
                    example="77.599349",
                ),
                "search": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="search text which we need to search",
                    example="Sub",
                ),
                "zoneId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="zone id of the area from which area we need to search",
                    example="5df8b6ea8798dc19d926bd28",
                ),
                "storeId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id from which store we need to search",
                    example="5e20914ac348027af2f9028e",
                ),
                "timezone": openapi.Schema(
                    type=openapi.TYPE_NUMBER,
                    description="time zone from which timezone user are searching the data",
                    example="Asia/Calcutta",
                ),
            },
        ),
        responses={
            200: "data found",
            404: "data not found.",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            start_time = time.time()
            product_details = []
            store_details_list = []
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            ip_address = request.META["HTTP_IPADDRESS"] if "HTTP_IPADDRESS" in request.META else ""
            seach_platform = (
                request.META["HTTP_PLATFORM"] if "HTTP_PLATFORM" in request.META else "0"
            )
            city_name = request.META["HTTP_CITY"] if "HTTP_CITY" in request.META else ""
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            country_name = request.META["HTTP_COUNTRY"] if "HTTP_COUNTRY" in request.META else ""
            store_category_id = (
                str(request.META["HTTP_STORECATEGORYID"])
                if "HTTP_STORECATEGORYID" in request.META
                else DINE_STORE_CATEGORY_ID
            )
            if store_category_id == "":
                store_category_id = DINE_STORE_CATEGORY_ID
            is_same_store = True
            if token == "":
                response_data = {"message": "unauthorized", "data": [], "penCount": 0}
                return JsonResponse(response_data, safe=False, status=401)
            else:
                request_data = request.data
                if "search" not in request_data:
                    response_data = {"message": "search text is missing", "data": [], "penCount": 0}
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    lat = request_data["lat"] if "lat" in request_data else 0
                    long = request_data["long"] if "long" in request_data else 0
                    search_text = request_data["search"]
                    zone_id = request_data["zoneId"] if "zoneId" in request_data else ""
                    store_id = request_data["storeId"] if "storeId" in request_data else ""
                    timezone = request_data["timezone"] if "timezone" in request_data else ""
                    skip = request_data["skip"] if "skip" in request_data else 0
                    page_number = request_data["page"] if "page" in request_data else 1
                    limit = 10 # for products
                    from_store = (page_number - 1) * 10  # Calculate the starting category index for pagination
                    size_store = page_number * 10 # for category
                    timezone = timezone.replace("%2F", "/")
                    store_zone_details = []
                    
                    timezone_data = request_data["timezone"] if "timezone" in request_data else ""
                    timezone_data_error = request_data[
                        "timezone"] if "timezone" in request_data else "Asia/Calcutta"  # request.GET.get("timezone", "Asia/Calcutta")
                    try:
                        timezone_data = timezone_data.replace("%2F", "/")
                    except:
                        timezone_data = timezone_data
                    try:
                        timezone_data_error = timezone_data_error.replace("%2F", "/")
                    except:
                        timezone_data_error = timezone_data_error
                    
                    # =====================call the function for the recent search===================================
                    fname = ""
                    sname = ""
                    tname = ""
                    try:
                        user_id = json.loads(token)['userId']
                    except:
                        user_id = "5ee31cdf0fa15b0c05a8cdde"
                    search_type = 4
                    try:
                        session_id = json.loads(token)["sessionId"]
                    except:
                        session_id = ""
                    thread_logs = threading.Thread(
                        target=category_search_logs,
                        args=(
                            fname,
                            sname,
                            tname,
                            str(search_type),
                            user_id,
                            seach_platform,
                            ip_address,
                            lat,
                            long,
                            city_name,
                            country_name,
                            search_text,
                            store_category_id,
                            "",
                            session_id,
                            "0",
                            False,
                            "",
                            "",
                        ),
                    )
                    thread_logs.start()
                    if store_id != "":
                        try:
                            current_time = datetime.datetime.now(pytz.timezone(timezone_data_error))
                        except:
                            current_time = datetime.datetime.now()
                        current_hour = current_time.hour

                        if int(current_hour) >= 0 and int(current_hour) < 5:
                            current_text = "latenightdinner"
                        elif int(current_hour) >= 5 and int(current_hour) < 10:
                            current_text = "breakfast"
                        elif int(current_hour) >= 10 and int(current_hour) < 11:
                            current_text = "brunch"
                        elif int(current_hour) >= 11 and int(current_hour) < 15:
                            current_text = "lunch"
                        elif int(current_hour) >= 15 and int(current_hour) < 19:
                            current_text = "tea"
                        else:
                            current_text = "dinner"

                        store_count = 0
                        total_products_count = 0
                        product_data = []
                        # ============================query for get the distance by geo query==============
                        must_query = []
                        must_query.append(
                            {"match": {"_id": str(store_id)}}
                        )
                        must_query.append({"match": {"status": 1}})
                        geo_distance_sort = {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {
                                    "lat": float(lat),
                                    "lon": float(long),
                                },
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                        sort_query = [geo_distance_sort]
                        must_query.append(
                            {
                                "geo_distance": {
                                    "distance": "50km",
                                    "location": {
                                        "lat": float(lat),
                                        "lon": float(long),
                                    },
                                }
                            }
                        )
                        query = {
                            "query": {
                                "bool": {
                                    "must": must_query,
                                }
                            },
                            "size": 1,
                            "from": 0,
                            "sort": sort_query,
                        }
                        res = es.search(
                            index=index_store,
                            body=query,
                            filter_path=[
                                "hits.total",
                                "hits.hits._id",
                                "hits.hits.sort",
                                "hits.hits._source",
                            ],
                        )
                        if res["hits"]["total"]["value"] > 0:
                            if "hits" in res["hits"]:
                                for seller in res["hits"]["hits"]:
                                    distance_km = round(
                                        seller["sort"][0], 2
                                    )
                                    distance_miles = round(
                                        distance_km * conv_fac, 2
                                    )
                            else:
                                distance_km = 0
                                distance_miles = 0
                        else:
                            distance_km = 0
                            distance_miles = 0
                        # =====================================query builder============================================
                        if len(store_details_list) == 0:
                            print('123213-------------------------')
                            search_query = []
                            should_query = []
                            search_query.append({"terms": {"status": [1, 2]}})
                            search_query.append({"match": {"units.isPrimary": True}})
                            # ===========================product name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "pName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "pName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            # ===========================unit name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "units.unitName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "units.unitName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )
                            # ===========================================detail description============================
                            should_query.append(
                                {
                                    "match": {
                                        "detailDescription."
                                        + language: {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 4,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "detailDescription."
                                        + language: {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 4,
                                        }
                                    }
                                }
                            )

                            if store_category_id != "":
                                search_query.append(
                                    {"match": {"storeCategoryId": store_category_id}}
                                )

                            # ==================================for the zone wise search==============================================
                            store_zone_details = []
                            if zone_id != "":
                                zone_details = db.zones.find_one({"_id": ObjectId(zone_id)})
                                if zone_details is None:
                                    store_zone__data = db.stores.find(
                                        {
                                            "categoryId": str(store_category_id),
                                            "serviceZones.zoneId": zone_id,
                                            "status": 1,
                                            "_id": ObjectId(str(store_id))
                                        }
                                    )
                                else:
                                    store_zone__data = db.stores.find(
                                        {
                                            "categoryId": str(store_category_id),
                                            "cityId": str(zone_details["city_ID"]),
                                            "status": 1,
                                            "_id": ObjectId(str(store_id))
                                        }
                                    )
                                if store_zone__data.count() > 0:
                                    for store in store_zone__data:
                                        store_zone_details.append(str(store["_id"]))
                                    search_query.append(
                                        {
                                            "terms": {
                                                "storeId": store_zone_details
                                            }
                                        }
                                    )
                                else:
                                    pass
                            else:
                                pass
                            search_query.append(
                                        {"term": {"storeId.keyword": store_id}}
                                    )

                            # =========================================================query for the get the products=======================================
                            catgeory_query = {
                                "query": {
                                    "bool": {
                                        "must": search_query,
                                        "should": should_query,
                                        "minimum_should_match": 1,
                                        "boost": 1.0,
                                    }
                                },
                                "aggs": {
                                    "group_by_stores": {
                                        "terms": {
                                            "field": "storeId.keyword",
                                            "size": int(20),
                                        },
                                        "aggs": {
                                            "top_sales_hits": {
                                                "top_hits": {
                                                    "sort": [{"_score": {"order": "desc"}}],
                                                    "_source": {
                                                        "includes": [
                                                            "_id",
                                                            "secondCategoryName"
                                                        ]
                                                    },
                                                    "size": 30,
                                                }
                                            }
                                        },
                                    }
                                },
                            }
                            res_first_category = es.search(index=index_products, body=catgeory_query)
                            second_category_name = ""
                            try:
                                for cat in res_first_category["aggregations"]["group_by_stores"]['buckets']:
                                    for key in cat['top_sales_hits']['hits']['hits']:
                                        try:
                                            if key['_source']['secondCategoryName'] == "":
                                                pass
                                            else:
                                                if key['_source']['secondCategoryName'] != "":
                                                    second_category_name = second_category_name + "," + key['_source'][
                                                        'secondCategoryName']
                                                else:
                                                    second_category_name = second_category_name + "," + key['_source'][
                                                        'secondCategoryName']
                                        except:
                                            pass
                            except:
                                second_category_name = ""
                            if second_category_name != "":
                                should_query.append(
                                    {
                                        "more_like_this": {
                                            "fields": [
                                                "pName.en",
                                                "secondCategoryName"
                                            ],
                                            "like": [
                                                search_text.replace("%20", " "),
                                                second_category_name
                                            ],
                                            "boost": 1,
                                            "min_term_freq": 1,
                                            "max_query_terms": 2
                                        }
                                    }
                                )
                            product_query = {
                                "query": {
                                    "bool": {
                                        "must": search_query,
                                        "should": should_query,
                                        "minimum_should_match": 1,
                                        "boost": 1.0
                                    }
                                }, 
                                "aggs": {
                                    "top_sales_hits": {
                                        "top_hits": {
                                            "sort": [{"_score": {"order": "desc"}}],
                                            "_source": {
                                                "includes": [
                                                    "_id",
                                                    "firstCategoryId",
                                                    "catName",
                                                    "pName",
                                                    "pPName",
                                                    "secondCategoryId",
                                                    "subCatName",
                                                    "thirdCategoryId",
                                                    "subSubCatName",
                                                    "offer",
                                                    "images",
                                                    "suppliers",
                                                    "currencySymbol",
                                                    "currency",
                                                    "tax",
                                                    "units",
                                                    "storeId",
                                                    "storeCategoryId",
                                                    "parentProductId"
                                                ]
                                            },
                                            "from": skip,
                                            "size": limit
                                        }
                                    }
                                }
                            }
                            print(product_query)
                            store_score = 0
                            res = es.search(index=index_products, body=product_query)
                            for hits in res["aggregations"]["top_sales_hits"]["hits"]["hits"]:
                                if hits['_score'] is not None:
                                    store_score = store_score + hits['_score']
                                else:
                                    pass
                                tax_value = []
                                best_supplier = {
                                    "id": str(hits["_source"]["storeId"]),
                                    "productId": str(hits["_id"]),
                                }
                                # ===========================tax for the product=========================================================
                                tax_details = db.childProducts.find_one(
                                    {
                                        "_id": ObjectId(
                                            best_supplier["productId"]
                                        )
                                    }
                                )
                                if tax_details != None:
                                    try:           
                                        if type(tax_details['units'][0]["tax"]) == list:
                                            for tax in tax_details['units'][0]["tax"]:
                                                tax_value.append(
                                                    {"value": tax["taxValue"]}
                                                )
                                        else:
                                            try:
                                                if tax_details['units'][0]["tax"] != None:
                                                    if "taxValue" in tax_details['units'][0]["tax"]:
                                                        tax_value.append(
                                                            {
                                                                "value": tax_details['units'][0][
                                                                    "tax"
                                                                ]["taxValue"]
                                                            }
                                                        )
                                                    else:
                                                        tax_value.append(
                                                            {
                                                                "value": tax_details['units'][0][
                                                                    "tax"
                                                                ]
                                                            }
                                                        )
                                                else:
                                                    pass
                                            except:
                                                pass
                                    except:pass
                                    # =================================price calculation===================================================================
                                    try:
                                        price = tax_details["units"][0][
                                            "b2cPricing"
                                        ][0]["b2cproductSellingPrice"]
                                    except:
                                        try:
                                            price = tax_details["units"][0]['floatValue']
                                        except:
                                            price = best_supplier["retailerPrice"]
                                    tax_price = 0
                                    print(hits["_source"]["storeCategoryId"])
                                    print(DINE_STORE_CATEGORY_ID)
                                    print(tax_value)
                                    if (
                                            hits["_source"]["storeCategoryId"]
                                            == DINE_STORE_CATEGORY_ID
                                    ):
                                        pass
                                    else:
                                        try:
                                            if len(tax_value) == 0:
                                                tax_price = 0
                                            else:
                                                for amount in tax_value:
                                                    tax_price = tax_price + (
                                                        int(amount["value"])
                                                    )
                                        except:pass
                                    # ==================================get currecny rate============================
                                    try:
                                        currency_rate = currency_exchange_rate[
                                            str(tax_details["currency"])
                                            + "_"
                                            + str(currency_code)
                                            ]
                                    except:
                                        currency_rate = 0
                                    currency_details = db.currencies.find_one(
                                        {"currencyCode": currency_code}
                                    )
                                    if currency_details is not None:
                                        currency_symbol = currency_details[
                                            "currencySymbol"
                                        ]
                                        currency = currency_details[
                                            "currencyCode"
                                        ]
                                    else:
                                        currency_symbol = tax_details[
                                            "currencySymbol"
                                        ]
                                        currency = tax_details["currency"]

                                    if float(currency_rate) > 0:
                                        price = price * float(currency_rate)
                                    base_price = price + (
                                            (price * tax_price) / 100
                                    )

                                    # =============================offer check======================================
                                    offer_data = []
                                    if "offer" in tax_details:
                                        for offer in tax_details["offer"]:
                                            if offer["status"] == 1:
                                                offer_terms = (
                                                    db.offers.find_one(
                                                        {
                                                            "_id": ObjectId(
                                                                offer["offerId"]
                                                            )
                                                        },
                                                        {"termscond": 1, "startDateTime": 1}
                                                    )
                                                )
                                                if offer_terms != None:
                                                    offer["termscond"] = offer_terms["termscond"]
                                                    if "startDateTime" in offer_terms:
                                                        if offer_terms["startDateTime"] <= int(
                                                                time.time()):
                                                            offer_data.append(offer)
                                            else:
                                                pass
                                    else:
                                        pass

                                    if len(offer_data) > 0:
                                        best_offer = max(
                                            offer_data,
                                            key=lambda x: x["discountValue"],
                                        )
                                    else:
                                        best_offer = {}

                                    if len(best_offer) == 0:
                                        percentage = 0
                                        discount_type = 0
                                    else:
                                        if "discountType" in best_offer:
                                            percentage = int(best_offer["discountValue"])
                                            discount_type = best_offer["discountType"]
                                        else:
                                            percentage = 0
                                            discount_type = 0

                                    if discount_type == 0:
                                        discount_price = float(percentage)
                                    elif discount_type == 1:
                                        discount_price = (
                                                                    float(base_price)
                                                                    * float(percentage)
                                                            ) / 100
                                    else:
                                        discount_price = 0

                                    final_price = base_price - discount_price
                                    final_price_list = {
                                        "basePrice": round(base_price, 2),
                                        "finalPrice": round(final_price, 2),
                                        "discountPercentage": percentage,
                                        "discountPrice": round(
                                            discount_price, 2
                                        ),
                                    }

                                    # =======================for addons=============================
                                    if "addOns" in tax_details["units"][0]:
                                        if (
                                                tax_details["units"][0]["addOns"]
                                                != None
                                        ):
                                            if (
                                                    len(
                                                        tax_details["units"][0][
                                                            "addOns"
                                                        ]
                                                    )
                                                    > 0
                                            ):
                                                addons_count = True
                                            else:
                                                addons_count = False
                                        else:
                                            addons_count = False
                                    else:
                                        addons_count = False
                                    if addons_count == False:
                                            product_count = db.childProducts.find(
                                                {
                                                    "storeId": ObjectId(
                                                        hits["_source"]["storeId"]
                                                    ),
                                                    "parentProductId": hits["_source"][
                                                        "parentProductId"
                                                    ],
                                                    "status": 1,
                                                }
                                            ).count()
                                            if product_count > 1:
                                                addons_count = True

                                    if (
                                            tax_details["storeCategoryId"]
                                            != DINE_STORE_CATEGORY_ID
                                    ):
                                        if (
                                                tax_details["units"][0][
                                                    "availableQuantity"
                                                ]
                                                > 0
                                        ):
                                            out_of_stock = False
                                        else:
                                            out_of_stock = True
                                    else:
                                        out_of_stock = False

                                    additional_info = []
                                    if "THC" in tax_details["units"][0]:
                                        additional_info.append(
                                            {
                                                "seqId": 2,
                                                "attrname": "THC",
                                                "value": str(
                                                    tax_details["units"][0][
                                                        "THC"
                                                    ]
                                                )
                                                            + " %",
                                            }
                                        )
                                    else:
                                        pass
                                    if "CBD" in tax_details["units"][0]:
                                        additional_info.append(
                                            {
                                                "seqId": 1,
                                                "attrname": "CBD",
                                                "value": str(
                                                    tax_details["units"][0][
                                                        "CBD"
                                                    ]
                                                )
                                                            + " %",
                                            }
                                        )
                                    else:
                                        pass

                                    # =================================================canniber product type========================
                                    if (
                                            "cannabisProductType"
                                            in tax_details["units"][0]
                                    ):
                                        if (
                                                tax_details["units"][0][
                                                    "cannabisProductType"
                                                ]
                                                != ""
                                        ):
                                            cannabis_type_details = db.cannabisProductType.find_one(
                                                {
                                                    "_id": ObjectId(
                                                        tax_details["units"][0][
                                                            "cannabisProductType"
                                                        ]
                                                    ),
                                                    "status": 1,
                                                }
                                            )
                                            if (
                                                    cannabis_type_details
                                                    is not None
                                            ):
                                                additional_info.append(
                                                    {
                                                        "seqId": 3,
                                                        "attrname": "Type",
                                                        "value": cannabis_type_details[
                                                            "productType"
                                                        ][
                                                            "en"
                                                        ],
                                                        "id": tax_details[
                                                            "units"
                                                        ][0][
                                                            "cannabisProductType"
                                                        ],
                                                    }
                                                )
                                            else:
                                                pass
                                    else:
                                        pass

                                    if len(additional_info) > 0:
                                        additional_info = sorted(
                                            additional_info,
                                            key=lambda k: k["seqId"],
                                            reverse=True,
                                        )
                                    else:
                                        additional_info = []

                                    attribute_data = []
                                    if "attributes" in tax_details["units"][0]:
                                        for attr in tax_details["units"][0][
                                            "attributes"
                                        ]:
                                            for att in attr["attrlist"]:
                                                if "linkedtounit" in att:
                                                    if att["linkedtounit"] == 0:
                                                        pass
                                                    else:
                                                        if att["value"] == None:
                                                            pass
                                                        else:
                                                            if (
                                                                    "measurementUnit"
                                                                    in att
                                                            ):
                                                                measurement_unit = att[
                                                                    "measurementUnit"
                                                                ]
                                                            else:
                                                                measurement_unit = (
                                                                    ""
                                                                )
                                                            try:
                                                                attr_value = (
                                                                        str(
                                                                            att[
                                                                                "value"
                                                                            ][
                                                                                language
                                                                            ]
                                                                        )
                                                                        + " "
                                                                        + str(
                                                                    measurement_unit
                                                                )
                                                                )
                                                            except:
                                                                attr_value = ""
                                                            attribute_data.append(
                                                                {
                                                                    "name": att[
                                                                        "attrname"
                                                                    ][language]
                                                                    if language
                                                                        in att[
                                                                            "attrname"
                                                                        ]
                                                                    else att[
                                                                        "attrname"
                                                                    ]["en"],
                                                                    "value": attr_value,
                                                                    "name": att[
                                                                        "attrname"
                                                                    ][language]
                                                                    if language
                                                                        in att[
                                                                            "attrname"
                                                                        ]
                                                                    else att[
                                                                        "attrname"
                                                                    ]["en"],
                                                                }
                                                            )
                                    else:
                                        pass

                                    varinat_boolean = validate_variant(
                                        tax_details[
                                            "parentProductId"
                                        ], best_supplier["id"], zone_id, store_category_id
                                    )

                                    try:
                                        reseller_commission = \
                                            tax_details['units'][0]['b2cPricing'][0][
                                                'b2cresellerCommission']
                                    except:
                                        reseller_commission = 0

                                    try:
                                        reseller_commission_type = \
                                            tax_details['units'][0]['b2cPricing'][
                                                'b2cpercentageCommission']
                                    except:
                                        reseller_commission_type = 0
                                    isFavourite = False
                                    try:
                                        response_casandra = session.execute(
                                                """SELECT * FROM favouriteproductsuserwise where userid=%(userid)s AND childproductid=%(productid)s ALLOW FILTERING""",
                                                {
                                                    "userid": user_id,
                                                    "productid": best_supplier["productId"],
                                                },
                                            )
                                        if not response_casandra:
                                            isFavourite = False
                                        else:
                                            isFavourite = True
                                    except Exception as e:
                                        print(e)
                                        isFavourite = False
                                    likesByUsers=0
                                    likesByInfluencers=0
                                    try:
                                        likesByUsers=db.likesProducts.find({"childproductid": str(best_supplier["productId"]),"isInfluencer":False}).count()
                                        likesByInfluencers=db.likesProducts.find({"childproductid": str(best_supplier["productId"]),"isInfluencer":True}).count()
                                    except:
                                        likesByUsers=0
                                        likesByInfluencers=0
                                    allPrice = hits["_source"]["units"][0]["b2cPricing"]
                                    (
                                        currency_symbol,
                                        currency,
                                        product_status,
                                        product_tag,
                                    ) = next_availbale_time(best_supplier["productId"])
                                    if tax_details["status"] == 1:
                                        if "mealConsumptionTime" in tax_details:
                                            if current_text in tax_details["mealConsumptionTime"]:
                                                pass
                                            elif len(tax_details["mealConsumptionTime"]) > 0:
                                                if int(current_hour) >= 0 and int(current_hour) < 5:
                                                    current_text = "latenightdinner"
                                                    currenct_text_value = ["breakfast", "brunch", "lunch", "tea", "dinner"]
                                                elif int(current_hour) >= 5 and int(current_hour) < 10:
                                                    current_text = "breakfast"
                                                    currenct_text_value = ["brunch", "lunch", "tea", "dinner"]
                                                elif int(current_hour) >= 10 and int(current_hour) < 11:
                                                    current_text = "brunch"
                                                    currenct_text_value = ["lunch", "tea", "dinner"]
                                                elif int(current_hour) >= 11 and int(current_hour) < 15:
                                                    current_text = "lunch"
                                                    currenct_text_value = ["tea", "dinner"]
                                                elif int(current_hour) >= 15 and int(current_hour) < 19:
                                                    current_text = "tea"
                                                    currenct_text_value = ["dinner"]
                                                else:
                                                    current_text = "dinner"
                                                    currenct_text_value = []

                                                for k, v in tax_details["mealConsumptionTime"].items():
                                                    if k in currenct_text_value:
                                                        product_status = True
                                                        next_day = datetime.datetime.now()
                                                        next_day_midnight = next_day.replace(hour=int(meal_timing[k]), minute=00, second=00)
                                                        open_time = next_day_midnight.strftime("%I:%M %p")
                                                        product_tag = "Available On Today At " + open_time
                                                    else:
                                                        product_status = True
                                                        next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                                        next_day_midnight = next_day.replace(hour=meal_timing[k], minute=00, second=00)
                                                        open_time = next_day_midnight.strftime("%I:%M %p")
                                                        product_tag = "Next available at " + open_time + " tomorrow"
                                            else:
                                                product_tag = ""
                                                product_status = False
                                        else:
                                            pass
                                    else:
                                        pass

                                    product_data.append(
                                        {
                                            "resellerCommission": reseller_commission,
                                            "resellerCommissionType": reseller_commission_type,
                                            "parentProductId": str(
                                                tax_details["parentProductId"]
                                            ),
                                            "variantCount": varinat_boolean,
                                            "extraAttributeDetails": additional_info,
                                            "childProductId": best_supplier[
                                                "productId"
                                            ],
                                            "avgRating": hits["_source"][
                                                "avgRating"
                                            ]
                                            if "avgRating" in hits["_source"]
                                            else 0,
                                            "addOnsCount": addons_count,
                                            "offer": best_offer,
                                            "brandName": tax_details[
                                                "brandTitle"
                                            ][language]
                                            if language
                                                in tax_details["brandTitle"]
                                            else tax_details["brandTitle"][
                                                "en"
                                            ],
                                            "brandTitle": tax_details[
                                                "brandTitle"
                                            ][language]
                                            if language
                                                in tax_details["brandTitle"]
                                            else tax_details["brandTitle"][
                                                "en"
                                            ],
                                            "manufactureName": tax_details[
                                                "manufactureName"
                                            ][language]
                                            if language
                                                in tax_details["manufactureName"]
                                            else "",
                                            "unitId": tax_details["units"][0][
                                                "unitId"
                                            ],
                                            "needsIdProof": tax_details[
                                                "needsIdProof"
                                            ]
                                            if "needsIdProof" in tax_details
                                            else False,
                                            "containsMeat": tax_details['containsMeat'] if 'containsMeat' in tax_details else False,
                                            "finalPriceList": final_price_list,
                                            "productName": tax_details["pName"][
                                                language
                                            ]
                                            if language in tax_details["pName"]
                                            else tax_details["pName"]["en"],
                                            "images": tax_details["images"]
                                            if "images" in tax_details
                                            else [],
                                            "addOnsCount": addons_count,
                                            "variantData": attribute_data,
                                            "isAddOns": addons_count,
                                            "suppliers": best_supplier,
                                            "supplier": best_supplier,
                                            "currencySymbol": currency_symbol,
                                            "currency": currency,
                                            "availableQuantity": tax_details[
                                                "units"
                                            ][0]["availableQuantity"]
                                            if "availableQuantity"
                                                in tax_details["units"][0]
                                            else 0,
                                            "productType": tax_details[
                                                "productType"] if "productType" in tax_details else 1,
                                            "outOfStock": out_of_stock,
                                            "isFavourite": isFavourite,
                                            "LikesByUsers":likesByUsers,
                                            "LikesByInfluencers":likesByInfluencers,
                                            "allPrice":allPrice,
                                            "productStatus": product_status,
                                            "productTag": product_tag,
                                        }
                                    )

                            if len(product_data) > 0:
                                newlist = sorted(
                                    product_data,
                                    key=lambda k: k["availableQuantity"],
                                    reverse=True,
                                )
                                res_data_dataframe = pd.DataFrame(newlist)
                                res_data_dataframe = (
                                    res_data_dataframe.drop_duplicates(
                                        "parentProductId", keep="first"
                                    )
                                )
                                res_data_dataframe_newlist = (
                                    res_data_dataframe.to_dict(orient="records")
                                )
                                    
                                product_details.append(
                                    {
                                        
                                        "products": res_data_dataframe_newlist,
                                        "distanceKm": round(distance_km, 2),
                                        "storeScore": store_score
                                    }
                                )


                        store_category_details = db.storeCategory.find_one({"_id": ObjectId(store_category_id)})
                        if store_category_details is not None:
                            store_type = int(store_category_details['type'])
                        else:
                            store_type = 0

                        if len(product_details) > 0 and store_type != 8:
                            new_product_list = sorted(product_details, key=lambda k: k["distanceKm"], reverse=False)
                            dataframe = pd.DataFrame(new_product_list)
                            new_product_list = dataframe.to_dict(orient="records")
                        elif len(product_details) > 0 and store_type == 8:
                            new_product_list = sorted(product_details, key=lambda k: k["storeScore"], reverse=False)
                            dataframe = pd.DataFrame(new_product_list)
                            new_product_list = dataframe.to_dict(orient="records")
                        else:
                            new_product_list = []

                        last_response = {
                            "data": {
                                "productsData": new_product_list,
                            }
                        }
                        return JsonResponse(last_response, safe=False, status=200)
                    else:
                        # ===========================================store query===================================
                        try:
                            current_time = datetime.datetime.now(pytz.timezone(timezone_data_error))
                        except:
                            current_time = datetime.datetime.now()
                        current_hour = current_time.hour

                        if int(current_hour) >= 0 and int(current_hour) < 5:
                            current_text = "latenightdinner"
                        elif int(current_hour) >= 5 and int(current_hour) < 10:
                            current_text = "breakfast"
                        elif int(current_hour) >= 10 and int(current_hour) < 11:
                            current_text = "brunch"
                        elif int(current_hour) >= 11 and int(current_hour) < 15:
                            current_text = "lunch"
                        elif int(current_hour) >= 15 and int(current_hour) < 19:
                            current_text = "tea"
                        else:
                            current_text = "dinner"
                        should_query = []
                        search_query = []
                        store_count = 0
                        total_products_count = 0
                        # =====================================query builder============================================
                        if len(store_details_list) == 0:
                            print('start...................')
                            search_query = []
                            should_query = []
                            search_query.append({"terms": {"status": [1, 2]}})
                            search_query.append({"match": {"units.isPrimary": True}})
                            # ===========================product name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "pName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "pName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 6,
                                        }
                                    }
                                }
                            )
                            # ===========================unit name========================================
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "units.unitName.en": {
                                            "analyzer": "standard",
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match": {
                                        "units.unitName.en": {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 5,
                                        }
                                    }
                                }
                            )
                            # ===========================================detail description============================
                            should_query.append(
                                {
                                    "match": {
                                        "detailDescription."
                                        + language: {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 4,
                                        }
                                    }
                                }
                            )
                            should_query.append(
                                {
                                    "match_phrase_prefix": {
                                        "detailDescription."
                                        + language: {
                                            "query": search_text.replace("%20", " "),
                                            "boost": 4,
                                        }
                                    }
                                }
                            )

                            if store_category_id != "":
                                search_query.append(
                                    {"match": {"storeCategoryId": store_category_id}}
                                )

                            # ==================================for the zone wise search==============================================
                            store_zone_details = []
                            if zone_id != "":
                                zone_details = db.zones.find_one({"_id": ObjectId(zone_id)})
                                if zone_details is None:
                                    store_zone__data = db.stores.find(
                                        {
                                            "categoryId": str(store_category_id),
                                            "serviceZones.zoneId": zone_id,
                                            "status": 1,
                                        }
                                    )
                                else:
                                    store_zone__data = db.stores.find(
                                        {
                                            "categoryId": str(store_category_id),
                                            "cityId": str(zone_details["city_ID"]),
                                            "status": 1,
                                        }
                                    )
                                if store_zone__data.count() > 0:
                                    for store in store_zone__data:
                                        store_zone_details.append(str(store["_id"]))
                                    search_query.append(
                                        {
                                            "terms": {
                                                "storeId": store_zone_details
                                            }
                                        }
                                    )
                                else:
                                    pass
                            else:
                                pass

                            # =========================================================query for the get the products=======================================
                            # catgeory_query = {
                            #     "query": {
                            #         "bool": {
                            #             "must": search_query,
                            #             "should": should_query,
                            #             "minimum_should_match": 1,
                            #             "boost": 1.0,
                            #         }
                            #     },
                            #     "aggs": {
                            #         "group_by_stores": {
                            #             "terms": {
                            #                 "field": "storeId.keyword",
                            #                 "size": int(20),
                            #             },
                            #             "aggs": {
                            #                 "top_sales_hits": {
                            #                     "top_hits": {
                            #                         "sort": [{"_score": {"order": "desc"}}],
                            #                         "_source": {
                            #                             "includes": [
                            #                                 "_id",
                            #                                 "secondCategoryName"
                            #                             ]
                            #                         },
                            #                         "size": 30,
                            #                     }
                            #                 }
                            #             },
                            #         }
                            #     },
                            # }
                            # res_first_category = es.search(index=index_products, body=catgeory_query)
                            # second_category_name = ""
                            # try:
                            #     for cat in res_first_category["aggregations"]["group_by_stores"]['buckets']:
                            #         for key in cat['top_sales_hits']['hits']['hits']:
                            #             try:
                            #                 if key['_source']['secondCategoryName'] == "":
                            #                     pass
                            #                 else:
                            #                     if key['_source']['secondCategoryName'] != "":
                            #                         second_category_name = second_category_name + "," + key['_source'][
                            #                             'secondCategoryName']
                            #                     else:
                            #                         second_category_name = second_category_name + "," + key['_source'][
                            #                             'secondCategoryName']
                            #             except:
                            #                 pass
                            # except:
                            #     second_category_name = ""
                            # if second_category_name != "":
                            #     should_query.append(
                            #         {
                            #             "more_like_this": {
                            #                 "fields": [
                            #                     "pName.en",
                            #                     "secondCategoryName"
                            #                 ],
                            #                 "like": [
                            #                     search_text.replace("%20", " "),
                            #                     second_category_name
                            #                 ],
                            #                 "boost": 1,
                            #                 "min_term_freq": 1,
                            #                 "max_query_terms": 2
                            #             }
                            #         }
                            #     )
                            product_query = {
                                "query": {
                                    "bool": {
                                        "must": search_query,
                                        "should": should_query,
                                        "minimum_should_match": 1,
                                        "boost": 1.0
                                    }
                                },
                                "aggs": {
                                    "group_by_stores": {
                                        "terms": {
                                            "order": {"avg_score": "desc"},
                                            "field": "storeId.keyword",
                                            "size": 30
                                        },
                                        "aggs": {
                                            "store_count": {
                                                "cardinality": {
                                                    "field": "storeId.keyword"
                                                }
                                            },
                                            "total_products": {
                                                "value_count": {
                                                    "field": "_id"
                                                }
                                            },
                                            "avg_score": {"max": {"script": "_score"}},
                                            "top_sales_hits": {
                                                "top_hits": {
                                                    "sort": [{"_score": {"order": "desc"}}],
                                                    "_source": {
                                                        "includes": [
                                                            "_id",
                                                            "_score",
                                                            "firstCategoryId",
                                                            "catName",
                                                            "pName",
                                                            "pPName",
                                                            "secondCategoryId",
                                                            "subCatName",
                                                            "thirdCategoryId",
                                                            "subSubCatName",
                                                            "offer",
                                                            "images",
                                                            "suppliers",
                                                            "currencySymbol",
                                                            "currency",
                                                            "tax",
                                                            "units",
                                                            "storeId",
                                                            "storeCategoryId",
                                                            "parentProductId"
                                                        ]
                                                    },
                                                    "from": skip,
                                                    "size": limit
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            print(product_query)
                            res = es.search(index=index_products, body=product_query)
                            print(f' query exicute time : {time.time() - start_time}')
                            store_count = len(res['aggregations']['group_by_stores']['buckets'])
                            if len(res["hits"]["hits"]) > 0:
                                start_time1 = time.time()
                                print("start_time1",start_time1)
                                with ThreadPoolExecutor(max_workers=4) as executor:
                                    # Submit tasks to the executor
                                    future_to_bucket = {
                                        executor.submit(process_store_and_products_data, bucket, zone_id, lat, long, language, currency_code, store_category_id, user_id): bucket 
                                        for bucket in res["aggregations"]["group_by_stores"]["buckets"][from_store:size_store+1]
                                    }                                    
                                    for future in as_completed(future_to_bucket):
                                        bucket = future_to_bucket[future]
                                        try:
                                            prod_details, store_details = future.result()  # This will block until the task is completed
                                            product_details.extend(prod_details)  # Aggregate product details from each task
                                            store_details_list.extend(store_details)  # Aggregate store details from each task
                                            print(f"Task completed with {len(product_details)} product(s) and {len(store_details_list)} store(s).")
                                        except Exception as e:
                                            traceback.print_exc()
                                            print(f"Task resulted in an error: {e}")
                                    print(f' worker excution time : {time.time() - start_time1}')
                            else:
                                pass
                        else:
                            pass
                        store_category_details = db.storeCategory.find_one({"_id": ObjectId(store_category_id)})
                        if store_category_details is not None:
                            store_type = int(store_category_details['type'])
                        else:
                            store_type = 0

                        if len(store_details_list) > 0 and store_type != 8:
                            new_store_list = sorted(store_details_list, key=lambda k: k["distanceKm"], reverse=False)
                            dataframe = pd.DataFrame(new_store_list)
                            dataframe = dataframe.drop_duplicates(
                                subset="uniqStoreId", keep="first"
                            )
                            new_store_list = dataframe.to_dict(orient="records")
                        elif len(store_details_list) > 0 and store_type == 8:
                            new_store_list = sorted(store_details_list, key=lambda k: k["storeScore"], reverse=False)
                            dataframe = pd.DataFrame(new_store_list)
                            dataframe = dataframe.drop_duplicates(subset="uniqStoreId", keep="first")
                            new_store_list = dataframe.to_dict(orient="records")
                        else:
                            new_store_list = []

                        if len(product_details) > 0 and store_type != 8:
                            new_product_list = sorted(product_details, key=lambda k: k["distanceKm"], reverse=False)
                            dataframe = pd.DataFrame(new_product_list)
                            dataframe = dataframe.drop_duplicates(
                                subset="uniqStoreId", keep="first"
                            )
                            new_product_list = dataframe.to_dict(orient="records")
                        elif len(product_details) > 0 and store_type == 8:
                            new_product_list = sorted(product_details, key=lambda k: k["storeScore"], reverse=False)
                            dataframe = pd.DataFrame(new_product_list)
                            dataframe = dataframe.drop_duplicates(subset="uniqStoreId", keep="first")
                            new_product_list = dataframe.to_dict(orient="records")
                        else:
                            new_product_list = []

                        new_store_list = sorted(new_store_list, key=lambda k: k["storeIsOpen"], reverse=True)
                        new_product_list = sorted(new_product_list, key=lambda k: k["storeIsOpen"], reverse=True)
                        last_response = {
                            "data": {
                                "storeData": new_store_list,
                                "productsData": new_product_list,
                                "isSameStore": True,
                                "storeCount" :store_count
                            }
                        }
                        print(f' API exicute time : {time.time() - start_time}')
                        return JsonResponse(last_response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)


class StoreCategoryDetails(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Store Category Details"],
        operation_description="API for getting store category based on latitute and longtitute",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "data": openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        required=[
                            "cityId",
                            "currency",
                            "currencySymbol",
                            "countryId",
                            "laundry",
                            "storeCategoryId",
                            "cityName",
                        ],
                        properties={
                            "cityId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="city id of the founded in store category",
                                example="5df7b7218798dc2c1114e6bf",
                            ),
                            "countryId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="country id of the founded store category",
                                example="5df7b7218798dc2c1114e6bf",
                            ),
                            "currency": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="currency of the user's country or city",
                                example="INR",
                            ),
                            "currencySymbol": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="currency symbol of the user's country or city",
                                example="₹",
                            ),
                            "cityName": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="city name of the founded zone",
                                example="Bengaluru",
                            ),
                        },
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="category data found",
                    ),
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="data not found",
                    ),
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            lat = request.GET["lat"]
            long = request.GET["long"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)

            condition = {
                "isDeleted": False,
                "polygons": {
                    "$geoIntersects": {
                        "$geometry": {"type": "Point", "coordinates": [float(long), float(lat)]}
                    }
                },
            }
            category_details = db.cities.find_one(
                condition,
                {
                    "_id": 1,
                    "cityId": 1,
                    "cityName": 1,
                    "currency": 1,
                    "currencySymbol": 1,
                    "laundry": 1,
                    "storeCategory": 1,
                },
            )
            if category_details != None:
                category_data = {
                    "city": category_details["cityName"],
                    "cityId": str(category_details["cityId"]),
                    "currency": category_details["currency"],
                    "currencySymbol": category_details["currencySymbol"],
                    "title": category_details["cityName"],
                    "laundry": category_details["laundry"],
                    "storeCategory": category_details["storeCategory"],
                    "_id": str(category_details["_id"]),
                }
                response = {"data": category_data, "message": "category data found"}
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"message": "data not found"}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"message": message}
            return JsonResponse(error, safe=False, status=500)


"""
  API for the get the city from the latitude and longitude
"""


class ServiceDetails(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Service"],
        operation_description="API for getting services based on latitute and longtitute",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
            openapi.Parameter(
                name="search",
                default="",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="search the services base on service name",
            ),
            openapi.Parameter(
                name="timezone",
                default="330",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="offset of the timezone",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b6ea8798dc19d926bd28",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from which zone we need to get the stores",
            ),
            openapi.Parameter(
                name="requestFrom",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from where the request is coming and which services need to give in response. values are 1 for web and 2 for app",
            ),
            openapi.Parameter(
                name="storeType",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from which type store we need to get the store category",
            ),
            openapi.Parameter(
                name="linkFromId",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from which link we need to fetch the store category "
                            "value should be "
                            "0 for Delivery App, 2 for Karry, 3 for Truck, 4 for Towme",
            ),
        ],
        responses={
            200: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    "data": openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        required=[
                            "cityId",
                            "currency",
                            "currencySymbol",
                            "_id",
                            "zoneId",
                            "city",
                            "title",
                        ],
                        properties={
                            "cityId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="city id of the founded zone",
                                example="5df7b7218798dc2c1114e6bf",
                            ),
                            "currency": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="currency of the user's country or city",
                                example="INR",
                            ),
                            "currencySymbol": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="currency symbol of the user's country or city",
                                example="₹",
                            ),
                            "_id": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="id of the founded city",
                                example="5df8b6ea8798dc19d926bd28",
                            ),
                            "title": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="name of the founded city",
                                example="Mexico city",
                            ),
                        },
                    ),
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="response message of the request",
                        example="In operational city.",
                    ),
                },
            ),
            401: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="token expire message",
                        example="unauthorized",
                    )
                },
            ),
            404: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="data not found",
                        example="data not found",
                    ),
                },
            ),
            500: openapi.Schema(
                type=openapi.TYPE_OBJECT,
                required=["message"],
                properties={
                    "message": openapi.Schema(
                        type=openapi.TYPE_STRING,
                        description="message for the error",
                        example="An exception of type TypeError occurred. Arguments:('string indices must be integers',)",
                    )
                },
            ),
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            lat = request.GET.get("lat", "0")
            long = request.GET.get("long", "0")
            search = request.GET.get("search", "")
            zone_id = request.GET.get("zoneId", "")
            to_store_type = int(request.GET.get("storeType", "0"))
            timezone = request.GET.get("timezone", "Asia/Calcutta")
            timezone_error_data = request.GET.get("timezone", "Asia/Calcutta")
            timezone = timezone.replace("%2F", "/")
            print('ln--', language)

            request_from = int(request.GET.get("requestFrom", 0))
            link_from_id = int(request.GET.get("linkFromId", -1))
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            
            try:
                user_id = json.loads(token)["userId"]
            except:
                user_id = ""
            zone_condition = {
                "status": 1,
                "polygons": {
                    "$geoIntersects": {
                        "$geometry": {"type": "Point", "coordinates": [float(long), float(lat)]}
                    }
                },
            }
            if search == "":
                condition = {
                    "isDeleted": False,
                    "polygons": {
                        "$geoIntersects": {
                            "$geometry": {"type": "Point", "coordinates": [float(long), float(lat)]}
                        }
                    },
                }
            else:
                condition = {
                    "storeCategory.storeCategoryName.en": {
                        "$regex": (search).replace("%20", " "),
                        "$options": "i",
                    },
                    "isDeleted": False,
                    "polygons": {
                        "$geoIntersects": {
                            "$geometry": {"type": "Point", "coordinates": [float(long), float(lat)]}
                        }
                    },
                }
            zone_details = db.cities.find_one(
                condition,
                {
                    "_id": 1,
                    "cityId": 1,
                    "countryId": 1,
                    "currency": 1,
                    "currencySymbol": 1,
                    "cityName": 1,
                    "state": 1,
                    "laundry": 1,
                    "storeCategory": 1,
                    "paymentMode": 1,
                },
            )
            zone_data = db.zones.find_one(zone_condition, {"_id": 1, "title": 1})
            store_category_details = []
            store_category_wise_details = []
            hyper_local_data = []
            classified = db.storeCategory.find({"type": 24, "visibility": 1})
            if classified.count() > 0:
                try:
                    for cls_ in classified:
                        storeListing = 0
                        shiftselection = 0
                        if "storeListing" in cls_:
                            if cls_["storeListing"] is True or cls_["storeListing"] == 1:
                                storeListing = 1
                            else:
                                storeListing = 0
                        if "shiftSelection" in cls_:
                            if cls_["shiftSelection"] is True or cls_["shiftSelection"] == 1:
                                shiftselection = 1
                            else:
                                shiftselection = 0
                        if str(cls_["_id"]) not in store_category_details:
                            store_category_details.append({
                                "_id": str(cls_["_id"]),
                                "allowOrderOutOfStock": cls_["allowOrderOutOfStock"]
                                if "allowOrderOutOfStock" in cls_
                                else False,
                                "categoryName": cls_["storeCategoryName"]["en"]
                                if "en" in cls_["storeCategoryName"]
                                else "",
                                "description": cls_["storeCategoryDescription"]["en"]
                                if "en" in cls_["storeCategoryDescription"]
                                else "",
                                "featured": cls_["featured"]
                                if "featured" in cls_
                                else False,
                                "bannerImage": cls_["bannerImage"]
                                if "bannerImage" in cls_
                                else details["bannerImage"],
                                "mobileGIF": cls_["mobileGIF"]
                                if "mobileGIF" in cls_
                                else "",
                                "hyperlocal": cls_["hyperlocal"]
                                if "hyperlocal" in cls_
                                else False,
                                "linkFromId": cls_["linkFromId"]
                                if "linkFromId" in cls_
                                else 0,
                                "ecommerce": cls_["ecommerce"]
                                if "ecommerce" in cls_
                                else False,
                                "extraASAPDeliveryFee": cls_["extraASAPDeliveryFee"]
                                if "extraASAPDeliveryFee" in cls_
                                else 0,
                                "storeListing": storeListing,
                                "deliveryTime": int(cls_["deliveryTime"])
                                if "deliveryTime" in cls_
                                else 0,
                                "nowBooking": int(cls_["nowBooking"])
                                if "nowBooking" in cls_
                                else 0,
                                "scheduleBooking": int(cls_["scheduleBooking"])
                                if "scheduleBooking" in cls_
                                else 0,
                                "deliverTo": int(cls_["deliverTo"])
                                if "deliverTo" in cls_
                                else 1,
                                "shiftSelection": shiftselection,
                                "logoImage": cls_["logoImage"]
                                if "logoImage" in cls_
                                else cls_["logoImage"],
                                "iconlogoimg": cls_["iconlogoimg"]
                                if "iconlogoimg" in cls_
                                else cls_["iconlogoimg"],
                                "type": cls_["type"] if "type" in cls_ else 1,
                                "typeMsg": cls_["typeMsg"]
                                if "typeMsg" in cls_
                                else "",
                                "colorCode": cls_["colorCode"].replace("#", "")
                                if "colorCode" in cls_
                                else "29297b",
                                "negotiation": cls_["negotiation"] if "negotiation" in cls_ else False,
                                "receiverConfirmation": cls_[
                                    "receiverConfirmation"] if "receiverConfirmation" in cls_ else False,
                                "loadBoard": cls_['loadBoard'] if 'loadBoard' in cls_ else False
                            }
                            )
                except Exception as e:
                    print("classified error: ", str(e))
            if zone_details is not None:
                if "storeCategory" in zone_details:
                    for cat in zone_details["storeCategory"]:
                        if search == "":
                            details = db.storeCategory.find_one(
                                {"_id": ObjectId(cat["storeCategoryId"]), "visibility":1},
                                {
                                    "storeCategoryName": 1,
                                    "storeCategoryDescription": 1,
                                    "bannerImage": 1,
                                    "logoImage": 1,
                                    "allowOrderOutOfStock": 1,
                                    "signatureRequire": 1,
                                    "deliveryTime": 1,
                                    "nowBooking": 1,
                                    "scheduleBooking": 1,
                                    "shiftSelection": 1,
                                    "deliverTo": 1,
                                    "shippedToText": 1,
                                    "deliveryTimeText": 1,
                                    "iconlogoimg": 1,
                                    "type": 1,
                                    "typeName": 1,
                                    "colorCode": 1,
                                },
                            )
                            hyperlocal = cat["hyperlocal"] if "hyperlocal" in cat else False
                            storeListing = cat["storeListing"] if "storeListing" in cat else 0
                            # if hyperlocal == True and storeListing == int(1):
                            #     hyper_local_data.append(str(cat["storeCategoryId"]))
                            # else:
                            #     pass
                            hyper_local_data.append(str(cat["storeCategoryId"]))
                            if details != None:
                                store_category_json = {
                                    "_id": str(cat["storeCategoryId"]),
                                    "allowOrderOutOfStock": cat["allowOrderOutOfStock"]
                                    if "allowOrderOutOfStock" in cat
                                    else False,
                                    "categoryName": cat["storeCategoryName"][language]
                                    if language in cat["storeCategoryName"]
                                    else cat["storeCategoryName"]['en'],
                                    "description": cat["storeCategoryDescription"]["en"]
                                    if "en" in cat["storeCategoryDescription"]
                                    else "",
                                    "featured": cat["featured"] if "featured" in cat else False,
                                    "bannerImage": cat["bannerImage"]
                                    if "bannerImage" in cat
                                    else details["bannerImage"],
                                    "mobileGIF": cat["mobileGIF"] if "mobileGIF" in cat else "",
                                    "hyperlocal": cat["hyperlocal"]
                                    if "hyperlocal" in cat
                                    else False,
                                    "ecommerce": cat["ecommerce"] if "ecommerce" in cat else False,
                                    "linkFromId": cat["linkFromId"] if "linkFromId" in cat else 0,
                                    "extraASAPDeliveryFee": cat["extraASAPDeliveryFee"]
                                    if "extraASAPDeliveryFee" in cat
                                    else 0,
                                    "storeListing": storeListing,
                                    "deliveryTime": int(cat["deliveryTime"])
                                    if "deliveryTime" in cat
                                    else 0,
                                    "nowBooking": int(cat["nowBooking"])
                                    if "nowBooking" in cat
                                    else 0,
                                    "scheduleBooking": int(cat["scheduleBooking"])
                                    if "scheduleBooking" in cat
                                    else 0,
                                    "deliverTo": details["deliverTo"]
                                    if "deliverTo" in details
                                    else 1,
                                    "shiftSelection": int(cat["shiftSelection"])
                                    if "shiftSelection" in cat
                                    else 0,
                                    "logoImage": cat["logoImage"]
                                    if "logoImage" in cat
                                    else details["logoImage"],
                                    "iconlogoimg": cat["iconlogoimg"]
                                    if "iconlogoimg" in cat
                                    else details["iconlogoimg"],
                                    "type": details["type"] if "type" in details else 1,
                                    "typeMsg": details["typeMsg"] if "typeMsg" in details else "",
                                    "colorCode": cat["colorCode"].replace("#", "")
                                    if "colorCode" in cat
                                    else "29297b",
                                    "negotiation": cat["negotiation"] if "negotiation" in cat else False,
                                    "receiverConfirmation": cat[
                                        "receiverConfirmation"] if "receiverConfirmation" in cat else False,
                                    "loadBoard": cat['loadBoard'] if 'loadBoard' in cat else False
                                }
                            else:
                                store_category_json = {
                                    "_id": str(cat["storeCategoryId"]),
                                    "allowOrderOutOfStock": cat["allowOrderOutOfStock"]
                                    if "allowOrderOutOfStock" in cat
                                    else False,
                                    "categoryName": cat["storeCategoryName"][language]
                                    if language in cat["storeCategoryName"]
                                    else cat["storeCategoryName"]['en'],
                                    "description": cat["storeCategoryDescription"]["en"]
                                    if "en" in cat["storeCategoryDescription"]
                                    else "",
                                    "featured": cat["featured"] if "featured" in cat else False,
                                    "bannerImage": cat["bannerImage"]
                                    if "bannerImage" in cat
                                    else details["bannerImage"],
                                    "mobileGIF": cat["mobileGIF"] if "mobileGIF" in cat else "",
                                    "ecommerce": cat["ecommerce"] if "ecommerce" in cat else False,
                                    "hyperlocal": cat["hyperlocal"]
                                    if "hyperlocal" in cat
                                    else False,
                                    "linkFromId": cat["linkFromId"] if "linkFromId" in cat else 0,
                                    "extraASAPDeliveryFee": cat["extraASAPDeliveryFee"]
                                    if "extraASAPDeliveryFee" in cat
                                    else 0,
                                    "storeListing": storeListing,
                                    "deliveryTime": int(cat["deliveryTime"])
                                    if "deliveryTime" in cat
                                    else 0,
                                    "nowBooking": int(cat["nowBooking"])
                                    if "nowBooking" in cat
                                    else 0,
                                    "scheduleBooking": int(cat["scheduleBooking"])
                                    if "scheduleBooking" in cat
                                    else 0,
                                    "deliverTo": 1,
                                    "shiftSelection": int(cat["shiftSelection"])
                                    if "shiftSelection" in cat
                                    else 0,
                                    "logoImage": cat["logoImage"]
                                    if "logoImage" in cat
                                    else details["logoImage"],
                                    "iconlogoimg": cat["iconlogoimg"]
                                    if "iconlogoimg" in cat
                                    else details["iconlogoimg"],
                                    "type": cat["type"] if "type" in cat else 1,  # 1,
                                    "typeMsg": "",
                                    "colorCode": cat["colorCode"].replace("#", "")
                                    if "colorCode" in cat
                                    else "29297b",
                                    "negotiation": cat["negotiation"] if "negotiation" in cat else False,
                                    "receiverConfirmation": cat[
                                        "receiverConfirmation"] if "receiverConfirmation" in cat else False,
                                    "loadBoard": cat['loadBoard'] if 'loadBoard' in cat else False
                                }

                            if "activeMobile" in cat and "activeWeb" in cat:
                                if link_from_id == -1:
                                    if to_store_type == 0:
                                        if request_from == 1 and cat["activeWeb"] == True:
                                            store_category_details.append(store_category_json)
                                        elif request_from == 2 and cat["activeMobile"] == True:
                                            store_category_details.append(store_category_json)
                                        elif request_from == 0:
                                            store_category_details.append(store_category_json)
                                        else:
                                            pass
                                    elif to_store_type == int(store_category_json["type"]):
                                        if request_from == 1 and cat["activeWeb"] == True:
                                            store_category_details.append(store_category_json)
                                        elif request_from == 2 and cat["activeMobile"] == True:
                                            store_category_details.append(store_category_json)
                                        elif request_from == 0:
                                            store_category_details.append(store_category_json)
                                        else:
                                            pass
                                else:
                                    try:
                                        if link_from_id == 3 and link_from_id == int(cat["linkFromId"]):
                                            if cat['negotiation'] is False and cat['receiverConfirmation'] is False:
                                                if request_from == 1 and cat["activeWeb"] == True:
                                                    store_category_details.append(store_category_json)
                                                elif request_from == 2 and cat["activeMobile"] == True:
                                                    store_category_details.append(store_category_json)
                                                elif request_from == 0:
                                                    store_category_details.append(store_category_json)
                                                else:
                                                    pass
                                            else:
                                                pass
                                    except:
                                        pass
                                    if link_from_id == int(cat["linkFromId"]):
                                        if request_from == 1 and cat["activeWeb"] == True:
                                            store_category_details.append(store_category_json)
                                        elif request_from == 2 and cat["activeMobile"] == True:
                                            store_category_details.append(store_category_json)
                                        elif request_from == 0:
                                            store_category_details.append(store_category_json)
                                        else:
                                            pass
                                    else:
                                        pass
                            else:
                                if link_from_id == -1:
                                    if to_store_type == 0:
                                        store_category_details.append(store_category_json)
                                    elif to_store_type == int(store_category_json["type"]):
                                        store_category_details.append(store_category_json)
                                elif link_from_id == 3 and link_from_id == int(cat["linkFromId"]):
                                    if cat['negotiation'] is False and cat['receiverConfirmation'] is False:
                                        if to_store_type == 0:
                                            store_category_details.append(store_category_json)
                                        elif to_store_type == int(store_category_json["type"]):
                                            store_category_details.append(store_category_json)
                                    else:
                                        pass
                                else:
                                    if link_from_id == int(store_category_json["linkFromId"]):
                                        if to_store_type == 0:
                                            store_category_details.append(store_category_json)
                                        elif to_store_type == int(store_category_json["type"]):
                                            store_category_details.append(store_category_json)
                                    else:
                                        pass
                        else:
                            if (
                                    search.lower() in cat["storeCategoryName"]["en"]
                                    or search.upper() in cat["storeCategoryName"]["en"]
                                    or search in cat["storeCategoryName"]["en"]
                                    or search.capitalize() in cat["storeCategoryName"]["en"]
                            ):
                                details = db.storeCategory.find_one(
                                    {"_id": ObjectId(cat["storeCategoryId"]) , "visibility":1},
                                    {
                                        "storeCategoryName": 1,
                                        "storeCategoryDescription": 1,
                                        "bannerImage": 1,
                                        "logoImage": 1,
                                        "allowOrderOutOfStock": 1,
                                        "signatureRequire": 1,
                                        "deliveryTime": 1,
                                        "nowBooking": 1,
                                        "scheduleBooking": 1,
                                        "shiftSelection": 1,
                                        "deliverTo": 1,
                                        "shippedToText": 1,
                                        "deliveryTimeText": 1,
                                        "iconlogoimg": 1,
                                        "type": 1,
                                        "typeName": 1,
                                        "colorCode": 1,
                                    },
                                )
                                hyperlocal = cat["hyperlocal"] if "hyperlocal" in cat else False
                                storeListing = cat["storeListing"] if "storeListing" in cat else 0
                                # if hyperlocal == True and storeListing == int(1):
                                #     hyper_local_data.append(str(cat["storeCategoryId"]))
                                # else:
                                #     pass
                                hyper_local_data.append(str(cat["storeCategoryId"]))
                                if details != None:
                                    store_category_details.append(
                                        {
                                            "_id": str(cat["storeCategoryId"]),
                                            "allowOrderOutOfStock": cat["allowOrderOutOfStock"]
                                            if "allowOrderOutOfStock" in cat
                                            else False,
                                            "categoryName": cat["storeCategoryName"][language]
                                            if language in cat["storeCategoryName"]
                                            else cat["storeCategoryName"]['en'],
                                            "description": cat["storeCategoryDescription"]["en"]
                                            if "en" in cat["storeCategoryDescription"]
                                            else "",
                                            "featured": cat["featured"]
                                            if "featured" in cat
                                            else False,
                                            "bannerImage": cat["bannerImage"]
                                            if "bannerImage" in cat
                                            else details["bannerImage"],
                                            "mobileGIF": cat["mobileGIF"]
                                            if "mobileGIF" in cat
                                            else "",
                                            "hyperlocal": cat["hyperlocal"]
                                            if "hyperlocal" in cat
                                            else False,
                                            "linkFromId": cat["linkFromId"]
                                            if "linkFromId" in cat
                                            else 0,
                                            "ecommerce": cat["ecommerce"]
                                            if "ecommerce" in cat
                                            else False,
                                            "extraASAPDeliveryFee": cat["extraASAPDeliveryFee"]
                                            if "extraASAPDeliveryFee" in cat
                                            else 0,
                                            "storeListing": storeListing,
                                            "deliveryTime": int(cat["deliveryTime"])
                                            if "deliveryTime" in cat
                                            else 0,
                                            "nowBooking": int(cat["nowBooking"])
                                            if "nowBooking" in cat
                                            else 0,
                                            "scheduleBooking": int(cat["scheduleBooking"])
                                            if "scheduleBooking" in cat
                                            else 0,
                                            "deliverTo": int(details["deliverTo"])
                                            if "deliverTo" in details
                                            else 1,
                                            "shiftSelection": cat["shiftSelection"]
                                            if "shiftSelection" in cat
                                            else 0,
                                            "logoImage": cat["logoImage"]
                                            if "logoImage" in cat
                                            else details["logoImage"],
                                            "iconlogoimg": cat["iconlogoimg"]
                                            if "iconlogoimg" in cat
                                            else details["iconlogoimg"],
                                            "type": details["type"] if "type" in details else 1,
                                            "typeMsg": details["typeMsg"]
                                            if "typeMsg" in details
                                            else "",
                                            "colorCode": cat["colorCode"].replace("#", "")
                                            if "colorCode" in cat
                                            else "29297b",
                                            "negotiation": cat["negotiation"] if "negotiation" in cat else False,
                                            "receiverConfirmation": cat[
                                                "receiverConfirmation"] if "receiverConfirmation" in cat else False,
                                            "loadBoard": cat['loadBoard'] if 'loadBoard' in cat else False
                                        }
                                    )
                                else:
                                    pass
                else:
                    pass

                # get classified
                classified = db.storeCategory.find({"typeName" : "Classify", "status": 1})
                if classified.count():
                    try:
                        for cls_ in classified:
                            storeListing = 0
                            shiftselection = 0
                            if "storeListing" in cls_:
                                if cls_["storeListing"] is True or cls_["storeListing"] == 1:
                                    storeListing = 1
                                else:
                                    storeListing = 0
                            if "shiftSelection" in cls_:
                                if cls_["shiftSelection"] is True or cls_["shiftSelection"] == 1:
                                    shiftselection = 1
                                else:
                                    shiftselection = 0
                            if str(cls_["_id"]) not in store_category_details:
                                store_category_details.append({
                                    "_id": str(cls_["_id"]),
                                    "allowOrderOutOfStock": cls_["allowOrderOutOfStock"]
                                    if "allowOrderOutOfStock" in cls_
                                    else False,
                                    "categoryName": cls_["storeCategoryName"][language]
                                    if language in cls_["storeCategoryName"]
                                    else cls_["storeCategoryName"]['en'],
                                    "description": cls_["storeCategoryDescription"]["en"]
                                    if "en" in cls_["storeCategoryDescription"]
                                    else "",
                                    "featured": cls_["featured"]
                                    if "featured" in cls_
                                    else False,
                                    "bannerImage": cls_["bannerImage"]
                                    if "bannerImage" in cls_
                                    else details["bannerImage"],
                                    "mobileGIF": cls_["mobileGIF"]
                                    if "mobileGIF" in cls_
                                    else "",
                                    "hyperlocal": cls_["hyperlocal"]
                                    if "hyperlocal" in cls_
                                    else False,
                                    "linkFromId": cls_["linkFromId"]
                                    if "linkFromId" in cls_
                                    else 0,
                                    "ecommerce": cls_["ecommerce"]
                                    if "ecommerce" in cls_
                                    else False,
                                    "extraASAPDeliveryFee": cls_["extraASAPDeliveryFee"]
                                    if "extraASAPDeliveryFee" in cls_
                                    else 0,
                                    "storeListing": storeListing,
                                    "deliveryTime": int(cls_["deliveryTime"])
                                    if "deliveryTime" in cls_
                                    else 0,
                                    "nowBooking": int(cls_["nowBooking"])
                                    if "nowBooking" in cls_
                                    else 0,
                                    "scheduleBooking": int(cls_["scheduleBooking"])
                                    if "scheduleBooking" in cls_
                                    else 0,
                                    "deliverTo": int(cls_["deliverTo"])
                                    if "deliverTo" in cls_
                                    else 1,
                                    "shiftSelection": shiftselection,
                                    "logoImage": cls_["logoImage"]
                                    if "logoImage" in cls_
                                    else cls_["logoImage"],
                                    "iconlogoimg": cls_["iconlogoimg"]
                                    if "iconlogoimg" in cls_
                                    else cls_["iconlogoimg"],
                                    "type": cls_["type"] if "type" in cls_ else 1,
                                    "typeMsg": cls_["typeMsg"]
                                    if "typeMsg" in cls_
                                    else "",
                                    "colorCode": cls_["colorCode"].replace("#", "")
                                    if "colorCode" in cls_
                                    else "29297b",
                                    "negotiation": cls_["negotiation"] if "negotiation" in cls_ else False,
                                    "receiverConfirmation": cls_[
                                        "receiverConfirmation"] if "receiverConfirmation" in cls_ else False,
                                    "loadBoard": cls_['loadBoard'] if 'loadBoard' in cls_ else False
                                }
                            )
                    except Exception as e: print("classified error: ", str(e))


                if len(hyper_local_data) > 0 and zone_data is not None:
                    for cat_id in hyper_local_data:
                        try:
                            seller_data = []
                            store_query = {
                                "sort": [
                                    {"storeIsOpen": {"order": "desc"}},
                                    {
                                        "_geo_distance": {
                                            "distance_type": "plane",
                                            "location": {"lat": float(lat), "lon": float(long)},
                                            "order": "asc",
                                            "unit": "km",
                                        }
                                    },
                                ],
                                "query": {
                                    "bool": {
                                        "must": [
                                            {"match_phrase_prefix": {"categoryId": cat_id}},
                                            {"match": {"status": 1}},
                                            {
                                                "match": {
                                                    "serviceZones.zoneId": str(zone_data["_id"])
                                                }
                                            }
                                            # },
                                            # {
                                            #     "geo_distance": {
                                            #         "distance": "100km",
                                            #         "location": {
                                            #             "lat": float(lat),
                                            #             "lon": float(long),
                                            #         }
                                            #     }
                                            # }
                                        ]
                                    }
                                },
                                "size": 500,
                                "from": 0,
                            }
                            res_store = es.search(
                                index=index_store,
                                # doc_type=doc_central_product,
                                body=store_query,
                                filter_path=[
                                    "hits.hits._id",
                                    "hits.hits.sort",
                                    "hits.hits._source.storeName",
                                    "hits.hits._source.parentSellerIdOrSupplierId",
                                    "hits.hits._source.uniqStoreId",
                                ],
                            )
                            all_store_details = []
                            if len(res_store) > 0:
                                for r_s in res_store["hits"]["hits"]:
                                    distance_km = round(r_s["sort"][1], 2)
                                    distance_miles = round(distance_km * conv_fac, 2)
                                    all_store_details.append(
                                        {
                                            "id": str(r_s["_id"]),
                                            "distance": distance_km,
                                            "storeName": r_s["_source"]["storeName"]["en"],
                                            "parentSellerIdOrSupplierId": r_s["_source"][
                                                "parentSellerIdOrSupplierId"
                                            ],
                                            "uniqStoreId": r_s["_source"]["uniqStoreId"]
                                            if "uniqStoreId" in r_s["_source"]
                                            else "0",
                                        }
                                    )
                            # unique_stores = []
                            unique_stores = sorted(
                                all_store_details, key=lambda k: k["distance"], reverse=False
                            )
                            if len(unique_stores) > 0:
                                dataframe_details = pd.DataFrame(unique_stores)
                                if cat_id == DINE_STORE_CATEGORY_ID:
                                    dataframe_details = dataframe_details.drop_duplicates(
                                        "uniqStoreId", keep="first"
                                    )
                                else:
                                    dataframe_details = dataframe_details
                                spec_data = dataframe_details.to_json(orient="records")
                                spec_data = json.loads(spec_data)
                            else:
                                spec_data = []

                            final_stores = []
                            # for store in store_non_unique:
                            for store in spec_data:
                                final_stores.append(store["id"])
                            query = {
                                "sort": [
                                    {"storeIsOpen": {"order": "desc"}},
                                    {
                                        "_geo_distance": {
                                            "distance_type": "plane",
                                            "location": {"lat": float(lat), "lon": float(long)},
                                            "order": "asc",
                                            "unit": "km",
                                        }
                                    },
                                ],
                                "query": {
                                    "bool": {
                                        "must": [
                                            {"terms": {"_id": final_stores}},
                                            {"match": {"status": 1}},
                                            {
                                                "match": {
                                                    "serviceZones.zoneId": str(zone_data["_id"])
                                                }
                                            },
                                        ]
                                    }
                                },
                                "size": 6,
                                "from": 0,
                            }
                            res = es.search(
                                index=index_store,
                                # doc_type=doc_central_product,
                                body=query,
                                filter_path=[
                                    "hits.total",
                                    "hits.hits._id",
                                    "hits.hits.sort",
                                    "hits.hits._source",
                                ],
                            )

                            if len(res) > 0:
                                if "hits" in res:
                                    if "hits" in res["hits"]:
                                        try:
                                            for seller in res["hits"]["hits"]:
                                                try:
                                                    store_category_id = cat_id
                                                    doc_count = res["hits"]["total"]["value"]
                                                    try:
                                                        store_is_open = seller["_source"][
                                                            "storeIsOpen"
                                                        ]
                                                    except:
                                                        store_is_open = False

                                                    try:
                                                        next_open_time = int(
                                                            seller["_source"]["nextOpenTime"]
                                                        )
                                                        next_open_time_ios = int(
                                                            seller["_source"]["nextOpenTime"]
                                                        )
                                                    except:
                                                        next_open_time = ""
                                                        next_open_time_ios = ""
                                                    try:
                                                        next_close_time = int(
                                                            seller["_source"]["nextCloseTime"]
                                                        )
                                                    except:
                                                        next_close_time = ""

                                                    try:
                                                        if "timeZoneWorkingHour" in seller["_source"]:
                                                            timeZoneWorkingHour = seller["_source"][
                                                                'timeZoneWorkingHour']
                                                        else:
                                                            timeZoneWorkingHour = ""
                                                    except:
                                                        timeZoneWorkingHour = ""

                                                    if (
                                                            next_close_time == ""
                                                            and next_open_time == ""
                                                    ):
                                                        is_temp_close = True
                                                        store_tag = "Temporarily Closed"
                                                    elif (
                                                            next_open_time != ""
                                                            and store_is_open == False
                                                    ):
                                                        # if request_from == 1:
                                                        # next_open_time = int(next_open_time + timezone*60)
                                                        next_open_time = time_zone_converter(
                                                            timezone, next_open_time, timeZoneWorkingHour
                                                        )

                                                        local_time = (
                                                            datetime.datetime.fromtimestamp(
                                                                next_open_time
                                                            )
                                                        )
                                                        next_day = (
                                                                datetime.datetime.now()
                                                                + datetime.timedelta(days=1)
                                                        )
                                                        next_day_midnight = next_day.replace(
                                                            hour=0, minute=0, second=0
                                                        )
                                                        next_day_midnight_timestamp = int(
                                                            next_day_midnight.timestamp()
                                                        )
                                                        if (
                                                                next_day_midnight_timestamp
                                                                > next_open_time
                                                        ):
                                                            open_time = local_time.strftime(
                                                                "%I:%M %p"
                                                            )
                                                            store_tag = "Opens Next At " + open_time
                                                        else:
                                                            open_time = local_time.strftime(
                                                                "%I:%M %p"
                                                            )
                                                            store_tag = (
                                                                    "Opens Tomorrow At " + open_time
                                                            )
                                                        is_temp_close = False
                                                    else:
                                                        is_temp_close = False
                                                        store_tag = ""

                                                    if "shopifyStoreDetails" in seller["_source"]:
                                                        if (
                                                                "enable"
                                                                in seller["_source"][
                                                            "shopifyStoreDetails"
                                                        ]
                                                        ):
                                                            shopify_enable = seller["_source"][
                                                                "shopifyStoreDetails"
                                                            ]["enable"]
                                                        else:
                                                            shopify_enable = False
                                                    else:
                                                        shopify_enable = False

                                                    if "shopifyId" in seller["_source"]:
                                                        shopify_id = seller["_source"]["shopifyId"]
                                                    else:
                                                        shopify_id = ""
                                                  
                                                    distance_km = round(seller['sort'][1], 2)
                                                    add_store = True
                                                    if int(seller["_source"]['driverTypeId']) != 1:
                                                        if round(distance_km, 2) > 15:
                                                            add_store = False
                                                        else:
                                                            add_store = True
                                                    else:
                                                        add_store = True
                                                    # except Exception as e: 
                                                    #     print(e)
                                                    #     add_store = True
                                                    if add_store == True:
                                                        seller_data.append(
                                                            {
                                                                "_id": str(seller["_id"]),
                                                                "logoImages": seller["_source"][
                                                                    "logoImages"
                                                                ],
                                                                "shopifyEnable": shopify_enable,
                                                                "shopifyId": shopify_id,
                                                                "nextCloseTime": next_close_time,
                                                                "isTempClose": is_temp_close,
                                                                "nextOpenTime": next_open_time_ios,
                                                                "storeTag": store_tag,
                                                                "currencyCode": seller["_source"][
                                                                    "currencyCode"
                                                                ]
                                                                if "currencyCode" in seller["_source"]
                                                                else "₹",
                                                                "currencySymbol": seller["_source"][
                                                                    "currencyCode"
                                                                ]
                                                                if "currencyCode" in seller["_source"]
                                                                else "₹",
                                                                "currency": seller["_source"][
                                                                    "currencyCode"
                                                                ]
                                                                if "currencyCode" in seller["_source"]
                                                                else "INR",
                                                                "averageDeliveryTime": str(
                                                                    seller["_source"][
                                                                        "averageDeliveryTimeInMins"
                                                                    ]
                                                                )
                                                                                    + " "
                                                                                    + "Mins"
                                                                if "averageDeliveryTimeInMins"
                                                                in seller["_source"]
                                                                else "",
                                                                "bannerImages": seller["_source"][
                                                                    "bannerImages"
                                                                ],
                                                                "galleryImages": seller["_source"][
                                                                    "galleryImages"
                                                                ],
                                                                "storeName": seller["_source"][
                                                                    "storeName"
                                                                ][language]
                                                                if language
                                                                in seller["_source"]["storeName"]
                                                                else seller["_source"]["storeName"][
                                                                    "en"
                                                                ],
                                                                "driverTypeId": seller["_source"][
                                                                    "driverTypeId"
                                                                ]
                                                                if "driverTypeId" in seller["_source"]
                                                                else 0,
                                                                "driverType": seller["_source"][
                                                                    "driverType"
                                                                ]
                                                                if "driverType" in seller["_source"]
                                                                else 0,
                                                                "storeType": seller["_source"][
                                                                    "storeType"
                                                                ]
                                                                if "storeType" in seller["_source"]
                                                                else 0,
                                                                "storeIsOpen": seller["_source"][
                                                                    "storeIsOpen"
                                                                ]
                                                                if "storeIsOpen" in seller["_source"]
                                                                else False,
                                                            }
                                                        )
                                                    category_details = [
                                                        sub_cat_id
                                                        for sub_cat_id in store_category_details
                                                        if store_category_id == sub_cat_id["_id"]
                                                    ]
                                                    if len(category_details) > 0:
                                                        category_name = category_details[0][
                                                            "categoryName"
                                                        ]
                                                        description = category_details[0][
                                                            "description"
                                                        ]
                                                        featured = category_details[0]["featured"]
                                                        hyperlocal = category_details[0][
                                                            "hyperlocal"
                                                        ]
                                                        storeListing = category_details[0][
                                                            "storeListing"
                                                        ]
                                                        nowBooking = category_details[0][
                                                            "nowBooking"
                                                        ]
                                                        scheduleBooking = category_details[0][
                                                            "scheduleBooking"
                                                        ]
                                                        category_type = category_details[0]["type"]
                                                        typeMsg = category_details[0]["typeMsg"]
                                                    else:
                                                        category_name = ""
                                                except:
                                                    pass
                                            if category_name != "":
                                                if len(seller_data) > 0:
                                                    if storeListing !=0:
                                                        store_category_wise_details.append(
                                                            {
                                                                "categoryId": store_category_id,
                                                                "penCount": doc_count,
                                                                "featured": featured,
                                                                "hyperlocal": hyperlocal,
                                                                "storeListing": storeListing,
                                                                "nowBooking": nowBooking,
                                                                "scheduleBooking": scheduleBooking,
                                                                "description": description,
                                                                "type": category_type,
                                                                "typeMsg": typeMsg,
                                                                "categoryName": category_name,
                                                                "storeData": seller_data,
                                                            }
                                                        )
                                        except:
                                            pass
                                    else:
                                        pass
                                else:
                                    pass
                        except:
                            pass

                if len(store_category_details) > 0:
                    new_product_list = sorted(
                        store_category_details, key=lambda k: k["featured"], reverse=True
                    )
                else:
                    new_product_list = []
                if len(new_product_list) > 0:
                    city_id = zone_details["cityId"]
                    # zone_id = str(zone_details["_id"])
                    zone_data = {
                        "city": zone_details["cityName"],
                        "cityId": zone_details["cityId"],
                        "countryId": zone_details["countryId"],
                        "currency": zone_details["currency"],
                        "state": zone_details["state"],
                        "paymentMode": zone_details["paymentMode"]
                        if "paymentMode" in zone_details
                        else {},
                        "currencySymbol": zone_details["currencySymbol"],
                        "title": zone_details["cityName"],
                        "storeCategory": new_product_list,
                        "laundry": zone_details["laundry"] if "laundry" in zone_details else {},
                        "cityId": str(zone_details["_id"]),
                        "_id": str(zone_details["_id"]),
                    }
                    bannerq = {"linkedWithHomePage": True, "status": 1}
                    if zone_id and city_id:
                        bannerq["city.cityId"] = str(city_id)
                        # bannerq["zones.zoneId"] = str(zone_id)
                    elif zone_id:
                        bannerq["zones.zoneId"] = str(zone_id)
                    elif city_id:
                        bannerq["city.cityId"] = str(city_id)
                    banners_count = db.banner.find(bannerq).count()
                    # if banners_count:
                    #     banners = json.loads(json_util.dumps(db.banner.find(bannerq)))
                    # else:
                    #     banners = []
                    # new_banner = []
                    # try:
                    #     if len(banners) > 0:
                    #         for data in banners:
                    #             try:
                    #                 store_category_data = db.storeCategory.find_one({"_id": ObjectId(data['storeCategoryId'])})
                    #                 data['storeListing'] = store_category_data['storeListing'] if "storeListing" in store_category_data else False
                    #                 data['hyperlocal'] = store_category_data['hyperlocal'] if "hyperlocal" in store_category_data else True
                    #                 data['categoryType'] = store_category_data['type']
                    #                 new_banner.append(data)
                    #             except Exception as e:
                    #                 print(e)
                    #     else:
                    #         new_banner = []
                    # except Exception as e:
                    #     print(e)
                    banner_deatils_data = []
                    banners_count = db.banner.find(bannerq).count()
                    banner_details = db.banner.find(bannerq)
                    print(banners_count)
                    if banners_count > 0:
                        for i in banner_details:
                            base_category_id = ""
                            brand_id = ""
                            sub_category_name = ""
                            sub_category_id = ""
                            sub_sub_category_name = ""
                            sub_sub_category_id = ""
                            try:
                                category_name = ""
                                sub_category_name = ""
                                sub_sub_category_name = ""
                                if int(i["type"]) == 1:
                                    banner_type = "offer"
                                elif int(i["type"]) == 2:
                                    banner_type = "brands"
                                elif int(i["type"]) == 3:
                                    banner_type = "category"
                                elif int(i["type"]) == 4:
                                    banner_type = "stores"
                                elif int(i["type"]) == 5:
                                    banner_type = "subcategory"
                                elif int(i["type"]) == 6:
                                    banner_type = "subsubcategory"
                                elif int(i["type"]) == 7:
                                    banner_type = "supplier"
                                elif int(i["type"]) == 8:
                                    banner_type = "products"
                                elif int(i["type"]) == 9:
                                    banner_type = "url"
                                if int(i["type"]) == 3:

                                    base_category = category_find_one(
                                        {"_id": ObjectId(str(i["data"][0]["id"]).replace(" ", ""))}
                                    )
                                    if base_category is not None:
                                        if "parentId" in base_category:
                                            second_category = category_find_one(
                                                {"_id": ObjectId(base_category["parentId"])}
                                            )
                                            if second_category is not None:
                                                if "parentId" in second_category:
                                                    sub_sub_category_name = base_category["categoryName"]["en"]
                                                    sub_sub_category_id = str(base_category["_id"])
                                                    sub_category_name = second_category["categoryName"]["en"]
                                                    sub_category_id = str(second_category["_id"])
                                                    sub_sub_category_name = base_category[
                                                        "categoryName"
                                                    ]["en"]
                                                    sub_category_name = second_category["categoryName"][
                                                        "en"
                                                    ]
                                                    first_category = category_find_one(
                                                        {"_id": ObjectId(second_category["parentId"])}
                                                    )
                                                    if first_category is not None:
                                                        category_name = first_category["categoryName"][
                                                            "en"
                                                        ]
                                                        base_category_id = str(first_category["_id"])
                                                    else:
                                                        category_name = ""
                                                else:
                                                    category_name = second_category["categoryName"][
                                                        "en"
                                                    ]
                                                    base_category_id = str(second_category["_id"])
                                                    sub_category_name = base_category["categoryName"][
                                                        "en"
                                                    ]
                                                    sub_category_id = str(base_category["_id"])
                                                    sub_sub_category_name = ""
                                            else:
                                                first_category = category_find_one(
                                                    {
                                                        "_id": ObjectId(
                                                            str(i["data"][0]["id"]).replace(" ", "")
                                                        )
                                                    }
                                                )
                                                if first_category is not None:
                                                    base_category_id = str(first_category["_id"])
                                                    category_name = first_category["categoryName"]["en"]
                                                else:
                                                    category_name = ""
                                                    sub_category_name = ""
                                                    sub_sub_category_name = ""
                                        else:
                                            first_category = category_find_one(
                                                {
                                                    "_id": ObjectId(
                                                        str(i["data"][0]["id"]).replace(" ", "")
                                                    )
                                                }
                                            )
                                            if first_category is not None:
                                                category_name = first_category["categoryName"]["en"]
                                                base_category_id = str(first_category["_id"])
                                            else:
                                                category_name = ""
                                                sub_category_name = ""
                                                sub_sub_category_name = ""
                                    else:
                                        category_name = ""
                                        sub_category_name = ""
                                        sub_sub_category_name = ""

                                if sub_category_name != "" and sub_sub_category_name == "":
                                    banner_deatils_data.append(
                                        {
                                            "type": 5,
                                            "bannerTypeMsg": "subcategory",
                                            "firstCategoryId": base_category_id,
                                            "secondCategoryId": sub_category_id,
                                            "thirdCategoryId": sub_sub_category_id,
                                            "catName": category_name,
                                            "offerName": "",
                                            "name": i["data"][0]["name"]["en"],
                                            "imageWeb": i["image_web"],
                                            "imageMobile": i["image_mobile"],
                                        }
                                    )
                                elif sub_category_name != "" and sub_sub_category_name != "":
                                    banner_deatils_data.append(
                                        {
                                            "type": 6,
                                            "bannerTypeMsg": "subsubcategory",
                                            "offerName": "",
                                            "catName": category_name,
                                            "subCatName": sub_category_name,
                                            "firstCategoryId": base_category_id,
                                            "secondCategoryId": sub_category_id,
                                            "thirdCategoryId": sub_sub_category_id,
                                            "name": i["data"][0]["name"]["en"],
                                            "imageWeb": i["image_web"],
                                            "imageMobile": i["image_mobile"],
                                        }
                                    )
                                elif int(i["type"]) == 1:
                                    offer_id = ""
                                    for o_id in i["data"]:
                                        offer_inner = offer_find_one(
                                            {"_id": ObjectId(o_id["id"]), "status": 1}
                                        )
                                        if offer_inner is not None:
                                            if offer_id != "":
                                                offer_id = offer_id + "," + o_id["id"]
                                            else:
                                                offer_id = o_id["id"]
                                        else:
                                            pass
                                    offer_query = {"_id": ObjectId(i["data"][0]["id"]), "status": 1}
                                    offer_details = offer_find_one(offer_query)
                                    if offer_details is not None:
                                        product_query = {
                                            "offer.status": 1,
                                            "offer.offerId": str(offer_details["_id"]),
                                            "status": 1,
                                        }
                                        child_product_count = product_find_count(product_query)
                                        if child_product_count > 0:
                                            banner_deatils_data.append(
                                                {
                                                    "type": i["type"],
                                                    "bannerTypeMsg": banner_type,
                                                    "catName": "",
                                                    "subCatName": "",
                                                    "firstCategoryId": "",
                                                    "secondCategoryId": "",
                                                    "thirdCategoryId": "",
                                                    "offerName": offer_details["name"]["en"],
                                                    "name": str(offer_id),
                                                    "imageWeb": i["image_web"],
                                                    "imageMobile": i["image_mobile"],
                                                }
                                            )
                                elif int(i["type"]) == 8:
                                    product_details = db.products.find_one(
                                        {"_id": ObjectId(i["data"][0]["id"]), "status": 1}, {"units": 1}
                                    )
                                    if product_details is not None:
                                        supplier_list = []
                                        if "suppliers" in product_details["units"][0]:
                                            for s in product_details["units"][0]["suppliers"]:
                                                if s["id"] != "0":
                                                    child_product_count = db.childProducts.find(
                                                        {"_id": ObjectId(s["productId"]), "status": 1}
                                                    ).count()
                                                    if child_product_count > 0:
                                                        supplier_list.append(s)
                                                else:
                                                    pass
                                        if len(supplier_list) > 0:
                                            best_supplier = min(
                                                supplier_list, key=lambda x: x["retailerPrice"]
                                            )
                                            if best_supplier["retailerQty"] == 0:
                                                best_supplier = max(
                                                    supplier_list, key=lambda x: x["retailerQty"]
                                                )
                                            else:
                                                best_supplier = best_supplier
                                            if len(best_supplier) > 0:
                                                central_product_id = str(product_details["_id"])
                                                child_product_id = str(best_supplier["productId"])
                                                banner_deatils_data.append(
                                                    {
                                                        "type": i["type"],
                                                        "bannerTypeMsg": banner_type,
                                                        "firstCategoryId": "",
                                                        "secondCategoryId": "",
                                                        "thirdCategoryId": "",
                                                        "catName": "",
                                                        "parentProductId": central_product_id,
                                                        "childProductId": child_product_id,
                                                        "subCatName": "",
                                                        "offerName": "/python/product/details?&parentProductId="
                                                        + central_product_id
                                                        + "&productId="
                                                        + child_product_id,
                                                        "name": "/python/product/details?&parentProductId="
                                                        + central_product_id
                                                        + "&productId="
                                                        + child_product_id,
                                                        "imageWeb": i["image_web"],
                                                        "imageMobile": i["image_mobile"],
                                                    }
                                                )
                                elif int(i["type"]) == 9:
                                    banner_deatils_data.append(
                                        {
                                            "type": i["type"],
                                            "bannerTypeMsg": banner_type,
                                            "firstCategoryId": base_category_id,
                                            "secondCategoryId": sub_category_id,
                                            "thirdCategoryId": sub_sub_category_id,
                                            "catName": "",
                                            "subCatName": "",
                                            "offerName": i["data"][0]["name"]["en"],
                                            "name": i["data"][0]["name"]["en"],
                                            "imageWeb": i["image_web"],
                                            "imageMobile": i["image_mobile"],
                                        }
                                    )
                                else:
                                    try:
                                        store_details_name = json.loads(i["data"][0]["name"])
                                        id = json.loads(i["data"][0]["id"])
                                    except:
                                        try:
                                            store_details_name = i["data"][0]["name"]
                                            id = i["data"][0]["id"]
                                        except:
                                            store_details_name = {"en": ""}
                                            id = ""
                                    try:
                                        if store_details_name["en"] != "":
                                            store_category_data = db.storeCategory.find_one(
                                                {"_id": ObjectId(i['storeCategoryId'])})
                                            banner_deatils_data.append(
                                                {
                                                    "type": i["type"],
                                                    "bannerTypeMsg": banner_type,
                                                    "offerName": "",
                                                    "id": id,
                                                    "firstCategoryId": base_category_id,
                                                    "categoryType": store_category_data['type'],
                                                    "storeCategoryID": i["storeCategoryId"],
                                                    "secondCategoryId": sub_category_id,
                                                    "thirdCategoryId": sub_sub_category_id,
                                                    "name": store_details_name["en"],
                                                    "imageWeb": i["image_web"],
                                                    "imageMobile": i["image_mobile"],
                                                }
                                            )
                                    except:
                                        pass
                            except:
                                pass
                    else:
                        banner_deatils_data = []
                    notification_count_query = {
                        "app_name": APP_NAME,
                        "userid": user_id,
                        "isSeen": False,
                    }
                    notification_count = db.notificationLogs.find(notification_count_query).count()
                    response = {
                        "data": zone_data,
                        "storeData": store_category_wise_details,
                        "notificationCount": notification_count,
                        "banners": banner_deatils_data,
                        "message": "In operational city.",
                    }
                    return JsonResponse(response, safe=False, status=200)
                else:
                    zone_data = {
                        "city": "",
                        "cityId": "",
                        "countryId": "",
                        "currency": "",
                        "state": "",
                        "paymentMode": "",
                        "currencySymbol": "",
                        "title": "",
                        "storeCategory": store_category_details,
                        "laundry": "",
                        "cityId": "",
                        "_id": "",
                    }
                    response = {
                        "data": zone_data,
                        "storeData": [],
                        "notificationCount": 0,
                        "banners": [],
                        "message": "data found",
                    }
                    return JsonResponse(response, safe=False, status=200)
            else:
                zone_data = {
                    "city": "",
                    "cityId": "",
                    "countryId": "",
                    "currency": "",
                    "state": "",
                    "paymentMode": "",
                    "currencySymbol": "",
                    "title": "",
                    "storeCategory": store_category_details,
                    "laundry": "",
                    "cityId": "",
                    "_id": "",
                }
                response = {
                    "data": zone_data,
                    "storeData": [],
                    "notificationCount": 0,
                    "banners": [],
                    "message": "data found",
                }
                return JsonResponse(response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"message": message}
            return JsonResponse(error, safe=False, status=500)


class ProductCustomizableAttributes(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Products"],
        operation_description="API for getting product details for the PDP page",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="currencycode",
                default="INR",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="currencySymbol for the currency..INR, INR, USD",
            ),
            openapi.Parameter(
                name="productId",
                required=True,
                default="5ea946689a877b45cab30137",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product(variant id of the product)",
            ),
            openapi.Parameter(
                name="parentProductId",
                default="5ea946689a877b45cab30136",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product",
            ),
        ],
        responses={
            200: "successfully. product data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found or product details not found",
            422: "required fields are not found. it might be child product id not found or central product id not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            login_type = (
                int(request.META["HTTP_LOGINTYPE"]) if "HTTP_LOGINTYPE" in request.META else 1
            )
            currency_code = (
                request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else ""
            )
            productId = request.GET.get("productId", "")
            parent_productId = request.GET.get("parentProductId", "")
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            elif productId == "":
                response_data = {
                    "message": "product id is Empty",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            elif parent_productId == "":
                response_data = {
                    "message": "parent product id is Empty",
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                varient_query = {"_id": ObjectId(productId)}
                res_varient_parameters = db.childProducts.find_one(varient_query)
                if res_varient_parameters is not None:
                    customizable_attr_list = []
                    quantity_json = []
                    # ==================================================================================================

                    if "b2cbulkPackingEnabled" in res_varient_parameters:
                        b2c_bulk_packing = int(res_varient_parameters["b2cbulkPackingEnabled"])
                    else:
                        b2c_bulk_packing = 0
                    if b2c_bulk_packing != 0:
                        if "b2cpackingNoofUnits" in res_varient_parameters:
                            if type(res_varient_parameters["b2cpackingNoofUnits"]) == int:
                                b2c_packing_no_units = res_varient_parameters["b2cpackingNoofUnits"]
                                if b2c_packing_no_units == 0:
                                    b2c_packing_no_units = 1
                            else:
                                b2c_packing_no_units = 1
                        else:
                            b2c_packing_no_units = 1

                        if "b2cpackingPackageUnits" in res_varient_parameters:
                            if "en" in res_varient_parameters["b2cpackingPackageUnits"]:
                                b2c_packing_package_units = res_varient_parameters[
                                    "b2cpackingPackageUnits"
                                ]["en"]
                            else:
                                if "b2cunitPackageType" in res_varient_parameters:
                                    if "en" in res_varient_parameters["b2cunitPackageType"]:
                                        b2c_packing_package_units = res_varient_parameters[
                                            "b2cunitPackageType"
                                        ]["en"]
                                    else:
                                        b2c_packing_package_units = ""
                                else:
                                    b2c_packing_package_units = ""
                        else:
                            b2c_packing_package_units = ""

                        if "b2cpackingPackageType" in res_varient_parameters:
                            if "en" in res_varient_parameters["b2cpackingPackageType"]:
                                b2c_packing_units = res_varient_parameters["b2cpackingPackageType"][
                                    "en"
                                ]
                            else:
                                b2c_packing_units = ""
                        else:
                            b2c_packing_units = ""

                        if b2c_packing_package_units != "" and b2c_packing_units != "":
                            mouDataUnit = (
                                    str(b2c_packing_no_units)
                                    + " "
                                    + b2c_packing_package_units
                                    + " per "
                                    + b2c_packing_units
                            )
                        elif b2c_packing_package_units != "" and b2c_packing_units == "":
                            mouDataUnit = (
                                    str(b2c_packing_no_units) + " " + b2c_packing_package_units
                            )
                        elif b2c_packing_package_units == "" and b2c_packing_units != "":
                            mouDataUnit = str(b2c_packing_no_units) + " " + b2c_packing_units
                        else:
                            mouDataUnit = ""
                    else:
                        mouDataUnit = ""

                    # =========================for max quantity=================================================
                    if "maxQuantity" in res_varient_parameters:
                        if res_varient_parameters["maxQuantity"] != "":
                            max_quantity = int(res_varient_parameters["maxQuantity"])
                        else:
                            max_quantity = 30
                    else:
                        max_quantity = 30

                    for qty in range(1, max_quantity + 1):
                        quantity_json.append(qty)
                        # ==========================================================================================
                    customizable_attr = []

                    try:
                        currency_rate = currency_exchange_rate[
                            str(res_varient_parameters["currency"]) + "_" + str(currency_code)
                            ]
                    except:
                        currency_rate = 0

                    currency_details = db.currencies.find_one({"currencyCode": currency_code})
                    if currency_details is not None:
                        currency_symbol = currency_details["currencySymbol"]
                        currency = currency_details["currencyCode"]
                    else:
                        currency_symbol = res_varient_parameters["currencySymbol"]
                        currency = res_varient_parameters["currency"]

                    for attr_list in res_varient_parameters["units"][0]["attributes"]:
                        attribute_group_name = attr_list["attrgrpname"][language]
                        for a_v in attr_list["attrlist"]:
                            if "customizable" in a_v:
                                if a_v["customizable"] == 1:
                                    customizable_attr_value = []
                                    attr_name = (
                                        a_v["attrname"][language]
                                        if language in a_v["attrname"]
                                        else a_v["attrname"]["en"]
                                    )
                                    for attr_value in a_v["value"]:
                                        customizable_attribute_details = (
                                            db.productAttribute.find_one(
                                                {"_id": ObjectId(a_v["attributeId"])}
                                            )
                                        )
                                        image = (
                                            "https://superadmin.shoppd.net/theme/icon/default.png"
                                        )
                                        bannerImage = (
                                            "https://superadmin.shoppd.net/theme/icon/default.png"
                                        )
                                        logoImage = (
                                            "https://superadmin.shoppd.net/theme/icon/default.png"
                                        )
                                        for cst in customizable_attribute_details["attributeValue"]:
                                            if (
                                                    customizable_attribute_details["attributeValue"][
                                                        cst
                                                    ]["sAttrLng"]["en"]
                                                    == attr_value["name"]["en"]
                                            ):
                                                image = customizable_attribute_details[
                                                    "attributeValue"
                                                ][cst]["image"]
                                                bannerImage = customizable_attribute_details[
                                                    "attributeValue"
                                                ][cst]["bannerImage"]
                                                logoImage = customizable_attribute_details[
                                                    "attributeValue"
                                                ][cst]["logoImage"]
                                            else:
                                                pass

                                        if float(currency_rate) > 0:
                                            margin_price = float(attr_value["price"]) * float(
                                                currency_rate
                                            )
                                        else:
                                            margin_price = float(attr_value["price"])

                                        customizable_attr_value.append(
                                            {
                                                "name": attr_value["name"][language]
                                                if language in attr_value["name"]
                                                else attr_value["name"]["en"],
                                                "price": str(round(margin_price, 2)),
                                                "image": image,
                                                "bannerImage": bannerImage,
                                                "logoImage": logoImage,
                                            }
                                        )
                                    customizable_attr.append(
                                        {
                                            "attributeName": attr_name,
                                            "attributeId": a_v["attributeId"],
                                            "value": customizable_attr_value,
                                        }
                                    )

                    # ===========================colour data=======================================
                    if "colorName" in res_varient_parameters["units"][0]:
                        if res_varient_parameters["units"][0]["colorName"] != "":
                            customizable_attr_value = []
                            customizable_attr_value.append(
                                {
                                    "name": res_varient_parameters["units"][0]["colorName"],
                                    "price": 0,
                                    "image": "",
                                    "rgb": str("rgb(")
                                           + res_varient_parameters["units"][0]["color"]
                                           + ")",
                                    "bannerImage": "",
                                    "logoImage": "",
                                }
                            )
                            customizable_attr.append(
                                {
                                    "attributeName": "Colour",
                                    "attributeId": "",
                                    "value": customizable_attr_value,
                                }
                            )
                        else:
                            pass
                    else:
                        pass

                        # ===========================size data=======================================
                    if "unitSizeGroupValue" in res_varient_parameters["units"][0]:
                        if res_varient_parameters["units"][0]["unitSizeGroupValue"] == None:
                            pass
                        else:
                            if len(res_varient_parameters["units"][0]["unitSizeGroupValue"]) != 0:
                                customizable_attr_value = []
                                customizable_attr_value.append(
                                    {
                                        "name": res_varient_parameters["units"][0][
                                            "unitSizeGroupValue"
                                        ]["en"],
                                        "price": 0,
                                        "image": "",
                                        "bannerImage": "",
                                        "logoImage": "",
                                    }
                                )
                                customizable_attr.append(
                                    {
                                        "attributeName": "Size",
                                        "attributeId": "",
                                        "value": customizable_attr_value,
                                    }
                                )
                            else:
                                pass
                    else:
                        pass
                    customizable_attr_list.append(
                        {"attributeGroupName": attribute_group_name, "attribute": customizable_attr}
                    )

                    if "deliveryTime" in res_varient_parameters["units"][0]:
                        delivery_time = res_varient_parameters["units"][0]["deliveryTime"]
                    else:
                        delivery_time = 10

                    response_data = {
                        "productName": res_varient_parameters["units"][0]["unitName"]["en"],
                        "image": res_varient_parameters["units"][0]["image"],
                        "standardDeliveryTime": str(delivery_time) + " " + "days",
                        "maxQuantity": quantity_json,
                        "currency": currency,
                        "currencySymbol": currency_symbol,
                        "mouDataUnit": mouDataUnit,
                        "message": "customizable attribute found",
                        "data": customizable_attr_list,
                        "centralProductId": parent_productId,
                        "childProductId": productId,
                    }
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {
                        "productName": "",
                        "image": [],
                        "currency": "",
                        "currencySymbol": "",
                        "message": "customizable attribute not found",
                        "data": [],
                        "centralProductId": "",
                        "childProductId": "",
                    }
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"message": message}
            return JsonResponse(error, safe=False, status=500)


class ProductAddOnsData(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Product AddOns"],
        operation_description="API for get the addons details for a product",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization", in_=openapi.IN_HEADER, type=openapi.TYPE_STRING, required=True
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="centralProductId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product",
                default="5eb2a7c0ad5f8c53f3f2df28",
            ),
            openapi.Parameter(
                name="childProductId",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                default="5eb2a7c0ad5f8c53f3f2df29",
                description="child product of the product",
            ),
        ],
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            start_time = time.time()
            central_product_id = request.GET.get("centralProductId", "")
            child_product_id = request.GET.get("childProductId", "")
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            product_add_ons = []
            last_response_data = []
            if token == "":
                response_data = {"message": "unauthorized", "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            elif central_product_id == "":
                response_data = {"message": "central product id is blank or missing", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            elif child_product_id == "":
                response_data = {"message": "child product id is blank or missing", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            else:
                start_time = time.time()
                add_ons_query = {
                    "_id": ObjectId(child_product_id),
                    "parentProductId": central_product_id,
                }
                add_ons_response = db.childProducts.find_one(add_ons_query)
                selected_price = 0
                if add_ons_response is not None:
                    currency_symbol = add_ons_response["currencySymbol"]
                    currency = add_ons_response["currency"]
                    seq_count = 1
                    addons_data = []
                    addons_json = []
                    parent_product_cursor = db.products.find_one(
                        {"_id": ObjectId(add_ons_response["parentProductId"])}
                    )
                    current_supplier_id = str(add_ons_response["storeId"])
                    offer_json = []
                    if "units" in add_ons_response:
                        if "offer" in add_ons_response:
                            for offer in add_ons_response["offer"]:
                                if offer["status"] == 1:
                                    offer_terms = db.offers.find_one(
                                        {"_id": ObjectId(offer["offerId"])}
                                    )
                                    if offer_terms is not None:
                                        if offer_terms["startDateTime"] <= int(time.time()):
                                            offer_json.append(
                                                {
                                                    "offerName": offer["offerName"][language],
                                                    "offerId": str(offer["offerId"]),
                                                    "offerType": offer["discountType"],
                                                    "discountType": offer["discountType"],
                                                    "discountValue": int(offer["discountValue"]),
                                                }
                                            )
                                else:
                                    pass

                            if len(offer_json) > 0:
                                best_offer = max(offer_json, key=lambda x: x["discountValue"])
                            else:
                                best_offer = {}
                        else:
                            best_offer = {}
                        price = add_ons_response["units"][0]["floatValue"]
                        if len(best_offer) > 0:
                            discount_type = (
                                int(best_offer["discountType"])
                                if "discountType" in best_offer
                                else 0
                            )
                            discount_value = int(best_offer["discountValue"])
                        else:
                            discount_value = 0
                            discount_type = 2

                        if price == 0 or price == "":
                            discount_price = 0
                        else:
                            if discount_type == 0:
                                discount_price = float(discount_value)
                            elif discount_type == 1:
                                discount_price = (float(price) * float(discount_value)) / 100
                            else:
                                discount_price = 0
                        selected_price = price - discount_price
                        if "addOns" in add_ons_response["units"][0]:
                            addons_data_json = add_ons_response["units"][0]["addOns"]
                            for add in addons_data_json:
                                add["currencySymbol"] = add_ons_response["currencySymbol"]
                                add["currency"] = add_ons_response["currency"]
                                addons_data.append(add)
                        else:
                            addons_data = []
                    else:
                        selected_price = 0
                        addons_data = []
                    if current_supplier_id != "0":
                        parent_product = db.childProducts.find(
                            {
                                "parentProductId": str(add_ons_response["parentProductId"]),
                                "storeId": ObjectId(current_supplier_id),
                                "status": 1,
                            }
                        )  # add status in query to get only active data remove other data
                    else:
                        parent_product = db.childProducts.find(
                            {
                                "parentProductId": str(add_ons_response["parentProductId"]),
                                "storeId": "0",
                                "status": 1,
                            }
                        )
                    for child in parent_product:
                        try:
                            # if child['pName']["en"] == child["units"][0]['unitName']['en']:
                            #     pass
                            # else:
                            child_supplier_id = current_supplier_id
                            selected_addons_id = str(child["_id"])
                            inner_price = child["units"][0]["floatValue"]
                            # ==============================offer calculate========================
                            new_offer_json = []
                            if "offer" in child:
                                for offer in child["offer"]:
                                    if offer["status"] == 1:
                                        offer_terms = db.offers.find_one(
                                            {"_id": ObjectId(offer["offerId"])}
                                        )
                                        if offer_terms is not None:
                                            if offer_terms["startDateTime"] <= int(time.time()):
                                                new_offer_json.append(
                                                    {
                                                        "offerName": offer["offerName"][language],
                                                        "offerId": str(offer["offerId"]),
                                                        "offerType": offer["discountType"],
                                                        "discountType": offer["discountType"],
                                                        "discountValue": int(
                                                            offer["discountValue"]
                                                        ),
                                                    }
                                                )
                                    else:
                                        pass

                                if len(new_offer_json) > 0:
                                    inner_best_offer = max(
                                        new_offer_json, key=lambda x: x["discountValue"]
                                    )
                                else:
                                    inner_best_offer = {}
                            else:
                                inner_best_offer = {}

                            if len(inner_best_offer) > 0:
                                discount_type = (
                                    int(inner_best_offer["discountType"])
                                    if "discountType" in inner_best_offer
                                    else 0
                                )
                                discount_value = int(inner_best_offer["discountValue"])
                            else:
                                discount_value = 0
                                discount_type = 2

                            if inner_price == 0 or inner_price == "":
                                discount_price = 0
                            else:
                                if discount_type == 0:
                                    discount_price = float(discount_value)
                                elif discount_type == 1:
                                    discount_price = (
                                                             float(inner_price) * float(discount_value)
                                                     ) / 100
                                else:
                                    discount_price = 0
                            inner_selected_price = inner_price - discount_price

                            if selected_addons_id == child_product_id:
                                is_primary = True
                            else:
                                is_primary = False
                            if child_supplier_id != "0":
                                child_product = db.childProducts.find_one(
                                    {
                                        "parentProductId": str(central_product_id),
                                        "storeId": ObjectId(child_supplier_id),
                                        "status": 1,
                                    },
                                    {"currencySymbol": 1, "currency": 1},
                                )
                            else:
                                child_product = db.childProducts.find_one(
                                    {
                                        "parentProductId": str(central_product_id),
                                        "storeId": "0",
                                        "status": 1,
                                    },
                                    {"currencySymbol": 1, "currency": 1},
                                )

                            currency_symbol = add_ons_response["currencySymbol"]
                            currency = add_ons_response["currency"]
                            addons_json.append(
                                {
                                    "id": selected_addons_id,
                                    "isPrimary": is_primary,
                                    "parentProductId": central_product_id,
                                    "name": child["units"][0]["unitName"],
                                    "unitName": child["units"][0]["unitName"]["en"],
                                    "currencySymbol": currency_symbol,
                                    "currency": currency,
                                    "price": str(inner_selected_price),
                                }
                            )
                        except:
                            pass
                    if len(addons_json) > 0:
                        dataframe = pd.DataFrame(addons_json)
                        dataframe = dataframe.drop_duplicates(subset="unitName", keep="last")
                        details = dataframe.to_json(orient="records")
                        size_data = json.loads(details)
                        if child_supplier_id != "0":
                            child_product = db.childProducts.find_one(
                                {
                                    "parentProductId": str(central_product_id),
                                    "storeId": ObjectId(child_supplier_id),
                                    "status": 1,
                                },
                                {"currencySymbol": 1, "currency": 1},
                            )
                        else:
                            child_product = db.childProducts.find_one(
                                {
                                    "parentProductId": str(central_product_id),
                                    "storeId": "0",
                                    "status": 1,
                                },
                                {"currencySymbol": 1, "currency": 1},
                            )

                        currency_symbol = add_ons_response["currencySymbol"]
                        currency = add_ons_response["currency"]
                        addons_data.append(
                            {
                                "name": {"en": "Sizes"},
                                "addOns": size_data,
                                "currencySymbol": currency_symbol,
                                "currency": currency,
                                "storeId": str(child_supplier_id),
                                "description": {"en": "Sizes"},
                                "status": 1,
                                "minimumLimit": 1,
                                "maximumLimit": 1,
                                "mandatory": 1,
                                "multiple": 0,
                                "unitAddOnId": str(selected_addons_id),
                                "seqId": 0,
                                "id": str(selected_addons_id),
                            }
                        )
                    for details in addons_data:
                        add_ons_list = []
                        try:
                            if int(details["status"]) == 1:
                                for details_data in details["addOns"]:
                                    if "name" in details_data:
                                        if language in details_data["name"]:
                                            addons_name = details_data["name"][language]
                                        else:
                                            addons_name = details_data["name"]["en"]
                                    else:
                                        addons_name = ""

                                    add_ons_list.append(
                                        {
                                            "id": details_data["id"],
                                            "name": addons_name,
                                            "isPrimary": details_data["isPrimary"]
                                            if "isPrimary" in details_data
                                            else False,
                                            "currencySymbol": currency_symbol,
                                            "currency": currency,
                                            "price": details_data["price"],
                                        }
                                    )

                                if "seqId" in details:
                                    seq_id = details["seqId"]
                                else:
                                    seq_id = seq_count + 1
                                product_add_ons.append(
                                    {
                                        "groupName": details["name"][language]
                                        if language in details["name"]
                                        else details["name"]["en"],
                                        "addOns": add_ons_list,
                                        "currencySymbol": currency_symbol,
                                        "currency": currency,
                                        "storeId": details["storeId"],
                                        "description": details["description"][language]
                                        if language in details["description"]
                                        else details["description"]["en"],
                                        "minimumLimit": details["minimumLimit"]
                                        if "minimumLimit" in details
                                        else 0,
                                        "maximumLimit": details["maximumLimit"]
                                        if "maximumLimit" in details
                                        else 0,
                                        "mandatory": details["mandatory"]
                                        if "mandatory" in details
                                        else 0,
                                        "multiple": details["multiple"]
                                        if "multiple" in details
                                        else 0,
                                        "unitAddOnId": details["unitAddOnId"],
                                        "seqId": seq_id,
                                    }
                                )
                            else:
                                pass
                        except Exception as ex:
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print(
                                "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                                type(ex).__name__,
                                ex,
                            )
                            pass

                    newlist = sorted(product_add_ons, key=lambda k: k["seqId"], reverse=False)
                    last_response_data.append(
                        {
                            "price": selected_price,
                            # add_ons_response['unitName'][language] if language in add_ons_response['unitName'] else add_ons_response['unitName']['en'],
                            "productName": parent_product_cursor["pPName"][language]
                            if parent_product_cursor is not None
                            else "",
                            "addOns": newlist,
                            "currencySymbol": currency_symbol,
                            "currency": currency,
                        }
                    )
                    response_data = {"message": "data found", "data": last_response_data}
                    return JsonResponse(response_data, safe=False, status=200)
                else:
                    response_data = {"message": "data not found", "data": []}
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {"message": message, "data": []}
            return JsonResponse(finalResponse, safe=False, status=500)


"""
    function for the get the favourite stores for the user
    1 Popularity, 2 for rating: high to low, 3 cost: low to high, 4 for cost: high to low
"""


def favourite_store_user(
        category_id,
        user_id,
        zone_id,
        user_latitude,
        user_longtitude,
        language,
        skip_data,
        limit_data,
        sort_data,
        cuisines_data,
        avg_cost_max,
        avg_cost_min,
        timezone,
        min_ratings_data,
        max_ratings_data,
        order_type,
):
    try:
        must_query = []
        must_not_query = []
        range_query = []

        must_query.append({"match": {"categoryId": category_id}})
        must_query.append({"match": {"status": 1}})
        must_query.append({"match": {"serviceZones.zoneId": zone_id}})
        must_query.append({"terms": {"favouriteUsers": [user_id]}})

        if float(min_ratings_data) != 0.0 and float(max_ratings_data) != 0.0:
            range_query.append(
                {
                    "range": {
                        "avgRating": {
                            "gte": float(min_ratings_data),
                            "lte": float(max_ratings_data),
                        }
                    }
                }
            )
        elif float(max_ratings_data) != 0.0:
            range_query.append(
                {
                    "range": {
                        "avgRating": {
                            "gte": float(min_ratings_data),
                            "lte": float(max_ratings_data),
                        }
                    }
                }
            )

        if cuisines_data != "":
            spec_data = []
            for n in cuisines_data.split():
                for spec in n.split(","):
                    spec_data.append(spec)
            must_query.append({"terms": {"specialities": spec_data}})

        if int(order_type) != 4 and int(order_type) != 3:
            must_query.append({"terms": {"supportedOrderTypes": [order_type, 3]}})
        elif int(order_type) == 3:
            must_query.append({"terms": {"supportedOrderTypes": [1, 2, 3]}})
        else:
            pass
        if category_id == DINE_STORE_CATEGORY_ID:
            if avg_cost_max != 0 and avg_cost_min != 0:
                range_query.append(
                    {
                        "range": {
                            "averageCostForMealForTwo": {
                                "lte": float(avg_cost_max),
                                "gte": float(avg_cost_min),
                            }
                        }
                    }
                )
            elif avg_cost_max != 0 and avg_cost_min == 0:
                range_query.append(
                    {"range": {"averageCostForMealForTwo": {"lte": float(avg_cost_max)}}}
                )
            else:
                range_query.append(
                    {"range": {"averageCostForMealForTwo": {"gte": float(avg_cost_min)}}}
                )
        else:
            if avg_cost_max != 0 and avg_cost_min != 0:
                range_query.append(
                    {
                        "range": {
                            "minimumOrder": {
                                "lte": float(avg_cost_max),
                                "gte": float(avg_cost_min),
                            }
                        }
                    }
                )
            elif avg_cost_max != 0 and avg_cost_min == 0:
                range_query.append({"range": {"minimumOrder": {"lte": float(avg_cost_max)}}})
            else:
                range_query.append({"range": {"minimumOrder": {"gte": float(avg_cost_min)}}})

        # must_not_query.append({"terms": {"storeFrontTypeId": [2]}})

        if int(sort_data) == 4:
            geo_distance_sort = {
                "_geo_distance": {
                    "distance_type": "plane",
                    "location": {"lat": float(user_latitude), "lon": float(user_longtitude)},
                    "order": "desc",
                    "unit": "km",
                }
            }
        else:
            geo_distance_sort = {
                "_geo_distance": {
                    "distance_type": "plane",
                    "location": {"lat": float(user_latitude), "lon": float(user_longtitude)},
                    "order": "asc",
                    "unit": "km",
                }
            }
        if int(sort_data) == 0:
            sort_query = [{"storeIsOpen": {"order": "desc"}}, geo_distance_sort]
        elif int(sort_data) == 1:
            sort_query = [{"storeIsOpen": {"order": "desc"}}, geo_distance_sort]
        elif int(sort_data) == 2:
            sort_query = [
                {"storeIsOpen": {"order": "desc"}},
                {"avgRating": {"order": "desc"}},
                geo_distance_sort,
            ]

        elif int(sort_data) == 3:
            if category_id == DINE_STORE_CATEGORY_ID:
                sort_query = [{"averageCostForMealForTwo": {"order": "asc"}}, geo_distance_sort]
            else:
                sort_query = [geo_distance_sort]
        elif int(sort_data) == 4:
            if category_id == DINE_STORE_CATEGORY_ID:
                sort_query = [{"averageCostForMealForTwo": {"order": "desc"}}, geo_distance_sort]
            else:
                sort_query = [geo_distance_sort]
        else:
            sort_query = [
                {"storeIsOpen": {"order": "desc"}},
                {"averageCostForMealForTwo": {"order": "desc"}},
                geo_distance_sort,
            ]
        must_query.append(
            {
                "geo_distance": {
                    "distance": "50km",
                    "location": {"lat": float(user_latitude), "lon": float(user_longtitude)},
                }
            }
        )
        store_query = {
            "query": {
                "bool": {
                    "must": must_query,
                    "filter": range_query,
                }
            },
            "size": 500,
            "from": 0,
            "sort": sort_query,
        }
        res_store = es.search(
            index=index_store,
            # doc_type=doc_central_product,
            body=store_query,
            filter_path=[
                "hits.hits._id",
                "hits.hits.sort",
                "hits.hits._source.storeName",
                "hits.hits._source.uniqStoreId",
                "hits.hits._source.parentSellerIdOrSupplierId",
            ],
        )

        all_store_details = []
        if len(res_store) > 0:
            for r_s in res_store["hits"]["hits"]:
                if int(sort_data) == 0 or int(sort_data) == 1:
                    distance_km = round(r_s["sort"][1], 2)
                    distance_miles = round(distance_km * conv_fac, 2)
                else:
                    try:
                        distance_km = round(r_s["sort"][2], 2)
                        distance_miles = round(distance_km * conv_fac, 2)
                    except:
                        try:
                            distance_km = round(r_s["sort"][1], 2)
                            distance_miles = round(distance_km * conv_fac, 2)
                        except:
                            distance_km = round(r_s["sort"][0], 2)
                            distance_miles = round(distance_km * conv_fac, 2)
                all_store_details.append(
                    {
                        "id": str(r_s["_id"]),
                        "distance": distance_km,
                        "storeName": r_s["_source"]["storeName"]["en"],
                        "parentSellerIdOrSupplierId": r_s["_source"]["parentSellerIdOrSupplierId"],
                        "uniqStoreId": r_s["_source"]["uniqStoreId"]
                        if "uniqStoreId" in r_s["_source"]
                        else "",
                    }
                )

        # unique_stores = []
        unique_stores = sorted(all_store_details, key=lambda k: k["distance"], reverse=False)

        if len(unique_stores) > 0 and category_id == DINE_STORE_CATEGORY_ID:
            dataframe_details = pd.DataFrame(unique_stores)
            dataframe_details = dataframe_details.drop_duplicates("uniqStoreId", keep="first")
            spec_data = dataframe_details.to_json(orient="records")
            spec_data = json.loads(spec_data)
        elif len(unique_stores) > 0:
            dataframe_details = pd.DataFrame(unique_stores)
            spec_data = dataframe_details.to_json(orient="records")
            spec_data = json.loads(spec_data)
        else:
            spec_data = []
        final_stores = []
        # for store in store_non_unique:
        for store in spec_data:
            final_stores.append(store["id"])

        must_query.append({"terms": {"_id": final_stores}})
        query = {
            "query": {
                "bool": {
                    "must": must_query,
                    # "must_not": must_not_query,
                    "filter": range_query,
                }
            },
            "size": int(limit_data),
            "from": int(skip_data),
            "sort": sort_query,
        }
        res = es.search(
            index=index_store,
            # doc_type=doc_central_product,
            body=query,
            filter_path=["hits.total", "hits.hits._id", "hits.hits.sort", "hits.hits._source"],
        )

        store_data_json = []
        close_data_json = []
        specialities_data = []
        fav_store_data_count = res["hits"]["total"]["value"]
        if res["hits"]["total"]["value"] > 0:
            if "hits" in res["hits"]:
                for seller in res["hits"]["hits"]:
                    cusine_name = ""
                    avg_rating_value = 0
                    seller_rating = db.sellerReviewRatings.aggregate(
                        [
                            {
                                "$match": {
                                    "sellerId": str(seller["_id"]),
                                    "status": 1,
                                    "rating": {"$ne": 0},
                                }
                            },
                            {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                        ]
                    )
                    for avg_rating in seller_rating:
                        avg_rating_value = avg_rating["avgRating"]

                    if int(sort_data) == 0 or int(sort_data) == 1:
                        distance_km = round(seller["sort"][1], 2)
                        distance_miles = round(distance_km * conv_fac, 2)
                    else:
                        try:
                            distance_km = round(seller["sort"][2], 2)
                            distance_miles = round(distance_km * conv_fac, 2)
                        except:
                            try:
                                distance_km = round(seller["sort"][1], 2)
                                distance_miles = round(distance_km * conv_fac, 2)
                            except:
                                distance_km = round(seller["sort"][0], 2)
                                distance_miles = round(distance_km * conv_fac, 2)

                    if "averageCostForMealForTwo" in seller["_source"]:
                        cost_for_two = seller["_source"]["averageCostForMealForTwo"]
                    else:
                        cost_for_two = 0

                    offer_details = db.offers.find(
                        {"storeId": {"$in": [str(seller["_id"])]}, "status": 1}
                    )
                    offer_json = []
                    for offer in offer_details:
                        offer_json.append(
                            {
                                "offerName": offer["name"][language],
                                "offerId": str(offer["_id"]),
                                "offerType": offer["offerType"],
                                "discountValue": int(offer["discountValue"]),
                            }
                        )

                    if len(offer_json) > 0:
                        best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                        if best_offer_store["offerType"] == 1:
                            percentage_text = (
                                    str(best_offer_store["discountValue"]) + "%" + " " + "off"
                            )
                        else:
                            percentage_text = "₹" + str(best_offer_store["discountValue"]) + " off"
                        offer_name = best_offer_store["offerName"]
                    else:
                        offer_name = ""
                        percentage_text = ""

                    address = (
                        seller["_source"]["businessLocationAddress"]["address"]
                        if "address" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    addressArea = (
                        seller["_source"]["businessLocationAddress"]["addressArea"]
                        if "addressArea" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    locality = (
                        seller["_source"]["businessLocationAddress"]["locality"]
                        if "locality" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    post_code = (
                        seller["_source"]["businessLocationAddress"]["postCode"]
                        if "postCode" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    state = (
                        seller["_source"]["businessLocationAddress"]["state"]
                        if "state" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    country = (
                        seller["_source"]["businessLocationAddress"]["country"]
                        if "country" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    city = (
                        seller["_source"]["businessLocationAddress"]["city"]
                        if "city" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )

                    # ===================================for the cusines=============================================
                    if "specialities" in seller["_source"]:
                        if len(seller["_source"]["specialities"]):
                            for spec in seller["_source"]["specialities"]:
                                spec_data = db.specialities.find_one(
                                    {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                )
                                if spec_data != None:
                                    specialities_data.append(
                                        {
                                            "id": str(spec),
                                            "image": spec_data["image"]
                                            if "image" in spec_data
                                            else "",
                                            "name": spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"],
                                        }
                                    )
                                    if cusine_name == "":
                                        cusine_name = (
                                            spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                    else:
                                        cusine_name = (
                                            cusine_name
                                            + ", "
                                            + spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                else:
                                    pass
                        else:
                            pass
                    else:
                        pass

                    if "storeIsOpen" in seller["_source"]:
                        store_is_open = seller["_source"]["storeIsOpen"]
                    else:
                        store_is_open = False

                    if "nextCloseTime" in seller["_source"]:
                        next_close_time = seller["_source"]["nextCloseTime"]
                    else:
                        next_close_time = ""

                    if "nextOpenTime" in seller["_source"]:
                        next_open_time = seller["_source"]["nextOpenTime"]
                    else:
                        next_open_time = ""

                    if next_close_time == "" and next_open_time == "":
                        is_temp_close = True
                        store_tag = "Temporarily Closed"
                    elif next_open_time != "" and store_is_open == False:
                        is_temp_close = False
                        next_open_time = int(next_open_time + timezone * 60)
                        local_time = datetime.datetime.fromtimestamp(next_open_time)
                        next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                        next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                        next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                        if next_day_midnight_timestamp > next_open_time:
                            open_time = local_time.strftime("%I:%M %p")
                            store_tag = "Opens Next At " + open_time
                        else:
                            open_time = local_time.strftime("%I:%M %p")
                            store_tag = "Opens Tomorrow At " + open_time
                    else:
                        is_temp_close = False
                        store_tag = ""

                    # =======================================safetyStandards=============================================
                    if "safetyStandards" in seller["_source"]:
                        if int(seller["_source"]["safetyStandards"]) == 0:
                            safety_standards = False
                        else:
                            safety_standards = True
                    else:
                        safety_standards = False

                    # =======================================safetyStandards description================================
                    if "safetyStandardsDynamicContent" in seller["_source"]:
                        if seller["_source"]["safetyStandardsDynamicContent"] == "":
                            safety_standards_dynamic_content = seller["_source"][
                                "safetyStandardsDynamicContent"
                            ]
                        else:
                            safety_standards_dynamic_content = ""
                    else:
                        safety_standards_dynamic_content = ""

                    store_data_json.append(
                        {
                            "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                            "_id": str(seller["_id"]),
                            "avgRating": round(avg_rating_value, 2),
                            "averageCostForMealForTwo": cost_for_two,
                            "isTempClose": is_temp_close,
                            "currencyCode": seller["_source"]["currencyCode"]
                            if "currencyCode" in seller["_source"]
                            else "INR",
                            "businessLocationAddress": seller["_source"]["businessLocationAddress"],
                            "billingAddress": seller["_source"]["billingAddress"]
                            if "billingAddress" in seller["_source"]
                            else {},
                            "headOffice": seller["_source"]["headOffice"]
                            if "headOffice" in seller["_source"]
                            else {},
                            "logoImages": seller["_source"]["logoImages"],
                            "nextCloseTime": seller["_source"]["nextCloseTime"],
                            "nextOpenTime": seller["_source"]["nextOpenTime"],
                            "distanceKm": round(distance_km, 2),
                            "freeDeliveryAbove": seller["_source"]["freeDeliveryAbove"]
                            if "freeDeliveryAbove" in seller["_source"]
                            else 0,
                            "currencySymbol": seller["_source"]["currencyCode"]
                            if "currencyCode" in seller["_source"]
                            else "INR",
                            "currency": seller["_source"]["currencyCode"]
                            if "currencyCode" in seller["_source"]
                            else "INR",
                            "storeTag": store_tag,
                            "offerName": offer_name,
                            "safetyStandards": safety_standards,
                            "cuisines": cusine_name,
                            "address": address,
                            "locality": locality,
                            "postCode": post_code,
                            "addressArea": addressArea,
                            "state": state,
                            "country": country,
                            "city": city,
                            "paymentMethods": {
                                "cashOnPickUp": seller["_source"]["cashOnPickUp"]
                                if "cashOnPickUp" in seller["_source"]
                                else False,
                                "pickUpPrePaymentCard": seller["_source"]["pickUpPrePaymentCard"]
                                if "pickUpPrePaymentCard" in seller["_source"]
                                else False,
                                "cashOnDelivery": seller["_source"]["cashOnDelivery"]
                                if "cashOnDelivery" in seller["_source"]
                                else False,
                                "deliveryPrePaymentCard": seller["_source"][
                                    "deliveryPrePaymentCard"
                                ]
                                if "deliveryPrePaymentCard" in seller["_source"]
                                else False,
                                "cardOnDelivery": seller["_source"]["cardOnDelivery"]
                                if "cardOnDelivery" in seller["_source"]
                                else False,
                                "acceptsCashOnDelivery": seller["_source"]["acceptsCashOnDelivery"]
                                if "acceptsCashOnDelivery" in seller["_source"]
                                else False,
                                "acceptsCard": seller["_source"]["acceptsCard"]
                                if "acceptsCard" in seller["_source"]
                                else False,
                                "acceptsWallet": seller["_source"]["acceptsWallet"]
                                if "acceptsWallet" in seller["_source"]
                                else False,
                            },
                            "distanceMiles": distance_miles,
                            "bannerImages": seller["_source"]["bannerImages"],
                            "minimumOrder": seller["_source"]["minimumOrder"],
                            "galleryImages": seller["_source"]["galleryImages"],
                            "supportedOrderTypes": seller["_source"]["supportedOrderTypes"]
                            if "supportedOrderTypes" in seller["_source"]
                            else 3,
                            "cityId": seller["_source"]["cityId"],
                            "citiesOfOperation": seller["_source"]["citiesOfOperation"],
                            "averageDeliveryTime": str(
                                seller["_source"]["averageDeliveryTimeInMins"]
                            )
                                                   + " "
                                                   + "Mins"
                            if "averageDeliveryTimeInMins" in seller["_source"]
                            else "",
                            "isExpressDelivery": int(seller["_source"]["isExpressDelivery"])
                            if "isExpressDelivery" in seller["_source"]
                            else 0,
                            "parentSellerIdOrSupplierId": seller["_source"][
                                "parentSellerIdOrSupplierId"
                            ],
                            "storeName": seller["_source"]["storeName"][language],
                            "address": seller["_source"]["headOffice"]["headOfficeAddress"]
                            if "headOfficeAddress" in seller["_source"]["headOffice"]
                            else "",
                            "sellerTypeId": seller["_source"]["sellerTypeId"],
                            "sellerType": seller["_source"]["sellerType"],
                            "averageDeliveryTimeInMins": seller["_source"][
                                "averageDeliveryTimeInMins"
                            ]
                            if "averageDeliveryTimeInMins" in seller["_source"]
                            else 0,
                            "storeFrontTypeId": seller["_source"]["storeFrontTypeId"],
                            "storeFrontType": seller["_source"]["storeFrontType"],
                            "driverTypeId": seller["_source"]["driverTypeId"]
                            if "driverTypeId" in seller["_source"]
                            else 0,
                            "driverType": seller["_source"]["driverType"]
                            if "driverType" in seller["_source"]
                            else 0,
                            "nextCloseTime": next_close_time,
                            "nextOpenTime": next_open_time,
                            "storeIsOpen": store_is_open,
                            "status": seller["_source"]["status"],
                            "percentageText": percentage_text,
                        }
                    )
            return store_data_json, fav_store_data_count, specialities_data
        else:
            return store_data_json, fav_store_data_count, specialities_data
    except Exception as ex:
        store_data_json = []
        close_data_json = []
        specialities_data = []
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        return store_data_json, fav_store_data_count, specialities_data


def normal_store_user(
        category_id,
        user_id,
        zone_id,
        user_latitude,
        user_longtitude,
        language,
        skip_data,
        limit_data,
        sort_data,
        cuisines_data,
        avg_cost_max,
        avg_cost_min,
        timezone,
        min_ratings_data,
        max_ratings_data,
        order_type,
):
    try:
        is_rating_sort = False
        must_query = []
        must_not_query = []
        range_query = []

        must_query.append({"match": {"categoryId": category_id}})
        must_query.append({"match": {"status": 1}})
        must_query.append({"match": {"serviceZones.zoneId": zone_id}})
        # must_not_query.append({"terms": {"favouriteUsers": [user_id]}})
        if int(order_type) != 4 and int(order_type) != 3:
            must_query.append({"terms": {"supportedOrderTypes": [order_type, 3]}})
        elif int(order_type) == 3:
            must_query.append({"terms": {"supportedOrderTypes": [1, 2, 3]}})
        else:
            pass

        if float(min_ratings_data) != 0.0 and float(max_ratings_data) != 0.0:
            range_query.append(
                {
                    "range": {
                        "avgRating": {
                            "gte": float(min_ratings_data),
                            "lte": float(max_ratings_data),
                        }
                    }
                }
            )
        elif float(max_ratings_data) != 0.0:
            range_query.append(
                {
                    "range": {
                        "avgRating": {
                            "gte": float(min_ratings_data),
                            "lte": float(max_ratings_data),
                        }
                    }
                }
            )

        if cuisines_data != "":
            spec_data = []
            for n in cuisines_data.split():
                for spec in n.split(","):
                    spec_data.append(spec)
            must_query.append({"terms": {"specialities": spec_data}})

        if category_id == DINE_STORE_CATEGORY_ID:
            if avg_cost_max != 0 and avg_cost_min != 0:
                range_query.append(
                    {
                        "range": {
                            "averageCostForMealForTwo": {
                                "lte": float(avg_cost_max),
                                "gte": float(avg_cost_min),
                            }
                        }
                    }
                )
            elif avg_cost_max != 0 and avg_cost_min == 0:
                range_query.append(
                    {"range": {"averageCostForMealForTwo": {"lte": float(avg_cost_max)}}}
                )
            else:
                range_query.append(
                    {"range": {"averageCostForMealForTwo": {"gte": float(avg_cost_min)}}}
                )
        else:
            if avg_cost_max != 0 and avg_cost_min != 0:
                range_query.append(
                    {
                        "range": {
                            "minimumOrder": {
                                "lte": float(avg_cost_max),
                                "gte": float(avg_cost_min),
                            }
                        }
                    }
                )
            elif avg_cost_max != 0 and avg_cost_min == 0:
                range_query.append({"range": {"minimumOrder": {"lte": float(avg_cost_max)}}})
            else:
                range_query.append({"range": {"minimumOrder": {"gte": float(avg_cost_min)}}})
        # must_not_query.append({"terms": {"storeFrontTypeId": [2]}})
        if int(sort_data) == 4:
            geo_distance_sort = {
                "_geo_distance": {
                    "distance_type": "plane",
                    "location": {"lat": float(user_latitude), "lon": float(user_longtitude)},
                    "order": "desc",
                    "unit": "km",
                }
            }
        else:
            geo_distance_sort = {
                "_geo_distance": {
                    "distance_type": "plane",
                    "location": {"lat": float(user_latitude), "lon": float(user_longtitude)},
                    "order": "asc",
                    "unit": "km",
                }
            }
        if int(sort_data) == 0:
            sort_query = [{"storeIsOpen": {"order": "desc"}}, geo_distance_sort]
        elif int(sort_data) == 1:
            sort_query = [{"storeIsOpen": {"order": "desc"}}, geo_distance_sort]
        elif int(sort_data) == 2:
            sort_query = [
                {"storeIsOpen": {"order": "desc"}},
                {"avgRating": {"order": "desc"}},
                geo_distance_sort,
            ]
        elif int(sort_data) == 3:
            if category_id == DINE_STORE_CATEGORY_ID:
                sort_query = [
                    {"storeIsOpen": {"order": "desc"}},
                    {"averageCostForMealForTwo": {"order": "asc"}},
                    geo_distance_sort,
                ]
            else:
                sort_query = [{"storeIsOpen": {"order": "desc"}}, geo_distance_sort]
        elif int(sort_data) == 4:
            if category_id == DINE_STORE_CATEGORY_ID:
                sort_query = [
                    {"storeIsOpen": {"order": "desc"}},
                    {"averageCostForMealForTwo": {"order": "desc"}},
                    geo_distance_sort,
                ]
            else:
                sort_query = [{"storeIsOpen": {"order": "desc"}}, geo_distance_sort]
        else:
            sort_query = [
                {"storeIsOpen": {"order": "desc"}},
                {"averageCostForMealForTwo": {"order": "desc"}},
                geo_distance_sort,
            ]
        must_query.append(
            {
                "geo_distance": {
                    "distance": "50km",
                    "location": {"lat": float(user_latitude), "lon": float(user_longtitude)},
                }
            }
        )
        store_query = {
            "query": {
                "bool": {
                    "must": must_query,
                    # "must_not": must_not_query,
                    "filter": range_query,
                }
            },
            "size": 500,
            "from": 0,
            "sort": sort_query,
        }
        res_store = es.search(
            index=index_store,
            # doc_type=doc_central_product,
            body=store_query,
            filter_path=[
                "hits.hits._id",
                "hits.hits.sort",
                "hits.hits._source.storeName",
                "hits.hits._source.parentSellerIdOrSupplierId",
                "hits.hits._source.uniqStoreId",
            ],
        )

        all_store_details = []
        if len(res_store) > 0:
            for r_s in res_store["hits"]["hits"]:
                if int(sort_data) == 0 or int(sort_data) == 1:
                    distance_km = round(r_s["sort"][1], 2)
                    distance_miles = round(distance_km * conv_fac, 2)
                else:
                    try:
                        distance_km = round(r_s["sort"][2], 2)
                        distance_miles = round(distance_km * conv_fac, 2)
                    except:
                        try:
                            distance_km = round(r_s["sort"][1], 2)
                            distance_miles = round(distance_km * conv_fac, 2)
                        except:
                            distance_km = round(r_s["sort"][0], 2)
                            distance_miles = round(distance_km * conv_fac, 2)
                all_store_details.append(
                    {
                        "id": str(r_s["_id"]),
                        "distance": distance_km,
                        "storeName": r_s["_source"]["storeName"]["en"],
                        "parentSellerIdOrSupplierId": r_s["_source"]["parentSellerIdOrSupplierId"],
                        "uniqStoreId": r_s["_source"]["uniqStoreId"]
                        if "uniqStoreId" in r_s["_source"]
                        else "0",
                    }
                )

        # unique_stores = []
        unique_stores = sorted(all_store_details, key=lambda k: k["distance"], reverse=False)

        # if len(unique_stores) > 0:
        #     dataframe_details = pd.DataFrame(unique_stores)
        #     dataframe_details = dataframe_details.drop_duplicates("uniqStoreId", keep="first")
        #     spec_data = dataframe_details.to_json(orient='records')
        #     spec_data = json.loads(spec_data)
        # else:
        #     spec_data = []
        if len(unique_stores) > 0 and category_id == DINE_STORE_CATEGORY_ID:
            dataframe_details = pd.DataFrame(unique_stores)
            dataframe_details = dataframe_details.drop_duplicates("uniqStoreId", keep="first")
            spec_data = dataframe_details.to_json(orient="records")
            spec_data = json.loads(spec_data)
        elif len(unique_stores) > 0:
            dataframe_details = pd.DataFrame(unique_stores)
            spec_data = dataframe_details.to_json(orient="records")
            spec_data = json.loads(spec_data)
        else:
            spec_data = []

        final_stores = []
        # for store in store_non_unique:
        for store in spec_data:
            final_stores.append(store["id"])
        must_query.append({"terms": {"_id": final_stores}})
        query = {
            "query": {
                "bool": {
                    "must": must_query,
                    # "must_not": must_not_query,
                    "filter": range_query,
                }
            },
            "size": int(limit_data),
            "from": int(skip_data),
            "sort": sort_query,
        }
        res = es.search(
            index=index_store,
            # doc_type=doc_central_product,
            body=query,
            filter_path=["hits.total", "hits.hits._id", "hits.hits.sort", "hits.hits._source"],
        )
        store_data_json = []
        close_data_json = []
        specialities_data = []
        store_data_count = res["hits"]["total"]["value"]
        if res["hits"]["total"]["value"] > 0:
            if "hits" in res["hits"]:
                for seller in res["hits"]["hits"]:
                    cusine_name = ""
                    avg_rating_value = 0
                    seller_rating = db.sellerReviewRatings.aggregate(
                        [
                            {
                                "$match": {
                                    "sellerId": str(seller["_id"]),
                                    "status": 1,
                                    "rating": {"$ne": 0},
                                }
                            },
                            {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                        ]
                    )
                    for avg_rating in seller_rating:
                        avg_rating_value = avg_rating["avgRating"]

                    if int(sort_data) == 0 or int(sort_data) == 1:
                        distance_km = round(seller["sort"][1], 2)
                        distance_miles = round(distance_km * conv_fac, 2)
                    else:
                        try:
                            distance_km = round(seller["sort"][2], 2)
                            distance_miles = round(distance_km * conv_fac, 2)
                        except:
                            try:
                                distance_km = round(seller["sort"][1], 2)
                                distance_miles = round(distance_km * conv_fac, 2)
                            except:
                                distance_km = round(seller["sort"][0], 2)
                                distance_miles = round(distance_km * conv_fac, 2)
                    if "averageCostForMealForTwo" in seller["_source"]:
                        cost_for_two = seller["_source"]["averageCostForMealForTwo"]
                    else:
                        cost_for_two = 0

                    offer_details = db.offers.find(
                        {"storeId": {"$in": [str(seller["_id"])]}, "status": 1}
                    )
                    offer_json = []
                    for offer in offer_details:
                        offer_json.append(
                            {
                                "offerName": offer["name"][language]
                                if language in offer["name"]
                                else offer["name"]["en"],
                                "offerId": str(offer["_id"]),
                                "offerType": offer["offerType"],
                                "discountValue": offer["discountValue"],
                            }
                        )

                    if len(offer_json) > 0:
                        best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                        if best_offer_store["offerType"] == 1:
                            percentage_text = (
                                    str(best_offer_store["discountValue"]) + "%" + " " + "off"
                            )
                        else:
                            percentage_text = "₹" + str(best_offer_store["discountValue"]) + " off"
                        offer_name = best_offer_store["offerName"]
                    else:
                        offer_name = ""
                        percentage_text = ""

                    address = (
                        seller["_source"]["businessLocationAddress"]["address"]
                        if "address" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    addressArea = (
                        seller["_source"]["businessLocationAddress"]["addressArea"]
                        if "addressArea" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    locality = (
                        seller["_source"]["businessLocationAddress"]["locality"]
                        if "locality" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    post_code = (
                        seller["_source"]["businessLocationAddress"]["postCode"]
                        if "postCode" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    state = (
                        seller["_source"]["businessLocationAddress"]["state"]
                        if "state" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    country = (
                        seller["_source"]["businessLocationAddress"]["country"]
                        if "country" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )
                    city = (
                        seller["_source"]["businessLocationAddress"]["city"]
                        if "city" in seller["_source"]["businessLocationAddress"]
                        else ""
                    )

                    # ===================================for the cusines=============================================
                    if "specialities" in seller["_source"]:
                        if len(seller["_source"]["specialities"]):
                            for spec in seller["_source"]["specialities"]:
                                spec_data = db.specialities.find_one(
                                    {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                )
                                if spec_data != None:
                                    specialities_data.append(
                                        {
                                            "id": str(spec),
                                            "image": spec_data["image"]
                                            if "image" in spec_data
                                            else "",
                                            "name": spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"],
                                        }
                                    )
                                    if cusine_name == "":
                                        cusine_name = (
                                            spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                    else:
                                        cusine_name = (
                                            cusine_name
                                            + ", "
                                            + spec_data["specialityName"][language]
                                            if language in spec_data["specialityName"]
                                            else spec_data["specialityName"]["en"]
                                        )
                                else:
                                    pass
                        else:
                            pass
                    else:
                        pass

                    try:
                        if "storeIsOpen" in seller["_source"]:
                            store_is_open = seller["_source"]["storeIsOpen"]
                        else:
                            store_is_open = False
                    except:
                        store_is_open = False

                    try:
                        if "nextCloseTime" in seller["_source"]:
                            next_close_time = seller["_source"]["nextCloseTime"]
                        else:
                            next_close_time = ""
                    except:
                        next_close_time = ""

                    try:
                        if "nextOpenTime" in seller["_source"]:
                            next_open_time = seller["_source"]["nextOpenTime"]
                        else:
                            next_open_time = ""
                    except:
                        next_open_time = ""

                    if next_close_time == "" and next_open_time == "":
                        is_temp_close = True
                        store_tag = "Temporarily Closed"
                    elif next_open_time != "" and store_is_open == False:
                        is_temp_close = False
                        next_open_time = int(next_open_time + timezone * 60)
                        local_time = datetime.datetime.fromtimestamp(next_open_time)
                        next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                        next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                        next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                        if next_day_midnight_timestamp > next_open_time:
                            open_time = local_time.strftime("%I:%M %p")
                            store_tag = "Opens Next At " + open_time
                        else:
                            open_time = local_time.strftime("%I:%M %p")
                            store_tag = "Opens Tomorrow At " + open_time
                    else:
                        is_temp_close = False
                        store_tag = ""

                    # =======================================safetyStandards=============================================
                    if "safetyStandards" in seller["_source"]:
                        if int(seller["_source"]["safetyStandards"]) == 0:
                            safety_standards = False
                        else:
                            safety_standards = True
                    else:
                        safety_standards = False

                    # =======================================safetyStandards description================================
                    if "safetyStandardsDynamicContent" in seller["_source"]:
                        if seller["_source"]["safetyStandardsDynamicContent"] == "":
                            safety_standards_dynamic_content = seller["_source"][
                                "safetyStandardsDynamicContent"
                            ]
                        else:
                            safety_standards_dynamic_content = ""
                    else:
                        safety_standards_dynamic_content = ""

                    if float(min_ratings_data) != 0.0 and float(max_ratings_data) != 0.0:
                        if round(avg_rating_value, 2) >= float(min_ratings_data) and round(
                                avg_rating_value, 2
                        ) <= float(max_ratings_data):
                            is_rating_sort = False
                        else:
                            is_rating_sort = True
                    elif float(max_ratings_data) != 0.0:
                        if round(avg_rating_value, 2) <= float(max_ratings_data):
                            is_rating_sort = False
                        else:
                            is_rating_sort = True
                    else:
                        pass
                    # ======================================open stores=============================================
                    if store_is_open == True and is_rating_sort == False:
                        store_data_json.append(
                            {
                                "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                                "_id": str(seller["_id"]),
                                "avgRating": round(avg_rating_value, 2),
                                "averageCostForMealForTwo": cost_for_two,
                                "isTempClose": is_temp_close,
                                "currencyCode": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "businessLocationAddress": seller["_source"][
                                    "businessLocationAddress"
                                ],
                                "billingAddress": seller["_source"]["billingAddress"]
                                if "billingAddress" in seller["_source"]
                                else {},
                                "headOffice": seller["_source"]["headOffice"]
                                if "headOffice" in seller["_source"]
                                else {},
                                "logoImages": seller["_source"]["logoImages"],
                                "distanceKm": round(distance_km, 2),
                                "safetyStandards": safety_standards,
                                "freeDeliveryAbove": seller["_source"]["freeDeliveryAbove"]
                                if "freeDeliveryAbove" in seller["_source"]
                                else 0,
                                "currencySymbol": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "currency": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "storeTag": store_tag,
                                "offerName": offer_name,
                                "cuisines": cusine_name,
                                "address": address,
                                "locality": locality,
                                "averageDeliveryTime": str(
                                    seller["_source"]["averageDeliveryTimeInMins"]
                                )
                                                       + " "
                                                       + "Mins"
                                if "averageDeliveryTimeInMins" in seller["_source"]
                                else "",
                                "postCode": post_code,
                                "addressArea": addressArea,
                                "state": state,
                                "country": country,
                                "city": city,
                                "distanceMiles": distance_miles,
                                "bannerImages": seller["_source"]["bannerImages"],
                                "minimumOrder": seller["_source"]["minimumOrder"],
                                "galleryImages": seller["_source"]["galleryImages"],
                                "cityId": seller["_source"]["cityId"],
                                "paymentMethods": {
                                    "cashOnPickUp": seller["_source"]["cashOnPickUp"]
                                    if "cashOnPickUp" in seller["_source"]
                                    else False,
                                    "pickUpPrePaymentCard": seller["_source"][
                                        "pickUpPrePaymentCard"
                                    ]
                                    if "pickUpPrePaymentCard" in seller["_source"]
                                    else False,
                                    "cashOnDelivery": seller["_source"]["cashOnDelivery"]
                                    if "cashOnDelivery" in seller["_source"]
                                    else False,
                                    "deliveryPrePaymentCard": seller["_source"][
                                        "deliveryPrePaymentCard"
                                    ]
                                    if "deliveryPrePaymentCard" in seller["_source"]
                                    else False,
                                    "cardOnDelivery": seller["_source"]["cardOnDelivery"]
                                    if "cardOnDelivery" in seller["_source"]
                                    else False,
                                    "acceptsCashOnDelivery": seller["_source"][
                                        "acceptsCashOnDelivery"
                                    ]
                                    if "acceptsCashOnDelivery" in seller["_source"]
                                    else False,
                                    "acceptsCard": seller["_source"]["acceptsCard"]
                                    if "acceptsCard" in seller["_source"]
                                    else False,
                                    "acceptsWallet": seller["_source"]["acceptsWallet"]
                                    if "acceptsWallet" in seller["_source"]
                                    else False,
                                },
                                "citiesOfOperation": seller["_source"]["citiesOfOperation"],
                                "isExpressDelivery": int(seller["_source"]["isExpressDelivery"])
                                if "isExpressDelivery" in seller["_source"]
                                else 0,
                                "parentSellerIdOrSupplierId": seller["_source"][
                                    "parentSellerIdOrSupplierId"
                                ],
                                "storeName": seller["_source"]["storeName"][language]
                                if language in seller["_source"]["storeName"]
                                else seller["_source"]["storeName"]["en"],
                                "address": seller["_source"]["headOffice"]["headOfficeAddress"]
                                if "headOfficeAddress" in seller["_source"]["headOffice"]
                                else "",
                                "sellerTypeId": seller["_source"]["sellerTypeId"],
                                "supportedOrderTypes": seller["_source"]["supportedOrderTypes"]
                                if "supportedOrderTypes" in seller["_source"]
                                else 3,
                                "sellerType": seller["_source"]["sellerType"],
                                "averageDeliveryTimeInMins": seller["_source"][
                                    "averageDeliveryTimeInMins"
                                ]
                                if "averageDeliveryTimeInMins" in seller["_source"]
                                else 0,
                                "storeFrontTypeId": seller["_source"]["storeFrontTypeId"],
                                "storeFrontType": seller["_source"]["storeFrontType"],
                                "driverTypeId": seller["_source"]["driverTypeId"]
                                if "driverTypeId" in seller["_source"]
                                else 0,
                                "driverType": seller["_source"]["driverType"]
                                if "driverType" in seller["_source"]
                                else 0,
                                "nextCloseTime": next_close_time,
                                "nextOpenTime": next_open_time,
                                "storeIsOpen": store_is_open,
                                "status": seller["_source"]["status"],
                                "percentageText": percentage_text,
                            }
                        )
                    elif store_is_open == False and is_rating_sort == False:
                        # ========================================close stores========================================
                        close_data_json.append(
                            {
                                "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                                "_id": str(seller["_id"]),
                                "avgRating": round(avg_rating_value, 2),
                                "averageCostForMealForTwo": cost_for_two,
                                "isTempClose": is_temp_close,
                                "currencyCode": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "businessLocationAddress": seller["_source"][
                                    "businessLocationAddress"
                                ],
                                "billingAddress": seller["_source"]["billingAddress"]
                                if "billingAddress" in seller["_source"]
                                else {},
                                "headOffice": seller["_source"]["headOffice"]
                                if "headOffice" in seller["_source"]
                                else {},
                                "logoImages": seller["_source"]["logoImages"],
                                "distanceKm": round(distance_km, 2),
                                "storeTag": store_tag,
                                "freeDeliveryAbove": seller["_source"]["freeDeliveryAbove"]
                                if "freeDeliveryAbove" in seller["_source"]
                                else 0,
                                "currencySymbol": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "currency": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "offerName": offer_name,
                                "cuisines": cusine_name,
                                "averageDeliveryTimeInMins": seller["_source"][
                                    "averageDeliveryTimeInMins"
                                ]
                                if "averageDeliveryTimeInMins" in seller["_source"]
                                else 0,
                                "address": address,
                                "locality": locality,
                                "safetyStandards": safety_standards,
                                "postCode": post_code,
                                "averageDeliveryTime": str(
                                    seller["_source"]["averageDeliveryTimeInMins"]
                                )
                                                       + " "
                                                       + "Mins"
                                if "averageDeliveryTimeInMins" in seller["_source"]
                                else "",
                                "addressArea": addressArea,
                                "state": state,
                                "minimumOrder": seller["_source"]["minimumOrder"],
                                "country": country,
                                "city": city,
                                "distanceMiles": distance_miles,
                                "bannerImages": seller["_source"]["bannerImages"],
                                "galleryImages": seller["_source"]["galleryImages"],
                                "cityId": seller["_source"]["cityId"],
                                "citiesOfOperation": seller["_source"]["citiesOfOperation"],
                                "isExpressDelivery": int(seller["_source"]["isExpressDelivery"])
                                if "isExpressDelivery" in seller["_source"]
                                else 0,
                                "parentSellerIdOrSupplierId": seller["_source"][
                                    "parentSellerIdOrSupplierId"
                                ],
                                "storeName": seller["_source"]["storeName"][language]
                                if language in seller["_source"]["storeName"]
                                else seller["_source"]["storeName"]["en"],
                                "supportedOrderTypes": seller["_source"]["supportedOrderTypes"]
                                if "supportedOrderTypes" in seller["_source"]
                                else 3,
                                "address": seller["_source"]["headOffice"]["headOfficeAddress"]
                                if "headOfficeAddress" in seller["_source"]["headOffice"]
                                else "",
                                "sellerTypeId": seller["_source"]["sellerTypeId"],
                                "sellerType": seller["_source"]["sellerType"],
                                "storeFrontTypeId": seller["_source"]["storeFrontTypeId"],
                                "storeFrontType": seller["_source"]["storeFrontType"],
                                "driverTypeId": seller["_source"]["driverTypeId"]
                                if "driverTypeId" in seller["_source"]
                                else 0,
                                "driverType": seller["_source"]["driverType"]
                                if "driverType" in seller["_source"]
                                else 0,
                                "nextCloseTime": next_close_time,
                                "nextOpenTime": next_open_time,
                                "storeIsOpen": store_is_open,
                                "status": seller["_source"]["status"],
                                "percentageText": percentage_text,
                            }
                        )
                    else:
                        pass
            return store_data_json, store_data_count, specialities_data, close_data_json
        else:
            return store_data_json, store_data_count, specialities_data, close_data_json
    except Exception as ex:
        store_data_json = []
        close_data_json = []
        specialities_data = []
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
        return store_data_json, fav_store_data_count, specialities_data


def food_offer_details(category_id, zone_id, language):
    banner_details = db.banner.find(
        {"storeCategoryId": category_id, "zones.zoneId": {"$in": [zone_id]}, "status": 1}
    )
    banner_data = []
    if banner_details.count() > 0:
        for banner in banner_details:
            store_details = db.stores.find_one(
                {"_id": ObjectId(banner["data"][0]["id"]), "status": 1}, {"storeName": 1}
            )
            if store_details != None:
                banner_data.append(
                    {
                        "offerId": str(banner["data"][0]["id"]),
                        "name": "",  # store_details['storeName'][language],
                        "images": {
                            "thumbnail": banner["image_mobile"],
                            "mobile": banner["image_mobile"],
                            "image": banner["image_mobile"],
                        },
                        "webimages": {
                            "thumbnail": banner["image_web"],
                            "mobile": banner["image_web"],
                            "image": banner["image_web"],
                        },
                    }
                )
        return banner_data
    else:
        return banner_data


"""
    API for the get the store list for the food
    driverTypeId --> 1 for storeDriver, 2 for appDriver, 3 for PartnerDelivery
    sort type ---> 1 Popularity, 2 for rating: high to low, 3 cost: low to high, 4 for cost: high to low
"""


class AllStoreList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Food"],
        operation_description="API for get the all store from the list",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=DINE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category id for the getting the data for store",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b7ad8798dc19da1a4b0e",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="zone id of the user location",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
            openapi.Parameter(
                name="page",
                default="1",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="page number from which page we need show data",
            ),
            openapi.Parameter(
                name="sort",
                default="1",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the sorting base on sort filter. value should be 1 Popularity, 2 for rating: high to low, 3 distance > Closer to far 4 for distance > far to closer #3 cost: low to high, 4 for cost: high to low",
            ),
            openapi.Parameter(
                name="minRatings",
                default="0",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the sorting base on rating filter. minimum value should be 2, 2.5, 3, 4.5",
            ),
            openapi.Parameter(
                name="maxRatings",
                default="5",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the sorting base on rating filter. maximum value should be 2, 2.5, 3, 4.5",
            ),
            openapi.Parameter(
                name="avgCost",
                default="0",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the sorting base on cost for two people filter. value should be 200, 500",
            ),
            openapi.Parameter(
                name="avgCostMax",
                default="0",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the sorting base on cost for two people filter. value should be 200, 500",
            ),
            openapi.Parameter(
                name="cuisines",
                default="5ee092def3545b73df72271a",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the filter base on cuisines. value should be multiple. while multiple need to send with comma seprated. 5ee092def3545b73df72271a, 5ee0970a629eaa26e76328b6",
            ),
            openapi.Parameter(
                name="timezone",
                default="Asia/Calcutta",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="offset of the timezone",
            ),
            openapi.Parameter(
                name="orderType",
                default="0",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="filter based on order type, value should be 3-both selected, 1-self pickup and 2 for delivery",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        # try:
        ##### ------------ accepting headera and query parameters ------------------- #####
        language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
        token = request.META["HTTP_AUTHORIZATION"]
        if token == "":
            response_data = {
                "message": "unauthorized",
                "totalCount": 0,
                "data": [],
            }
            return ResponseHelper.get_status_401(response_data)
        start_time = time.time()
        user_id = json.loads(token)["userId"]
        # user_id = "64d35b16fd0c09315c84038c"
        category_id = request.GET.get("storeCategoryId", "")
        page_number = int(request.GET.get("page", 1))
        zone_id = request.GET.get("zoneId", "")
        zone_id = zone_id.replace("%2C", ",")
        user_latitude = float(request.GET.get("lat", 0))
        user_longtitude = float(request.GET.get("long", 0))
        sort_data = int(request.GET.get("sort", 0))
        cuisines_data = request.GET.get("cuisines", "")
        cuisines_data = cuisines_data.replace("%2C", ",")
        hygiene_rating_data = request.GET.get("hygieneRating")
        delivery_filter_data = request.GET.get("deliveryTypes","")
        delivery_filter_data = delivery_filter_data.replace("%2C", ",")
        dietary_preferences = request.GET.get("dietaryPreferences","")
        dietary_preferences = dietary_preferences.replace("%2C", ",")
        food_Prefereces = request.GET.get("foodPrefereces","")
        food_Prefereces = food_Prefereces.replace("%2C", ",")
        allergen = request.GET.get("allergen_list","")
        allergen = allergen.replace("%2C", ",")
        creator_product_type = request.GET.get("creatorProductType","")
        creator_product_type = creator_product_type.replace("%2C", ",")
        min_ratings_data = request.GET.get("minRatings", "0")
        max_ratings_data = request.GET.get("maxRatings", "0")
        avg_cost_min = int(float(request.GET.get("avgCost", 0.0)))
        avg_cost_max = int(float(request.GET.get("avgCostMax", 0.0)))
        timezone = request.GET.get("timezone", "")
        timezone = timezone.replace("%2F", "/")
        order_type = str(request.GET.get("orderType", "0"))
        if order_type == "0":
            try:
                order_type = str(request.GET.get("supportedOrderTypes", "0"))
            except:
                order_type = "0"
        skip_data = (page_number * 20) - 20
        limit_data = page_number * 20

        ##### check if compulsory parameters are missing, then return error #####
        if category_id == "":
            response = {"data": [], "penCount": 0, "message": "store category id is missing"}
            return ResponseHelper.get_status_422(response)
        elif zone_id == "":
            response = {"data": [], "penCount": 0, "message": "zone id is missing"}
            return ResponseHelper.get_status_422(response)
        else:
            specialities = []
            # favourite_response  = []
            # favourite_data_count = []
            # fav_specialities_data = []
            (
                favourite_response,
                favourite_data_count,
                fav_specialities_data,
            ) = OperationHelper.favourite_store_user(
                category_id,
                user_id,
                zone_id,
                user_latitude,
                user_longtitude,
                language,
                skip_data,
                limit_data,
                sort_data,
                cuisines_data,
                avg_cost_max,
                avg_cost_min,
                timezone,
                min_ratings_data,
                max_ratings_data,
                order_type,
                hygiene_rating_data,
                dietary_preferences,
                food_Prefereces,
                allergen,
                creator_product_type,
                delivery_filter_data
            )
            print('get fav store data time :--> ', time.time() - start_time)
            (
                normal_response,
                normal_data_count,
                normal_specialities_data,
                close_data_json,
                popular_store_data_json
            ) = OperationHelper.normal_store_user(
                category_id,
                user_id,
                zone_id,
                user_latitude,
                user_longtitude,
                language,
                skip_data,
                limit_data,
                sort_data,
                cuisines_data,
                avg_cost_max,
                avg_cost_min,
                timezone,
                min_ratings_data,
                max_ratings_data,
                order_type,
                hygiene_rating_data,
                dietary_preferences,
                food_Prefereces,
                allergen,
                creator_product_type,
                delivery_filter_data
            )
            print('get normal store data time :--> ', time.time() - start_time)
            
            (
                user_preferences_store_response,
                user_preferences_store_count
            ) = OperationHelper.user_preferences_store(
                category_id,
                user_id,
                zone_id,
                user_latitude,
                user_longtitude,
                language,
                skip_data,
                limit_data,
                sort_data,
                cuisines_data,
                avg_cost_max,
                avg_cost_min,
                timezone,
                min_ratings_data,
                max_ratings_data,
                order_type,
                hygiene_rating_data,
                dietary_preferences,
                food_Prefereces,
                allergen,
                creator_product_type,
                delivery_filter_data
            )
            print('Get normal store Data :--> ', time.time() - start_time)
            if int(page_number) == 1:
                offer_response = OperationHelper.food_offer_details(
                    category_id, zone_id, language
                )
            else:
                offer_response = []

            ##### if functions does not return data then return error #####
            if (
                    len(normal_response) == 0
                    and len(close_data_json) == 0
                    and len(favourite_response) == 0
                    and len(popular_store_data_json) == 0
                    and len(user_preferences_store_response) == 0
            ):
                response = {
                    "data": {
                        "favourite": [],
                        "otherStores": [],
                        "closeStores": [],
                        "offerData": [],
                        "specialitiesData": [],
                    },
                    "message": "data not found",
                }
                return ResponseHelper.get_status_404(response)
            else:
                ##### get specialities data #####
                for sp in fav_specialities_data:
                    specialities.append(sp)
                for np_sp in normal_specialities_data:
                    specialities.append(np_sp)

                ##### drop duplicates #####
                if len(specialities) > 0:
                    dataframe_details = pd.DataFrame(specialities)
                    dataframe_details = dataframe_details.drop_duplicates("name", keep="last")
                    spec_data = dataframe_details.to_json(orient="records")
                    spec_data = json.loads(spec_data)
                else:
                    spec_data = []
                pen_count = int(favourite_data_count) + int(normal_data_count)
                delivery_types = []
                try:
                    delivery_types_response = db.deliveryTypes.find({})
                    for doc in delivery_types_response:
                        doc['_id'] = str(doc['_id'])
                        delivery_types.append(doc)
                except:
                    delivery_types = []



                ##### getting final response #####
                response = {
                    "data": {
                        "favourite": favourite_response, # fav store
                        "otherStores": normal_response,  # zonw wise 
                        "penCount": pen_count,
                        "closeStores": close_data_json, # close 
                        "popularStores":popular_store_data_json, # normal store but avgrating high to low
                        "preferencesStores":user_preferences_store_response, # user specilities based data
                        "offerData": offer_response,
                        "favouriteCount": int(favourite_data_count),
                        "otherCount": int(normal_data_count),
                        "closeCount": int(normal_data_count),
                        "preferencesCount":int(user_preferences_store_count),
                        "specialitiesData": spec_data[0:10],
                        "deliveryTypes":delivery_types
                    },
                    "message": "data found",
                }
                print(f"Execution time: {time.time() - start_time} seconds")
                return ResponseHelper.get_status_200(response)
    # except Exception as ex:
    #     template = "An exception of type {0} occurred. Arguments:\n{1!r}"
    #     message = template.format(type(ex).__name__, ex.args)
    #     print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
    #     error_message = {"error": "Invalid request", "message": message}
    #     return JsonResponse(error_message, status=500)


class CustomerRating(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Customer Rating"],
        operation_description="API for post and update the review of the customer",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            )
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["orderId", "rating", "reviewDescription", "userId"],
            properties={
                "orderId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="order id for which order we need to give the review. NOTE need to send store Order Id",
                    example="10951588671845728",
                ),
                "rating": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="rating of the product. value between 1 to 5",
                    example=1,
                ),
                "userId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="id of the user to whom we need to give",
                    example="5eb55416a6b5a8483ce7c65e",
                ),
                "serviceType": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="service type for which service we are adding the rating value for delivery is 1, value for ride is 2, value for services is 3, value for Truck is 4",
                    example=1,
                ),
            },
        ),
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                driver_id = json.loads(token)["userId"]
                # driver_id = "5d92f959fc2045620ce36c92"
                print("driver_id",driver_id)
                data = request.data
                if "orderId" not in data:
                    response_data = {
                        "message": "orderId is missing",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif data["orderId"] == "":
                    response_data = {
                        "message": "orderId is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif data["rating"] == "":
                    response_data = {
                        "message": "rating is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif data["userId"] == "":
                    response_data = {
                        "message": "user Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    review_details = db.customerRating.find(
                        {
                            "driverId": str(driver_id),
                            "userId": str(data["userId"]),
                            "orderId": data["orderId"],
                            "status": 1,
                        }
                    ).count()
                    if review_details == 0:
                        customer_details = db.customer.find_one(
                            {"_id": ObjectId(data["userId"])}, {"firstName": 1, "lastName": 1}
                        )
                        if customer_details != None:
                            customer_name = (
                                    customer_details["firstName"] + customer_details["lastName"]
                            )
                        else:
                            customer_name = ""
                        if customer_name == "":
                            response_data = {
                                "message": "user not found",
                            }
                            return JsonResponse(response_data, safe=False, status=404)
                        else:
                            if 'providerType' in data and data['providerType'] == "1":
                                driver_details = db.serviceProvider.find_one(
                                    {"_id": ObjectId(driver_id)}, {"firstName": 1, "lastName": 1}
                                )
                                if driver_details != None:
                                    print("details",list(driver_details))
                                    driver_name = (
                                            driver_details["firstName"] + driver_details["lastName"]
                                    )
                                else:
                                    driver_name = ""
                            else:
                                driver_details = db.driver.find_one(
                                    {"_id": ObjectId(driver_id)}, {"firstName": 1, "lastName": 1}
                                )
                                if driver_details != None:
                                    print("details",list(driver_details))
                                    driver_name = (
                                               driver_details["firstName"] + driver_details["lastName"]
                                    )
                                else:
                                    driver_name = ""
                            if driver_name == "":
                                response_data = {
                                    "message": "driver not found",
                                }
                                return JsonResponse(response_data, safe=False, status=404)
                            else:
                                service_type = data['serviceType'] if "serviceType" in data else 1
                                review = {
                                    "userId": data["userId"],
                                    "driverId": driver_id,
                                    "orderId": data["orderId"],
                                    "rating": data["rating"],
                                    "status": 1,
                                    "service": {
                                        "serviceId": "",
                                        "serviceName": "",
                                        "serviceType": int(service_type),
                                    },
                                    "customerName": customer_name,
                                    "driverName": driver_name,
                                    "createdTimestamp": int(datetime.datetime.now().timestamp()),
                                }
                                db.customerRating.insert(review)
                                db.driverJobs.update(
                                    {
                                        "packageId": data["orderId"]
                                        # "driverDetails.driverId": ObjectId(driver_id)
                                    },
                                    {"$set": {"isRating": True}},
                                    upsert=False,
                                )
                                response_data = {
                                    "message": "review added successfully",
                                }
                                return JsonResponse(response_data, safe=False, status=200)
                    else:
                        db.customerRating.update(
                            {
                                "driverId": str(driver_id),
                                "userId": str(data["userId"]),
                                "orderId": data["orderId"],
                            },
                            {"$set": {"rating": data["rating"]}},
                            upsert=False,
                        )
                        response_data = {
                            "message": "review updated successfully",
                        }
                        return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)

    @swagger_auto_schema(
        method="get",
        tags=["Customer Rating"],
        operation_description="API for get the customer rating",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="userId",
                default="5eb55416a6b5a8483ce7c65e",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="user id",
            ),
            openapi.Parameter(
                name="orderId",
                default="10951588671845728",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="order id",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                review_data = 0
                driver_id = json.loads(token)["userId"]
                # driver_id = "5d92f959fc2045620ce36c92"
                user_id = request.GET.get("userId", "")
                order_id = request.GET.get("orderId", "")

                if user_id == "":
                    response_data = {
                        "message": "user Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif order_id == "":
                    response_data = {
                        "message": "order Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    review_details = db.customerRating.find(
                        {
                            "driverId": str(driver_id),
                            "userId": str(data["userId"]),
                            "orderId": data["orderId"],
                            "status": 1,
                        }
                    )
                    if review_details.count() == 0:
                        for review in review_details:
                            review_data = review["review"]
                        review = {"rating": review_data}
                        return JsonResponse(review, safe=False, status=200)
                    else:
                        review = {"rating": 0}
                        return JsonResponse(review, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


def variant_data(language, product_id, variant_product_id, login_type, store_id, out_res25):
    res_variant = {}
    search_item_query = {
        "query": {
            "bool": {"must": [{"match": {"status": 1}}, {"match": {"parentProductId": product_id}}]}
        },
        "size": 30,
        "from": 0,
    }
    res = es.search(
        index=index_central_varient_product,
        # doc_type=doc_central_product,
        body=search_item_query,
        filter_path=[
            "hits.total",
            "hits.hits._id",
            "hits.hits._source.floatValue",
            "hits.hits._source.distributor",
            "hits.hits._source.colorName",
            "hits.hits._source.color",
            "hits.hits._source.unitSizeGroupValue",
            "hits.hits._source.isPrimary",
            "hits.hits._source.unitName",
            "hits.hits._source.seller",
            "hits.hits._source.suppliers",
            "hits.hits._source.attributes",
            "hits.hits._source.unitId",
            "hits.hits._source.image",
            "hits.hits._source.prescriptionRequired",
            "hits.hits._source.needsIdProof",
            "hits.hits._source.maxQuantity",
            "hits.hits._source.images",
            "hits.hits._source.image",
        ],
    )
    variant_query = {
        "query": {
            "bool": {
                "must": [
                    {"match": {"status": 1}},
                    {"match": {"parentProductId": product_id}},
                    {"match": {"suppliers.productId": variant_product_id}},
                ]
            }
        },
        "size": 1,
        "from": 0,
    }
    res_variant_data = es.search(
        index=index_central_varient_product,
        # doc_type=doc_central_product,
        body=variant_query,
        filter_path=[
            "hits.total",
            "hits.hits._id",
            "hits.hits._source.colorName",
            "hits.hits._source.color",
            "hits.hits._source.unitSizeGroupValue",
            "hits.hits._source.unitName",
            "hits.hits._source.suppliers",
            "hits.hits._source.maxQuantity",
            "hits.hits._source.prescriptionRequired",
            "hits.hits._source.needsIdProof",
            "hits.hits._source.image",
        ],
    )
    if res_variant_data["hits"]["total"]["value"] == 0:
        product_details = {}
    else:
        central_query = {
            "query": {"bool": {"must": [{"match": {"status": 1}}, {"match": {"_id": product_id}}]}},
            "size": 1,
            "from": 0,
        }
        res_central_data = es.search(
            index=index_central_product,
            # # doc_type=doc_central_product,
            body=central_query,
            filter_path=[
                "hits.hits._id",
                "hits.hits._source.offer",
                "hits.hits._source.pPName",
            ],
        )
        central_product = db.products.find_one(
            {"_id": ObjectId(product_id)},
            {
                "replacementPolicy": 1,
                "warranty": 1,
                "images": 1,
                "storeCategoryId": 1,
                "term&condition": 1,
                "productSeo": 1,
                "cashOnDelivery": 1,
                "containsMeat": 1,
                "exchangePolicy": 1,
                "returnPolicy": 1,
                "offer": 1,
                "pPName": 1,
                "currency": 1,
                "currencySymbol": 1,
                "avgRating": 1,
                "maxQuantity": 1,
                "allowOrderOutOfStock": 1,
            },
        )
        supplier_list = []
        if int(login_type) == 1:
            if "suppliers" in res_variant_data["hits"]["hits"][0]["_source"]:
                for b_s in res_variant_data["hits"]["hits"][0]["_source"]["suppliers"]:
                    if b_s["id"] == str(store_id):
                        best_supplier_variant = b_s
                    else:
                        pass
            else:
                best_supplier_variant = {}
        else:
            try:
                if "suppliers" in res_variant_data["hits"]["hits"][0]["_source"]:
                    for b_s in res_variant_data["hits"]["hits"][0]["_source"]["suppliers"]:
                        if b_s["id"] == str(store_id):
                            best_supplier_variant = b_s
                        else:
                            pass
                else:
                    best_supplier_variant = {}
            except:
                best_supplier_variant = {}

        offers_details = []
        if central_product != None:
            if "allowOrderOutOfStock" in central_product:
                allow_out_of_stock = central_product["allowOrderOutOfStock"]
            else:
                allow_out_of_stock = False
        else:
            allow_out_of_stock = False

        if len(best_supplier_variant) > 0:
            if best_supplier_variant["id"] == "0":
                if "offer" in central_product:
                    for offer in central_product["offer"]:
                        if int(login_type) == 1 or int(login_type) != 2:
                            if int(offer["status"]) == 1:
                                offer_query = {"_id": ObjectId(offer["offerId"]), "status": 1}
                                offer_count = db.offers.find_one(offer_query)
                                if offer_count is not None:
                                    if offer_count["startDateTime"] <= int(time.time()):
                                        offers_details.append(offer)
                            else:
                                pass
                        else:
                            if int(offer["status"]) == 1:
                                offers_details.append(offer)
                            else:
                                pass

            else:
                child_offer_data = db.childProducts.find_one(
                    {"_id": ObjectId(best_supplier_variant["productId"])}, {"offer": 1}
                )

                if child_offer_data == None:
                    offers_details = []
                else:
                    if "offer" in child_offer_data:
                        for offer in child_offer_data["offer"]:
                            if "offerFor" in offer:
                                if int(login_type) == 1 or int(login_type) != 2:
                                    if offer["offerFor"] == 1 or offer["offerFor"] == 0:
                                        offer_terms = db.offers.find_one(
                                            {"_id": ObjectId(offer["offerId"])}
                                        )
                                        if offer_terms is not None:
                                            if offer_terms["startDateTime"] <= int(time.time()):
                                                if offer["status"] == 1:
                                                    offers_details.append(offer)
                                                else:
                                                    pass
                                    else:
                                        pass
                                else:
                                    if offer["offerFor"] == 0 or offer["offerFor"] == 2:
                                        offer_terms = db.offers.find_one(
                                            {"_id": ObjectId(offer["offerId"])}
                                        )
                                        if offer_terms is not None:
                                            if offer_terms["startDateTime"] <= int(time.time()):
                                                if offer["status"] == 1:
                                                    offers_details.append(offer)
                                                else:
                                                    pass
                                    else:
                                        pass
                            else:
                                pass
                    else:
                        pass

        if len(offers_details) > 0:
            best_offer = max(offers_details, key=lambda x: x["discountValue"])
            offer_details = db.offers.find(
                {
                    "_id": ObjectId(best_offer["offerId"]),
                    "status": 1,
                    "storeId": best_supplier_variant["id"],
                }
            ).count()
            if offer_details != 0:
                best_offer = best_offer
            else:
                best_offer = {}
        else:
            best_offer = {}

        if int(login_type) == 1:
            price = best_supplier_variant["retailerPrice"]
        else:
            if "distributorPrice" in best_supplier_variant:
                price = best_supplier_variant["distributorPrice"]
            else:
                price = 0

        if len(best_offer) > 0:

            discount_type = int(best_offer["discountType"]) if "discountType" in best_offer else 0
            discount_value = best_offer["discountValue"]
        else:
            discount_value = 0
            discount_type = 2

        if price == 0 or price == "":
            final_price = 0
            discount_price = 0
        else:
            if discount_type == 0:
                discount_price = float(discount_value)
            elif discount_type == 1:
                discount_price = (float(price) * float(discount_value)) / 100
            else:
                discount_price = 0

        # ======================for tax ================================================================
        try:
            tax_value = []
            tax_details = db.childProducts.find_one(
                {"_id": ObjectId(best_supplier_variant["productId"])}, {"tax": 1}
            )

            if tax_details != None:
                if type(tax_details["tax"]) == list:
                    for tax in tax_details["tax"]:
                        tax_value.append({"value": tax["taxValue"]})
                else:
                    if tax_details["tax"] != None:
                        if "taxValue" in tax_details["tax"]:
                            tax_value.append({"value": tax_details["tax"]["taxValue"]})
                        else:
                            tax_value.append({"value": tax_details["tax"]})
                    else:
                        tax_value = []
            else:
                tax_value = []
        except:
            tax_value = []
        tax_price = 0
        if central_product["storeCategoryId"] != DINE_STORE_CATEGORY_ID:
            if len(tax_value) == 0:
                tax_price = 0
            else:
                for amount in tax_value:
                    tax_price = tax_price + (int(amount["value"]))
        else:
            tax_price = 0
        final_price = price - discount_price
        final_price = final_price + ((final_price * tax_price) / 100)

        # =========================for max quantity=================================================
        if "maxQuantity" in central_product:
            if central_product["maxQuantity"] != "":
                max_quantity = int(central_product["maxQuantity"])
            else:
                max_quantity = 30
        else:
            max_quantity = 30
        # ==========================================================================================
        if "prescriptionRequired" in res_variant_data["hits"]["hits"][0]["_source"]:
            if res_variant_data["hits"]["hits"][0]["_source"]["prescriptionRequired"] == 0:
                prescription_required = False
            else:
                prescription_required = True
        else:
            prescription_required = False

        if "needsIdProof" in res_variant_data["hits"]["hits"][0]["_source"]:
            if res_variant_data["hits"]["hits"][0]["_source"]["needsIdProof"] == False:
                needsIdProof = False
            else:
                needsIdProof = True
        else:
            needsIdProof = False

        if "containsMeat" in central_product:
            contains_meat = central_product["containsMeat"]
        else:
            contains_meat = False

        product_data = {
            "productName": central_product["pPName"][language],
            "childProductId": best_supplier_variant["productId"],
            "parentProductId": product_id,
            "allowOrderOutOfStock": allow_out_of_stock,
            "images": res_variant_data["hits"]["hits"][0]["_source"]["image"],
            "prescriptionRequired": prescription_required,
            "needsIdProof": needsIdProof,
            "offers": best_offer,
            "maxQuantity": max_quantity,
            "containsMeat": contains_meat,
            "suppliers": best_supplier_variant,
            "finalPriceList": {
                "basePrice": round(price, 2),
                "discountPrice": round(discount_price, 2),
                "finalPrice": round(final_price, 2),
                "discountPercentage": round(discount_value, 2),
            },
        }
    # ================================================for the main product loop=================================================
    if res["hits"]["total"]["value"] > 1:
        color_details = []
        color_list = []
        link_to_unit = []
        link_to_unit_list = []
        last_color_json = []
        last_link_unit = []
        max_quantity = 20
        allow_out_of_stock = False
        for product in res["hits"]["hits"]:
            try:
                try:
                    if "suppliers" in product["_source"]:
                        for b_s in product["_source"]["suppliers"]:
                            if b_s["id"] == str(store_id):
                                # child_supplier_count = db.childProducts.find({"_id": ObjectId(b_s['productId']), "status": 1}).count()
                                # if child_supplier_count > 0:
                                best_supplier_child = b_s
                            else:
                                pass
                    else:
                        best_supplier_child = {}

                except:
                    best_supplier_child = {}
                if len(best_supplier_child) > 0:
                    if best_supplier_child["retailerQty"] > 0:
                        outOfStock = False
                        availableStock = int(best_supplier_child["retailerQty"])
                        child_product_id = best_supplier_child["productId"]
                    else:
                        outOfStock = True
                        availableStock = 0
                        child_product_id = best_supplier_child["productId"]

                    size_list_data = []
                    color_details_data = []
                    size_list = []

                    # loop for the getting the attributes value
                    size_list.append(
                        {
                            "childProductId": str(product["_source"]["unitId"]),
                            "size": product["_source"]["unitName"]["en"],
                        }
                    )
                    if best_supplier_child["productId"] == variant_product_id:
                        visible = True
                        is_primary = True
                        best_supplier_details = best_supplier_child
                    else:
                        visible = False
                        is_primary = False

                    unit_size = (
                        product["_source"]["unitName"][language]
                        if language in product["_source"]["unitName"]
                        else product["_source"]["unitName"]["en"]
                    )

                    if len(product["_source"]["image"]) > 0:
                        product_images = (
                            product["_source"]["image"][0]["small"]
                            if "image" in product["_source"]
                            else product["_source"]["image"][0]["small"]
                        )
                    else:
                        product_images = ""

                    if unit_size == None or unit_size == 0:
                        pass
                    else:
                        if "prescriptionRequired" in product["_source"]:
                            if product["_source"]["prescriptionRequired"] == 0:
                                prescription_required = False
                            else:
                                prescription_required = True
                        else:
                            prescription_required = False

                        if "needsIdProof" in product["_source"]:
                            if product["_source"]["needsIdProof"] == False:
                                needsIdProof = False
                            else:
                                needsIdProof = True
                        else:
                            needsIdProof = False

                        child_product_count = db.childProducts.find(
                            {"_id": ObjectId(best_supplier_child["productId"]), "status": 1}
                        ).count()
                        if child_product_count > 0:
                            color_details.append(
                                {
                                    "childProductId": str(best_supplier_child["productId"]),
                                    "unitId": product["_source"]["unitId"],
                                    "keyName": "Sizes",
                                    "isPrimary": is_primary,
                                    "prescriptionRequired": prescription_required,
                                    "needsIdProof": needsIdProof,
                                    "productName": product["_source"]["unitName"][language],
                                    "outOfStock": outOfStock,
                                    "availableStock": availableStock,
                                    "maxQuantity": max_quantity,
                                    "allowOrderOutOfStock": allow_out_of_stock,
                                    "colourId": str(best_supplier_child["productId"]),
                                    "name": unit_size.strip(),
                                    "image": product_images,
                                    "size": unit_size.strip(),
                                }
                            )
                            color_list.append("Sizes")

            except:
                pass

        if len(color_details) > 0:
            dataframe_details = pd.DataFrame(color_details)
            dataframe_details = dataframe_details.drop_duplicates("size", keep="last")
            dataframe_details = dataframe_details.dropna(subset=["size"], axis=0)
            color_data = dataframe_details.to_json(orient="records")
            color_data = json.loads(color_data)
        else:
            color_details = []
        for d in color_details:
            res_variant.setdefault(d["keyName"], []).append(
                {
                    "childProductId": d["childProductId"],
                    "size": d["size"],
                    "keyName": d["keyName"],
                    "name": d["name"],
                    "prescriptionRequired": d["prescriptionRequired"],
                    "needsIdProof": d["needsIdProof"] if "needsIdProof" in d else False,
                    "isPrimary": d["isPrimary"],
                    "image": d["image"],
                    "maxQuantity": d["maxQuantity"],
                    "allowOrderOutOfStock": d["allowOrderOutOfStock"],
                    "colourId": d["colourId"],
                    "unitId": d["unitId"],
                    "productName": d["productName"],
                    "outOfStock": d["outOfStock"],
                    "availableStock": d["availableStock"],
                }
            )

        # =========================end of the part==================================================================
        for color in list(set(color_list)):
            newlist = sorted(res_variant[color], key=lambda k: k["isPrimary"])
            dataframe_details = pd.DataFrame(newlist)
            dataframe_details = dataframe_details.drop_duplicates("size", keep="last")
            dataframe_details = dataframe_details.dropna(subset=["size"], axis=0)
            color_data = dataframe_details.to_json(orient="records")
            color_data = json.loads(color_data)

            if not any(d["isPrimary"] == True for d in color_data):
                is_primary = False
            else:
                is_primary = True

            if res_variant[color][0]["size"] != "":
                last_color_json.append(
                    {
                        "centralProductId": product_id,
                        "name": res_variant[color][0]["keyName"],
                        "keyName": res_variant[color][0]["keyName"],
                        "isPrimary": is_primary,
                        "childProductId": res_variant[color][0]["childProductId"],
                        "maxQuantity": res_variant[color][0]["maxQuantity"],
                        "allowOrderOutOfStock": res_variant[color][0]["allowOrderOutOfStock"],
                        "sizeData": color_data,
                        "image": res_variant[color][0]["image"],
                        "unitId": res_variant[color][0]["unitId"],
                    }
                )

        if len(best_supplier_details) > 0:
            if best_supplier_details["id"] == "0":
                best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                best_supplier_details["rating"] = 0
            else:
                store_response = db.stores.find_one(
                    {"_id": ObjectId(best_supplier_details["id"])}, {"storeName": 1, "avgRating": 1}
                )
                try:
                    if store_response != None:
                        best_supplier_details["supplierName"] = store_response["storeName"]["en"]
                        best_supplier_details["rating"] = (
                            store_response["avgRating"] if "avgRating" in store_response else 0
                        )
                    else:
                        best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                        best_supplier_details["rating"] = 0
                except:
                    best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
                    best_supplier_details["rating"] = 0
        else:
            best_supplier_details["supplierName"] = "3Embed Pvt Ltd"
            best_supplier_details["rating"] = 0

        if len(last_color_json) > 0:
            response_data = {
                "message": "Data Found",
                "data": last_color_json,
                "product": product_data,
                "suppliers": best_supplier_details,
            }
            out_res25.put(response_data)
            return response_data
        else:
            response_data = {
                "message": "Data Found",
                "data": [],
                "product": [],
                "suppliers": best_supplier_details,
            }
            out_res25.put(response_data)
            return response_data
    else:
        response_data = {"message": "Data Not Found", "data": [], "product": [], "suppliers": {}}
        out_res25.put(response_data)
        return response_data


"""
    get the add ons data from the products
"""


def add_ons_data(language, central_product_id, child_product_id, out_res26):
    addons_query = {
        "query": {
            "bool": {
                "must": [
                    {"match": {"parentProductId": str(central_product_id)}},
                    {"match": {"suppliers.productId": str(child_product_id)}},
                ]
            }
        },
        "size": 20,
        "from": 0,
    }
    res = es.search(
        index=index_central_product,
        body=addons_query,
        filter_path=[
            "hits.hits._id",
            "hits.hits._source.addOns",
            "hits.hits._source.unitName",
            "hits.hits._source.parentProductId",
        ],
    )
    last_response_data = []
    product_add_ons = []
    if len(res) > 0:
        for add_ons in res["hits"]["hits"]:
            parent_product = db.childProducts.find_one(
                {
                    "parentProductId": str(add_ons["_source"]["parentProductId"]),
                    "_id": ObjectId(child_product_id),
                },
                {"pName": 1, "units": 1},
            )
            if parent_product == None:
                parent_product = db.childProducts.find_one(
                    {
                        "parentProductId": str(add_ons["_source"]["parentProductId"]),
                        "units.suppliers.productId": str(child_product_id),
                    },
                    {"pName": 1, "units": 1},
                )
            if "addOns" in parent_product["units"][0]:
                for details in parent_product["units"][0]["addOns"]:
                    add_ons_list = []
                    try:
                        if int(details["status"]) == 1:
                            for details_data in details["addOns"]:
                                add_ons_list.append(
                                    {
                                        "id": details_data["id"],
                                        "name": details_data["name"][language]
                                        if language in details_data["name"]
                                        else details_data["name"]["en"],
                                        "price": details_data["price"],
                                    }
                                )
                            product_add_ons.append(
                                {
                                    "groupName": details["name"][language]
                                    if language in details["name"]
                                    else details["name"]["en"],
                                    "addOns": add_ons_list,
                                    "storeId": details["storeId"],
                                    "description": details["description"][language]
                                    if language in details["description"]
                                    else details["description"]["en"],
                                    "minimumLimit": details["minimumLimit"]
                                    if "minimumLimit" in details
                                    else 0,
                                    "maximumLimit": details["maximumLimit"]
                                    if "maximumLimit" in details
                                    else 0,
                                    "mandatory": details["mandatory"]
                                    if "mandatory" in details
                                    else 0,
                                    "multiple": details["multiple"] if "multiple" in details else 0,
                                    "unitAddOnId": details["unitAddOnId"],
                                }
                            )
                        else:
                            pass
                    except Exception as ex:
                        pass
                last_response_data.append(
                    {
                        # add_ons['_source']['unitName'][language] if language in add_ons['_source']['unitName'] else add_ons['_source']['unitName']['en'],
                        "productName": parent_product["pName"][language],
                        "addOns": product_add_ons,
                    }
                )
            else:
                pass
        response_data = {"message": "data found", "data": last_response_data}
        out_res26.put(response_data)
        return response_data
    else:
        response_data = {"message": "data not found", "data": []}
        out_res26.put(response_data)
        return response_data


"""
    API for the get the attribute 
"""


class FoodProductsInDispatcher(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Dispatcher"],
        operation_description="API for child variants and add ons for the products",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="loginType",
                default="1",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="login type of the user. value should be 1 for retailer and 2 for distributor",
            ),
            openapi.Parameter(
                name="parentProductId",
                required=True,
                default="5eb2a7c0ad5f8c53f3f2df28",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product",
            ),
            openapi.Parameter(
                name="childProductId",
                required=True,
                default="5eb2a7c0ad5f8c53f3f2df29",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product",
            ),
            openapi.Parameter(
                name="storeId",
                required=True,
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product",
            ),
        ],
        responses={
            200: "successfully. product variants found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required fields are not found. it might be product id not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            login_type = request.META["HTTP_LOGINTYPE"] if "HTTP_LOGINTYPE" in request.META else 1
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                parent_product_id = request.GET.get("parentProductId", "")
                child_product_id = request.GET.get("childProductId", "")
                store_id = request.GET.get("storeId", "0")
                if parent_product_id == "":
                    response_data = {
                        "message": "parent product Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif child_product_id == "":
                    response_data = {
                        "message": "child product Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    thread1 = threading.Thread(
                        target=variant_data,
                        args=(
                            language,
                            parent_product_id,
                            child_product_id,
                            login_type,
                            store_id,
                            res25,
                        ),
                    )
                    thread2 = threading.Thread(
                        target=add_ons_data,
                        args=(language, parent_product_id, child_product_id, res26),
                    )
                    thread1.start()
                    thread2.start()
                    variant_response = res25.get()
                    addons_response = res26.get()
                    last_json_response = []
                    if len(addons_response["data"]) == 0 and len(variant_response["data"]) == 0:
                        last_response = {
                            "data": {
                                "addOns": [],
                                "variantData": [],
                                "product": [],
                                "suppliers": [],
                            }
                        }
                        return JsonResponse(last_response, safe=False, status=404)
                    else:
                        last_response = {
                            "data": {
                                "addOns": addons_response["data"],
                                "variantData": variant_response["data"],
                                "productData": variant_response["product"],
                                "supplierData": variant_response["suppliers"],
                            }
                        }
                        return JsonResponse(last_response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


"""
    API for the get stores or category for the hyper local 
"""


class HyperLocalStores(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Dispatcher"],
        operation_description="API for child variants and add ons for the products",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="loginType",
                default="1",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="login type of the user. value should be 1 for retailer and 2 for distributor",
            ),
            openapi.Parameter(
                name="parentProductId",
                required=True,
                default="5eb2a7c0ad5f8c53f3f2df28",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product",
            ),
            openapi.Parameter(
                name="childProductId",
                required=True,
                default="5eb2a7c0ad5f8c53f3f2df29",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product",
            ),
            openapi.Parameter(
                name="storeId",
                required=True,
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product",
            ),
        ],
        responses={
            200: "successfully. product variants found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required fields are not found. it might be product id not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            login_type = request.META["HTTP_LOGINTYPE"] if "HTTP_LOGINTYPE" in request.META else 1
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                parent_product_id = request.GET.get("parentProductId", "")
                child_product_id = request.GET.get("childProductId", "")
                store_id = request.GET.get("storeId", "0")
                if parent_product_id == "":
                    response_data = {
                        "message": "parent product Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif child_product_id == "":
                    response_data = {
                        "message": "child product Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    thread1 = threading.Thread(
                        target=variant_data,
                        args=(
                            language,
                            parent_product_id,
                            child_product_id,
                            login_type,
                            store_id,
                            res25,
                        ),
                    )
                    thread2 = threading.Thread(
                        target=add_ons_data,
                        args=(language, parent_product_id, child_product_id, res26),
                    )
                    thread1.start()
                    thread2.start()
                    variant_response = res25.get()
                    addons_response = res26.get()
                    last_json_response = []
                    if len(addons_response["data"]) == 0 and len(variant_response["data"]) == 0:
                        last_response = {
                            "data": {
                                "addOns": [],
                                "variantData": [],
                                "product": [],
                                "suppliers": [],
                            }
                        }
                        return JsonResponse(last_response, safe=False, status=404)
                    else:
                        last_response = {
                            "data": {
                                "addOns": addons_response["data"],
                                "variantData": variant_response["data"],
                                "productData": variant_response["product"],
                                "supplierData": variant_response["suppliers"],
                            }
                        }
                        return JsonResponse(last_response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


"""
    API for the get stores or category for the hyper local 
    selType: 0 for radio button, 1 for checkbox , 2 for slider
    type 0 for array else 1Type a message
"""


class StoreSpecialies(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Food"],
        operation_description="API for get the all store attributes",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=DINE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category id for the getting the data for store",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b7ad8798dc19da1a4b0e",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="zone id of the user location",
            ),
            openapi.Parameter(
                name="page",
                default="1",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="page number from which page we need show data",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        start_time = time.time()
        try:
            currencySymbol = request.META["HTTP_CURRENCYSYMBOL"] if "HTTP_CURRENCYSYMBOL" in request.META else "₹"
            currency = request.META["HTTP_CURRENCYCODE"] if "HTTP_CURRENCYCODE" in request.META else "INR"
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            translator = t(to_lang=language)
            currency_details = db.currencies.find_one({"currencyCode": currency})
            if currency_details is not None:
                currencySymbol = currency_details["currencySymbol"]
                currency = currency_details["currencyCode"]
            else:
                currencySymbol = "₹"
                currency = "INR"
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                category_id = request.GET.get("storeCategoryId", "")
                page_number = int(request.GET.get("page", 1))
                skip = (page_number - 1) * 15
                limit = page_number * 15
                zone_id = request.GET.get("zoneId", "")
                if category_id == "":
                    response_data = {
                        "message": "category id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif zone_id == "":
                    response_data = {
                        "message": "zone Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    specialities_json = []
                    avg_cost = []
                    spe_detials = db.stores.aggregate([
                        {
                            "$match": {
                                "categoryId": category_id,
                                "status": 1,
                                "serviceZones.zoneId": zone_id,
                                "specialities": { "$exists": True, "$not": { "$size": 0 } }
                            }
                        },
                        { "$unwind": "$specialities" },
                        {
                            "$addFields": {
                                "specialities": {
                                    "$toObjectId": "$specialities"
                                }
                            }
                        },
                        {
                            "$lookup": {
                                "from": "specialities",
                                "let": {
                                    "specialitiesId": "$specialities"
                                },
                                "pipeline": [
                                    {
                                        "$match": {
                                            "$expr": {
                                                "$eq": ["$_id", "$$specialitiesId"]
                                            }
                                        }
                                    }
                                ],
                                "as": "specialitiesDetails"
                            }
                        },
                        {
                            "$project": { 
                                "_id": 0,
                                "specialitiesDetails._id": 1,
                                "specialitiesDetails.specialityName": 1
                            }
                        },
                        {
                            "$match": {
                                "specialitiesDetails": { "$ne": [] }
                            }
                        },
                        {
                            "$group": {
                                "_id": "$specialitiesDetails._id",
                                "results": { "$first": "$specialitiesDetails" }
                            }
                        },
                        {
                            "$unwind": "$results"
                        },
                        {
                            "$sort": { "results.specialityName": 1 }
                        },
                        {
                            "$group": {
                                "_id": None,
                                "results": { "$push": "$results" },
                                "total_count": { "$sum": 1 }
                            }
                        },
                        {
                            "$project": {
                                "_id": 0,
                                "results_count": { "$size": "$results" },
                                "results": 1,
                            }
                        }
                    ])
  
                    if spe_detials is not None:
                        for doc in spe_detials:
                            total_count = doc["results_count"]
                            results = doc["results"]
                            for spec in results[skip:limit]:
                                specialities_json.append(
                                    {
                                        "id": str(spec["_id"]),
                                        "name": spec["specialityName"][language] if language in spec["specialityName"]
                                                else spec["specialityName"]["en"]
                                    }
                                )
                    results_count = 0
                    try:
                        results_count = total_count
                    except:
                        results_count = 0

                    pipeline = [
                        {
                            "$match": {
                                "categoryId": category_id,
                                "status": 1,
                                "serviceZones.zoneId": zone_id
                            }
                        },
                        {
                            "$group": {
                                "_id": None,
                                "maxAvgCostForMealForTwo": { "$max": "$averageCostForMealForTwo" },
                                "minAvgCostForMealForTwo": { "$min": "$averageCostForMealForTwo" }
                            }
                        }
                    ]

                    result = db.stores.aggregate(pipeline)
                    max_price = 0
                    min_price = 0
                    # Extract max and min values from the result
                    for doc in result:
                        max_price = doc["maxAvgCostForMealForTwo"]
                        min_price = doc["minAvgCostForMealForTwo"]


                    if min_price == max_price:
                        min_price = 0
                    print("min_price",min_price,max_price)

                    p_data = [{"maxPrice": max_price, "minPrice": min_price}]
                    print('finding cusines data  time: ', time.time() - start_time)
                    if len(specialities_json) > 0:
                        dataframe = pd.DataFrame(specialities_json)
                        dataframe = dataframe.drop_duplicates(subset="name", keep="last")
                        specialities_list = dataframe.to_dict(orient="records")
                    else:
                        specialities_list = []
                    if category_id == DINE_STORE_CATEGORY_ID:
                        cuisines = {
                            "name": language_change("Cuisines",language),
                            "data": specialities_list,
                            "selType": 1,
                            "filterType": 4,
                            "type": 1,
                            "totalCount":results_count
                        }
                    else:
                        cuisines = {
                            "name": language_change("STORE TYPES",language),
                            "data": specialities_list,
                            "selType": 3,
                            "filterType": 4,
                            "type": 1,
                        }
                    order_type_data = []
                    order_type_data.append({"id": "1", "name": language_change("Self Pickup",language)})
                    order_type_data.append({"id": "2", "name": language_change("Delivery",language)})
                    # Restaurent category id
                    if category_id == DINE_STORE_CATEGORY_ID:
                        order_type_data.append({"id": "3", "name": language_change("Table Reservation",language)})
                    order_type = {
                        "name": language_change("Order Type",language),
                        "filterType": 5,
                        "data": order_type_data,
                        "selType": 1,
                        "type": 1,
                    }
                    sort_json = []
                    # if category_id != CANNABIS_STORE_CATEGORY_ID:
                    #     sort_json.append({"seqId": 1, "id": "", "name": language_change("Popularity",language)})
                    # sort_json.append({"seqId": 2, "id": "", "name":language_change("Ratings High to Low",language)})
                    if category_id != DINE_STORE_CATEGORY_ID:
                        sort_json.append({"seqId": 3, "id": "", "name": language_change("Distance: Closer to Far",language)})
                        sort_json.append({"seqId": 4, "id": "", "name": language_change("Distance: Far to Closer",language)})
                    else:
                        sort_json.append({"seqId": 1, "id": "", "name": language_change("Popularity",language)})
                        sort_json.append({"seqId": 7, "id": "", "name":language_change("Ratings High to Low",language)})
                        sort_json.append({"seqId": 3, "id": "", "name": language_change("Cost: Low to High",language)})
                        sort_json.append({"seqId": 4, "id": "", "name": language_change("Cost: High to Low",language)})
                       
                    # newlist = sorted(sort_json, key=lambda k: k['seqId'], reverse=True)
                    sort_data = {"type": 0, "selType": 0, "name": language_change("Sort",language), "data": sort_json,"filterType": 1}
                    rating_data = {
                        "selType": 2,
                        "type": 1,
                        "name": language_change("Ratings",language),
                        "filterType": 2,
                        "data": [{"max": 5, "min": 0}],
                    }
                    if category_id == DINE_STORE_CATEGORY_ID:
                        cost_for_two = {
                            "selType": 2,
                            "type": 1,
                            "name": language_change("Cost for two",language),
                            "filterType": 3,
                            "data": p_data,
                            "currencySymbol": currencySymbol,
                            "currency": currency,
                        }
                    last_json = []
                    last_json.append(sort_data)
                    if (
                            category_id == DINE_STORE_CATEGORY_ID
                            or category_id == CANNABIS_STORE_CATEGORY_ID
                    ):
                        if specialities_list:
                            last_json.append(cuisines)
                    # last_json.append(sort_data)
                    last_json.append(rating_data)
                    # if category_id == DINE_STORE_CATEGORY_ID:
                    #     last_json.append(cost_for_two)
                    # last_json.append(order_type)
                    ''' product metadata '''
                    try:
                        if APP_NAME == "GetFudo":
                            product_meta_data = list(db.productMetaData.find({}))
                            for data in product_meta_data:
                                if 'values' in data and len(data['values']) > 0:
                                    key_value = data['title']['en']
                                    main_value = []
                                    for value in data['values']:
                                        if int(value['status']) == 1:
                                            sub_value_list = []
                                            if 'subValues' in value and len(value['subValues']) > 0:
                                                for sub_value in value['subValues']:
                                                    if int(sub_value['status']) == 1:  
                                                        sub_value_list.append(sub_value)
                                        main_value.append({
                                            "valueId": value['valueId'],
                                            "iconImgUrl": value['iconImgUrl'],
                                            "value": value['value']['en'],
                                            'subValues': sub_value_list
                                            })
                                    
                                last_json.append({"type": 2, "selType": 0, "name": key_value, "data": main_value,"filterType": 4})
                    except Exception as e:
                        print(e)
                        last_json.append({})
                    last_response = {"data": last_json}
                    print('exicution time: ', time.time() - start_time)
                    return JsonResponse(last_response, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


"""
    API for the get the setting base on cityId and lat long
    :param
    cityId --> city id of the user
    latitude --> latitude of the user
    longitude --> longitude of the user
    storeCategoryId --> store category id which user selected
"""


class StoreCategorySetting(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Store Category Setting"],
        operation_description="API for get the store category setting from the city",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store category id for the getting the data for store",
            ),
            openapi.Parameter(
                name="cityId",
                default="5df7b7218798dc2c1114e6bf",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="city id for the getting the setting for the store category id",
            ),
            openapi.Parameter(
                name="latitude",
                default="12.9716",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="latitude of the user where website or application opened",
            ),
            openapi.Parameter(
                name="longitude",
                default="77.5946",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="longitude of the user where website or application opened",
            ),
        ],
        responses={
            200: "successfully data found",
            401: "Unauthorized. token expired",
            422: "mandatory field is missing",
            404: "data not found. it might be product not found",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                category_id = request.GET.get("storeCategoryId", "")
                city_id = request.GET.get("cityId", "")
                if category_id == "":
                    response_data = {
                        "message": "category id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif city_id == "":
                    response_data = {
                        "message": "city Id is blank",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    last_json = []
                    store_data = db.cities.find_one(
                        {"_id": ObjectId(city_id), "isDeleted": False}, {"storeCategory": 1}
                    )
                    if store_data != None:
                        if "storeCategory" in store_data:
                            for cat in store_data["storeCategory"]:
                                if cat["storeCategoryId"] == category_id:
                                    last_json.append(cat)
                                else:
                                    pass
                        else:
                            pass
                    else:
                        pass
                    if len(last_json) > 0:
                        last_response = {"data": last_json, "message": "data found"}
                        return JsonResponse(last_response, safe=False, status=200)
                    else:
                        last_response = {"data": last_json, "message": "data not found"}
                        return JsonResponse(last_response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


"""
    API for the get tax and category for the given product lists 
"""


class ProductTaxes(APIView):
    def get(self, request):
        try:
            cart_id = request.GET.get("cartId", "")
            if cart_id == "":
                response_data = {
                    "message": "cart id is blank",
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                cart_data = db.cart.find({"_id": ObjectId(cart_id)})
                product_details = []
                if cart_data.count() > 0:
                    for details in cart_data:
                        delivery_address_id = (
                            details["deliveryAddressId"] if "deliveryAddressId" in details else ""
                        )
                        if delivery_address_id != "":
                            delivery_address_details = db.savedAddress.find_one(
                                {"_id": ObjectId(delivery_address_id)},
                                {"latitude": 1, "longitude": 1},
                            )
                            if delivery_address_details is not None:
                                condition = {
                                    "status": 1,
                                    "storeId": 0,
                                    "polygons": {
                                        "$geoIntersects": {
                                            "$geometry": {
                                                "type": "Point",
                                                "coordinates": [
                                                    float(delivery_address_details["longitude"]),
                                                    float(delivery_address_details["latitude"]),
                                                ],
                                            }
                                        }
                                    },
                                }
                                zone_details = db.zones.find_one(
                                    condition,
                                    {
                                        "_id": 1,
                                        "title": 1,
                                        "DCStoreId": 1,
                                        "timeZone": 1,
                                        "timeOffset": 1,
                                    },
                                )
                                if zone_details is not None:
                                    zone_id = str(zone_details["_id"])
                                    dc_store_id = (
                                        zone_details["DCStoreId"]
                                        if "DCStoreId" in zone_details
                                        else ""
                                    )
                                    time_zone = (
                                        zone_details["timeZone"]
                                        if "timeZone" in zone_details
                                        else ""
                                    )
                                    time_off_set = (
                                        zone_details["timeOffset"]
                                        if "timeOffset" in zone_details
                                        else ""
                                    )
                                else:
                                    zone_id = ""
                                    dc_store_id = ""
                            else:
                                zone_id = ""
                                dc_store_id = ""
                        else:
                            zone_id = ""
                            dc_store_id = ""

                        customer_details = db.customer.find_one(
                            {"_id": ObjectId(details["user"]["userId"])}
                        )
                        if customer_details != None:
                            city_id = customer_details["cityId"] if "cityId" in customer_details else ""
                        else:
                            city_id = ""
                        for cart in details["products"]:
                            child_products = db.childProducts.find_one(
                                {"_id": ObjectId(cart["_id"])},
                                {
                                    "linkedProductCategory": 1,
                                    "linkedAttributeCategory": 1,
                                    "categoryList": 1,
                                    "units": 1,
                                    "parentProductId": 1,
                                    "pName": 1,
                                },
                            )
                            category_ids = []
                            if child_products != None:
                                if "linkedProductCategory" in child_products:
                                    for cat in child_products["linkedProductCategory"]:
                                        category_ids.append(cat["categoryId"])

                                if "linkedAttributeCategory" in child_products:
                                    try:
                                        category_ids.append(
                                            child_products["linkedAttributeCategory"]["categoryId"]
                                        )
                                    except:
                                        pass
                                if "categoryList" in child_products:
                                    for cat_list in child_products["categoryList"]:
                                        category_ids.append(
                                            cat_list["parentCategory"]["categoryId"]
                                        )
                                        if "childCategory" in cat_list["parentCategory"]:
                                            for child_cat in cat_list["parentCategory"][
                                                "childCategory"
                                            ]:
                                                category_ids.append(child_cat["categoryId"])

                            if details["storeCategoryId"] == MEAT_STORE_CATEGORY_ID:
                                store_category_id = "0"
                                store_id = dc_store_id
                            else:
                                store_category_id = details["storeCategoryId"]
                                store_id = str(cart["storeId"])
                            product_details.append(
                                {
                                    # if "pPName" in child_products else child_products['pName']['en'],
                                    "productName": child_products["pName"]["en"] if child_products else "",
                                    "productId": str(child_products["_id"]) if child_products else "",
                                    "brandName": cart["brandName"] if "brandName" in cart else "",
                                    "centralProductId": str(cart["centralProductId"]),
                                    "tax": cart["singleUnitPrice"]["taxAmount"],
                                    "storeCategoryId": store_category_id,
                                    "quantity": cart["quantity"],
                                    "storeId": store_id,
                                    "cityId": str(city_id),
                                    "unitPrice": cart["singleUnitPrice"]["unitPrice"],
                                    "finalUnitPrice": round(
                                        cart["singleUnitPrice"]["finalUnitPrice"], 2
                                    ),
                                    "deliveryFee": cart["singleUnitPrice"]["deliveryFee"]
                                    if "deliveryFee" in cart["singleUnitPrice"]
                                    else 0,
                                    "tax": cart["singleUnitPrice"]["tax"],
                                    "taxAmount": round(cart["singleUnitPrice"]["taxAmount"], 2),
                                    "category": list(set(category_ids)),
                                }
                            )
                        account_ing = {
                            "finalUnitPrice": round(details["accounting"]["finalUnitPrice"], 2),
                            "deliveryFee": details["accounting"]["deliveryFee"]
                            if "deliveryFee" in details["accounting"]
                            else 0,
                            "tax": details["accounting"]["tax"],
                            "taxAmount": details["accounting"]["taxAmount"],
                        }
                else:
                    pass
                if len(product_details) > 0:
                    last_response = {"data": product_details, "accountData": account_ing}
                    return JsonResponse(last_response, safe=False, status=200)
                else:
                    last_response = {"data": []}
                    return JsonResponse(last_response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


class UpdateProductDetails(APIView):
    @swagger_auto_schema(
        method="post",
        tags=["Product Update"],
        operation_description="API for update the product details like aisle, direction",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["parentProductId"],
            properties={
                "parentProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="parent product id of the product which product we need to update",
                    example="5ef48c5b9c168fdb66912ed0",
                ),
                "storeId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id of the product which product we need to update",
                    example="5ef48c5b9c168fdb66912ed0",
                ),
                "aisle": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="text of the aisle which need to update",
                    example="24 A",
                ),
                "aisleName": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="text of the aisle name which need to update",
                    example="24 B",
                ),
                "closestAisle": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="text of the closest aisle name which need to update",
                    example="24 C",
                ),
                "closestAisleNo": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="text of the closest aisle No which need to update",
                    example="24",
                ),
                "shelf": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="text of the shelf which need to update",
                    example="35",
                ),
                "section": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="text of the section which need to update",
                    example="Near",
                ),
            },
        ),
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            token = "update product"  # request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                request_data = request.data
                if "parentProductId" not in request_data:
                    response_data = {
                        "message": "parent product id is missing",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                elif "storeId" not in request_data:
                    response_data = {
                        "message": "store id is missing",
                    }
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    attr_json = {}
                    attr_json_order = {}
                    if "aisle" in request.data:
                        attr_json["aisle"] = request.data["aisle"]
                        attr_json_order["products.$.aisle"] = request.data["aisle"]

                    if "shelf" in request.data:
                        attr_json["shelf"] = request.data["shelf"]
                        attr_json_order["products.$.shelf"] = request.data["shelf"]

                    if "section" in request.data:
                        attr_json["directions"] = request.data["section"]
                        attr_json_order["products.$.directions"] = request.data["section"]

                    if "aisleName" in request.data:
                        attr_json["aisleName"] = request.data["aisleName"]
                        attr_json_order["products.$.aisleName"] = request.data["aisleName"]

                    if "closestAisle" in request.data:
                        attr_json["closestAisle"] = request.data["closestAisle"]
                        attr_json_order["products.$.closestAisle"] = request.data["closestAisle"]

                    if "closestAisleNo" in request.data:
                        attr_json["closestAisleNo"] = request.data["closestAisleNo"]
                        attr_json_order["products.$.closestAisleNo"] = request.data[
                            "closestAisleNo"
                        ]

                    if request_data["storeId"] == "0":
                        store_data = db.products.find(
                            {"_id": ObjectId(request_data["parentProductId"])}
                        ).count()
                        if store_data > 0:
                            db.products.update(
                                {"_id": ObjectId(request_data["parentProductId"])},
                                {"$set": attr_json},
                                upsert=True,
                            )
                            db.childProducts.update(
                                {
                                    "parentProductId": str(request_data["parentProductId"]),
                                    "storeId": request_data["storeId"],
                                },
                                {"$set": attr_json},
                                upsert=True,
                                multi=True,
                            )
                            db.storeOrder.update(
                                {"products.centralProductId": str(request_data["parentProductId"])},
                                {"$set": attr_json_order},
                                upsert=True,
                                multi=True,
                            )
                            parent_products = db.products.find_one(
                                {"_id": ObjectId(request_data["parentProductId"])},
                                {"aisle": 1, "shelf": 1, "directions": 1},
                            )
                            if parent_products != None:
                                res = es.update(
                                    index=index_central_product,
                                    doc_type="_doc",
                                    id=str(request_data["parentProductId"]),
                                    body={
                                        "doc": {
                                            "aisle": parent_products["aisle"],
                                            "shelf": parent_products["shelf"],
                                            "directions": parent_products["directions"],
                                            "closestAisleNo": parent_products["closestAisleNo"],
                                            "closestAisle": parent_products["closestAisle"],
                                            "aisleName": parent_products["aisleName"],
                                        }
                                    },
                                )
                            last_response = {"message": "data updated successfully"}
                            return JsonResponse(last_response, safe=False, status=200)
                        else:
                            last_response = {"message": "data not found"}
                            return JsonResponse(last_response, safe=False, status=404)
                    else:
                        store_data = db.childProducts.find(
                            {
                                "parentProductId": str(request_data["parentProductId"]),
                                "storeId": ObjectId(request_data["storeId"]),
                            }
                        ).count()
                        if store_data > 0:
                            db.childProducts.update(
                                {
                                    "parentProductId": str(request_data["parentProductId"]),
                                    "storeId": ObjectId(request_data["storeId"]),
                                },
                                {"$set": attr_json},
                                upsert=True,
                                multi=True,
                            )
                            db.storeOrder.update(
                                {"products.centralProductId": str(request_data["parentProductId"])},
                                {"$set": attr_json_order},
                                upsert=True,
                                multi=True,
                            )
                            parent_products = db.childProducts.find_one(
                                {
                                    "_id": ObjectId(request_data["parentProductId"]),
                                    "storeId": ObjectId(request_data["storeId"]),
                                },
                                {"aisle": 1, "shelf": 1, "directions": 1},
                            )
                            if parent_products != None:
                                try:
                                    res = es.update(
                                        index=index_products,
                                        doc_type="_doc",
                                        id=str(parent_products["_id"]),
                                        body={
                                            "doc": {
                                                "aisle": parent_products["aisle"],
                                                "shelf": parent_products["shelf"],
                                                "directions": parent_products["directions"],
                                                "closestAisleNo": parent_products["closestAisleNo"],
                                                "closestAisle": parent_products["closestAisle"],
                                                "aisleName": parent_products["aisleName"],
                                            }
                                        },
                                    )
                                except:
                                    pass
                            last_response = {"message": "data updated successfully"}
                            return JsonResponse(last_response, safe=False, status=200)
                        else:
                            last_response = {"message": "data not found"}
                            return JsonResponse(last_response, safe=False, status=404)

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


class StoreDeatails(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Food"],
        operation_description="API for get the details for the store(safety)",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language",
                default="en",
            ),
            openapi.Parameter(
                name="s_id",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="store id for the which store details we need to show",
                default="5e20914ac348027af2f9028e",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
            openapi.Parameter(
                name="timezone",
                default="Asia/Calcutta",
                required=False,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="offset of the timezone",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            store_id = request.GET.get("s_id", "")
            user_latitude = float(request.GET.get("lat", 0))
            user_longtitude = float(request.GET.get("long", 0))
            # timezone = int(request.GET.get("timezone", 330))
            timezone = request.GET.get("timezone", "")
            timezone = timezone.replace("%2F", "/")
            if token == "":
                response_data = {"message": "unauthorized", "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            elif store_id == "":
                response_data = {"message": "store id is blank", "data": []}
                return JsonResponse(response_data, safe=False, status=200)
            else:
                user_id = json.loads(token)["userId"]
                # user_id = "5d92f959fc2045620ce36c92"
                query = {
                    "query": {
                        "bool": {
                            "must": [
                                {"match": {"_id": str(store_id)}},
                                # {
                                #     "geo_distance": {
                                #         "distance": "50km",
                                #         "location": {
                                #             "lat": float(user_latitude),
                                #             "lon": float(user_longtitude)
                                #         }
                                #     }
                                # }
                            ]
                        }
                    },
                    "sort": [
                        {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {
                                    "lat": float(user_latitude),
                                    "lon": float(user_longtitude),
                                },
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                    ],
                }
                res = es.search(
                    index=index_store,
                    body=query,
                    filter_path=[
                        "hits.total",
                        "hits.hits.sort",
                        "hits.hits._id",
                        "hits.hits._source",
                    ],
                )

                store_data_json = []
                close_data_json = []
                specialities_data = []
                date_data = []
                if res["hits"]["total"]["value"] > 0:
                    for seller in res["hits"]["hits"]:
                        cusine_name = ""
                        avg_rating_value = 0
                        seller_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "sellerId": str(seller["_id"]),
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                            ]
                        )
                        for avg_rating in seller_rating:
                            avg_rating_value = avg_rating["avgRating"]

                        distance_km = round(seller["sort"][0], 2)
                        distance_miles = round(distance_km * conv_fac, 2)

                        if "averageCostForMealForTwo" in seller["_source"]:
                            cost_for_two = seller["_source"]["averageCostForMealForTwo"]
                        else:
                            cost_for_two = 0

                        offer_details = db.offers.find(
                            {"storeId": {"$in": [str(seller["_id"])]}, "status": 1}
                        )
                        offer_json = []
                        for offer in offer_details:
                            offer_json.append(
                                {
                                    "offerName": offer["name"][language],
                                    "offerId": str(offer["_id"]),
                                    "offerType": offer["offerType"],
                                    "discountValue": offer["discountValue"],
                                }
                            )

                        if len(offer_json) > 0:
                            best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                            if best_offer_store["offerType"] == 0:
                                percentage_text = (
                                        str(best_offer_store["discountValue"]) + "%" + " " + "off"
                                )
                            else:
                                percentage_text = (
                                        "₹" + str(best_offer_store["discountValue"]) + " off"
                                )
                            offer_name = best_offer_store["offerName"]
                        else:
                            offer_name = ""
                            percentage_text = ""

                        address = (
                            seller["_source"]["businessLocationAddress"]["address"]
                            if "address" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        addressArea = (
                            seller["_source"]["businessLocationAddress"]["addressArea"]
                            if "addressArea" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        locality = (
                            seller["_source"]["businessLocationAddress"]["locality"]
                            if "locality" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        post_code = (
                            seller["_source"]["businessLocationAddress"]["postCode"]
                            if "postCode" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        state = (
                            seller["_source"]["businessLocationAddress"]["state"]
                            if "state" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        country = (
                            seller["_source"]["businessLocationAddress"]["country"]
                            if "country" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        city = (
                            seller["_source"]["businessLocationAddress"]["city"]
                            if "city" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )

                        # ===================================for the cusines=============================================
                        if "specialities" in seller["_source"]:
                            if len(seller["_source"]["specialities"]):
                                for spec in seller["_source"]["specialities"]:
                                    spec_data = db.specialities.find_one(
                                        {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                    )
                                    if spec_data != None:
                                        specialities_data.append(
                                            {
                                                "id": str(spec),
                                                "image": spec_data["image"]
                                                if "image" in spec_data
                                                else "",
                                                "name": spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"],
                                            }
                                        )
                                        if cusine_name == "":
                                            cusine_name = (
                                                spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                        else:
                                            cusine_name = (
                                                cusine_name
                                                + ", "
                                                + spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                    else:
                                        pass
                            else:
                                pass
                        else:
                            pass

                        if "favouriteUsers" in seller["_source"]:
                            if user_id in seller["_source"]["favouriteUsers"]:
                                favourite_store = True
                            else:
                                favourite_store = False
                        else:
                            favourite_store = False

                        # =======================================safetyStandards description================================
                        if "safetyStandardsDynamicContent" in seller["_source"]:
                            if seller["_source"]["safetyStandardsDynamicContent"] == "":
                                safety_standards_dynamic_content = seller["_source"][
                                    "safetyStandardsDynamicContent"
                                ]
                            else:
                                safety_standards_dynamic_content = ""
                        else:
                            safety_standards_dynamic_content = ""

                        try:
                            store_is_open = seller["_source"]["storeIsOpen"]
                        except:
                            store_is_open = False

                        try:
                            next_open_time = seller["_source"]["nextOpenTime"]
                        except:
                            next_open_time = ""
                        try:
                            next_close_time = seller["_source"]["nextCloseTime"]
                        except:
                            next_close_time = ""

                        if next_close_time == "" and next_open_time == "":
                            is_temp_close = True
                        elif next_open_time != "" and store_is_open == False:
                            is_temp_close = False
                        else:
                            is_temp_close = False

                        try:
                            if "timeZoneWorkingHour" in seller["_source"]:
                                timeZoneWorkingHour = seller["_source"]['timeZoneWorkingHour']
                            else:
                                timeZoneWorkingHour = ''
                        except:
                            timeZoneWorkingHour = ''

                        if "shopifyStoreDetails" in seller["_source"]:
                            if "enable" in seller["_source"]["shopifyStoreDetails"]:
                                shopify_enable = seller["_source"]["shopifyStoreDetails"]["enable"]
                            else:
                                shopify_enable = False
                        else:
                            shopify_enable = False
                        if seller["_source"]["nextOpenTime"] == "":
                            store_open_time = 0
                        else:
                            store_open_time = seller["_source"]["nextCloseTime"]
                        if seller["_source"]["nextCloseTime"] == "":
                            store_close_time = 0
                        else:
                            store_close_time = seller["_source"]["nextCloseTime"]
                        '''check worrking hour'''
                        working_hour_check = db.workingHour.find_one(
                                {"storeId": str(store_id), "status": 1},
                                {"startTime": 1, "endTime": 1, "startDateTimestamp": 1, "endDateTimestamp": 1,
                                 "nextDay": 1},
                            )
                        check_time = int(time.time())
                        print('time--',check_time)
                        check_current_timestamp = int(time_zone_converter(
                            timeZoneWorkingHour, datetime.datetime.now().timestamp(), 'UTC'
                        ))
                        print('current_timestamp--',check_current_timestamp)
                        store_is_open_check = False
                        try:
                            print(working_hour_check['startDateTimestamp'])
                            print(working_hour_check['endDateTimestamp'])
                            if check_current_timestamp > int(working_hour_check['startDateTimestamp']):
                                store_is_open_check = True
                        except Exception as e:
                            print(e)
                        ''' find holiday '''

                        try:
                            current_utc_time = datetime.datetime.now(tzone.utc)
                            current_iso_date = current_utc_time.isoformat()
                            print(current_iso_date)
                            holiday = db.holiday.find({'storeId': str(seller["_id"])})
                            if holiday is not None:
                                for h_data in holiday:
                                    start_iso = h_data['startDateISO']
                                    close_iso = h_data['endDateISO']
                                    current_iso_d = current_iso_date.strip()
                                    print("current_iso_d",current_iso_d)
                                    print("start_iso",start_iso)
                                    print("close_iso",close_iso)
                                    #current_iso = datetime.datetime.strptime(current_iso_d, '%Y-%m-%dT%H:%M:%S.%f%z')
                                    #time_zone = pytz.UTC
                                    #start_iso = datetime.datetime.strptime(start_iso, '%Y-%m-%d %H:%M:%S').replace(tzinfo=time_zone)
                                    #close_iso = datetime.datetime.strptime(close_iso, '%Y-%m-%d %H:%M:%S').replace(tzinfo=time_zone)
                                    if str(current_iso_d) > str(start_iso) and str(current_iso_d) < str(close_iso):
                                        print('holiday')
                                        store_is_open_check = False
                        except Exception as ex:
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
                            if store_open_time > 0 or store_open_time != "":
                                store_is_open_check = False
                        store_product_count = db.childProducts.find({'storeId': ObjectId(str(seller["_id"])), "status":1 , "units.isPrimary": True}).count()
                        try:
                            store_user_count = seller["_source"]['favouriteUsers']
                            fav_store_user_count = len(store_user_count)
                        except Exception as e:
                            print(e)
                            fav_store_user_count = 0

                        print(store_is_open_check)
                        store_data_json = {
                            "_id": str(seller["_id"]),
                            "safetyStandardsDynamicContent": safety_standards_dynamic_content,
                            "avgRating": round(avg_rating_value, 2),
                            "averageCostForMealForTwo": cost_for_two,
                            "currencyCode": seller["_source"]["currencyCode"],
                            'priceForBookingTable': seller['_source']['priceForBookingTable'] if 'priceForBookingTable' in seller['_source'] else 0,
                            'tableReservations': seller['_source']['tableReservations'] if 'tableReservations' in seller['_source'] else False,
                            "isTempClose": is_temp_close,
                            "shopifyEnable": shopify_enable,
                            "url": "https://apisuperapp-staging.eazy-online.com/python/store/details?s_id=" + str(store_id),
                            "businessLocationAddress": seller["_source"]["businessLocationAddress"],
                            "billingAddress": seller["_source"]["billingAddress"]
                            if "billingAddress" in seller["_source"]
                            else {},
                            "minimumOrder": seller["_source"]["minimumOrder"],
                            "headOffice": seller["_source"]["headOffice"]
                            if "headOffice" in seller["_source"]
                            else {},
                            "logoImages": seller["_source"]["logoImages"],
                            "nextCloseTime": store_close_time,
                            "companyType": seller["_source"]["companyType"] if 'companyType' in seller["_source"] else 0,
                            "distanceKm": round(distance_km, 2),
                            "isFavourite": favourite_store,
                            "freeDeliveryAbove": seller["_source"]["freeDeliveryAbove"]
                            if "freeDeliveryAbove" in seller["_source"]
                            else 0,
                            "currencySymbol": seller["_source"]["currencySymbol"]
                            if "currencySymbol" in seller["_source"]
                            else "₹",
                            "currency": seller["_source"]["currencyCode"]
                            if "currencyCode" in seller["_source"]
                            else "INR",
                            "offerName": offer_name,
                            "cuisines": cusine_name,
                            "address": address,
                            "locality": locality,
                            "postCode": post_code,
                            "addressArea": addressArea,
                            "state": state,
                            "country": country,
                            "city": city,
                            "distanceMiles": distance_miles,
                            "bannerImages": seller["_source"]["bannerImages"],
                            "minimumOrderValue": str(seller["_source"]["minimumOrder"])
                            if seller["_source"]["minimumOrder"] != 0
                            else "No " "Minimum",
                            "isExpressDelivery": int(seller["_source"]["isExpressDelivery"])
                            if "isExpressDelivery" in seller["_source"]
                            else 0,
                            "storeName": seller["_source"]["storeName"][language],
                            "averageDeliveryTime": str(
                                seller["_source"]["averageDeliveryTimeInMins"]
                            )
                                                   + " "
                                                   + "Mins"
                            if "averageDeliveryTimeInMins" in seller["_source"]
                            else "",
                            "address": seller["_source"]["headOffice"]["headOfficeAddress"]
                            if "headOfficeAddress" in seller["_source"]["headOffice"]
                            else "",
                            "sellerTypeId": seller["_source"]["sellerTypeId"],
                            "sellerType": seller["_source"]["sellerType"],
                            "storeFrontTypeId": seller["_source"]["storeFrontTypeId"],
                            "storeFrontType": seller["_source"]["storeFrontType"],
                            "driverTypeId": seller["_source"]["driverTypeId"]
                            if "driverTypeId" in seller["_source"]
                            else 0,
                            "driverType": seller["_source"]["driverType"]
                            if "driverType" in seller["_source"]
                            else 0,
                            "inCall": seller["_source"]['inCall'] if 'inCall' in seller["_source"] else {},
                            "outCall": seller["_source"]['outCall'] if 'outCall' in seller["_source"] else {},
                            "telecall": seller["_source"]['telecall'] if 'telecall' in seller["_source"] else {},
                            "nextCloseTime": store_close_time,
                            "nextOpenTime": store_open_time,
                            "storeIsOpen": store_is_open_check,
                            "status": seller["_source"]["status"],
                            "percentageText": percentage_text,
                            "deliveryPartners": seller["_source"]['deliveryPartners'] if 'deliveryPartners' in seller["_source"] else {},
                            "hygieneRating": seller["_source"]['hygieneRating'] if 'hygieneRating' in seller["_source"] else 0,
                            "businessType": seller["_source"]['businessType'] if 'businessType' in seller["_source"] else [],
                            "hygieneRatingInspectionDate": seller["_source"]['hygieneRatingInspectionDate'] if 'hygieneRatingInspectionDate' in seller["_source"] else "",
                            "restaurantTags": seller["_source"]['restaurantTags'] if 'restaurantTags' in seller["_source"] else "",
                            "servicesSupported": seller["_source"]['servicesSupported'] if 'servicesSupported' in seller["_source"] else [],
                            "bookATable": seller["_source"]['bookATable'] if 'bookATable' in seller["_source"] else "",
                            "productCount": store_product_count,
                            "userLikeCount": fav_store_user_count,
                            "openTable": seller["_source"]['openTable'] if 'openTable' in seller["_source"] else ""

                        }
                        # ==================================store about data================================
                        store_about = (
                            seller["_source"]["about"] if "about" in seller["_source"] else ""
                        )
                        try:
                            gallery_images = (
                                seller["_source"]["galleryImages"]
                                if "galleryImages" in seller["_source"]
                                else []
                            )
                        except:
                            gallery_images = (
                                seller["_source"]["galleryImages"]
                                if "galleryImages" in seller["_source"]
                                else []
                            )
                        terms_condition = (
                            seller["_source"]["termsAndCondition"]
                            if "termsAndCondition" in seller["_source"]
                            else []
                        )
                        total_review = db.sellerReviewRatings.find(
                            {"sellerId": str(store_id), "sellerReview": {"$ne": ""}, "status": 1}
                        ).count()
                        total_star_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                        "sellerId": store_id,
                                        "attributeId": {"$ne": ""},
                                    }
                                },
                                {
                                    "$group": {
                                        "_id": {
                                            "orderId": "$orderId",
                                        },
                                        "avgRating": {"$sum": 1},
                                        "rating": {"$avg": "$rating"}
                                    }
                                },
                            ]
                        )
                        total_rating = 0
                        five_rating = []
                        four_rating = []
                        three_rating = []
                        two_rating = []
                        one_rating = []
                        for avg_star in total_star_rating:
                            total_rating = int(avg_star["avgRating"])
                        total_star_rating_data = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                        "sellerId": store_id,
                                        "attributeId": {"$ne": ""},
                                    }
                                }])
                        for avg_star in total_star_rating_data:
                            if avg_star['rating'] == 5:
                                five_rating.append(avg_star['rating'])
                            elif avg_star['rating'] >= 4 and avg_star['rating'] < 5:
                                four_rating.append(avg_star['rating'])
                            elif avg_star['rating'] >= 3 and avg_star['rating'] < 4:
                                three_rating.append(avg_star['rating'])
                            elif avg_star['rating'] >= 2 and avg_star['rating'] < 3:
                                two_rating.append(avg_star['rating'])
                            elif avg_star['rating'] >= 1 and avg_star['rating'] < 2:
                                one_rating.append(avg_star['rating'])
                            else:
                                pass

                        review_details = (
                            db.sellerReviewRatings.find(
                                {
                                    "sellerId": str(store_id),
                                    "sellerReview": {"$ne": ""},
                                    "status": 1,
                                }
                            )
                                .skip(0)
                                .limit(5)
                                .sort([("createdTimestamp", -1)])
                        )
                        review_data = []
                        if review_details.count() > 0:
                            for seller in review_details:
                                try:
                                    dt_object = datetime.datetime.fromtimestamp(
                                        seller["createdTimestamp"]
                                    )
                                except:
                                    dt_object = seller["createdTimestamp"]

                                from_zone = tz.gettz("UTC")
                                to_zone = tz.gettz(timezone)
                                date_time1 = (dt_object).strftime("%d %b %Y %H:%M:%S %p")
                                date_time1 = datetime.datetime.strptime(
                                    date_time1, "%d %b %Y %H:%M:%S %p"
                                )
                                utc = date_time1.replace(tzinfo=from_zone)
                                central = utc.astimezone(to_zone)

                                day_s = datetime.datetime.now() - dt_object
                                if day_s.days == 0:
                                    if int(day_s.seconds) > 59:
                                        sec = datetime.timedelta(seconds=day_s.seconds)
                                        if int(sec.seconds / 60) > 59:
                                            time_create = (
                                                    str(int(sec.seconds / 3600)) + " hours ago"
                                            )
                                        else:
                                            time_create = (
                                                    str(int(sec.seconds / 60)) + " minutes ago"
                                            )
                                    else:
                                        time_create = str(day_s.seconds) + " seconds ago"

                                else:
                                    time_create = str(day_s.days) + " days ago"

                                avg_order_rating = 0
                                seller_order_rating = db.sellerReviewRatings.aggregate(
                                    [
                                        {
                                            "$match": {
                                                "orderId": str(seller["orderId"]),
                                                "status": 1,
                                                "rating": {"$ne": 0},
                                            }
                                        },
                                        {
                                            "$group": {
                                                "_id": "$sellerId",
                                                "avgRating": {"$avg": "$rating"},
                                            }
                                        },
                                    ]
                                )
                                for avg_or_rating in seller_order_rating:
                                    avg_order_rating = avg_or_rating["avgRating"]
                                if seller["userId"] !="":
                                    customer_details = db.customer.find_one(
                                        {"_id": ObjectId(seller["userId"])},
                                        {"firstName": 1, "lastName": 1, "profilePic": 1},
                                    )
                                    if customer_details != None:
                                        try:
                                            customer_name = (
                                                    customer_details["firstName"]
                                                    + " "
                                                    + customer_details["lastName"]
                                            )
                                            profile_pic = customer_details["profilePic"]
                                        except:
                                            customer_name = "N/A"
                                            profile_pic = ""
                                    else:
                                        customer_name = "N/A"
                                        profile_pic = ""
                                else:
                                    
                                    customer_name = seller["userName"]
                                    profile_pic = ""
                                if "plateformName" in seller:
                                    plateformName = seller["plateformName"]
                                else:
                                    plateformName = ""
                                review_data.append(
                                    {
                                        "dateTime": (central).strftime("%d %b %Y"),
                                        "reviewId": str(seller["_id"]),
                                        "userName": seller["userName"],
                                        "profilePic": profile_pic,
                                        "sellerSince": time_create,
                                        "sellerReview": seller["sellerReview"],
                                        "attributeId": str(seller["attributeId"]),
                                        "rating": float(seller["rating"]),
                                        "plateformName" : plateformName
                                    }
                                )
                        else:
                            avg_rating_value = 0
                            total_rating = 0
                            total_review = 0

                        # ===============================store timing======================================
                        current_timestamp = time_zone_converter(
                            timeZoneWorkingHour, datetime.datetime.now().timestamp(), 'UTC'
                        )
                        current_date = datetime.datetime.fromtimestamp(current_timestamp)
                        for i in range(7):
                            time_data = ""
                            holiday_time_data = ""
                            day = current_date + datetime.timedelta(days=i)
                            current_mid_date = day.replace(hour=0, minute=0, second=0)
                            current_night_date = day.replace(hour=23, minute=59, second=59)
                            current_mid_date_timestmap = time_zone_converter(
                                timezone, int(current_mid_date.timestamp()), timeZoneWorkingHour
                            )
                            current_night_date_timestmap = time_zone_converter(
                                timezone, int(current_night_date.timestamp()), timeZoneWorkingHour
                            )
                            current_day = day.strftime("%a")
                            working_hour = db.workingHour.find(
                                {"storeId": str(store_id), "status": 1, "day": current_day},
                                {"startTime": 1, "endTime": 1, "startDateTimestamp": 1, "endDateTimestamp": 1,
                                 "nextDay": 1},
                            ).sort([("startDateTimestamp", 1)])

                            if working_hour.count() > 0:
                                for working in working_hour:
                                    current_day_new = day.strftime("%Y-%m-%d")
                                    startDateTimestamp = datetime.datetime.strptime(
                                        current_day_new + " " + working["startTime"], "%Y-%m-%d %H:%M:%S").timestamp()
                                    endDateTimestamp = datetime.datetime.strptime(
                                        current_day_new + " " + working["endTime"], "%Y-%m-%d %H:%M:%S").timestamp()
                                    # startDateTimestamp
                                    current_timestamp = time_zone_converter(
                                        timezone, startDateTimestamp, timeZoneWorkingHour
                                    )
                                    end_timestamp = time_zone_converter(
                                        timezone, endDateTimestamp, timeZoneWorkingHour
                                    )
                                    start_day_timestamp = datetime.datetime.fromtimestamp(
                                        current_timestamp
                                    )
                                    end_day_timestamp = datetime.datetime.fromtimestamp(
                                        end_timestamp
                                    )
                                    holiday_details = db.holiday.find_one(
                                        {
                                            "storeId": str(store_id),
                                            "status": 1,
                                            "startDateTimestamp": {
                                                "$gte": current_mid_date_timestmap
                                            },
                                            "endDateTimestamp": {
                                                "$lte": current_night_date_timestmap
                                            },
                                        }
                                    )
                                    time_data = ""
                                    if holiday_details is None:
                                        start_time_store = start_day_timestamp.strftime("%I:%M %p")
                                        end_time_store = end_day_timestamp.strftime("%I:%M %p")
                                        if int(working["nextDay"]) == 0:
                                            next_text = ""
                                        else:
                                            next_text = "(Next Day)"

                                        if time_data == "":
                                            time_data = (
                                                    start_time_store
                                                    + "-"
                                                    + end_time_store
                                                    + " "
                                                    + next_text
                                            )
                                        else:
                                            time_data = (
                                                    time_data
                                                    + ", "
                                                    + start_time_store
                                                    + "-"
                                                    + end_time_store
                                                    + " "
                                                    + next_text
                                            )
                                    else:
                                        current_holiday_day_new = day.strftime("%Y-%m-%d")
                                        start_holiday_DateTimestamp = datetime.datetime.strptime(
                                            current_holiday_day_new + " " + holiday_details["startTime"],
                                            "%Y-%m-%d %H:%M:%S").timestamp()
                                        end_holiday_DateTimestamp = datetime.datetime.strptime(
                                            current_holiday_day_new + " " + holiday_details["endTime"],
                                            "%Y-%m-%d %H:%M:%S").timestamp()
                                        # startDateTimestamp
                                        current_holiday_timestamp = time_zone_converter(
                                            timezone, start_holiday_DateTimestamp, timeZoneWorkingHour
                                        )
                                        end_holiday_timestamp = time_zone_converter(
                                            timezone, end_holiday_DateTimestamp, timeZoneWorkingHour
                                        )
                                        start_holiday_day_timestamp = datetime.datetime.fromtimestamp(
                                            current_holiday_timestamp
                                        )
                                        end_holiday_day_timestamp = datetime.datetime.fromtimestamp(
                                            end_holiday_timestamp
                                        )

                                        start_holiday_time_store = start_holiday_day_timestamp.strftime("%I:%M %p")
                                        end_holiday_time_store = end_holiday_day_timestamp.strftime("%I:%M %p")

                                        start_time_store = start_day_timestamp.strftime("%I:%M %p")
                                        end_time_store = end_day_timestamp.strftime("%I:%M %p")
                                        time_data = "Holiday" + " ( " + start_holiday_time_store + "-" + end_holiday_time_store + " ) "

                                        if int(working["nextDay"]) == 0:
                                            next_text = ""
                                        else:
                                            next_text = "(Next Day)"

                                        if time_data == "":
                                            time_data = (
                                                    start_time_store
                                                    + "-"
                                                    + end_time_store
                                                    + " "
                                                    + next_text
                                            )
                                        else:
                                            time_data = (
                                                    time_data
                                                    + ", "
                                                    + start_time_store
                                                    + "-"
                                                    + end_time_store
                                                    + " "
                                                    + next_text
                                            )
                                date_data.append({"day": day.strftime("%A"), "time": time_data, "startDate": int(current_timestamp), "endDate": int(end_timestamp)})
                            else:
                                date_data.append({"day": day.strftime("%A"), "time": time_data, "startDate": int(current_mid_date_timestmap), "endDate": int(current_night_date_timestmap)})

                        review_json = {
                            "FiveStarRating": len(five_rating),
                            "FourStartRating": len(four_rating),
                            "ThreeStarRating": len(three_rating),
                            "TwoStarRating": len(two_rating),
                            "OneStarRating": len(one_rating),
                            "reviewData": review_data,
                            "avgRating": round(avg_rating_value, 2),
                            "totalRatings": total_rating,
                            "totalReviews": total_review,
                        }
                        result_delivery_type = []
                        grouped_by_delivery_type = {}
                        try:
                            store_offer_data = db.stores.find_one({"_id": ObjectId(str(store_id))}, {'platformWiseOffers': 1})
                            if store_offer_data:
                                platform_offers = store_offer_data.get("platformWiseOffers", [])
                                try:
                                    for offer in platform_offers:
                                        delivery_type = offer["deliveryType"]
                                        if delivery_type not in grouped_by_delivery_type:
                                            grouped_by_delivery_type[delivery_type] = []
                                        grouped_by_delivery_type[delivery_type].append(offer)

                                    for delivery_type, offers in grouped_by_delivery_type.items():
                                        result_delivery_type.append({delivery_type: offers}) 
                                except:
                                    result_delivery_type = []
                                    traceback.print_exc()
                                    pass
                            else:
                                platform_offers = []
                                result_delivery_type = []
                        except Exception as e:
                            print(f"An error occurred: {e}")
                            platform_offers = []
                            result_delivery_type = []
                        response = {
                            "data": {
                                "storeData": store_data_json,
                                "review": review_json,
                                "gallery": gallery_images,
                                "about": store_about,
                                "termsandcondition": terms_condition,
                                "timing": date_data,
                                "platformWiseOffers": platform_offers,
                                "deliveryType":result_delivery_type,
                                "url": "https://apisuperapp-staging.eazy-online.com/python/store/details?s_id=" + str(store_id)
                            },
                            "message": "data found",
                        }
                        return JsonResponse(response, safe=False, status=200)
                else:
                    response = {"data": {}, "message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


class FoodSuggestion(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Food"],
        operation_description="API for get the suggestion for the food products and resturants",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language",
                default="en",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="storeCategoryId",
            ),
            openapi.Parameter(
                name="zoneId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="zone id for the which store details we need to show",
                default="5df8b6ea8798dc19d926bd28",
            ),
            openapi.Parameter(
                name="search",
                required=True,
                default="bur",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="search text which we need to search",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            store_category_id = (
                str(request.META["HTTP_STORECATEGORYID"])
                if "HTTP_STORECATEGORYID" in request.META
                else DINE_STORE_CATEGORY_ID
            )
            if store_category_id == "":
                response_data = {"message": "store category id is missing", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            else:
                language = request.META["HTTP_LANGUAGE"]
                should_query = []
                filter_query = []
                zone_id = request.GET.get("zoneId", "")
                search_text = request.GET.get("search", "")
                search_text = search_text.replace("%20", " ")
                user_latitude = request.GET.get("lat", "13.05176")
                user_longtitude = request.GET.get("long", "77.580448")
                if token == "":
                    response_data = {"message": "unauthorized", "data": []}
                    return JsonResponse(response_data, safe=False, status=401)
                elif zone_id == "":
                    response_data = {"message": "zone id is blank", "data": []}
                    return JsonResponse(response_data, safe=False, status=422)
                elif search_text == "":
                    response_data = {"message": "search text is blank", "data": []}
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    store_id = request.GET.get("s_id", "")
                    try:
                        session_id = json.loads(token)["sessionId"]
                    except:
                        session_id = ""
                    try:
                        user_id = json.loads(token)['userId']
                    except:
                        user_id = "5ee31cdf0fa15b0c05a8cdde"
                    thread_logs = threading.Thread(
                        target=category_search_logs,
                        args=(
                            "",
                            "",
                            "",
                            "4",
                            user_id,
                            1,
                            "",
                            user_latitude,
                            user_longtitude,
                            "",
                            "",
                            search_text,
                            store_category_id,
                            "",
                            session_id,
                            store_id,
                            False,
                            "",
                            "",
                        ),
                    )
                    thread_logs.start()
                    store_data_details = []
                    store_data = db.stores.find(
                        {
                            "categoryId": store_category_id,
                            "serviceZones.zoneId": zone_id,
                            "status": 1,
                        }
                    )
                    if store_data.count() > 0:
                        for store in store_data:
                            store_data_details.append(str(store["_id"]))
                    # ===========================product name========================================
                    should_query.append(
                        {
                            "match_phrase_prefix": {
                                "pName.en": {
                                    "analyzer": "standard",
                                    "query": search_text.replace("%20", " "),
                                    "boost": 6,
                                }
                            }
                        }
                    )
                    should_query.append(
                        {
                            "match": {
                                "pName.en": {"query": search_text.replace("%20", " "), "boost": 6}
                            }
                        }
                    )
                    # ===========================unit name========================================
                    should_query.append(
                        {
                            "match_phrase_prefix": {
                                "units.unitName.en": {
                                    "analyzer": "standard",
                                    "query": search_text.replace("%20", " "),
                                    "boost": 5,
                                }
                            }
                        }
                    )
                    should_query.append(
                        {
                            "match": {
                                "units.unitName.en": {
                                    "query": search_text.replace("%20", " "),
                                    "boost": 5,
                                }
                            }
                        }
                    )
                    # ===========================================detail description============================
                    should_query.append(
                        {
                            "match": {
                                "detailDescription."
                                + language: {"query": search_text.replace("%20", " "), "boost": 4}
                            }
                        }
                    )
                    should_query.append(
                        {
                            "match_phrase_prefix": {
                                "detailDescription."
                                + language: {"query": search_text.replace("%20", " "), "boost": 4}
                            }
                        }
                    )
                    filter_query.append({"terms": {"storeId": store_data_details}})
                    filter_query.append({"match": {"status": 1}})
                    filter_query.append({"match": {"storeCategoryId": store_category_id}})
                    # ml search added for suggestion
                    catgeory_query = {
                        "query": {
                            "bool": {
                                "must": filter_query,
                                "should": should_query,
                                "minimum_should_match": 1,
                                "boost": 1.0,
                            }
                        },
                        "size": 10,
                        "from": 0,
                    }
                    res_first_category = es.search(index=index_products, body=catgeory_query)
                    second_category_name = ""
                    try:
                        second_category_name = res_first_category['hits']['hits'][0]['_source']['secondCategoryName']
                    except:
                        second_category_name = ""

                    if second_category_name != "":
                        should_query.append(
                            {
                                "more_like_this": {
                                    "fields": [
                                        "pName.en",
                                        "secondCategoryName"
                                    ],
                                    "like": [
                                        search_text.replace("%20", " "),
                                        second_category_name
                                    ],
                                    "boost": 1,
                                    "min_term_freq": 1,
                                    "max_query_terms": 2
                                }
                            }
                        )
                    query = {
                        "query": {
                            "bool": {
                                "must": filter_query,
                                "should": should_query,
                                "minimum_should_match": 1,
                                "boost": 1.0,
                            }
                        },
                        "size": 10,
                        "from": 0,
                    }
                    res = es.search(
                        index=index_products,
                        body=query,
                        filter_path=[
                            "hits.hits._id",
                            "hits.hits._source.pName",
                            "hits.hits._source.images",
                        ],
                    )
                    response_json = []
                    # ===============================store search query================================================
                    store_query = {
                        "query": {
                            "bool": {
                                "must": [
                                    {"match": {"categoryId": store_category_id}},
                                    {
                                        "geo_distance": {
                                            "distance": "30km",
                                            "location": {
                                                "lat": float(user_latitude),
                                                "lon": float(user_longtitude),
                                            },
                                        }
                                    },
                                    {"match": {"status": 1}},
                                    {
                                        "match_phrase_prefix": {
                                            "storeName." + str(language): search_text
                                        }
                                    },
                                ]
                            }
                        }
                    }
                    res_store_result = es.search(
                        index=index_store,
                        body=store_query,
                        filter_path=[
                            "hits.hits._id",
                            "hits.hits._source.storeName",
                            "hits.hits._source.logoImages",
                        ],
                    )
                    if "hits" in res:
                        if len(res["hits"]["hits"]) > 0:
                            for product in res["hits"]["hits"]:
                                try:
                                    images = product["_source"]["images"][0]["small"]
                                except:
                                    images = ""
                                if store_category_id == DINE_STORE_CATEGORY_ID:
                                    in_section = "Dish"
                                else:
                                    in_section = ""
                                response_json.append(
                                    {
                                        "name": product["_source"]["pName"][language]
                                        if language in product["_source"]["pName"]
                                        else product["_source"]["pName"]["en"],
                                        "seqId": 2,
                                        "images": images,
                                        "inSection": in_section,
                                    }
                                )

                    if "hits" in res_store_result:
                        if len(res_store_result["hits"]["hits"]) > 0:
                            for store in res_store_result["hits"]["hits"]:
                                try:
                                    images = store["_source"]["logoImages"]["logoImageThumb"]
                                except:
                                    images = ""
                                if store_category_id == DINE_STORE_CATEGORY_ID:
                                    in_section = "Restaurant"
                                else:
                                    in_section = ""
                                response_json.append(
                                    {
                                        "name": store["_source"]["storeName"][language]
                                        if language in store["_source"]["storeName"]
                                        else store["_source"]["storeName"]["en"],
                                        "seqId": 1,
                                        "images": images,
                                        "inSection": in_section,
                                    }
                                )

                    if len(response_json) > 0:
                        dataframe = pd.DataFrame(response_json)
                        dataframe = dataframe.drop_duplicates(subset="name", keep="last")
                        data_list = dataframe.to_dict(orient="records")
                        newlist = sorted(data_list, key=lambda k: k["seqId"], reverse=False)
                        response = {"data": newlist, "message": "data found"}
                        return JsonResponse(response, safe=False, status=200)
                    else:
                        response = {"data": [], "message": "data not found"}
                        return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


class CuisineList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Food"],
        operation_description="API for get the cuisine list",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language",
                default="en",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="store category id for get the stores",
                default=DINE_STORE_CATEGORY_ID,
            ),
            openapi.Parameter(
                name="zoneId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="zone id for get the cusines",
                default="5df8b7ad8798dc19da1a4b0e",
            ),
            openapi.Parameter(
                name="search",
                required=False,
                default="ita",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="search text which we need to search",
            ),
            openapi.Parameter(
                name="from",
                required=False,
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from data for pagination",
            ),
            openapi.Parameter(
                name="to",
                required=False,
                default="10",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="to data for pagination",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            ##### ----------- accept headers and query parameter ----------------- #####
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            store_category_id = request.GET.get("storeCategoryId", "")
            search_text = request.GET.get("search", "")
            zone_id = request.GET.get("zoneId", "")
            zone_id = zone_id.replace("%2C", ",")
            from_data = int(request.GET.get("from", 0))
            to_data = int(request.GET.get("to", 20))
            cusines_data = []
            if token == "":
                response_data = {"message": "unauthorized", "data": []}
                return ResponseHelper.get_status_401(response_data)
            elif zone_id == "":
                response_data = {"message": "zone id is blank", "data": []}
                return ResponseHelper.get_status_422(response_data)
            else:
                user_id = json.loads(token)["userId"]
                ##### process api #####
                response = OperationHelper.process_get_cuisines_api(
                    store_category_id, search_text, zone_id, language, from_data, to_data,user_id
                )
                return response
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return ResponseHelper.get_status_500(error_message)


"""
    API for get nearest more seller for the stores
"""


class GetMoreStores(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Food"],
        operation_description="API for get all outlet near you",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language",
                default="en",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="store category id for get the stores",
                default=DINE_STORE_CATEGORY_ID,
            ),
            openapi.Parameter(
                name="zoneId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="zone id for get the cusines",
                default="5df8b7ad8798dc19da1a4b0e",
            ),
            openapi.Parameter(
                name="storeId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="store id for get the more outlet for that particular store",
                default="5efecd70555581734fd3c4e2",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            store_category_id = request.GET.get("storeCategoryId", "")
            search_text = request.GET.get("search", "")
            zone_id = request.GET.get("zoneId", "")
            store_id = request.GET.get("storeId", "")
            lat = float(request.GET.get("lat", 0))
            long = float(request.GET.get("long", 0))
            cusines_data = []
            if token == "":
                response_data = {"message": "unauthorized", "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            elif lat == "":
                response_data = {"message": "latitude is blank", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            elif long == "":
                response_data = {"message": "longtitude is blank", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            elif zone_id == "":
                response_data = {"message": "zone id is blank", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            elif store_id == "":
                response_data = {"message": "store id is blank", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            else:
                # ================================for more stores==================================
                store_details = db.stores.find_one({"_id": ObjectId(store_id)})
                all_child_store = db.stores.find(
                    {
                        "uniqStoreId": store_details["uniqStoreId"], "status": 1,
                        "serviceZones.zoneId": zone_id
                    }
                )
                final_stores = []
                if all_child_store.count() > 0:
                    for fs in all_child_store:
                        if str(fs['_id']) == store_id:
                            pass
                        else:
                            final_stores.append(str(fs["_id"]))
                more_must_query = []
                if len(final_stores) > 0:
                    more_must_query.append({"terms": {"_id": final_stores}})
                else:
                    more_must_query.append(
                        {"match_phrase_prefix": {"storeName.en": store_details["storeName"]["en"]}}
                    )
                more_must_query.append({"match": {"status": 1}})
                more_must_query.append({"match": {"categoryId": DINE_STORE_CATEGORY_ID}})
                geo_distance_sort = {
                    "_geo_distance": {
                        "distance_type": "plane",
                        "location": {"lat": float(lat), "lon": float(long)},
                        "order": "asc",
                        "unit": "km",
                    }
                }
                sort_query = [geo_distance_sort]
                more_must_query.append(
                    {
                        "geo_distance": {
                            "distance": "50km",
                            "location": {"lat": float(lat), "lon": float(long)},
                        }
                    }
                )

                store_more_geo_query = {
                    "query": {
                        "bool": {
                            "must": more_must_query,
                            "must_not": [{"match": {"_id": str(store_details["_id"])}}],
                        }
                    },
                    "size": 100,
                    "from": 0,
                    "sort": sort_query,
                }
                res_more = es.search(
                    index=index_store,
                    body=store_more_geo_query,
                    filter_path=["hits.hits._id", "hits.hits._source"],
                )
                # ============================query for get the distance by geo query==============
                store_json = []
                if len(res_more) > 0:
                    for seller in res_more["hits"]["hits"]:
                        cusine_name = ""
                        store_must_query = []
                        store_must_query.append({"match": {"_id": str(seller["_id"])}})
                        geo_distance_sort = {
                            "_geo_distance": {
                                "distance_type": "plane",
                                "location": {"lat": float(lat), "lon": float(long)},
                                "order": "asc",
                                "unit": "km",
                            }
                        }
                        sort_query = [geo_distance_sort]
                        store_must_query.append(
                            {
                                "geo_distance": {
                                    "distance": "50km",
                                    "location": {"lat": float(lat), "lon": float(long)},
                                }
                            }
                        )
                        store_geo_query = {
                            "query": {
                                "bool": {
                                    "must": store_must_query,
                                }
                            },
                            "size": 1,
                            "from": 0,
                            "sort": sort_query,
                        }
                        res = es.search(
                            index=index_store,
                            body=store_geo_query,
                            filter_path=[
                                "hits.total",
                                "hits.hits._id",
                                "hits.hits.sort",
                                "hits.hits._source",
                            ],
                        )
                        if res["hits"]["total"]["value"] > 0:
                            if "hits" in res["hits"]:
                                for seller_distance in res["hits"]["hits"]:
                                    distance_km = round(seller_distance["sort"][0], 2)
                                    distance_miles = round(distance_km * conv_fac, 2)
                            else:
                                distance_km = 0
                                distance_miles = 0
                        else:
                            distance_km = 0
                            distance_miles = 0

                        address = (
                            seller["_source"]["businessLocationAddress"]["address"]
                            if "address" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        addressArea = (
                            seller["_source"]["businessLocationAddress"]["addressArea"]
                            if "addressArea" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        locality = (
                            seller["_source"]["businessLocationAddress"]["locality"]
                            if "locality" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        post_code = (
                            seller["_source"]["businessLocationAddress"]["postCode"]
                            if "postCode" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        state = (
                            seller["_source"]["businessLocationAddress"]["state"]
                            if "state" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        country = (
                            seller["_source"]["businessLocationAddress"]["country"]
                            if "country" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )
                        city = (
                            seller["_source"]["businessLocationAddress"]["city"]
                            if "city" in seller["_source"]["businessLocationAddress"]
                            else ""
                        )

                        # ===================================for the cusines=============================================
                        if "specialities" in seller["_source"]:
                            if len(seller["_source"]["specialities"]):
                                for spec in seller["_source"]["specialities"]:
                                    spec_data = db.specialities.find_one(
                                        {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                    )
                                    if spec_data != None:
                                        if cusine_name == "":
                                            cusine_name = (
                                                spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                        else:
                                            cusine_name = (
                                                cusine_name
                                                + ", "
                                                + spec_data["specialityName"][language]
                                                if language in spec_data["specialityName"]
                                                else spec_data["specialityName"]["en"]
                                            )
                                    else:
                                        pass
                            else:
                                pass
                        else:
                            pass

                        # ==========================offer details=================================
                        offer_details = db.offers.find(
                            {"storeId": {"$in": [str(seller["_id"])]}, "status": 1}
                        )
                        offer_json = []
                        for offer in offer_details:
                            offer_json.append(
                                {
                                    "offerName": offer["name"][language],
                                    "offerId": str(offer["_id"]),
                                    "offerType": offer["offerType"],
                                    "discountValue": offer["discountValue"],
                                }
                            )

                        if len(offer_json) > 0:
                            best_offer_store = max(offer_json, key=lambda x: x["discountValue"])
                            if best_offer_store["offerType"] == 0:
                                percentage_text = (
                                        str(best_offer_store["discountValue"]) + "%" + " " + "off"
                                )
                            else:
                                percentage_text = (
                                        "₹" + str(best_offer_store["discountValue"]) + " off"
                                )
                            offer_name = best_offer_store["offerName"]
                        else:
                            offer_name = ""
                            percentage_text = ""

                        store_json.append(
                            {
                                "address": address,
                                "locality": locality,
                                "addressArea": addressArea,
                                "offerName": offer_name,
                                "cuisines": cusine_name,
                                "logoImages": seller["_source"]["logoImages"],
                                "bannerImages": seller["_source"]["bannerImages"],
                                "cityId": seller["_source"]["cityId"],
                                "minimumOrder": seller["_source"]["minimumOrder"],
                                "nextCloseTime": seller["_source"]["nextCloseTime"]
                                if "nextCloseTime" in seller["_source"]
                                else "",
                                "nextOpenTime": seller["_source"]["nextOpenTime"]
                                if "nextOpenTime" in seller["_source"]
                                else "",
                                "avgRating": seller["_source"]["avgRating"]
                                if "avgRating" in seller["_source"]
                                else 0,
                                "storeIsOpen": seller["_source"]["storeIsOpen"]
                                if "storeIsOpen" in seller["_source"]
                                else False,
                                "driverTypeId": seller["_source"]["driverTypeId"]
                                if "driverTypeId" in seller["_source"]
                                else 0,
                                "driverType": seller["_source"]["driverType"]
                                if "driverType" in seller["_source"]
                                else "",
                                "storeType": seller["_source"]["storeType"]
                                if "storeType" in seller["_source"]
                                else "Food",
                                "averageDeliveryTime": str(
                                    seller["_source"]["averageDeliveryTimeInMins"]
                                )
                                                       + " "
                                                       + "Mins"
                                if "averageDeliveryTimeInMins" in seller["_source"]
                                else "",
                                "percentageText": percentage_text,
                                "state": state,
                                "country": country,
                                "city": city,
                                "distanceKm": round(distance_km, 2),
                                "distanceMiles": distance_miles,
                                "currencySymbol": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "₹",
                                "currency": seller["_source"]["currencyCode"]
                                if "currencyCode" in seller["_source"]
                                else "INR",
                                "distanceMiles": distance_miles,
                                "storeName": seller["_source"]["storeName"]["en"],
                                "storeId": seller["_id"],
                            }
                        )
                    response = {"data": store_json, "message": "data not found"}
                    return JsonResponse(response, safe=False, status=200)
                else:
                    response = {"data": [], "message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


"""
    API for get static page data inside the website
"""


class StaticPageData(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Static Pages"],
        operation_description="API for get all static page data",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language",
                default="en",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            if token == "":
                response_data = {"message": "unauthorized", "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            else:
                home_page_data = db.homepage.find_one({}, {"homepage": 1})
                if home_page_data != None:
                    if "homepage" in home_page_data:
                        about_data = db.aboutUs.find_one({"storeId": "0"})
                        response = {
                            "facebookIcon": home_page_data["homepage"]["facebookIcon"]
                            if "facebookIcon" in home_page_data["homepage"]
                            else "",
                            "facebookLink": home_page_data["homepage"]["facebookLink"]
                            if "facebookLink" in home_page_data["homepage"]
                            else "",
                            "twitterIcon": home_page_data["homepage"]["twitterIcon"]
                            if "twitterIcon" in home_page_data["homepage"]
                            else "",
                            "twitterLink": home_page_data["homepage"]["twitterLink"]
                            if "twitterLink" in home_page_data["homepage"]
                            else "",
                            "instagramIcon": home_page_data["homepage"]["instagramIcon"]
                            if "instagramIcon" in home_page_data["homepage"]
                            else "",
                            "instagramLink": home_page_data["homepage"]["instagramLink"]
                            if "instagramLink" in home_page_data["homepage"]
                            else "",
                            "youtubeIcon": home_page_data["homepage"]["youtubeIcon"]
                            if "youtubeIcon" in home_page_data["homepage"]
                            else "",
                            "youtubeLink": home_page_data["homepage"]["youtubeLink"]
                            if "youtubeLink" in home_page_data["homepage"]
                            else "",
                            "linkedInIcon": home_page_data["homepage"]["linkedInIcon"]
                            if "linkedInIcon" in home_page_data["homepage"]
                            else "",
                            "linkedInLink": home_page_data["homepage"]["linkedInLink"]
                            if "linkedInLink" in home_page_data["homepage"]
                            else "",
                            "copyRight": home_page_data["homepage"]["copyRight"][language]
                            if "copyRight" in home_page_data["homepage"]
                            else "",
                            "iosAppLink": home_page_data["homepage"]["iosAppLink"]
                            if "iosAppLink" in home_page_data["homepage"]
                            else "",
                            "androidAppLink": home_page_data["homepage"]["androidAppLink"]
                            if "androidAppLink" in home_page_data["homepage"]
                            else "",
                        }
                        if about_data is not None:
                            about_json = {
                                "aboutUs": about_data["aboutUs"] if "aboutUs" in about_data else {},
                                "register": about_data["register"]
                                if "register" in about_data
                                else {},
                                "buying": about_data["buying"] if "buying" in about_data else {},
                                "selling": about_data["selling"] if "selling" in about_data else {},
                                "seo": about_data["seo"] if "seo" in about_data else {},
                                "bannerImages": about_data["bannerImages"]
                                if "bannerImages" in about_data
                                else {},
                            }
                        else:
                            about_json = {}
                        response["aboutData"] = about_json
                        json_response = {"data": response}
                        return JsonResponse(response, safe=False, status=200)
                    else:
                        json_response = {"data": {}}
                        return JsonResponse(response, safe=False, status=404)
                else:
                    response = {"data": {}, "message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


"""
    API for get setting for store category
"""


class StoreCategoryConfig(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Store Category Config"],
        operation_description="API for get configuration for store category",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="language",
                default="en",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                required=True,
                description="store category id for get the stores",
                default=PHARMACY_STORE_CATEGORY_ID,
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            store_category_id = request.GET.get("storeCategoryId", "")
            if token == "":
                response_data = {"message": "unauthorized", "data": []}
                return JsonResponse(response_data, safe=False, status=401)
            elif store_category_id == "":
                response_data = {"message": "store category id is missing", "data": []}
                return JsonResponse(response_data, safe=False, status=422)
            else:
                store_category_data = db.storeCategory.find_one(
                    {"_id": ObjectId(store_category_id)}
                )
                if store_category_data != None:
                    response = {
                        "bannerImage": store_category_data["bannerImage"]
                        if "bannerImage" in store_category_data
                        else "",
                        "logoImage": store_category_data["logoImage"]
                        if "logoImage" in store_category_data
                        else "",
                        "iconlogoimg": store_category_data["iconlogoimg"]
                        if "iconlogoimg" in store_category_data
                        else "",
                        "cartsAllowed": store_category_data["cartsAllowed"]
                        if "cartsAllowed" in store_category_data
                        else 0,
                        "cartsAllowedMsg": store_category_data["cartsAllowedMsg"]
                        if "cartsAllowedMsg" in store_category_data
                        else 0,
                        "colorCode": store_category_data["colorCode"]
                        if "colorCode" in store_category_data
                        else "",
                        "shippedTo": store_category_data["shippedTo"]
                        if "shippedTo" in store_category_data
                        else 0,
                        "allowOrderOutOfStock": store_category_data["allowOrderOutOfStock"]
                        if "allowOrderOutOfStock" in store_category_data
                        else 0,
                        "deliveryTime": store_category_data["deliveryTime"]
                        if "deliveryTime" in store_category_data
                        else 0,
                        "nowBooking": store_category_data["nowBooking"]
                        if "nowBooking" in store_category_data
                        else 0,
                        "scheduleBooking": store_category_data["scheduleBooking"]
                        if "scheduleBooking" in store_category_data
                        else 0,
                        "shiftSelection": store_category_data["shiftSelection"]
                        if "shiftSelection" in store_category_data
                        else 0,
                        "deliverTo": store_category_data["deliverTo"]
                        if "deliverTo" in store_category_data
                        else 0,
                        "deliveryDoneBy": store_category_data["deliveryDoneBy"]
                        if "deliveryDoneBy" in store_category_data
                        else 0,
                    }
                    json_response = {"data": response}
                    return JsonResponse(response, safe=False, status=200)
                else:
                    response = {"data": {}, "message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message, "rating": 0}
            return JsonResponse(error_message, status=500)


class DriverRating(APIView):
    """
    -----------------------------------Api for create rating and review -------------------------
    """

    @swagger_auto_schema(
        method="post",
        tags=["Review Rating"],
        operation_description="API for post and update the review of the driver",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="ipAddress",
                default="124.40.244.94",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="ip address of the network",
            ),
            openapi.Parameter(
                name="platform",
                default="0",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="from which platform requested for data.values will be 0 for website, 1 for iOS and 2 for android",
            ),
            openapi.Parameter(
                name="latitude",
                default="12.9716",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="latitude of the user where website or application opened",
            ),
            openapi.Parameter(
                name="longitude",
                default="77.5946",
                required=False,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="longitude of the user where website or application opened",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "data": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Items(
                        type=openapi.TYPE_OBJECT,
                        required=["orderId", "driverId", "rating"],
                        properties={
                            "city": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="city name of the user where browser or app opened if not there value should be empty string",
                                example="Mumbai",
                            ),
                            "country": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="country name of the user where browser or app opened if not there value should be empty string",
                                example="India",
                            ),
                            "orderId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="order id or ride id for completed",
                                example="10361598855802636",
                            ),
                            "driverId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="driver id for which driver need to give rating",
                                example="5f4cb0163491374509d9d438",
                            ),
                            "rating": openapi.Schema(
                                type=openapi.TYPE_INTEGER,
                                description="rating of the product. value between 1 to 5",
                                example=1,
                            ),
                            "reviewTitle": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="review of the driver which provide by the customer",
                                example="",
                            ),
                            "reviewDescription": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="review description of the driver which provide by the customer",
                                example="",
                            ),
                            "attributeId": openapi.Schema(
                                type=openapi.TYPE_STRING,
                                description="attribute id for which attribute need to give rating",
                                example="",
                            ),
                            "serviceType": openapi.Schema(
                                type=openapi.TYPE_INTEGER,
                                description="service type for add from which service need to add rating or review. value should be 1 for delivery and 2 for ride",
                                example=2,
                            ),
                            "flowType": openapi.Schema(
                                type=openapi.TYPE_NUMBER,
                                description="flowType for 1:ride and 2:trucker driver rating",
                                example=1,
                                default=1
                            ),
                        },
                    ),
                )
            },
        ),
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            start_time = time.time()
            review_data = []
            response = []
            if "data" not in request.data:
                response_data = {
                    "message": "data is missing inside request object",
                }
                return JsonResponse(response_data, safe=False, status=422)
            else:
                request_data = request.data
                language = (
                    request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
                )
                token = request.META["HTTP_AUTHORIZATION"]
                ip_address = (
                    request.META["HTTP_IPADDRESS"] if "HTTP_IPADDRESS" in request.META else ""
                )
                latitude = request.META["HTTP_LATITUDE"] if "HTTP_LATITUDE" in request.META else 0
                longitude = (
                    request.META["HTTP_LONGITUDE"] if "HTTP_LONGITUDE" in request.META else 0
                )
                platform = request.META["HTTP_PLATFORM"] if "HTTP_PLATFORM" in request.META else 0

                timeStamp = datetime.datetime.now().timestamp()
                if token == "":
                    response_data = {
                        "message": "unauthorized",
                        "data": [],
                    }
                    return JsonResponse(response_data, safe=False, status=401)
                user_id = json.loads(token)["userId"]
                # user_id = "5df8c6f765722e4f9dfdb9f7"
                for data in request_data["data"]:
                    # default flowType 1 for ride or 2 for trucker
                    flowType = data.get('flowType', 1)
                    flowType = 1 if flowType == "" or flowType == None else int(flowType)
                    order_id = str(data["orderId"]) if "orderId" in data else ""
                    driver_id = data["driverId"] if "driverId" in data else ""
                    cityId = str(data["city"]) if "city" in data else ""
                    countryId = (str(data["country"]) if "country" in data else "",)
                    rating = data["rating"] if "rating" in data else 0
                    service_type = data["serviceType"] if "serviceType" in data else 2
                    attribute_id = data["attributeId"] if "attributeId" in data else ""
                    review_title = data["reviewTitle"] if "reviewTitle" in data else ""
                    review_description = (
                        data["reviewDescription"] if "reviewDescription" in data else ""
                    )
                    if rating == 0 and review_title == "" and review_description == "":
                        pass
                    else:
                        if order_id == "":
                            response_data = {
                                "message": "order id is missing",
                            }
                            return JsonResponse(response_data, safe=False, status=422)
                        elif driver_id == "":
                            response_data = {
                                "message": "driver id is missing",
                            }
                            return JsonResponse(response_data, safe=False, status=422)
                        else:
                            query = {"status": 1, "orderId": order_id}
                            query["userId"] = user_id
                            timeStamp = datetime.datetime.now().timestamp()
                            if attribute_id != "":
                                query["attributeId"] = attribute_id
                            review_details = db.driverRatingReview.find(query)
                            driver_details = db.driver.find_one(
                                {"_id": ObjectId(driver_id)}, {"firstName": 1, "lastName": 1}
                            )
                            if driver_details != None:
                                driver_name = (
                                        driver_details["firstName"] + " " + driver_details["lastName"]
                                )
                            else:
                                driver_name = "N/A"

                            try:
                                customer_details = db.customer.find_one(
                                    {"_id": ObjectId(user_id)}, {"firstName": 1, "lastName": 1}
                                )
                            except:
                                customer_details = None
                            if customer_details != None:
                                customer_name = (
                                        customer_details["firstName"]
                                        + " "
                                        + customer_details["lastName"]
                                )
                            else:
                                customer_name = "N/A"

                            if review_details.count() == 0:
                                review_json = {
                                    "userId": user_id,
                                    "orderId": order_id,
                                    "driverId": driver_id,
                                    "attributeId": attribute_id,
                                    "rating": int(rating),
                                    "driverName": driver_name,
                                    "serviceType": service_type,
                                    "customerName": customer_name,
                                    "createdTimestamp": int(timeStamp),
                                    "reviewTitle": review_title,
                                    "reviewDescription": review_description,
                                    "ipaddress": ip_address,
                                    "status": 1,
                                    "platform": platform,
                                    "likes": [],
                                    "disLikes": [],
                                    "latitude": float(latitude),
                                    "longitude": float(longitude),
                                    "cityId": cityId,
                                    "countryId": countryId,
                                }
                                db.driverRatingReview.insert(review_json)
                                details = {
                                    "bookingId": str(order_id),
                                    "driverId": str(driver_id),
                                    "serviceType": service_type,
                                }
                                # driver_intensive
                                threading.Thread(
                                    target=driver_intensive,
                                    args=(
                                        details,
                                        token,
                                    ),
                                ).start()
                            else:
                                for rat_attr in review_details:
                                    update_query = {}
                                    if rating != 0:
                                        update_query["rating"] = int(rating)
                                    if review_title != "":
                                        update_query["reviewTitle"] = review_title
                                    if review_description != "":
                                        update_query["reviewDescription"] = review_description
                                    db.driverRatingReview.update(
                                        {"_id": ObjectId(rat_attr["_id"])},
                                        {"$set": update_query},
                                        upsert=True,
                                        multi=False,
                                    )
                            # ==============================calculate average rating======================================
                            driver_rating = db.driverRatingReview.aggregate(
                                [
                                    {"$match": {"driverId": str(driver_id)}},
                                    {
                                        "$group": {
                                            "_id": "$driverId",
                                            "avgRating": {"$avg": "$rating"},
                                        }
                                    },
                                ]
                            )
                            avg_rating_value = 0
                            for avg_rating in driver_rating:
                                avg_rating_value = avg_rating["avgRating"]

                            # ======================update in mongo db===================================================
                            db.driver.update(
                                {"_id": ObjectId(driver_id)},
                                {"$set": {"avgRating": round(avg_rating_value, 2)}},
                                upsert=False,
                                multi=False,
                            )
                            try:
                                res_update = es.update(
                                    index="driverindex",
                                    doc_type="driver",
                                    id=str(driver_id),
                                    body={"doc": {"avgRating": round(avg_rating_value, 2)}},
                                )
                            except:
                                pass
                            if order_id != "":
                                driver_rating = db.driverRatingReview.aggregate(
                                    [
                                        {
                                            "$match": {
                                                "driverId": str(driver_id),
                                                "orderId": order_id,
                                            }
                                        },
                                        {
                                            "$group": {
                                                "_id": "$driverId",
                                                "avgRating": {"$avg": "$rating"},
                                            }
                                        },
                                    ]
                                )
                                avg_rating_booking = 0
                                for avg_rating in driver_rating:
                                    avg_rating_booking = avg_rating["avgRating"]
                                try:
                                    db.bookings_rides.update(
                                        {
                                            "bookingId": int(order_id),
                                            "driverDetails.driverId": ObjectId(driver_id),
                                        },
                                        {
                                            "$set": {
                                                "reviewByCustomer.pending": int(1),
                                                "reviewByCustomer.rating": round(
                                                    avg_rating_booking, 2
                                                ),
                                                "reviewByCustomer.review": review_title,
                                                "reviewByCustomer.userId": ObjectId(user_id),
                                                "reviewByCustomer.reviewAt": int(timeStamp),
                                            }
                                        },
                                        upsert=False,
                                        multi=False,
                                    )
                                    # update trucker driver ratings
                                    if flowType == 2:
                                        db.storeOrder.update(
                                            {"masterOrderId": str(order_id), "customerDetails.id": user_id},
                                            {
                                                "$set": {
                                                    "driverRattingData": {
                                                        "rating": round(avg_rating_booking, 2),
                                                        "reviewTitle": review_title,
                                                        "isRated": True,
                                                        "reviewDescription": review_description,
                                                    },
                                                }
                                            },
                                            upsert=False,
                                            multi=True,
                                        )
                                except:
                                    pass
                                details = {
                                    "bookingId": str(order_id),
                                    "driverId": str(driver_id),
                                    "serviceType": 1,
                                }
                                # driver_intensive
                                threading.Thread(
                                    target=driver_intensive,
                                    args=(
                                        details,
                                        token,
                                    ),
                                ).start()
                response_data = {"message": "Review or Rating are add successfully"}
                return JsonResponse(response_data, safe=False, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class StoreProductList(APIView):
    """
    --------------Api for get all food products inside store app(only for store app)-----------
    """

    @swagger_auto_schema(
        method="get",
        tags=["Product List"],
        operation_description="Api for get all food products inside store app(only for store app)",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=DINE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="q",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the search the item in search bar ex. ni, nik, addi",
            ),
            openapi.Parameter(
                name="page",
                default="1",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="page number. which page number data want to display",
            ),
            openapi.Parameter(
                name="stock",
                default="0",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="filter base on stock. 0 for both, 1 for instock and 2 for outofstock",
            ),
            openapi.Parameter(
                name="avaibility",
                default="1",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="filter base on avaibility for the product. 1 for available and 2 for not available",
            ),
            openapi.Parameter(
                name="fname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="category name of the product..ex. Men, Women",
            ),
            openapi.Parameter(
                name="sname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="sub category name of the product while getting data through subcategory that time category name mandatory..ex. Footware",
            ),
            openapi.Parameter(
                name="tname",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="sub sub category name of the product while getting data through subsubcategory that time category name and subcategory mandatory..ex. Footware",
            ),
            openapi.Parameter(
                name="s_id",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="while need to display particular stores product. ex.5df89d3edd77d6ca2752bd10",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            review_data = []
            query = []
            should_query = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])

            # ========================================query parameter====================================================
            # for the search the item in search bar
            search_query = request.GET.get("q", "")
            page = int(request.GET.get("page", 1))  # for the pagination
            stock = int(request.GET.get("stock", 0))  # for the stock
            available_filter = int(request.GET.get("avaibility", 0))  # for the stock

            fname = request.GET.get("fname", "")  # category-name
            fname = fname.replace("%20", " ")
            fname = fname.replace("+", " ")

            sname = request.GET.get("sname", "")  # sub-category-name
            sname = sname.replace("%20", " ")
            sname = sname.replace("%5B", "")
            sname = sname.replace("%5D", "")
            sname = sname.replace("[", "")
            sname = sname.replace("]", "")
            sname = sname.replace("+", " ")

            tname = request.GET.get("tname", "")  # sub-sub-category-name
            tname = tname.replace("%20", " ")
            tname = tname.replace("+", " ")

            store_id = request.GET.get("s_id", "")  # get particular offer data
            from_data = int(page * 20) - 20
            to_data = 20

            if store_id == "":
                response = {"message": "store id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            else:
                if int(stock) == 0:
                    pass
                elif int(stock) == 1:
                    query.append({"range": {"units.availableQuantity": {"lte": 0}}})
                else:
                    query.append({"range": {"units.availableQuantity": {"gt": 0}}})

                query.append({"match": {"storeId": store_id}})

                if store_category_id != "0":
                    query.append({"match": {"storeCategoryId": store_category_id}})
                if search_query != "":
                    # ======================================new structure===================================================
                    should_query.append(
                        {
                            "match_phrase_prefix": {
                                "pName.en": {"query": search_query.replace("%20", " "), "boost": 2}
                            }
                        }
                    )
                    should_query.append(
                        {
                            "match_phrase_prefix": {
                                "pPName.en": {"query": search_query.replace("%20", " "), "boost": 2}
                            }
                        }
                    )

                if fname != "":
                    if "," in fname or "%2C" in fname:
                        query.append(
                            {
                                "match": {
                                    "categoryList.parentCategory.categoryName."
                                    + language: fname.replace("%20", " ")
                                }
                            }
                        )
                    else:
                        if fname != "":
                            query.append(
                                {
                                    "match_phrase_prefix": {
                                        "categoryList.parentCategory.categoryName."
                                        + language: fname.replace("%20", " ")
                                    }
                                }
                            )

                if sname != "":
                    if "," in sname or "%2C" in sname:
                        query.append(
                            {
                                "match": {
                                    "categoryList.parentCategory.childCategory.categoryName."
                                    + language: sname.replace("%20", " ")
                                }
                            }
                        )
                    else:
                        if sname != "":
                            query.append(
                                # {"term": {"categoryList.parentCategory.childCategory.categoryName."+language+".keyword": sname.replace("%20", " ")}})
                                {
                                    "term": {
                                        "categoryList.parentCategory.childCategory.categoryName."
                                        + language
                                        + ".keyword": sname
                                    }
                                }
                            )
                if tname != "":
                    if "," in tname or "%2C" in tname:
                        query.append(
                            {
                                "match": {
                                    "categoryList.parentCategory.childCategory.categoryName."
                                    + language: tname.replace("%20", " ")
                                }
                            }
                        )
                    else:
                        query.append(
                            {
                                "match_phrase_prefix": {
                                    "categoryList.parentCategory.childCategory.categoryName."
                                    + language: tname.replace("%20", " ")
                                }
                            }
                        )

                sort_query = [{"pName.en.keyword": {"order": "asc"}}]

                if int(available_filter) == 0:
                    query.append({"terms": {"status": [1, 2]}})
                elif int(available_filter) == 1:
                    query.append({"match": {"status": 1}})
                else:
                    query.append({"match": {"status": 2}})

                if len(should_query) > 0:
                    search_item_query = {
                        "query": {
                            "bool": {
                                "must": query,
                                "should": should_query,
                                "minimum_should_match": 1,
                                "boost": 1.0,
                            }
                        },
                        "track_total_hits": True,
                        "size": to_data,
                        "from": from_data,
                        "sort": sort_query,
                    }
                else:
                    search_item_query = {
                        "query": {"bool": {"must": query}},
                        "track_total_hits": True,
                        "size": to_data,
                        "from": from_data,
                        "sort": sort_query,
                    }
                if type(search_item_query) == str or type(search_item_query) == "":
                    search_item_query = json.loads(search_item_query)
                res = es.search(
                    index=index_products,
                    body=search_item_query,
                    filter_path=[
                        "hits.total",
                        "hits.hits._score",
                        "hits.hits._id",
                        "hits.hits._source",
                    ],
                )
                total_data = res["hits"]["total"]["value"]
                category_list = []
                brand_list = []
                if total_data > 0:
                    try:
                        for res_data in res["hits"]["hits"]:
                            try:
                                variant_data = []
                                product_name = (
                                    res_data["_source"]["pName"][language]
                                    if language in res_data["_source"]["pName"]
                                    else res_data["_source"]["pName"]["en"]
                                )
                                try:
                                    brand_name = (
                                        res_data["_source"]["brandTitle"][language]
                                        if language in res_data["_source"]["brandTitle"]
                                        else res_data["_source"]["brandTitle"]["en"]
                                    )
                                except:
                                    brand_name = ""
                                currency = res_data["_source"]["currency"]
                                currency_symbol = res_data["_source"]["currencySymbol"]
                                status = res_data["_source"]["status"]
                                variantCount = validate_variant(
                                    res_data["_source"]["parentProductId"],
                                    store_id,
                                    "",
                                    store_category_id,
                                )
                                child_product_details = db.childProducts.find_one(
                                    {
                                        "_id": ObjectId(res_data["_id"]),
                                        "storeId": ObjectId(store_id),
                                    }
                                )
                                if child_product_details != None:
                                    if "nextAvailableTime" in child_product_details:
                                        if (
                                                child_product_details["nextAvailableTime"] != ""
                                                and child_product_details["status"] != 1
                                        ):
                                            product_status = True
                                            next_available_time = child_product_details[
                                                "nextAvailableTime"
                                            ]
                                            next_open_time = int(next_available_time)
                                            local_time = datetime.datetime.fromtimestamp(
                                                next_open_time
                                            )
                                            next_day = datetime.datetime.now() + datetime.timedelta(
                                                days=1
                                            )
                                            next_day_midnight = next_day.replace(
                                                hour=23, minute=59, second=59
                                            )
                                            next_day_midnight_timestamp = int(
                                                next_day_midnight.timestamp()
                                            )

                                            mid_night_date = datetime.datetime.strptime(
                                                str(next_day), "%Y-%m-%d %H:%M:%S.%f"
                                            )
                                            db_time = datetime.datetime.fromtimestamp(
                                                next_open_time
                                            )
                                            if next_day_midnight_timestamp < next_open_time:
                                                # if mid_night_date < db_time:
                                                open_time = local_time.strftime(
                                                    "%b %d %Y, %I:%M %p"
                                                )
                                                product_tag = "Available On " + open_time
                                            else:
                                                open_time = local_time.strftime("%I:%M %p")
                                                product_tag = (
                                                        "Next available at " + open_time + " tomorrow"
                                                )
                                        else:
                                            product_status = False
                                            next_available_time = ""
                                            product_tag = ""
                                    else:
                                        product_status = False
                                        next_available_time = ""
                                        product_tag = ""

                                    offers_details = []
                                    if "offer" in child_product_details:
                                        for offer in child_product_details["offer"]:
                                            if "offerFor" in offer:
                                                if offer["status"] == 1:
                                                    offer_query = {
                                                        "_id": ObjectId(offer["offerId"]),
                                                        "status": 1,
                                                    }
                                                    offer_count = db.offers.find_one(offer_query)
                                                    if offer_count is not None:
                                                        if offer_count["startDateTime"] <= int(
                                                                time.time()
                                                        ):
                                                            offers_details.append(offer)
                                                        else:
                                                            pass
                                                    else:
                                                        pass
                                                else:
                                                    pass
                                            else:
                                                pass
                                    else:
                                        pass

                                    # =============================================end==============================
                                    if len(offers_details) > 0:
                                        best_offer = max(
                                            offers_details, key=lambda x: x["discountValue"]
                                        )
                                    else:
                                        best_offer = {}

                                    if len(best_offer) == 0:
                                        percentage = 0
                                        discount_value = 0
                                        discount_type = 0
                                    else:
                                        if "discountType" in best_offer:
                                            discount_value = int(best_offer["discountValue"])
                                            if best_offer["discountType"] == 0:
                                                percentage = 0
                                                discount_type = 0
                                            else:
                                                percentage = int(best_offer["discountValue"])
                                                discount_type = best_offer["discountType"]
                                        else:
                                            percentage = 0
                                            discount_type = 0
                                            discount_value = 0

                                    if len(best_offer) > 0:
                                        discount_type = (
                                            int(best_offer["discountType"])
                                            if "discountType" in best_offer
                                            else 0
                                        )
                                        discount_value = best_offer["discountValue"]
                                    else:
                                        discount_type = 2

                                    try:
                                        base_price = child_product_details["units"][0][
                                            "b2cPricing"
                                        ][0]["b2cpriceWithTax"]
                                    except:
                                        base_price = child_product_details["units"][0]["floatValue"]
                                    tax_price = 0
                                    if base_price == 0 or base_price == "":
                                        final_price = 0
                                        discount_price = 0
                                    else:
                                        base_price = base_price + ((base_price * tax_price) / 100)
                                        if int(discount_type) == 0:
                                            discount_price = float(discount_value)
                                        elif int(discount_type) == 1:
                                            discount_price = (
                                                                     float(base_price) * float(discount_value)
                                                             ) / 100
                                        else:
                                            discount_price = 0
                                        final_price = base_price - discount_price

                                    discountPriceForNonMembers = child_product_details["units"][0][
                                        "discountPriceForNonMembers"] if "discountPriceForNonMembers" in \
                                                                         child_product_details["units"][
                                                                             0] else discount_price
                                    memberPrice = child_product_details["units"][0]["memberPrice"] if "memberPrice" in \
                                                                                                      child_product_details[
                                                                                                          "units"][
                                                                                                          0] else discount_price

                                    final_price_list = {
                                        "basePrice": base_price,
                                        "finalPrice": final_price,
                                        "discountPrice": discount_price,
                                        "discountPercentage": percentage,
                                        "discountPriceForNonMembers": discountPriceForNonMembers,
                                        "memberPrice": memberPrice
                                    }
                                    try:
                                        images = (
                                            child_product_details["images"][0]
                                            if "images" in child_product_details["images"]
                                            else {}
                                        )
                                    except:
                                        images = {}

                                    # try:
                                    available_qty = (
                                        child_product_details["units"][0]["availableQuantity"]
                                        if "availableQuantity" in child_product_details["units"][0]
                                        else 0
                                    )
                                    if available_qty == 0:
                                        try:
                                            available_qty = (
                                                child_product_details["units"][0][
                                                    "availableQuantity"
                                                ]
                                                if "availableQuantity"
                                                   in child_product_details["units"][0]["seller"]
                                                else 0
                                            )
                                        except:
                                            available_qty = 0
                                    if len(images) == 0:
                                        try:
                                            images = (
                                                child_product_details["units"][0]["image"][0]
                                                if "image" in child_product_details["units"]
                                                else {}
                                            )
                                        except:
                                            images = {}
                                        if len(images) == 0:
                                            try:
                                                images = (
                                                    child_product_details["images"][0]
                                                    if "images" in child_product_details
                                                    else {}
                                                )
                                            except:
                                                images = {}
                                    if brand_name != "":
                                        brand_list.append(brand_name)
                                    else:
                                        pass

                                    # ========================= for the get the linked the unit data====================================
                                    for link_unit in child_product_details["units"][0][
                                        "attributes"
                                    ]:
                                        try:
                                            for attrlist in link_unit["attrlist"]:
                                                try:
                                                    if attrlist == None:
                                                        pass
                                                    else:
                                                        if attrlist["linkedtounit"] == 1:
                                                            if attrlist["measurementUnit"] == "":
                                                                attr_name = (
                                                                    str(attrlist["value"][language])
                                                                    if language in attrlist["value"]
                                                                    else str(
                                                                        attrlist["value"]["en"]
                                                                    )
                                                                )
                                                            else:
                                                                attr_name = (
                                                                    str(attrlist["value"][language])
                                                                    + " "
                                                                    + attrlist["measurementUnit"]
                                                                    if language in attrlist["value"]
                                                                    else str(
                                                                        attrlist["value"]["en"]
                                                                    )
                                                                         + " "
                                                                         + attrlist["measurementUnit"]
                                                                )
                                                            variant_data.append(
                                                                {
                                                                    "attrname": attrlist[
                                                                        "attrname"
                                                                    ]["en"],
                                                                    "value": str(attr_name),
                                                                    "name": attrlist["attrname"][
                                                                        "en"
                                                                    ],
                                                                }
                                                            )
                                                        else:
                                                            pass
                                                except:
                                                    pass
                                        except:
                                            pass

                                    if "colorName" in child_product_details["units"][0]:
                                        if child_product_details["units"][0]["colorName"] != "":
                                            if child_product_details["units"][0]["colorName"] != "":
                                                variant_data.append(
                                                    {
                                                        "attrname": "Color",
                                                        "value": child_product_details["units"][0][
                                                            "colorName"
                                                        ],
                                                        "name": "Color",
                                                    }
                                                )
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass

                                    if "unitSizeGroupValue" in child_product_details["units"][0]:
                                        if (
                                                child_product_details["units"][0]["unitSizeGroupValue"]
                                                == None
                                        ):
                                            pass
                                        else:
                                            if (
                                                    len(
                                                        child_product_details["units"][0][
                                                            "unitSizeGroupValue"
                                                        ]
                                                    )
                                                    != 0
                                            ):
                                                if (
                                                        child_product_details["units"][0][
                                                            "unitSizeGroupValue"
                                                        ]["en"]
                                                        != ""
                                                        and len(
                                                    child_product_details["units"][0][
                                                        "unitSizeGroupValue"
                                                    ]["en"]
                                                )
                                                        > 0
                                                ):
                                                    variant_data.append(
                                                        {
                                                            "attrname": "Size",
                                                            "value": child_product_details["units"][
                                                                0
                                                            ]["unitSizeGroupValue"]["en"],
                                                            "name": "Size",
                                                        }
                                                    )
                                                else:
                                                    pass
                                            else:
                                                pass
                                    else:
                                        pass

                                    review_data.append(
                                        {
                                            "parentProductId": res_data["_source"][
                                                "parentProductId"
                                            ],
                                            "childProductId": res_data["_id"],
                                            "images": images,
                                            "productStatus": product_status,
                                            "productTag": product_tag,
                                            "brandName": brand_name,
                                            "variantData": variant_data,
                                            "availableStock": available_qty,
                                            "productName": product_name,
                                            "status": res_data["_source"]["status"],
                                            "currency": res_data["_source"]["currency"]
                                            if res_data["_source"]["currency"] is not None
                                            else "INR",
                                            "currencySymbol": res_data["_source"]["currencySymbol"]
                                            if res_data["_source"]["currencySymbol"] is not None
                                            else "₹",
                                            "nextAvailableTime": next_available_time,
                                            "finalPriceList": final_price_list,
                                            "variantCount": variantCount,
                                            "offer": best_offer,
                                            "isMembersOnly": child_product_details[
                                                "isMembersOnly"] if "isMembersOnly" in child_product_details else False
                                        }
                                    )
                            except Exception as ex:
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print(
                                    "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                                    type(ex).__name__,
                                    ex,
                                )

                        category_data = db.category.find(
                            {
                                "storeid": {"$in": [store_id]},
                                "status": 1,
                                "parentId": {"$exists": False},
                            }
                        )
                        for cat in category_data:
                            category_list.append(
                                {
                                    "categoryId": str(cat["_id"]),
                                    "categoryName": cat["categoryName"]["en"],
                                }
                            )
                        if len(category_list) > 0:
                            dataframe1 = pd.DataFrame(category_list)
                            dataframe1 = dataframe1.drop_duplicates("categoryId", keep="last")
                            category_json = dataframe1.to_json(orient="records")
                            category_json = json.loads(category_json)
                        else:
                            category_json = []

                        # ==========================get the subcategory for the products=========================
                        final_category_list = []
                        for first_category in category_json:
                            second_category = []
                            second_category_details = db.category.find(
                                {
                                    "parentId": ObjectId(first_category["categoryId"]),
                                    "status": 1,
                                    "storeid": str(store_id),
                                }
                            )
                            if second_category_details.count() > 0:
                                for sc in second_category_details:
                                    second_category.append(
                                        {
                                            "categoryId": str(sc["_id"]),
                                            "categoryName": sc["categoryName"]["en"],
                                        }
                                    )
                            else:
                                pass
                            final_category_list.append(
                                {
                                    "categoryId": str(first_category["categoryId"]),
                                    "categoryName": first_category["categoryName"],
                                    "secondCategory": second_category,
                                }
                            )

                        avai_json = []
                        avai_json.append({"id": "", "name": "Active"})
                        avai_json.append({"id": "", "name": "Inactive"})
                        stock_json = []
                        stock_json.append({"id": "", "name": "InStock"})
                        stock_json.append({"id": "", "name": "OutOfStock"})
                        availability_data = {
                            "name": "Availability",
                            "data": avai_json,
                            "selType": 2,
                            "type": 1,
                        }
                        stock_data = {"name": "Stock", "data": stock_json, "selType": 2, "type": 1}

                        category = {
                            "selType": 2,
                            "type": 1,
                            "name": "Catgeory",
                            "data": final_category_list,
                        }
                        brand = {
                            "selType": 2,
                            "type": 1,
                            "name": "Brands",
                            "brandData": list(set(brand_list)),
                        }
                        last_json = []
                        last_json.append(category)
                        last_json.append(availability_data)
                        last_json.append(brand)
                        last_json.append(stock_data)

                        if len(review_data) > 0:
                            response_data = {
                                "message": "data found",
                                "penCount": total_data,
                                "data": review_data,
                                "filter": last_json,
                            }
                            return JsonResponse(response_data, safe=False, status=200)
                        else:
                            response_data = {
                                "message": "data not found",
                                "penCount": total_data,
                                "filter": [],
                                "data": [],
                            }
                            return JsonResponse(response_data, safe=False, status=404)
                    except Exception as ex:
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print(
                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                            type(ex).__name__,
                            ex,
                        )
                        response_data = {
                            "message": "data not found",
                            "penCount": total_data,
                            "filter": [],
                            "data": [],
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                else:
                    response_data = {
                        "message": "data not found",
                        "data": [],
                    }
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class PrdocuctGetPortion(APIView):
    """
    --------------Api for get all food portion inside store app(only for store app)-----------
    """

    @swagger_auto_schema(
        method="get",
        tags=["Product List"],
        operation_description="Api for get all food products portion store app(only for store app)",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="centralProductId",
                default="5f228662ba1d26a62b7c9215",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product from which product we need to get the details",
            ),
            openapi.Parameter(
                name="childProductId",
                default="5f228663ba1d26a62b7c9217",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product from which product we need to get the details",
            ),
            openapi.Parameter(
                name="storeId",
                default="5ef9fa329d1d6f213d8a351a",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id of the product from which product we need to get the details",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            review_data = []
            query = []
            should_query = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"

            # ========================================query parameter====================================================
            # for the search the item in search bar
            central_product_id = request.GET.get("centralProductId", "")
            child_product_id = request.GET.get("childProductId", "")
            store_id = request.GET.get("storeId", "")
            if central_product_id == "":
                response = {"message": "central product id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            elif child_product_id == "":
                response = {"message": "child product id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            elif store_id == "":
                response = {"message": "store id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            else:
                query = {
                    "parentProductId": central_product_id,
                    "status": {"$in": [1, 2]},
                    "storeId": ObjectId(store_id),
                }
                product_details = db.childProducts.find(query)
                if product_details.count() > 0:
                    try:
                        for res_data in product_details:
                            attr_list_data = []
                            product_name = (
                                res_data["units"][0]["unitName"][language]
                                if language in res_data["units"][0]["unitName"]
                                else res_data["units"][0]["unitName"]["en"]
                            )
                            currency = res_data["currency"]
                            currency_symbol = res_data["currencySymbol"]
                            if "nextAvailableTime" in res_data:
                                if res_data["nextAvailableTime"] != "":
                                    product_status = True
                                    next_available_time = res_data["nextAvailableTime"]
                                    next_open_time = int(next_available_time)
                                    local_time = datetime.datetime.fromtimestamp(next_open_time)
                                    next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                    next_day_midnight = next_day.replace(
                                        hour=23, minute=59, second=59
                                    )
                                    next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                                    if next_day_midnight_timestamp < next_open_time:
                                        open_time = local_time.strftime("%b %d %Y, %I:%M %p")
                                        product_tag = "Available On " + open_time
                                    else:
                                        open_time = local_time.strftime("%I:%M %p")
                                        product_tag = "Next available at " + open_time + " tomorrow"
                                else:
                                    product_status = False
                                    next_available_time = ""
                                    product_tag = ""
                            else:
                                product_status = False
                                next_available_time = ""
                                product_tag = ""

                            offers_details = []
                            if "offer" in res_data:
                                for offer in res_data["offer"]:
                                    if "offerFor" in offer:
                                        if offer["status"] == 1:
                                            offer_query = {
                                                "_id": ObjectId(offer["offerId"]),
                                                "status": 1,
                                            }
                                            offer_count = db.offers.find_one(offer_query)
                                            if offer_count is not None:
                                                if offer_count["startDateTime"] <= int(time.time()):
                                                    offers_details.append(offer)
                                                else:
                                                    pass
                                            else:
                                                pass
                                        else:
                                            pass
                                    else:
                                        pass
                            else:
                                pass

                            # =============================================end==============================
                            if len(offers_details) > 0:
                                best_offer = max(offers_details, key=lambda x: x["discountValue"])
                                offer_details = db.offers.find(
                                    {"_id": ObjectId(best_offer["offerId"]), "status": 1}
                                ).count()
                                if offer_details != 0:
                                    best_offer = best_offer
                                else:
                                    best_offer = {}
                            else:
                                best_offer = {}

                            if len(best_offer) == 0:
                                percentage = 0
                                discount_value = 0
                                discount_type = 0
                            else:
                                if "discountType" in best_offer:
                                    discount_value = int(best_offer["discountValue"])
                                    if best_offer["discountType"] == 0:
                                        percentage = 0
                                        discount_type = 0
                                    else:
                                        percentage = int(best_offer["discountValue"])
                                        discount_type = best_offer["discountType"]
                                else:
                                    percentage = 0
                                    discount_type = 0
                                    discount_value = 0

                            if len(best_offer) > 0:
                                discount_type = (
                                    int(best_offer["discountType"])
                                    if "discountType" in best_offer
                                    else 0
                                )
                                discount_value = best_offer["discountValue"]
                            else:
                                discount_type = 2

                            try:
                                base_price = res_data["units"][0]["b2cPricing"][0][
                                    "b2cpriceWithTax"
                                ]
                            except:
                                base_price = res_data["units"][0]["floatValue"]

                            tax_price = 0
                            if base_price == 0 or base_price == "":
                                final_price = 0
                                discount_price = 0
                            else:
                                base_price = base_price + ((base_price * tax_price) / 100)
                                if int(discount_type) == 0:
                                    discount_price = float(discount_value)
                                elif int(discount_type) == 1:
                                    discount_price = (
                                                             float(base_price) * float(discount_value)
                                                     ) / 100
                                else:
                                    discount_price = 0
                                final_price = base_price - discount_price

                            final_price_list = {
                                "basePrice": base_price,
                                "finalPrice": final_price,
                                "discountPrice": discount_price,
                                "discountPercentage": percentage,
                            }
                            try:
                                images = (
                                    res_data["images"][0] if "images" in res_data["images"] else {}
                                )
                            except:
                                images = {}

                            child_product = db.childProducts.find_one(
                                {"_id": ObjectId(res_data["_id"])}, {"units": 1, "images": 1}
                            )
                            if child_product != None:
                                available_qty = (
                                    child_product["units"][0]["availableQuantity"]
                                    if "availableQuantity" in child_product["units"][0]
                                    else 0
                                )
                                if available_qty == 0:
                                    try:
                                        available_qty = (
                                            child_product["units"][0]["availableQuantity"]
                                            if "availableQuantity"
                                               in child_product["units"][0]["seller"]
                                            else 0
                                        )
                                    except:
                                        available_qty = 0
                                if len(images) == 0:
                                    try:
                                        images = (
                                            child_product["units"][0]["image"][0]
                                            if "image" in child_product["units"]
                                            else {}
                                        )
                                    except:
                                        images = {}
                                    if len(images) == 0:
                                        try:
                                            images = (
                                                child_product["images"][0]
                                                if "images" in child_product
                                                else {}
                                            )
                                        except:
                                            images = {}

                            else:
                                try:
                                    available_qty = (
                                        res_data["_source"]["units"][0]["availableQuantity"]
                                        if "availableQuantity" in res_data["_source"]["units"][0]
                                        else 0
                                    )
                                except:
                                    available_qty = 0

                            if res_data["b2cbulkPackingEnabled"] == 0:
                                mou_data = ""
                            else:
                                if "en" in res_data["b2cpackingPackageType"]:
                                    package_type = res_data["b2cpackingPackageType"]["en"]
                                else:
                                    package_type = ""
                                mou_data = package_type

                            if mou_data != "":
                                available_qty = str(available_qty) + " " + mou_data
                            else:
                                available_qty = str(available_qty) + " Pcs"

                            # ==============================attribute data===================================
                            for attr in res_data["units"][0]["attributes"]:
                                if "attrlist" in attr:
                                    for attr_list in attr["attrlist"]:
                                        if "linkedtounit" in attr_list:
                                            if attr_list["linkedtounit"] == 1:
                                                if type(attr_list["value"]) == dict:
                                                    measurement_unit = (
                                                        attr_list["measurementUnit"]
                                                        if "measurementUnit" in attr_list
                                                        else ""
                                                    )
                                                    attr_list_data.append(
                                                        {
                                                            "attrname": attr_list["attrname"]["en"],
                                                            "value": str(attr_list["value"]["en"])
                                                                     + " "
                                                                     + measurement_unit,
                                                        }
                                                    )
                            # ================================for colour=====================================
                            if "colorName" in res_data["units"][0]:
                                if res_data["units"][0]["colorName"] != "":
                                    attr_list_data.append(
                                        {
                                            "attrname": "Color",
                                            "value": res_data["units"][0]["colorName"],
                                        }
                                    )
                            else:
                                pass

                            # ================================for size=====================================
                            if "unitSizeGroupValue" in res_data["units"][0]:
                                if len(res_data["units"][0]["unitSizeGroupValue"]) != 0:
                                    if res_data["units"][0]["unitSizeGroupValue"]["en"] != "":
                                        attr_list_data.append(
                                            {
                                                "attrname": "Size",
                                                "value": res_data["units"][0]["unitSizeGroupValue"][
                                                    "en"
                                                ],
                                            }
                                        )

                                    else:
                                        pass
                                else:
                                    pass
                            else:
                                pass

                            review_data.append(
                                {
                                    "parentProductId": res_data["parentProductId"],
                                    "childProductId": str(res_data["_id"]),
                                    "images": images,
                                    "attributeData": attr_list_data,
                                    "productStatus": product_status,
                                    "productTag": product_tag,
                                    "productName": product_name,
                                    "availableStock": available_qty,
                                    "status": res_data["status"],
                                    "currency": res_data["currency"],
                                    "currencySymbol": res_data["currencySymbol"],
                                    "nextAvailableTime": next_available_time,
                                    "finalPriceList": final_price_list,
                                    "offer": best_offer,
                                }
                            )

                        if len(review_data) > 0:
                            response_data = {
                                "message": "data found",
                                "data": review_data,
                            }
                            return JsonResponse(response_data, safe=False, status=200)
                        else:
                            response_data = {
                                "message": "data not found",
                                "data": [],
                            }
                            return JsonResponse(response_data, safe=False, status=404)
                    except Exception as ex:
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print(
                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                            type(ex).__name__,
                            ex,
                        )
                        response_data = {
                            "message": "data not found",
                            "filter": [],
                            "data": [],
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                else:
                    response_data = {
                        "message": "data not found",
                        "data": [],
                    }
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class PrdocuctGetProductStockDetails(APIView):
    """
    --------------Api for get product stock details inside store app(only for store app)-----------
    """

    @swagger_auto_schema(
        method="get",
        tags=["Product List"],
        operation_description="Api for get product stock details inside store app(only for store app)",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="centralProductId",
                default="5f6099beb0aeafde5b8e19a1",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="central product id of the product from which product we need to get the details",
            ),
            openapi.Parameter(
                name="childProductId",
                default="5f609bffb0aeafde5b8e19b5",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product from which product we need to get the details",
            ),
            openapi.Parameter(
                name="storeId",
                default="5ed0a60c7bdc2f0cc3f1729e",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="store id of the product from which product we need to get the details",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            review_data = []
            query = []
            should_query = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"

            # ========================================query parameter====================================================
            # for the search the item in search bar
            central_product_id = request.GET.get("centralProductId", "")
            child_product_id = request.GET.get("childProductId", "")
            store_id = request.GET.get("storeId", "")
            if central_product_id == "":
                response = {"message": "central product id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            elif child_product_id == "":
                response = {"message": "child product id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            elif store_id == "":
                response = {"message": "store id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            else:
                query = {"_id": ObjectId(child_product_id), "storeId": ObjectId(store_id)}
                product_details = db.childProducts.find_one(query)
                inventory_details = []
                from_zone = tz.gettz("UTC")
                to_zone = tz.gettz("Asia/Kolkata")
                if product_details != None:
                    # try:
                    product_name = (
                        product_details["units"][0]["unitName"][language]
                        if language in product_details["units"][0]["unitName"]
                        else product_details["units"][0]["unitName"]["en"]
                    )
                    currency = product_details["currency"]
                    currency_symbol = product_details["currencySymbol"]

                    try:
                        available_qty = (
                            product_details["units"][0]["availableQuantity"]
                            if "availableQuantity" in product_details["units"][0]
                            else 0
                        )
                        inventory_data = (
                            product_details["inventoryData"]
                            if "inventoryData" in product_details
                            else []
                        )
                        if len(inventory_data) > 0:
                            newlist = sorted(inventory_data, key=lambda k: k["_id"], reverse=False)
                        else:
                            newlist = []
                        if available_qty == 0:
                            try:
                                available_qty = (
                                    product_details["units"][0]["availableQuantity"]
                                    if "availableQuantity" in product_details["units"][0]["seller"]
                                    else 0
                                )
                            except:
                                available_qty = 0

                        if product_details["b2cbulkPackingEnabled"] == 0:
                            mou_data = ""
                        else:
                            if "en" in product_details["b2cpackingPackageType"]:
                                package_type = product_details["b2cpackingPackageType"]["en"]
                            else:
                                package_type = ""
                            mou_data = package_type
                        if mou_data is None:
                            mou_data = ""
                        stock_details = session.execute(
                            """SELECT * FROM productwiseinventory where childproductid=%(childproductid)s AND inventoryfor=%(inventoryfor)s ALLOW FILTERING""",
                            {"childproductid": child_product_id, "inventoryfor": 0},
                        )

                        product_count = session.execute(
                            """SELECT COUNT(*) FROM productwiseinventory where childproductid=%(childproductid)s AND inventoryfor=%(inventoryfor)s ALLOW FILTERING""",
                            {"childproductid": child_product_id, "inventoryfor": 0},
                        )

                        for count in product_count:
                            for j in count:
                                total_count = j

                        for product in stock_details:
                            try:
                                batch_id = product.batch_id
                            except:
                                batch_id = "DEFAULT"

                            if batch_id is None:
                                batch_id = "DEFAULT"

                            expire_date = ""
                            manufacture_date = ""

                            if batch_id != "":
                                child_product_details = db.childProducts.find_one(
                                    {"_id": ObjectId(product_details["_id"])}, {"inventoryData": 1}
                                )
                                if child_product_details is not None:
                                    if "inventoryData" in child_product_details:
                                        for inventory in child_product_details["inventoryData"]:
                                            if inventory["batchId"] == batch_id:
                                                # ========================manufacture date==================================
                                                mfdate_dt_object = inventory["mfdate"]
                                                if mfdate_dt_object != "":
                                                    mfdate_dt_object = (
                                                        datetime.datetime.fromtimestamp(
                                                            mfdate_dt_object
                                                        )
                                                    )
                                                    mfdate_date_time1 = (mfdate_dt_object).strftime(
                                                        "%d %b %Y %H:%M:%S %p"
                                                    )
                                                    mfdate_date_time1 = datetime.datetime.strptime(
                                                        mfdate_date_time1, "%d %b %Y %H:%M:%S %p"
                                                    )
                                                    mfdate_utc = mfdate_date_time1.replace(
                                                        tzinfo=from_zone
                                                    )
                                                    mfdate_central = mfdate_utc.astimezone(to_zone)
                                                    manufacture_date = (mfdate_central).strftime(
                                                        "%d %b %Y"
                                                    )
                                                else:
                                                    manufacture_date = ""
                                                # ========================exp date==================================
                                                if inventory["expdate"] != "":
                                                    expdate_dt_object = inventory["expdate"]
                                                    expdate_dt_object = (
                                                        datetime.datetime.fromtimestamp(
                                                            expdate_dt_object
                                                        )
                                                    )
                                                    expdate_date_time1 = (
                                                        expdate_dt_object
                                                    ).strftime("%d %b %Y %H:%M:%S %p")
                                                    expdate_date_time1 = datetime.datetime.strptime(
                                                        expdate_date_time1, "%d %b %Y %H:%M:%S %p"
                                                    )
                                                    expdate_utc = expdate_date_time1.replace(
                                                        tzinfo=from_zone
                                                    )
                                                    expdate_central = expdate_utc.astimezone(
                                                        to_zone
                                                    )
                                                    expire_date = (expdate_central).strftime(
                                                        "%d %b %Y"
                                                    )
                                                else:
                                                    expire_date = ""
                                            else:
                                                pass
                                    else:
                                        expire_date = ""
                                        manufacture_date = ""
                                else:
                                    expire_date = ""
                                    manufacture_date = ""
                            else:
                                expire_date = ""
                                manufacture_date = ""

                            format = "%Y-%m-%d %H:%M:%S"
                            date_object = datetime.datetime.strptime(
                                str(product.createdtimestamp).replace("T", ""), format
                            )
                            from_zone = tz.gettz("UTC")
                            to_zone = tz.gettz("Asia/Kolkata")
                            date_time1 = date_object.strftime("%Y-%m-%d %H:%M:%S %p")
                            date_time1 = datetime.datetime.strptime(
                                date_time1, "%Y-%m-%d %H:%M:%S %p"
                            )
                            utc = date_time1.replace(tzinfo=from_zone)
                            central = utc.astimezone(to_zone)
                            inventory_details.append(
                                {
                                    "qty": str(product.qty) + " " + mou_data,
                                    "reason": product.reason,
                                    "orderId": product.order_id,
                                    "expireDate": expire_date,
                                    "manufactureDate": manufacture_date,
                                    "notes": product.reason,
                                    "batchId": batch_id,
                                    "createdtimestamp": (central).strftime("%Y-%m-%d %H:%M:%S %p"),
                                    "triggertype": product.triggertype,
                                    "triggerText": "Product Added"
                                    if int(product.triggertype) == 1
                                    else "Product Removed",
                                }
                            )
                        review_data.append(
                            {
                                "parentProductId": product_details["parentProductId"],
                                "childProductId": str(product_details["_id"]),
                                "productName": product_name,
                                "inventoryList": newlist,
                                "batchDetails": product_details["batchDetails"]
                                if "batchDetails" in product_details
                                else False,
                                "availableStock": str(available_qty) + " " + mou_data,
                                "currency": product_details["currency"],
                                "currencySymbol": product_details["currencySymbol"],
                                "inventoryData": inventory_details,
                                "allowOrderOutOfStock": product_details["allowOrderOutOfStock"]
                                if "allowOrderOutOfStock" in product_details
                                else False,
                            }
                        )
                        if len(review_data) > 0:
                            response_data = {
                                "message": "data found",
                                "data": review_data,
                            }
                            return JsonResponse(response_data, safe=False, status=200)
                        else:
                            response_data = {
                                "message": "data not found",
                                "data": [],
                            }
                            return JsonResponse(response_data, safe=False, status=404)
                    except Exception as ex:
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print(
                            "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                            type(ex).__name__,
                            ex,
                        )
                        response_data = {
                            "message": "data not found",
                            "filter": [],
                            "data": [],
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                else:
                    response_data = {
                        "message": "data not found",
                        "data": [],
                    }
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class ProductLinkStores(APIView):
    """
    --------------Api for get product linked seller for the dc)-----------
    """

    @swagger_auto_schema(
        method="get",
        tags=["Product List"],
        operation_description="Api for get product stock details inside store app(only for store app)",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="childProductId",
                default="5fc6289e973e6a6345e68df5",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product from which product we need to get the details",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            review_data = []
            query = []
            should_query = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"

            # ========================================query parameter====================================================
            # for the search the item in search bar
            child_product_id = request.GET.get("childProductId", "")
            store_id = request.GET.get("storeId", "")
            if child_product_id == "":
                response = {"message": "child product id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            else:
                query = {"_id": ObjectId(child_product_id)}
                product_details = db.childProducts.find_one(query)
                seller_details = []
                if product_details is not None:
                    if "seller" in product_details:
                        for seller in product_details["seller"]:
                            seller["price"] = product_details["units"][0]["floatValue"]
                            store_details = db.stores.find_one(
                                {"_id": ObjectId(seller["storeId"])}, {"storeName": 1}
                            )
                            seller["storeName"] = store_details["storeName"]["en"]
                            seller_details.append(seller)
                        if len(seller_details) > 0:
                            dataframe = pd.DataFrame(seller_details)
                            dataframe = dataframe.drop_duplicates(subset="storeId", keep="last")
                            details = dataframe.to_json(orient="records")
                            data = json.loads(details)
                            response_data = {
                                "message": "data found",
                                "data": data,
                            }
                            return JsonResponse(response_data, safe=False, status=200)
                        else:
                            response_data = {
                                "message": "data not found",
                                "data": [],
                            }
                            return JsonResponse(response_data, safe=False, status=404)
                    else:
                        response_data = {
                            "message": "data not found",
                            "data": [],
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                else:
                    response_data = {
                        "message": "data not found",
                        "data": [],
                    }
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class ProductBatch(APIView):
    """
    --------------Api for get product batch details-----------
    """

    @swagger_auto_schema(
        method="get",
        tags=["Product List"],
        operation_description="Api for get product batch details",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="childProductId",
                default="5e00a0fa41856519cd543da8",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product from which product we need to get the details",
            ),
            openapi.Parameter(
                name="batchId",
                default="DEFAULT",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="child product id of the product from which product we need to get the details",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            review_data = []
            query = []
            should_query = []
            language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"

            # ========================================query parameter====================================================
            # for the search the item in search bar
            child_product_id = request.GET.get("childProductId", "")
            batch_id = request.GET.get("batchId", "")
            if child_product_id == "":
                response = {"message": "child product id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            elif batch_id == "":
                response = {"message": "batch id is blank", "data": [], "penCount": 0}
                return JsonResponse(response, safe=False, status=422)
            else:
                query = {"_id": ObjectId(child_product_id), "inventoryData.batchId": batch_id}
                product_details = db.childProducts.find_one(query)
                seller_details = []
                if product_details is not None:
                    if "inventoryData" in product_details:
                        for seller in product_details["inventoryData"]:
                            if seller["batchId"] == batch_id:
                                seller_details.append(
                                    {
                                        "expdate": seller["expdate"],
                                        "mfdate": seller["mfdate"],
                                        "availableQuantity": seller["availableQuantity"],
                                    }
                                )
                            else:
                                pass
                        if len(seller_details) > 0:
                            response_data = {
                                "message": "data found",
                                "data": seller_details,
                            }
                            return JsonResponse(response_data, safe=False, status=200)
                        else:
                            response_data = {
                                "message": "data not found",
                                "data": [],
                            }
                            return JsonResponse(response_data, safe=False, status=404)
                    else:
                        response_data = {
                            "message": "data not found",
                            "data": [],
                        }
                        return JsonResponse(response_data, safe=False, status=404)
                else:
                    response_data = {
                        "message": "data not found",
                        "data": [],
                    }
                    return JsonResponse(response_data, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class PrdocuctSetAvailability(APIView):
    """
    --------------Api for set the avaibility of the product from store app(only for store app)-----------
    """

    @swagger_auto_schema(
        method="patch",
        tags=["Product List"],
        operation_description="API for remove the favourite products from the list for the user",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["centralProductId", "childProductId", "storeId"],
            properties={
                "centralProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="central product id of the product which we need to change the status",
                    default="5f228662ba1d26a62b7c9215",
                    example="5f228662ba1d26a62b7c9215",
                ),
                "childProductId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product which we need to change the status",
                    default="5f228663ba1d26a62b7c9217",
                    example="5f228663ba1d26a62b7c9217",
                ),
                "storeId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="store id of the product from which store we need to change the status",
                    default="5ef9fa329d1d6f213d8a351a",
                    example="5ef9fa329d1d6f213d8a351a",
                ),
                "status": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="status what we need to change. if active that time value is 1 and inactive that time value is 2",
                    default=2,
                    example=2,
                ),
                "allowOrderOutOfStock": openapi.Schema(
                    type=openapi.TYPE_BOOLEAN,
                    description="for the change the type of allowOrderOutOfStock. if going to active value should be True and for inactive value should be False",
                    default=False,
                    example=False,
                ),
                "datetime": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="date and time on which time product will next available. format should be YYYY-MM-DD hour:minut:second",
                    default="2020-08-19 14:00:00",
                    example="2020-10-04 14:00:00",
                ),
            },
        ),
        responses={
            200: "successfully added product in your wishlist",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required feild missing. it might be user missing or product id blank",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["patch"])
    def patch(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {
                    "message": "unauthorized",
                    "totalCount": 0,
                    "data": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                data = request.data
                central_product_id = data["centralProductId"] if "centralProductId" in data else ""
                child_product_id = data["childProductId"] if "childProductId" in data else ""
                store_id = data["storeId"] if "storeId" in data else ""
                status = int(data["status"]) if "status" in data else 2
                if central_product_id == "":
                    response_data = {"message": "central product id is missing"}
                    return JsonResponse(response_data, safe=False, status=422)
                elif child_product_id == "":
                    response_data = {"message": "child product id is missing"}
                    return JsonResponse(response_data, safe=False, status=422)
                elif store_id == "":
                    response_data = {"message": "store id is missing"}
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    child_product_count = db.childProducts.find(
                        {
                            "parentProductId": str(central_product_id),
                            "_id": ObjectId(child_product_id),
                            "storeId": ObjectId(store_id),
                        }
                    ).count()
                    if child_product_count != 0:
                        if status == 1:
                            if "datetime" in data:
                                format_date = datetime.datetime.strptime(
                                    data["datetime"], "%Y-%m-%d %H:%M:%S"
                                )
                                end_date = int(format_date.timestamp())

                                update_query = {"nextAvailableTime": end_date}
                                update_query["status"] = 2
                                if "allowOrderOutOfStock" in data:
                                    update_query["allowOrderOutOfStock"] = data[
                                        "allowOrderOutOfStock"
                                    ]
                                db.childProducts.update(
                                    {
                                        "parentProductId": str(central_product_id),
                                        "_id": ObjectId(child_product_id),
                                        "storeId": ObjectId(store_id),
                                    },
                                    {"$set": update_query},
                                    upsert=False,
                                    multi=False,
                                )
                                try:
                                    res_update = es.update(
                                        index=index_products,
                                        id=str(child_product_id),
                                        doc_type="_doc",
                                        body={"doc": {"nextAvailableTime": end_date, "status": 2}},
                                    )
                                except Exception as ex:
                                    template = (
                                        "An exception of type {0} occurred. Arguments:\n{1!r}"
                                    )
                                    message = template.format(type(ex).__name__, ex.args)
                                    print(
                                        "Error on line {}".format(sys.exc_info()[-1].tb_lineno),
                                        type(ex).__name__,
                                        ex,
                                    )
                            else:
                                response = {"message": "date time is missing"}
                                return JsonResponse(response, safe=False, status=422)
                        else:
                            update_query = {"nextAvailableTime": "", "status": 1}
                            if "allowOrderOutOfStock" in data:
                                update_query["allowOrderOutOfStock"] = data["allowOrderOutOfStock"]
                            db.childProducts.update(
                                {
                                    "parentProductId": str(central_product_id),
                                    "_id": ObjectId(child_product_id),
                                    "storeId": ObjectId(store_id),
                                },
                                {"$set": update_query},
                                upsert=True,
                                multi=False,
                            )
                            try:
                                res_update = es.update(
                                    index=index_products,
                                    id=str(child_product_id),
                                    doc_type="_doc",
                                    body={"doc": {"nextAvailableTime": "", "status": 1}},
                                )
                            except:
                                pass
                        response = {"message": "update successfully"}
                        return JsonResponse(response, safe=False, status=200)
                    else:
                        response = {"message": "product not found"}
                        return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


class PrdocuctStockUpdate(APIView):
    """
    --------------Api for change the stock for product from store app(only for store app)-----------
    """

    @swagger_auto_schema(
        method="post",
        tags=["Product List"],
        operation_description="Api for change the stock for product from store app(only for store app)",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
        ],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["productId", "childProductId", "storeId"],
            properties={
                "productId": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="child product id of the product which we need to change the status",
                    default="5f60792335dd63d011442393",
                    example="5f60792335dd63d011442393",
                ),
                "message": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="message or notes set by the store app",
                    default="Added By Store App",
                    example="Added By Store App",
                ),
                "triggerType": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="trigger for the operation. if adding stock that time value is 1 and removing stock that time value is 2",
                    default=1,
                    example=1,
                ),
                "mfgDate": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="manufacturing date of the batch",
                    default=1610537037,
                    example=1610537037,
                ),
                "expDate": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="expiry date of the batch",
                    default=1610537037,
                    example=1610537037,
                ),
                "qty": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="number of quantity that need to remove or add in product",
                    default=10,
                    example=10,
                ),
            },
        ),
        responses={
            200: "successfully added product in your wishlist",
            401: "Unauthorized. token expired",
            404: "data not found. it might be product not found",
            422: "required feild missing. it might be user missing or product id blank",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["post"])
    def post(self, request):
        try:
            closing_qty = 0
            opening_qty = 0
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            store_type = 0
            inventory_type_data = 0
            if token == "":
                response_data = {
                    "message": "Unauthorized",
                    "inventoryData": [],
                }
                return JsonResponse(response_data, safe=False, status=401)
            data = request.data
            time_stamp = int(datetime.datetime.now().timestamp()) * 1000
            product_id = data["productId"]
            child_product_details_data = db.childProducts.find({"_id": ObjectId(product_id)})
            if child_product_details_data.count() > 0:
                message = data["message"] if "message" in data else "Changed From Store App"
                inventory_json = {
                    "productId": product_id,
                    "qty": data["qty"],
                    "inventoryType": "0",
                    "inventoryFor": "0",
                    "batchId": data["batchId"] if "batchId" in data else "DEFAULT",
                    "sku": "",
                    "expiryDate": data["expDate"] if "expDate" in data else "",
                    "manufactureDate": data["mfgDate"] if "mfgDate" in data else "",
                    "triggerType": int(data["triggerType"]),
                    "userId": "0",
                    "message": message,
                }
                substitue_response = requests.post(
                    PYTHON_PRODUCT_URL + "inventorydata",
                    json=inventory_json,
                    headers={"Authorization": "neel", "language": "en"},
                )
                response = {"message": "Inventory Update Successfully..."}
                return JsonResponse(response, safe=False, status=200)
            else:
                response = {"message": "product not found"}
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "message": message}
            return JsonResponse(error_message, status=500)


class PrdocuctGlobalSearch(APIView):
    """
    --------------Api for get all food products inside store app(only for store app)-----------
    """

    @swagger_auto_schema(
        method="get",
        tags=["Global Search"],
        operation_description="Api for global search",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="q",
                default="",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for the search the item in search bar ex. ni, nik, addi",
            ),
            openapi.Parameter(
                name="lat",
                required=True,
                default="13.05176",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="latitude of the user's location",
            ),
            openapi.Parameter(
                name="long",
                default="77.580448",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="longtitue of the user's location",
            ),
        ],
        responses={
            200: "successfully. review or rating added",
            404: "data not found. it might be user not found, product not found",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            lat = request.GET.get("lat", "0")
            long = request.GET.get("long", "0")
            search = request.GET.get("q", "")
            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            condition = {
                "isDeleted": False,
                "polygons": {
                    "$geoIntersects": {
                        "$geometry": {"type": "Point", "coordinates": [float(long), float(lat)]}
                    }
                },
            }
            zone_details = db.cities.find_one(
                condition,
                {
                    "_id": 1,
                    "cityId": 1,
                    "countryId": 1,
                    "currency": 1,
                    "currencySymbol": 1,
                    "cityName": 1,
                    "state": 1,
                    "laundry": 1,
                    "storeCategory": 1,
                },
            )
            store_category_details = []
            store_json_details = []
            city_id = ""
            if zone_details != None:
                if "storeCategory" in zone_details:
                    for cat in zone_details["storeCategory"]:
                        store_category_details.append(str(cat["storeCategoryId"]))
                else:
                    pass
                city_id = zone_details["cityId"]
            else:
                pass

            if city_id != "":
                store_data = db.stores.find({"cityId": str(city_id)})
                for store in store_data:
                    store_json_details.append(str(store["_id"]))
            should_query = []

            # =========================================product name=============================================
            should_query.append(
                {
                    "match_phrase_prefix": {
                        "pPName.en": {
                            "analyzer": "standard",
                            "query": search.replace("%20", " "),
                            "boost": 6,
                        }
                    }
                }
            )
            should_query.append(
                {"match": {"pPName.en": {"query": search.replace("%20", " "), "boost": 6}}}
            )
            # ======================================unit name============================================
            should_query.append(
                {
                    "match_phrase_prefix": {
                        "units.unitName.en": {
                            "analyzer": "standard",
                            "query": search.replace("%20", " "),
                            "boost": 5,
                        }
                    }
                }
            )
            should_query.append(
                {"match": {"units.unitName.en": {"query": search.replace("%20", " "), "boost": 5}}}
            )
            # ===========================================detail description============================
            should_query.append(
                {
                    "match": {
                        "detailDescription."
                        + language: {"query": search.replace("%20", " "), "boost": 4}
                    }
                }
            )
            should_query.append(
                {
                    "match_phrase_prefix": {
                        "detailDescription."
                        + language: {"query": search.replace("%20", " "), "boost": 4}
                    }
                }
            )
            # ====================================child category=======================================
            should_query.append(
                {
                    "match": {
                        "categoryList.parentCategory.childCatgory.categoryName."
                        + language: {"query": search.replace("%20", " "), "boost": 3}
                    }
                }
            )
            should_query.append(
                {
                    "match_phrase_prefix": {
                        "categoryList.parentCategory.childCatgory.categoryName."
                        + language: {"query": search.replace("%20", " "), "boost": 3}
                    }
                }
            )
            # ===============================parent category name======================================
            should_query.append(
                {
                    "match": {
                        "categoryList.parentCategory.categoryName."
                        + language: {"query": search.replace("%20", " "), "boost": 2}
                    }
                }
            )
            should_query.append(
                {
                    "match_phrase_prefix": {
                        "categoryList.parentCategory.categoryName."
                        + language: {"query": search.replace("%20", " "), "boost": 2}
                    }
                }
            )
            # ======================================brand name=======================================
            should_query.append(
                {
                    "match": {
                        "brandTitle." + language: {"query": search.replace("%20", " "), "boost": 1}
                    }
                }
            )
            should_query.append(
                {
                    "match_phrase_prefix": {
                        "brandTitle." + language: {"query": search.replace("%20", " "), "boost": 1}
                    }
                }
            )
            if len(store_category_details) > 0:
                category_search_query = {
                    "query": {
                        "bool": {
                            "must_not": [{"match": {"storeId": "0"}}],
                            "must": [
                                {"match": {"status": 1}},
                                {"match": {"units.isPrimary": True}},
                                {"terms": {"storeCategoryId": store_category_details}},
                                {"terms": {"storeId": store_json_details}},
                            ],
                            "should": should_query,
                            "minimum_should_match": 1,
                            "boost": 1.0,
                        }
                    },
                    "aggs": {
                        "group_by_catName": {
                            "terms": {"field": "storeCategoryId.keyword"},
                            "aggs": {
                                "top_hits": {
                                    "terms": {"field": "secondCategoryName.keyword", "size": 6},
                                    "aggs": {
                                        "top_sub_category_hits": {
                                            "top_hits": {
                                                "_source": {
                                                    "includes": [
                                                        "_id",
                                                        "secondCategoryName"
                                                    ]
                                                },
                                                "size": 10,
                                            }
                                        }
                                    },
                                }
                            },
                        }
                    },
                }
                search_query = {
                    "query": {
                        "bool": {
                            "must_not": [{"match": {"storeId": "0"}}],
                            "must": [
                                {"match": {"status": 1}},
                                {"match": {"units.isPrimary": True}},
                                {"terms": {"storeCategoryId": store_category_details}},
                                {"terms": {"storeId": store_json_details}},
                            ],
                            "should": should_query,
                            "minimum_should_match": 1,
                            "boost": 1.0,
                        }
                    },
                    "aggs": {
                        "group_by_catName": {
                            "terms": {"field": "storeCategoryId.keyword"},
                            "aggs": {
                                "top_hits": {
                                    "terms": {"field": "storeId.keyword", "size": 6},
                                    "aggs": {
                                        "top_sub_category_hits": {
                                            "top_hits": {
                                                "_source": {
                                                    "includes": [
                                                        "_id",
                                                        "firstCategoryId",
                                                        "catName",
                                                        "pName",
                                                        "pPName",
                                                        "secondCategoryId",
                                                        "subCatName",
                                                        "thirdCategoryId",
                                                        "subSubCatName",
                                                        "offer",
                                                        "images",
                                                        "avgRating",
                                                        "suppliers",
                                                        "currencySymbol",
                                                        "currency",
                                                        "tax",
                                                        "units",
                                                        "storeCategoryId",
                                                    ]
                                                },
                                                "size": 10,
                                            }
                                        }
                                    },
                                }
                            },
                        }
                    },
                }
                print(search_query)
                res_first_category = es.search(index=index_products, body=category_search_query)
                second_category_name = ""
                try:
                    for cat in res_first_category["aggregations"]["group_by_catName"]['buckets']:
                        for key in cat['top_hits']['buckets']:
                            if key['key'] == "":
                                pass
                            else:
                                if second_category_name != "":
                                    second_category_name = second_category_name + "," + key['key']
                                else:
                                    second_category_name = second_category_name + "," + key['key']
                except:
                    second_category_name = ""
                if second_category_name != "":
                    should_query.append(
                        {
                            "more_like_this": {
                                "fields": [
                                    "pName.en",
                                    "secondCategoryName"
                                ],
                                "like": [
                                    search.replace("%20", " "),
                                    second_category_name
                                ],
                                "boost": 1,
                                "min_term_freq": 1,
                                "max_query_terms": 2
                            }
                        }
                    )
                res = es.search(index=index_products, body=search_query)
                number_count = []
                offers_data = []
                if len(res["aggregations"]["group_by_catName"]["buckets"]) == 0:
                    response = {"data": []}
                    return JsonResponse(response, safe=False, status=404)
                else:
                    pass

                if "group_by_catName" in res["aggregations"]:
                    category_data = []
                    for buckets in res["aggregations"]["group_by_catName"]["buckets"]:
                        store_category_id = buckets["key"]
                        store_json = []
                        store_all_json = []
                        for inner_bucker in buckets["top_hits"]["buckets"]:
                            store_id = inner_bucker["key"]
                            store_details = db.stores.find_one({"_id": ObjectId(store_id)})
                            resData = []
                            recent_data = []
                            try:
                                if store_details != None:
                                    for product in inner_bucker["top_sub_category_hits"]["hits"][
                                        "hits"
                                    ]:
                                        child_product_details = db.childProducts.find_one(
                                            {"_id": ObjectId(product["_id"])}
                                        )
                                        best_supplier = {"id": store_id}
                                        best_supplier["productId"] = product["_id"]
                                        best_supplier["retailerQty"] = (
                                            child_product_details["units"][0]["availableQuantity"]
                                            if "availableQuantity"
                                               in child_product_details["units"][0]
                                            else 0
                                        )
                                        availableQuantity = (
                                            child_product_details["units"][0]["availableQuantity"]
                                            if "availableQuantity"
                                               in child_product_details["units"][0]
                                            else 0
                                        )
                                        if availableQuantity == "":
                                            availableQuantity = 0
                                        best_supplier["distributorQty"] = (
                                            child_product_details["units"][0]["distributor"][
                                                "availableQuantity"
                                            ]
                                            if "distributor" in child_product_details["units"][0]
                                            else 0
                                        )
                                        try:
                                            best_supplier["retailerPrice"] = (
                                                child_product_details["units"][0]["b2cPricing"][0][
                                                    "b2cproductSellingPrice"
                                                ]
                                                if "b2cproductSellingPrice"
                                                   in child_product_details["units"][0]["b2cPricing"][
                                                       0
                                                   ]
                                                else 0
                                            )
                                        except:
                                            best_supplier["retailerPrice"] = child_product_details[
                                                "units"
                                            ][0]["floatValue"]

                                        try:
                                            best_supplier["distributorPrice"] = (
                                                child_product_details["units"][0]["b2bPricing"][0][
                                                    "b2bproductSellingPrice"
                                                ]
                                                if "b2bproductSellingPrice"
                                                   in child_product_details["units"][0]["b2bPricing"][
                                                       0
                                                   ]
                                                else 0
                                            )
                                        except:
                                            best_supplier[
                                                "distributorPrice"
                                            ] = child_product_details["units"][0]["floatValue"]

                                        best_supplier["storeName"] = store_details["storeName"]
                                        offer_details_data = []
                                        offers_details = []
                                        if availableQuantity > 0:
                                            outOfStock = False
                                        else:
                                            outOfStock = True
                                        # ===================================offer data==============================
                                        if "offer" in child_product_details:
                                            for offer in child_product_details["offer"]:
                                                if offer["status"] == 1:
                                                    offer_query = {
                                                        "_id": ObjectId(offer["offerId"]),
                                                        "status": 1,
                                                    }
                                                    offer_data_json = db.offers.find_one(
                                                        offer_query
                                                    )
                                                    if offer_data_json != None:
                                                        if offer_data_json["startDateTime"] <= int(
                                                                time.time()
                                                        ):
                                                            offers_details.append(
                                                                {
                                                                    "offerId": offer["offerId"],
                                                                    "offerName": offer["offerName"][
                                                                        "en"
                                                                    ],
                                                                    "webimages": offer_data_json[
                                                                        "webimages"
                                                                    ]["image"],
                                                                    "mobimage": offer_data_json[
                                                                        "images"
                                                                    ]["image"],
                                                                    "discountValue": offer[
                                                                        "discountValue"
                                                                    ],
                                                                }
                                                            )
                                                else:
                                                    pass
                                        else:
                                            pass
                                        if len(offers_details) > 0:
                                            best_offer = max(
                                                offers_details, key=lambda x: x["discountValue"]
                                            )
                                            offer_details = db.offers.find(
                                                {
                                                    "_id": ObjectId(best_offer["offerId"]),
                                                    "status": 1,
                                                    "storeId": best_supplier["id"],
                                                }
                                            ).count()
                                            if offer_details != 0:
                                                best_offer = best_offer
                                                currdate = datetime.datetime.now().replace(
                                                    hour=23, minute=59, second=59, microsecond=59
                                                )
                                                eastern = timezone(timezonename)
                                                currlocal = eastern.localize(currdate)
                                                best_offer["endDateTimeISO"] = (
                                                        int(((currlocal).timestamp())) * 1000
                                                )
                                            else:
                                                best_offer = {}
                                        else:
                                            best_offer = {}

                                        # ======================================product seo======================================================
                                        if "productSeo" in child_product_details:
                                            try:
                                                if (
                                                        len(child_product_details["productSeo"]["title"])
                                                        > 0
                                                ):
                                                    title = (
                                                        child_product_details["productSeo"]["title"][
                                                            language
                                                        ]
                                                        if language
                                                           in child_product_details["productSeo"]["title"]
                                                        else child_product_details["productSeo"][
                                                            "title"
                                                        ]["en"]
                                                    )
                                                else:
                                                    title = ""
                                            except:
                                                title = ""
                                            try:
                                                if (
                                                        len(
                                                            child_product_details["productSeo"][
                                                                "description"
                                                            ]
                                                        )
                                                        > 0
                                                ):
                                                    description = (
                                                        child_product_details["productSeo"][
                                                            "description"
                                                        ][language]
                                                        if language
                                                           in child_product_details["productSeo"][
                                                               "description"
                                                           ]
                                                        else child_product_details["productSeo"][
                                                            "description"
                                                        ]["en"]
                                                    )
                                                else:
                                                    description = ""
                                            except:
                                                description = ""

                                            try:
                                                if (
                                                        len(child_product_details["productSeo"]["metatags"])
                                                        > 0
                                                ):
                                                    metatags = (
                                                        child_product_details["productSeo"]["metatags"][
                                                            language
                                                        ]
                                                        if language
                                                           in child_product_details["productSeo"][
                                                               "metatags"
                                                           ]
                                                        else child_product_details["productSeo"][
                                                            "metatags"
                                                        ]["en"]
                                                    )
                                                else:
                                                    metatags = ""
                                            except:
                                                metatags = ""

                                            try:
                                                if len(child_product_details["productSeo"]["slug"]) > 0:
                                                    slug = (
                                                        child_product_details["productSeo"]["slug"][
                                                            language
                                                        ]
                                                        if language
                                                           in child_product_details["productSeo"]["slug"]
                                                        else child_product_details["productSeo"][
                                                            "slug"
                                                        ]["en"]
                                                    )
                                                else:
                                                    slug = ""
                                            except:
                                                slug = ""

                                            product_seo = {
                                                "title": title,
                                                "description": description,
                                                "metatags": metatags,
                                                "slug": slug,
                                            }
                                        else:
                                            product_seo = {
                                                "title": "",
                                                "description": "",
                                                "metatags": "",
                                                "slug": "",
                                            }
                                        tax_value = []

                                        # =========================================pharmacy details=========================================
                                        if "prescriptionRequired" in child_product_details:
                                            if child_product_details["prescriptionRequired"] == 0:
                                                prescription_required = False
                                            else:
                                                prescription_required = True
                                        else:
                                            prescription_required = False

                                        if "needsIdProof" in child_product_details:
                                            if child_product_details["needsIdProof"] == False:
                                                needsIdProof = False
                                            else:
                                                needsIdProof = True
                                        else:
                                            needsIdProof = False

                                        if "saleOnline" in child_product_details:
                                            if child_product_details["saleOnline"] == 0:
                                                sales_online = False
                                            else:
                                                sales_online = True
                                        else:
                                            sales_online = False

                                        if "uploadProductDetails" in child_product_details:
                                            upload_details = child_product_details[
                                                "uploadProductDetails"
                                            ]
                                        else:
                                            upload_details = ""

                                        # ==================================================================================================

                                        if len(best_supplier) == 0:
                                            tax_value = []
                                        else:
                                            if child_product_details != None:
                                                try:
                                                    if type(child_product_details["tax"]) == list:
                                                        for tax in child_product_details["tax"]:
                                                            tax_value.append({"value": tax["taxValue"]})
                                                except:
                                                    if child_product_details["tax"] != None:
                                                        if (
                                                                "taxValue"
                                                                in child_product_details["tax"]
                                                        ):
                                                            tax_value.append(
                                                                {
                                                                    "value": child_product_details[
                                                                        "tax"
                                                                    ]["taxValue"]
                                                                }
                                                            )
                                                        else:
                                                            tax_value.append(
                                                                {
                                                                    "value": child_product_details[
                                                                        "tax"
                                                                    ]
                                                                }
                                                            )
                                                    else:
                                                        pass

                                                else:
                                                    if child_product_details["tax"] != None:
                                                        if (
                                                                "taxValue"
                                                                in child_product_details["tax"]
                                                        ):
                                                            tax_value.append(
                                                                {
                                                                    "value": child_product_details[
                                                                        "tax"
                                                                    ]["taxValue"]
                                                                }
                                                            )
                                                        else:
                                                            tax_value.append(
                                                                {
                                                                    "value": child_product_details[
                                                                        "tax"
                                                                    ]
                                                                }
                                                            )
                                                    else:
                                                        pass
                                            else:
                                                tax_value = []

                                        # ========================= for the get the linked the unit data====================================
                                        for link_unit in child_product_details["units"][0][
                                            "attributes"
                                        ]:
                                            try:
                                                for attrlist in link_unit["attrlist"]:
                                                    try:
                                                        if attrlist == None:
                                                            pass
                                                        else:
                                                            if attrlist["linkedtounit"] == 1:
                                                                if (
                                                                        attrlist["measurementUnit"]
                                                                        == ""
                                                                ):
                                                                    attr_name = (
                                                                        attrlist["value"][language]
                                                                        if language
                                                                           in attrlist["value"]
                                                                        else attrlist["value"]["en"]
                                                                    )
                                                                else:
                                                                    attr_name = (
                                                                        attrlist["value"][language]
                                                                        if language
                                                                           in attrlist["value"]
                                                                        else attrlist["value"]["en"]
                                                                             + " "
                                                                             + attrlist[
                                                                                 "measurementUnit"
                                                                             ]
                                                                    )
                                                                variant_data.append(
                                                                    {"value": str(attr_name)}
                                                                )
                                                            else:
                                                                pass
                                                    except:
                                                        pass
                                            except:
                                                pass
                                        # =========================for max quantity=================================================
                                        if "maxQuantity" in child_product_details:
                                            if child_product_details["maxQuantity"] != "":
                                                max_quantity = int(
                                                    child_product_details["maxQuantity"]
                                                )
                                            else:
                                                max_quantity = 30
                                        else:
                                            max_quantity = 30
                                        # ==========================================================================================
                                        if "allowOrderOutOfStock" in child_product_details:
                                            allow_out_of_order = child_product_details[
                                                "allowOrderOutOfStock"
                                            ]
                                        else:
                                            allow_out_of_order = False
                                        try:
                                            mobile_images = child_product_details["images"][0]
                                        except:
                                            mobile_images = child_product_details["images"]

                                        currency_symbol = child_product_details["currencySymbol"]
                                        currency = child_product_details["currency"]
                                        if "productType" in child_product_details:
                                            if child_product_details["productType"] == 2:
                                                combo_product = True
                                            else:
                                                combo_product = False
                                        else:
                                            combo_product = False
                                        # ==========================================================================================
                                        variant_count = validate_variant(
                                            child_product_details["parentProductId"],
                                            best_supplier["id"],
                                            "",
                                            store_category_id,
                                        )
                                        resData.append(
                                            {
                                                "maxQuantity": max_quantity,
                                                "childProductId": product["_id"],
                                                "availableQuantity": availableQuantity,
                                                "productName": child_product_details["pName"][
                                                    language
                                                ]
                                                if language in child_product_details["pName"]
                                                else child_product_details["pName"]["en"],
                                                "parentProductId": child_product_details[
                                                    "parentProductId"
                                                ],
                                                "suppliers": best_supplier,
                                                "tax": tax_value,
                                                "allowOrderOutOfStock": allow_out_of_order,
                                                "outOfStock": outOfStock,
                                                "variantData": variant_data,
                                                "variantCount": variant_count,
                                                "prescriptionRequired": prescription_required,
                                                "needsIdProof": needsIdProof,
                                                "saleOnline": sales_online,
                                                "uploadProductDetails": upload_details,
                                                "productSeo": product_seo,
                                                "isComboProduct": combo_product,
                                                "brandName": child_product_details["brandTitle"][
                                                    language
                                                ]
                                                if language in child_product_details["brandTitle"]
                                                else child_product_details["brandTitle"]["en"],
                                                "manufactureName": child_product_details[
                                                    "manufactureName"
                                                ][language]
                                                if language
                                                   in child_product_details["manufactureName"]
                                                else "",
                                                "TotalStarRating": child_product_details[
                                                    "avgRating"
                                                ]
                                                if "avgRating" in child_product_details
                                                else 0,
                                                "currencySymbol": currency_symbol,
                                                "currency": currency,
                                                "storeCategoryId": child_product_details[
                                                    "storeCategoryId"
                                                ]
                                                if "storeCategoryId" in child_product_details
                                                else "",
                                                "images": child_product_details["images"],
                                                "mobimages": mobile_images,
                                                "finalPriceList": child_product_details["units"],
                                                "units": child_product_details["units"],
                                                "unitId": product["_id"],
                                                "offer": best_offer,
                                            }
                                        )
                                    if len(resData) > 0:
                                        dataframe = pd.DataFrame(resData)
                                        dataframe["unitsData"] = dataframe.apply(
                                            home_units_data,
                                            lan=language,
                                            sort=0,
                                            status=0,
                                            logintype=1,
                                            store_category_id=store_category_id,
                                            axis=1,
                                            margin_price=True, city_id=""
                                        )
                                        dataframe = dataframe.drop_duplicates(
                                            subset="childProductId", keep="last"
                                        )
                                        details = dataframe.to_json(orient="records")
                                        data = json.loads(details)
                                        print('final len', len(data))
                                        for k in data:
                                            if k["unitsData"]["basePrice"] == 0:
                                                pass
                                            else:
                                                if len(k["offer"]) != 0:
                                                    if "discountType" in k["offer"]:
                                                        if k["offer"]["discountType"] == 0:
                                                            percentage = 0
                                                        else:
                                                            percentage = int(
                                                                k["offer"]["discountValue"]
                                                            )
                                                    else:
                                                        percentage = 0
                                                else:
                                                    percentage = 0
                                                recent_data.append(
                                                    {
                                                        "outOfStock": k["outOfStock"],
                                                        "parentProductId": k["parentProductId"],
                                                        "childProductId": k["childProductId"],
                                                        "productName": k["productName"],
                                                        "maxQuantity": k["maxQuantity"],
                                                        "unitId": k["unitId"],
                                                        "variantData": k["variantData"],
                                                        "availableQuantity": k["availableQuantity"],
                                                        "images": k["images"],
                                                        "offers": k["offer"],
                                                        "brandName": k["brandName"],
                                                        "manufactureName": k["manufactureName"],
                                                        "isComboProduct": k["isComboProduct"]
                                                        if "isComboProduct" in k
                                                        else False,
                                                        "mobimages": k["mobimages"],
                                                        "productSeo": k["productSeo"],
                                                        "variantCount": k["variantCount"],
                                                        "prescriptionRequired": k[
                                                            "prescriptionRequired"
                                                        ],
                                                        "needsIdProof": k["needsIdProof"]
                                                        if "needsIdProof" in k
                                                        else False,
                                                        "saleOnline": k["saleOnline"],
                                                        "uploadProductDetails": k[
                                                            "uploadProductDetails"
                                                        ],
                                                        "variantData": k["variantData"],
                                                        "allowOrderOutOfStock": k[
                                                            "allowOrderOutOfStock"
                                                        ],
                                                        "supplier": k["suppliers"],
                                                        "storeCategoryId": k["storeCategoryId"],
                                                        "discountType": k["offer"]["discountType"]
                                                        if "discountType" in k["offer"]
                                                        else 0,
                                                        "TotalStarRating": k["TotalStarRating"],
                                                        "discountPrice": k["unitsData"][
                                                            "discountPrice"
                                                        ],
                                                        "discountPercentage": percentage,
                                                        "finalPriceList": {
                                                            "basePrice": round(
                                                                k["unitsData"]["basePrice"], 2
                                                            ),
                                                            "finalPrice": round(
                                                                k["unitsData"]["finalPrice"], 2
                                                            ),
                                                            "discountPrice": round(
                                                                k["unitsData"]["discountPrice"], 2
                                                            ),
                                                            "discountPercentage": percentage,
                                                        },
                                                        "currencySymbol": k["currencySymbol"],
                                                        "currency": k["currency"],
                                                        "mouData": {
                                                            "mou": "",  # k['unitsData']['mou'],
                                                            "mouUnit": "",
                                                            "mouQty": 0,
                                                            "minimumPurchaseUnit": "",
                                                        },
                                                    }
                                                )
                                    else:
                                        pass
                                    if len(recent_data) > 0:
                                        cusine_name = ""
                                        avg_rating_value = 0
                                        seller_rating = db.sellerReviewRatings.aggregate(
                                            [
                                                {
                                                    "$match": {
                                                        "sellerId": str(store_details["_id"]),
                                                        "rating": {"$ne": 0},
                                                        "status": 1,
                                                    }
                                                },
                                                {
                                                    "$group": {
                                                        "_id": "$sellerId",
                                                        "avgRating": {"$avg": "$rating"},
                                                    }
                                                },
                                            ]
                                        )
                                        for avg_rating in seller_rating:
                                            avg_rating_value = avg_rating["avgRating"]

                                        try:
                                            store_lat = float(
                                                store_details["businessLocationAddress"]["lat"]
                                            )
                                            store_long = float(
                                                store_details["businessLocationAddress"]["long"]
                                            )
                                            distance_km, distance_miles = calculate_distance(
                                                lat, long, store_lat, store_long
                                            )
                                        except:
                                            distance_km, distance_miles = 0, 0

                                        if "averageCostForMealForTwo" in store_details:
                                            cost_for_two = store_details["averageCostForMealForTwo"]
                                        else:
                                            cost_for_two = 0

                                        if "storeIsOpen" in store_details:
                                            store_is_open = store_details["storeIsOpen"]
                                        else:
                                            store_is_open = False

                                        if "nextCloseTime" in store_details:
                                            next_close_time = store_details["nextCloseTime"]
                                        else:
                                            next_close_time = ""

                                        if "nextOpenTime" in store_details:
                                            next_open_time = store_details["nextOpenTime"]
                                        else:
                                            next_open_time = ""

                                        if next_close_time == "" and next_open_time == "":
                                            store_tag = "Temporarily Closed"
                                        elif next_open_time != "" and store_is_open == False:
                                            next_open_time = int(next_open_time + timezone * 60)
                                            local_time = datetime.datetime.fromtimestamp(
                                                next_open_time
                                            )
                                            next_day = datetime.datetime.now() + datetime.timedelta(
                                                days=1
                                            )
                                            next_day_midnight = next_day.replace(
                                                hour=0, minute=0, second=0
                                            )
                                            next_day_midnight_timestamp = int(
                                                next_day_midnight.timestamp()
                                            )
                                            if next_day_midnight_timestamp > next_open_time:
                                                open_time = local_time.strftime("%I:%M %p")
                                                store_tag = "Opens Next At " + open_time
                                            else:
                                                open_time = local_time.strftime("%I:%M %p")
                                                store_tag = "Opens Tomorrow At " + open_time
                                        else:
                                            store_tag = ""
                                        try:
                                            store_listing = store_details['storeListing']
                                            hyper_local = store_detail['hyperlocal']
                                        except Exception as e:
                                            print(e)
                                            store_listing = False
                                            hyper_detail = True
                                        store_json.append(
                                            {
                                                "storeId": store_id,
                                                "storeName": store_details["storeName"]["en"],
                                                "products": recent_data,
                                                "logoImages": store_details["logoImages"],
                                                "avgRating": round(avg_rating_value, 2),
                                                "storeListing": store_listing,
                                                "hyperlocal": hyper_detail,
                                                "averageCostForMealForTwo": cost_for_two,
                                                "currencyCode": store_details["currencyCode"]
                                                if "currencyCode" in store_details
                                                else "INR",
                                                "currencySymbol": store_details["currencySymbol"]
                                                if "currencySymbol" in store_details
                                                else "₹",
                                                "distanceKm": round(distance_km, 2),
                                                "storeTag": store_tag,
                                                "distanceMiles": distance_miles,
                                                "minimumOrder": store_details["minimumOrder"],
                                                "averageDeliveryTimeInMins": store_details[
                                                    "averageDeliveryTimeInMins"
                                                ]
                                                if "averageDeliveryTimeInMins" in store_details
                                                else 0,
                                                "nextCloseTime": next_close_time,
                                                "nextOpenTime": next_open_time,
                                                "storeIsOpen": store_is_open,
                                            }
                                        )
                                        if "specialities" in store_details:
                                            if len(store_details["specialities"]):
                                                for spec in store_details["specialities"]:
                                                    spec_data = db.specialities.find_one(
                                                        {"_id": ObjectId(spec)}, {"specialityName": 1, "image": 1}
                                                    )
                                        if spec_data != None:
                                            if cusine_name == "":
                                                cusine_name = (
                                                    spec_data["specialityName"][language]
                                                    if language in spec_data["specialityName"]
                                                    else spec_data["specialityName"]["en"]
                                                )
                                            else:
                                                cusine_name = (
                                                    cusine_name
                                                    + ", "
                                                    + spec_data["specialityName"][language]
                                                    if language in spec_data["specialityName"]
                                                    else spec_data["specialityName"]["en"]
                                                )
                                        else:
                                            pass
                                        store_all_json.append(
                                            {
                                                "storeId": store_id,
                                                "storeName": store_details["storeName"]["en"],
                                                "logoImages": store_details["logoImages"],
                                                "avgRating": round(avg_rating_value, 2),
                                                "averageCostForMealForTwo": cost_for_two,
                                                "storeListing": store_listing,
                                                "hyperlocal": hyper_detail,
                                                "currencyCode": store_details["currencyCode"]
                                                if "currencyCode" in store_details
                                                else "INR",
                                                "currencySymbol": store_details["currencySymbol"]
                                                if "currencySymbol" in store_details
                                                else "₹",
                                                "distanceKm": round(distance_km, 2),
                                                "storeTag": store_tag,
                                                "distanceMiles": distance_miles,
                                                "minimumOrder": store_details["minimumOrder"],
                                                "averageDeliveryTimeInMins": store_details[
                                                    "averageDeliveryTimeInMins"
                                                ]
                                                if "averageDeliveryTimeInMins" in store_details
                                                else 0,
                                                "nextCloseTime": next_close_time,
                                                "nextOpenTime": next_open_time,
                                                "storeIsOpen": store_is_open,
                                                "city":store_details["businessLocationAddress"]["city"] if "city" in store_details["businessLocationAddress"] else "",
                                                "addressArea":store_details["businessLocationAddress"]["addressArea"] if "addressArea" in store_details["businessLocationAddress"] else "",
                                                "cuisines":cusine_name
                                            }
                                        )
                                    else:
                                        pass
                            except Exception as e:
                                print(e)
                                pass
                        if len(store_json) > 0:
                            store_category_details = db.storeCategory.find_one(
                                {"_id": ObjectId(store_category_id)}
                            )
                            try:
                                type = store_category_details['type']
                            except:
                                type = None
                            category_data.append(
                                {
                                    "categoryId": store_category_id,
                                    "type": type,
                                    "categoryName": store_category_details["storeCategoryName"][
                                        "en"
                                    ],
                                    "storeListing": store_category_details['storeListing'],
                                    "storeData": store_all_json,
                                    "productData": store_json,
                                }
                            )
                        else:
                            pass
                    if len(category_data) > 0:
                        response = {
                            "data": category_data,
                            "message": "data found",
                        }
                        return JsonResponse(response, safe=False, status=200)
                    else:
                        response = {
                            "data": [],
                            "message": "data not found",
                        }
                        return JsonResponse(response, safe=False, status=404)
                else:
                    response = {
                        "data": [],
                        "message": "data not found",
                    }
                    return JsonResponse(response, safe=False, status=404)
            else:
                response = {
                    "data": [],
                    "message": "data not found",
                }
                return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            response_data = {
                "message": message,
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=500)


"""
    API for validate batch
    :parameters
        --> name
        --> productId
"""


class ValidateBatch(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Batch Validation"],
        operation_description="Api for batch validation",
        required=["AUTHORIZATION"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="name",
                required=True,
                default="DEFAULT",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="batch id for which batch need to verify",
            ),
            openapi.Parameter(
                name="productId",
                required=True,
                default="5edbbff92de0c35d0a2a5bba",
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="product id for which product need to verify",
            ),
        ],
        responses={
            200: "successfully.",
            404: "data not found.",
            401: "Unauthorized. token expired",
            422: "Feilds are missing. required Feilds are missing",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {"message": "Unauthorized"}
                return JsonResponse(response_data, safe=False, status=401)
            else:
                name = request.GET.get("name", "")
                name = name.replace("%20", " ")
                name = name.replace("%26", "&")
                name = name.replace("%2F", "/")
                product_id = request.GET.get("productId", "")
                if name == "":
                    response_data = {"message": "batch is missing"}
                    return JsonResponse(response_data, safe=False, status=422)
                elif product_id == "":
                    response_data = {"message": "product id is missing"}
                    return JsonResponse(response_data, safe=False, status=422)
                else:
                    mongo_query = {"_id": ObjectId(product_id)}
                    mongo_query["inventoryData.batchId"] = {"$regex": name, "$options": "i"}
                    data_count = db.childProducts.find_one(mongo_query)
                    if data_count is None:
                        response = {"message": "batch not found", "data": []}
                        return JsonResponse(response, safe=False, status=404)
                    else:
                        delete_batch = []
                        batch_details = []
                        for batch in data_count["inventoryData"]:
                            if batch["batchId"] == name:
                                if batch["status"] != 2:
                                    batch_details.append(batch)
                                else:
                                    pass
                            else:
                                pass
                        if len(batch_details) > 0:
                            response = {"message": "batch found", "data": batch_details}
                            return JsonResponse(response, safe=False, status=200)
                        else:
                            response = {"message": "batch not found", "data": []}
                            return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error_message = {"error": "Invalid request", "total_count": 0, "message": message}
            return JsonResponse(error_message, status=500)


"""
API to get product ids and other data based on slug
"""


class SlugDetails(APIView):
    def get(self, request):
        """
        This api gives all data that is needed to call product details and page product listing page
        :param request: slug of product
        :return:
        """
        ##### getting slug from query parameter ######
        try:
            token = request.META.get("HTTP_AUTHORIZATION", "")
            if token == "":
                response_data = {"message": "Unauthorized"}
                return JsonResponse(response_data, safe=False, status=401)

            product_slug = request.GET.get("slug", "")
            if product_slug == "":
                return JsonResponse({"message": "slug is missing or empty"}, status=404)
            latitude = request.META.get("HTTP_LATITUDE", "")
            if latitude == "":
                return JsonResponse({"message": "latitude is missing or empty"}, status=404)
            longitude = request.META.get("HTTP_LONGITUDE", "")
            if longitude == "":
                return JsonResponse({"message": "longitude is missing or empty"}, status=404)
            language = request.META.get("HTTP_LANGUAGE", "")

            ##### check if /product/ is present in product slug, trim it #####
            if "/product/" in product_slug:
                product_slug = product_slug.split("/product/")[-1]

            ##### query database to get product data ######
            query = {"url_rewrite.custom_url.{}".format(language): product_slug}
            product_data = db.childProducts.find_one(query)
            if product_data is None:
                return JsonResponse({"message": "product not found"}, status=404)

            ##### -------------------------------processing data ------------------------------------ #####
            product_id = str(product_data["_id"])
            parentProductId = product_data["parentProductId"]

            ##### get zone id from lat long #####
            condition = {
                "status": 1,
                "storeId": 0,
                "polygons": {
                    "$geoIntersects": {
                        "$geometry": {
                            "type": "Point",
                            "coordinates": [float(longitude), float(latitude)],
                        }
                    }
                },
            }
            zone_details = db.zones.find_one(
                condition,
                {"_id": 1, "city_ID": 1, "city": 1, "currency": 1, "currencySymbol": 1, "title": 1},
            )
            if zone_details is None:
                return JsonResponse({"message": "zone details not found in database"}, status=404)
            zone_id = str(zone_details["_id"])
            cityName = zone_details["city"]
            cityId = zone_details["city_ID"]

            response_data = {
                "unitName": product_data["units"][0]["unitName"][language].strip(),
                "productId": product_id,
                "parentProductId": parentProductId,
                "zoneId": zone_id,
                "cityId": cityId,
                "cityName": cityName,
                "productSeo": {}
                if "productSeo" not in product_data
                else product_data["productSeo"],
                "images": product_data["units"][0]["image"],
                "detailDescription": product_data["detailDescription"],
                "storeId": "" if "storeId" not in product_data else str(product_data["storeId"]),
            }

            final_response = {"message": "data found", "data": response_data}
            return JsonResponse(final_response, status=200)
        except:
            traceback.print_exc()
            return JsonResponse({"message": "internal server error"}, status=500)

''' API for Get all store Detail which have selected category '''
class CategoryStoreDetail(APIView):
    def get(self, request):
        token = request.META.get("HTTP_AUTHORIZATION", "")
        if token == "":
            response_data = {"message": "Unauthorized"}
            return JsonResponse(response_data, safe=False, status=401)
        else:
            try:
                user_id = json.loads(token)["userId"]
            except Exception as e:
                print(e)
                user_id = ""
            category_id = request.GET.get("categoryId", "")
            store_category_id = request.GET.get("storeCategoreyId", "")
            zone_id = request.GET.get("zoneId", "")
            language = request.META['HTTP_LANGUAGE'] if 'HTTP_LANGUAGE' in request.META else "en"
            store_category_id = request.GET.get("storeCategoryId", "")
            page = request.GET.get("page", 0)
            if store_category_id == "":
                response_data = {"message": "category not found"}
                return JsonResponse(response_data, status=404)
            else:
                try:
                    skip = int(page)
                    limit = skip + 5
                except:
                    skip = 0
                    limit = 5
                if category_id != "":
                    category_data = db.category.find_one({"_id": ObjectId(category_id)})
                    if category_data is None:
                        response_data = {"message": "category not found"}
                        return JsonResponse(response_data, status=404)
                    elif 'storeid' not in category_data:
                        response_data = {"message": "No store found in for this category"}
                        return JsonResponse(response_data, status=404)
                    elif len(category_data['storeid']) == 0:
                        response_data = {"message": "No store avaiable in for this category"}
                        return JsonResponse(response_data, status=412)
                    elif zone_id == "":
                        response_data = {"message": "zone Data not found"}
                        return JsonResponse(response_data, status=412)
                    store_data = list(set(category_data['storeid']))
                else:
                    store_data = []
                    category_data = db.stores.find({'status':1, "categoryId": store_category_id}).skip(skip).limit(limit)
                    for stc in category_data:
                        store_data.append(str(stc['_id']))
                open_store = []
                close_store = []
                temporary_close = []
                fav_open = []
                fav_tem_close = []
                fav_close = []
                final_response = {"message": "data found"}

                for data in store_data:
                    try:
                        if data != "0":
                            store = db.stores.find_one({"_id": ObjectId(str(data)), "status": 1, "serviceZones.zoneId": zone_id})
                            spe_data = []
                            spe_name = []
                            if store is not None:
                                try:
                                    payment_methode = db.cities.find_one({"_id": ObjectId(store['cityId'])})
                                    if payment_methode is None:
                                        payment_methode = {}
                                except:
                                    payment_methode = []
                                paymentMethode =  {
                                        "serviceCard": True if 'card' in payment_methode and payment_methode['card'] == "1" else False,
                                        "serviceCash": True if 'cash' in payment_methode and payment_methode['cash'] == "1"  else False,
                                        "servicePrePaymentCard": False,
                                        "serviceWallet": True if 'wallet' in payment_methode and payment_methode['wallet'] == "1"  else False,
                                    }
                                if "favouriteUsers" in store and user_id in store['favouriteUsers']:
                                    if user_id != "":
                                        if store['storeIsOpen'] == True:
                                            ''' get store data'''
                                            for spe in list(set(store['specialities'])):
                                                spe_data.append(ObjectId(spe))
                                            specialities = db.specialities.find({"_id":{"$in":spe_data}})
                                            for s_data in specialities:
                                                spe_name.append(s_data['specialityName'][language])
                                            contact_phone = store['contactPhone']['countryCode'] + " " + store['contactPhone']['number']
                                            avg_rating_value = 0
                                            seller_rating = db.sellerReviewRatings.aggregate(
                                                [
                                                    {
                                                        "$match": {
                                                            "sellerId": str(store["_id"]),
                                                            "status": 1,
                                                            "rating": {"$ne": 0},
                                                        }
                                                    },
                                                    {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                                                ]
                                            )
                                            for avg_rating in seller_rating:
                                                avg_rating_value = avg_rating["avgRating"]
                                            fav_open.append({
                                                "id": str(store['_id']),
                                                "storeName": store['storeName'][language] if language in store['storeName'] else store['storeName']["en"],
                                                "logoImages": store['logoImages'],
                                                "businessLocationAddress": store[
                                                    'businessLocationAddress'] if "businessLocationAddress" in store else {},
                                                "billingAddress": store[
                                                    'billingAddress'] if 'billingAddress' in store else {},
                                                "headOffice": store['headOffice'] if 'headOffice' in store else {},
                                                "paymentMethode": paymentMethode,
                                                "isExpressDelivery": store['isExpressDelivery'] if "isExpressDelivery" in store else 0,
                                                "specialities": spe_name,
                                                "phoneNumber": contact_phone,
                                                "nextOpen": "",
                                                "avgRating": round(avg_rating_value, 2),
                                                "minimumOrderValue": store['minimumOrder'] if 'minimumOrder' in store else 0,
                                                'currency': store['currencyCode'] if 'currencyCode' in store else "INR"
                                            })
                                        else:
                                            ''' closed store '''
                                            if store['nextCloseTime'] == "" and store['nextOpenTime'] == "":
                                                ''' temporory close '''
                                                for spe in list(set(store['specialities'])):
                                                    spe_data.append(ObjectId(spe))
                                                specialities = db.specialities.find({"_id": {"$in": spe_data}})
                                                for s_data in specialities:
                                                    spe_name.append(s_data['specialityName'][language])
                                                contact_phone = store['contactPhone']['countryCode'] + " " + store['contactPhone'][
                                                    'number']
                                                avg_rating_value = 0
                                                seller_rating = db.sellerReviewRatings.aggregate(
                                                    [
                                                        {
                                                            "$match": {
                                                                "sellerId": str(store["_id"]),
                                                                "status": 1,
                                                                "rating": {"$ne": 0},
                                                            }
                                                        },
                                                        {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                                                    ]
                                                )
                                                for avg_rating in seller_rating:
                                                    avg_rating_value = avg_rating["avgRating"]
                                                fav_tem_close.append({
                                                    "id": str(store['_id']),
                                                    "storeName": store['storeName'][language] if language in store['storeName'] else
                                                    store['storeName']["en"],
                                                    "logoImages": store['logoImages'],
                                                    "businessLocationAddress": store[
                                                        'businessLocationAddress'] if "businessLocationAddress" in store else {},
                                                    "billingAddress": store[
                                                        'billingAddress'] if 'billingAddress' in store else {},
                                                    "headOffice": store['headOffice'] if 'headOffice' in store else {},
                                                    "paymentMethode": payment_methode[
                                                        'paymentMode'] if payment_methode != {} and "paymentMode" in payment_methode else {},
                                                    "isExpressDelivery": store[
                                                        'isExpressDelivery'] if "isExpressDelivery" in store else 0,
                                                    "specialities": spe_name,
                                                    "phoneNumber": contact_phone,
                                                    "nextOpen": "",
                                                    "avgRating": round(avg_rating_value, 2),
                                                    "minimumOrderValue": store['minimumOrder'] if 'minimumOrder' in store else 0,
                                                    'currency': store['currencyCode'] if 'currencyCode' in store else "INR"
                                                })
                                            elif store['nextOpenTime'] != "":
                                                avg_rating_value = 0
                                                seller_rating = db.sellerReviewRatings.aggregate(
                                                    [
                                                        {
                                                            "$match": {
                                                                "sellerId": str(store["_id"]),
                                                                "status": 1,
                                                                "rating": {"$ne": 0},
                                                            }
                                                        },
                                                        {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                                                    ]
                                                )
                                                for avg_rating in seller_rating:
                                                    avg_rating_value = avg_rating["avgRating"]
                                                for spe in list(set(store['specialities'])):
                                                    spe_data.append(ObjectId(spe))
                                                specialities = db.specialities.find({"_id": {"$in": spe_data}})
                                                for s_data in specialities:
                                                    spe_name.append(s_data['specialityName'][language])
                                                contact_phone = store['contactPhone']['countryCode'] + " " + store['contactPhone'][
                                                    'number']
                                                timeZoneWorkingHour = store['timeZoneWorkingHour']
                                                next_open_time = store['nextOpenTime']
                                                next_open_time = time_zone_converter(timezone, next_open_time, timeZoneWorkingHour)
                                                local_time = datetime.datetime.fromtimestamp(next_open_time)
                                                next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                                next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                                                next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                                                store_tag = ""
                                                if next_day_midnight_timestamp > next_open_time:
                                                    open_time = local_time.strftime("%I:%M %p")
                                                    store_tag = "Opens Next At " + open_time
                                                else:
                                                    open_time = local_time.strftime("%I:%M %p")
                                                    store_tag = "Opens Tomorrow At " + open_time
                                                fav_close.append({
                                                    "id": str(store['_id']),
                                                    "storeName": store['storeName'][language] if language in store['storeName'] else
                                                    store['storeName']["en"],
                                                    "logoImages": store['logoImages'],
                                                    "isExpressDelivery": store[
                                                        'isExpressDelivery'] if "isExpressDelivery" in store else 0,
                                                    "specialities": spe_name,
                                                    "businessLocationAddress": store[
                                                        'businessLocationAddress'] if "businessLocationAddress" in store else {},
                                                    "billingAddress": store[
                                                        'billingAddress'] if 'billingAddress' in store else {},
                                                    "headOffice": store['headOffice'] if 'headOffice' in store else {},
                                                    "paymentMethode": payment_methode[
                                                        'paymentMode'] if payment_methode != {} and "paymentMode" in payment_methode else {},
                                                    "phoneNumber": contact_phone,
                                                    "nextOpen": store_tag,
                                                    "avgRating": round(avg_rating_value, 2),
                                                    "minimumOrderValue": store['minimumOrder'] if 'minimumOrder' in store else 0,
                                                    'currency': store['currencyCode'] if 'currencyCode' in store else "INR"
                                                })
                                            else:
                                                pass
                                    else:
                                        pass
                                else:
                                    if store['storeIsOpen'] == True:
                                        ''' get store data'''
                                        avg_rating_value = 0
                                        seller_rating = db.sellerReviewRatings.aggregate(
                                            [
                                                {
                                                    "$match": {
                                                        "sellerId": str(store["_id"]),
                                                        "status": 1,
                                                        "rating": {"$ne": 0},
                                                    }
                                                },
                                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                                            ]
                                        )
                                        for avg_rating in seller_rating:
                                            avg_rating_value = avg_rating["avgRating"]
                                        for spe in list(set(store['specialities'])):
                                            spe_data.append(ObjectId(spe))
                                        specialities = db.specialities.find({"_id":{"$in":spe_data}})
                                        for s_data in specialities:
                                            spe_name.append(s_data['specialityName'][language])
                                        contact_phone = store['contactPhone']['countryCode'] + " " + store['contactPhone']['number']
                                        open_store.append({
                                            "id": str(store['_id']),
                                            "storeName": store['storeName'][language] if language in store['storeName'] else store['storeName']["en"],
                                            "logoImages": store['logoImages'],
                                            "isExpressDelivery": store['isExpressDelivery'] if "isExpressDelivery" in store else 0,
                                            "specialities": spe_name,
                                            "businessLocationAddress": store[
                                                'businessLocationAddress'] if "businessLocationAddress" in store else {},
                                            "billingAddress": store[
                                                'billingAddress'] if 'billingAddress' in store else {},
                                            "headOffice": store['headOffice'] if 'headOffice' in store else {},
                                            "paymentMethode": payment_methode[
                                                'paymentMode'] if payment_methode != {} and "paymentMode" in payment_methode else {},
                                            "phoneNumber": contact_phone,
                                            "nextOpen": "",
                                            "avgRating": round(avg_rating_value, 2),
                                            "minimumOrderValue": store['minimumOrder'] if 'minimumOrder' in store else 0,
                                            'currency': store['currencyCode'] if 'currencyCode' in store else "INR"
                                        })
                                    else:
                                        ''' closed store '''
                                        if store['nextCloseTime'] == "" and store['nextOpenTime'] == "":
                                            ''' temporory close '''
                                            avg_rating_value = 0
                                            seller_rating = db.sellerReviewRatings.aggregate(
                                                [
                                                    {
                                                        "$match": {
                                                            "sellerId": str(store["_id"]),
                                                            "status": 1,
                                                            "rating": {"$ne": 0},
                                                        }
                                                    },
                                                    {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                                                ]
                                            )
                                            for avg_rating in seller_rating:
                                                avg_rating_value = avg_rating["avgRating"]
                                            for spe in list(set(store['specialities'])):
                                                spe_data.append(ObjectId(spe))
                                            specialities = db.specialities.find({"_id": {"$in": spe_data}})
                                            for s_data in specialities:
                                                spe_name.append(s_data['specialityName'][language])
                                            contact_phone = store['contactPhone']['countryCode'] + " " + store['contactPhone'][
                                                'number']

                                            temporary_close.append({
                                                "id": str(store['_id']),
                                                "storeName": store['storeName'][language] if language in store['storeName'] else
                                                store['storeName']["en"],
                                                "logoImages": store['logoImages'],
                                                "isExpressDelivery": store[
                                                    'isExpressDelivery'] if "isExpressDelivery" in store else 0,
                                                "specialities": spe_name,
                                                "businessLocationAddress": store[
                                                    'businessLocationAddress'] if "businessLocationAddress" in store else {},
                                                "billingAddress": store[
                                                    'billingAddress'] if 'billingAddress' in store else {},
                                                "headOffice": store['headOffice'] if 'headOffice' in store else {},
                                                "paymentMethode": paymentMethode,
                                                "phoneNumber": contact_phone,
                                                "nextOpen": "",
                                                "avgRating": round(avg_rating_value, 2),
                                                "minimumOrderValue": store['minimumOrder'] if 'minimumOrder' in store else 0,
                                                'currency': store['currencyCode'] if 'currencyCode' in store else "INR"
                                            })
                                        elif store['nextOpenTime'] != "":
                                            avg_rating_value = 0
                                            seller_rating = db.sellerReviewRatings.aggregate(
                                                [
                                                    {
                                                        "$match": {
                                                            "sellerId": str(store["_id"]),
                                                            "status": 1,
                                                            "rating": {"$ne": 0},
                                                        }
                                                    },
                                                    {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}}},
                                                ]
                                            )
                                            for avg_rating in seller_rating:
                                                avg_rating_value = avg_rating["avgRating"]
                                            for spe in list(set(store['specialities'])):
                                                spe_data.append(ObjectId(spe))
                                            specialities = db.specialities.find({"_id": {"$in": spe_data}})
                                            for s_data in specialities:
                                                spe_name.append(s_data['specialityName'][language])
                                            contact_phone = store['contactPhone']['countryCode'] + " " + store['contactPhone'][
                                                'number']
                                            timeZoneWorkingHour = store['timeZoneWorkingHour']
                                            next_open_time = store['nextOpenTime']
                                            next_open_time = time_zone_converter(timezone, next_open_time, timeZoneWorkingHour)
                                            local_time = datetime.datetime.fromtimestamp(next_open_time)
                                            next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                                            next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                                            next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                                            store_tag = ""
                                            if next_day_midnight_timestamp > next_open_time:
                                                open_time = local_time.strftime("%I:%M %p")
                                                store_tag = "Opens Next At " + open_time
                                            else:
                                                open_time = local_time.strftime("%I:%M %p")
                                                store_tag = "Opens Tomorrow At " + open_time
                                            close_store.append({
                                                "id": str(store['_id']),
                                                "storeName": store['storeName'][language] if language in store['storeName'] else
                                                store['storeName']["en"],
                                                "logoImages": store['logoImages'],
                                                "isExpressDelivery": store[
                                                    'isExpressDelivery'] if "isExpressDelivery" in store else 0,
                                                "specialities": spe_name,
                                                "businessLocationAddress": store[
                                                    'businessLocationAddress'] if "businessLocationAddress" in store else {},
                                                "billingAddress": store[
                                                    'billingAddress'] if 'billingAddress' in store else {},
                                                "headOffice": store['headOffice'] if 'headOffice' in store else {},
                                                "paymentMethode": paymentMethode,
                                                "phoneNumber": contact_phone,
                                                "nextOpen": store_tag,
                                                "avgRating": round(avg_rating_value, 2),
                                                "minimumOrderValue": store['minimumOrder'] if 'minimumOrder' in store else 0,
                                                'currency': store['currencyCode'] if 'currencyCode' in store else "INR"
                                            })
                                        else:
                                            pass
                            else:
                                pass
                        else:
                            pass
                    except Exception as ex:
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
                        error_message = {"error": "Invalid request", "total_count": 0, "message": message}
                fav_store = {
                    "openStore": fav_open,
                    "closeStore": fav_close,
                    "temporaryClose": fav_tem_close
                }
                final = {
                    "favirouteStore": fav_store,
                    "openStore": open_store,
                    "closeStore": close_store,
                    "temporaryClose": temporary_close,
                }
                final_response['data'] = final
                return JsonResponse(final_response, status=200)
class HeatMap(APIView):
    def get(self, request):
        token = request.META["HTTP_AUTHORIZATION"]
        lat = request.GET.get("lat", "0")
        long = request.GET.get("long", "0")
        zone_id=request.GET.get("zoneId","")
        if token == "":
            response_data = {"message": "Unauthorized"}
            return JsonResponse(response_data, safe=False, status=401)
        ''' find lat long '''
        if zone_id=="":
            response_data = {"message": "please enter the zone id"}
            return JsonResponse(response_data, safe=False, status=422)
        result = list(db.zones.find({"_id":ObjectId(str(zone_id))}))
        if len(result)>0:
            time_date = db.bookings_rides.find({ "cityId" : ObjectId(str(result[0]["city_ID"]))}, {"pickup": 1})
            if time_date.count() == 0:
                response_data = {'messgae': 'data not found', "data": []}
                return JsonResponse(response_data, status=404)
            else:
                final_data = []
                for data in time_date:
                    final_data.append(
                        data['pickup']['location']
                    )
                response_data = {'messgae': 'data found', "data": final_data}
                return JsonResponse(response_data, status=200)
        else:
            response_data = {'messgae': 'data found', "data": []}
            return JsonResponse(response_data, status=404)

class UnauthorizedProductCategoryList(APIView):
    @swagger_auto_schema(
        method="get",
        tags=["Home Page"],
        operation_description="API for getting the category, sub-category, sub-sub-category",
        required=["AUTHORIZATION", "language"],
        manual_parameters=[
            openapi.Parameter(
                name="Authorization",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                required=True,
                description="authorization token",
            ),
            openapi.Parameter(
                name="language",
                default="en",
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="language",
            ),
            openapi.Parameter(
                name="storeCategoryId",
                default=ECOMMERCE_STORE_CATEGORY_ID,
                required=True,
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store category id for getting the products from only that category(eg. Ecommerce, dine, groccery)",
            ),
            openapi.Parameter(
                name="cityId",
                default="5df7b7218798dc2c1114e6bf",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="fetching the data in particular city",
            ),
            openapi.Parameter(
                name="storeId",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="store id while need paricular store's category otherwise value should be '0'",
            ),
            openapi.Parameter(
                name="zoneId",
                default="5df8b6ea8798dc19d926bd28",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="zone id while need paricular store's category otherwise value should be '0'",
            ),
            openapi.Parameter(
                name="categoryId",
                default="",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="category id while need child category for the parent category",
            ),
            openapi.Parameter(
                name="from",
                default="0",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination from which page data need",
            ),
            openapi.Parameter(
                name="to",
                default="10",
                in_=openapi.IN_HEADER,
                type=openapi.TYPE_STRING,
                description="pagination for how much data need",
            ),
            openapi.Parameter(
                name="integrationType",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="for filter out the products base on product setup configuration, value should be"
                            "0 for All products, "
                            "1 for Only Magento Products, "
                            "2 for Only Shopify Products, "
                            "3 for Only Roadyo or shopar products",
            ),
            openapi.Parameter(
                name="requestFrom",
                default="0",
                required=True,
                in_=openapi.IN_QUERY,
                type=openapi.TYPE_STRING,
                description="from where the request is coming and which services need to give in response. values are 0 for web and 1 for app",
            ),
        ],
        responses={
            200: "successfully. category found or data found",
            404: "data not found. it might be category not found",
            401: "Unauthorized. token expired",
            500: "Internal Server Error. if server is not working that time",
        },
    )
    @action(detail=False, methods=["get"])
    def get(self, request):
        try:
            # -------------------- accepting headers and qeuery parameters ---------------------- #
            lan = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
            store_category_id = str(request.META["HTTP_STORECATEGORYID"])
            store_id = request.META["HTTP_STOREID"] if "HTTP_STOREID" in request.META else ""
            if store_id == "0":
                store_id = request.GET.get("storeId", "")
            zone_id = request.META["HTTP_ZONEID"] if "HTTP_ZONEID" in request.META else ""
            if zone_id == "":
                zone_id = request.GET.get("zoneId", "")
            else:
                pass

            if store_category_id == ECOMMERCE_STORE_CATEGORY_ID:
                store_id = ""
                zone_id = ""
            elif store_category_id == PHARMACY_STORE_CATEGORY_ID:
                store_id = ""
            elif store_id != "0" or store_id != "":
                zone_id = ""
            category_id = (
                request.META["HTTP_CATEGORYID"] if "HTTP_CATEGORYID" in request.META else ""
            )
            city_id = (
                request.META["HTTP_CITYID"]
                if "HTTP_CITYID" in request.META
                else "5df7b7218798dc2c1114e6bf"
            )
            from_data = request.META["HTTP_FROM"] if "HTTP_FROM" in request.META else "0"
            to_data = "40"  # request.META["HTTP_TO"] if "HTTP_TO" in request.META else "20"
            integration_type = int(request.GET.get("integrationType", 0))
            # ================== for the logs============================================================================
            token = ""
            request_from = int(request.GET.get("requestFrom", 0))
            # if token == "":
            #     response_data = {
            #         "message": "unauthorized",
            #         "totalCount": 0,
            #         "data": [],
            #     }
            #     return ResponseHelper.get_status_401(response_data)

            response = OperationHelper.process_category_list_data(
                store_category_id,
                store_id,
                zone_id,
                category_id,
                from_data,
                to_data,
                request_from,
                lan,
                token,
                integration_type,
            )
            return response
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)

class RecommendedProduct(APIView):
    def get(self, request):
        try:
            store_id = request.GET.get('storeId', "")
            if store_id == "":
                response_data = {'message': 'enter store id'}
                return JsonResponse(response_data, status=404)
            product_data = db.childProducts.find({'status': 1, "storeId": ObjectId(str(store_id)), "units.isPrimary": True}).limit(5)
            if product_data is None:
                response_data = {'message': 'product not found'}
                print(response_data, status=404)
            final_data = []
            for product in product_data:
                try:
                    base_price = product['units'][0]['b2cPricing'][0]['b2cproductSellingPrice']
                except:
                    base_price = product['units'][0]['floatValue']
                discount_price = 0.0
                discount_type = 0
                if len(product['offer']) > 0:
                    final_offer = []
                    for offer in product['offer']:
                        if offer['status'] == 1:
                            offer_data = db.offers.find_one({
                                "_id": ObjectId(str(offer['offerId']))
                            })
                            if offer_data != None:
                                if offer_data["startDateTime"] <= int(time.time()):
                                    final_offer.append(offer_data)
                        if len(final_offer) > 0:
                            best_offer = max(
                                final_offer, key=lambda x: x["discountValue"])
                            offer_details = db.offers.find(
                                {"_id": ObjectId(best_offer["_id"]), "status": 1}).count()
                            if offer_details != 0:
                                best_offer = best_offer
                            else:
                                best_offer = {}
                            if len(best_offer) > 0:
                                discount_type = int(
                                    best_offer["discountType"]) if "discountType" in best_offer else 0
                                discount_value = best_offer[
                                    "discountValue"] if "discountValue" in best_offer else 0
                            else:
                                best_offer = {}
                                discount_type = 0
                                discount_value = 0
                        else:
                            best_offer = {}
                            discount_type = 0
                            discount_value = 0
                    if discount_type == 0:
                        discount_price = float(discount_value)
                    elif discount_type == 1:
                        discount_price = float(base_price) * float(discount_value) / 100
                    final_price = base_price - discount_price

                else:
                    final_price = base_price
                price = {
                    "basePrice": base_price,
                    "finalPrice": final_price,
                    "discountPrice": discount_price,
                    "discountType": discount_type
                }
                final_data.append({
                    'id': str(product['_id']),
                    "childProductId": str(product['_id']),
                    "parentProductId": product['parentProductId'],
                    "productName": product['pPName']['en'],
                    "finalPriceList": price,
                    "serviceRequireTime": product['units'][0]['serviceRequireTime'] if 'serviceRequireTime' in product['units'][0] else 0,
                    "image": product['units'][0]['image'] if 'image' in product['units'][0] else ""

                })
            response_data = {"message": 'data found' , 'data': final_data}
            return JsonResponse(response_data, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"data": [], "message": message}
            return JsonResponse(error, safe=False, status=500)

def anil_elastic_process(store_id):
    try:
        print("1111111111111111111111111111111111111111")
        # start_time =time.time()
        productData = []
        recommFilter = []
        must_query = []
        must_query.append({"terms": {"status": [1, 2]}})
        must_query.append({"match": {"storeId": str(store_id)}})
        must_query.append({"match": {"units.isPrimary": True}})
        bool_query = {"must": must_query}
        query = {
            "query": {
                "bool": bool_query
            },
            "aggs": {
                "group_by_catName": {
                    "terms": {
                        "field": "categoryList.parentCategory.categoryName.en.keyword",
                        "size": 100
                    },
                    "aggs": {
                        "top_sales_hits": {
                            "top_hits": {
                                "_source": {
                                    "includes": [
                                        "_id",
                                        "parentProductId",
                                        # "firstCategoryId",
                                        # "catName",
                                        # "secondCategoryId",
                                        # "subCatName",
                                        "childproductid",
                                        "storeId",
                                        # "thirdCategoryId",
                                        "detailDescription",
                                        # "subSubCatName",
                                        "images.small",
                                        # "suppliers",
                                        "containsMeat",
                                        "consumptionTime",
                                        "currencySymbol",
                                        "currency",
                                        "units.b2cPricing",
                                        "units.productTag",
                                        "units.categorySeqId",
                                        "units.productSeqId",
                                        "pName",
                                        "storeCategoryId"
                                    ]
                                },
                                "size": 100,
                                # "sort": [
                                #         {"units.productSeqId": {"order": "asc"}} 
                                #     ]
                                
                            }
                        }
                    }
                }
            }
        }
        
        res = es.search(index=index_products, body=query)
        # print("res",res)
        for bucket in res["aggregations"]["group_by_catName"]["buckets"]:
            product_data = []
            categorySeqId = 0
            for hit in bucket["top_sales_hits"]["hits"]["hits"]:
                source = hit.get("_source", {})
                # print("source",source)
                if source.get("units") and source["units"]:
                    categorySeqId = source["units"][0].get("categorySeqId", -1)
                else:
                    categorySeqId = -1
                
                if source.get("units") and source["units"]:
                    productSeqId = source["units"][0].get("productSeqId", -1)
                else:
                    productSeqId = -1

                flattened_data = {
                    # "_id": hit.get("_id"),
                    "parentProductId": source.get("parentProductId"),
                    # "firstCategoryId": source.get("firstCategoryId"),
                    # "catName": source.get("catName"),
                    # "secondCategoryId": source.get("secondCategoryId"),
                    # "subCatName": source.get("subCatName"),
                    # "childProductId": source.get("_id"),
                    "childProductId": hit.get("_id"),
                    # "storeId": source.get("storeId"),
                    # "thirdCategoryId": source.get("thirdCategoryId"),
                    "detailDescription": source.get("detailDescription", {}).get("en"),
                    # "subSubCatName": source.get("subSubCatName"),
                    "images": source["images"][0]["small"] if source.get("images") else "",
                    # "suppliers": source.get("suppliers"),
                    "containsMeat": source.get("containsMeat"),
                    "consumptionTime": source.get("consumptionTime"),
                    "currencySymbol": source.get("currencySymbol"),
                    "currency": source.get("currency"),
                    "allPrice": source["units"][0]["b2cPricing"] if source.get("units") else [],
                    "productName": source.get("pName", "").get("en"),
                    "storeCategoryId": source.get("storeCategoryId"),
                    "isFavourite":False,
                    "categorySeqId":categorySeqId,
                    "productSeqId":productSeqId,
                }

                # Add 'productTag' if present
                if 'units' in source and 'productTag' in source['units']:
                    flattened_data['productTag'] = source['units']['productTag']
                else:
                    flattened_data['productTag'] = {
                                "isDairyFree" : False,
                                "isPopular" : False,
                                "isSpicy" : False,
                                "isVegan" : False,
                                "isVegetarian" :False,
                            }
                product_data.append(flattened_data)

            productData.append({
                "catName": bucket["key"],
                "categorySeqId":categorySeqId,
                "products": product_data,
                "isSubCategories": False,
                "subCategories": [],
            })
            
            recommFilter.append({
                "catName": bucket["key"],
                "penCount": bucket["doc_count"],
                "categorySeqId":categorySeqId,
            })
                
        total_products = res.get("hits", {}).get("total", {}).get("value", 0)
        if total_products != 0:
            print("adddddddddddddddddddddddddddd")
            response = {
                "storeId": str(store_id),
                "storeData":{},
                "parentCategoryProduct": productData,
                "subCategoryProduct":[],
                "recommFilter": recommFilter,
                "total_products": total_products,
                "recommdedProducts":[],
                "offerData": []
            }
            filter_data = {"storeId": str(store_id)}
            update = {"$set": response}
            db.storeBestProductsNew.update_one(filter_data, update, upsert=True)
        else:
            db.storeBestFailed.insert_one({"s_id": store_id,"reason":str(res)})
            traceback.print_exc()

    except Exception as e:
        print("error in store best products ")
        db.storeBestFailed.insert_one({"s_id": store_id,"reason":str(e)})
        traceback.print_exc()
 
class FoodProductSearch(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META["HTTP_AUTHORIZATION"] if "HTTP_AUTHORIZATION" in request.META else ""
        if token == "":
            response_data = {"message": "Unauthorized"}
            return JsonResponse(response_data, safe=False, status=401)
        try:
            user_id = json.loads(token)["userId"]
            # user_id = "5eb1801d10f43369247407ca"
            print(user_id)
        except:
            user_id = ""
        # if user_id == "":
        #     response_data = {"message": "userId is missing"}
        #     return JsonResponse(response_data, safe=False, status=401)
        store_id = request.GET.get("storeId", "")
        user_id = request.GET.get("userId", "")
        lat = float(request.GET.get("lat", "0"))
        long = float(request.GET.get("long", "0"))
        zone_id = request.GET.get("zoneId", "")
        region_time_zone = request.GET.get("timeZone", "Asia/Calcutta")
        search = request.GET.get("q", "")
        product_data = db.storeBestProductsNew.find_one({'storeId': store_id})
        is_contain_meat = request.GET.get("containsMeat", "")
        
        final_response = {}
        # process_data = threading.Thread(target=anil_elastic_process, args=(store_id,))
        if product_data is None:
            anil_elastic_process(store_id)
            product_data = db.storeBestProductsNew.find_one({'storeId': store_id})

        if product_data is not None:
            if search != "":
                search_type = 4
                try:
                    session_id = json.loads(token)["sessionId"]
                except:
                    session_id = ""
                thread_logs = threading.Thread(
                    target=category_search_logs,
                    args=(
                        "",
                        "",
                        "",
                        str(search_type),
                        user_id,
                        1,
                        "127.0.0.1",
                        lat,
                        long,
                        "",
                        "",
                        search,
                        DINE_STORE_CATEGORY_ID,
                        "",
                        session_id,
                        store_id,
                        False,
                        "",
                        "",
                    ),
                )
                thread_logs.start()
                try:
                    current_time = datetime.datetime.now(pytz.timezone(region_time_zone))
                    current_hour = current_time.hour
                except:
                    current_time = datetime.datetime.now()
                    current_hour = current_time.hour
                check_prodcut_search_data = db.storeBestProductsNew.aggregate([
                    {
                        "$match": {
                            "storeId": store_id
                        }
                    },
                    {
                        "$project": {
                            "subCategoryProduct": 1,
                            "parentCategoryProduct": 1,
                            "storeId": 1
                        }
                    },
                    {
                        "$project": {
                            "storeId": 1,
                            "parentCategoryProduct": {
                                "$map": {
                                    "input": "$parentCategoryProduct",
                                    "as": "parentCat",
                                    "in": {
                                        "catName": "$$parentCat.catName",
                                        "isSubCategories": "$$parentCat.isSubCategories",
                                        "subCategories": "$$parentCat.subCategories",
                                        "products": {
                                            "$filter": {
                                                "input": "$$parentCat.products",
                                                "as": "product",
                                                "cond": {
                                                    "$regexMatch": {
                                                        "input": "$$product.productName",
                                                        "regex": '.*' + search + '*',
                                                        "options": "i"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "$project": {
                            "storeId": 1,
                            "parentCategoryProduct": {
                                "$filter": {
                                    "input": "$parentCategoryProduct",
                                    "as": "cat",
                                    "cond": {
                                        "$gt": [{ "$size": "$$cat.products" }, 0]
                                    }
                                }
                            }
                        }
                    }
                ])
                food_product_data = []
                fav_data = []
                # store_must_query = []
                # distance_km = 0
                # distance_miles = 0
                # store_must_query.append({"match": {"_id": str(store_id)}})
                # geo_distance_sort = {
                #     "_geo_distance": {
                #         "distance_type": "plane",
                #         "location": {"lat": float(lat), "lon": float(long)},
                #         "order": "asc",
                #         "unit": "km",
                #     }
                # }
                # sort_query = [geo_distance_sort]
                # store_must_query.append(
                #     {
                #         "geo_distance": {
                #             "distance": "50km",
                #             "location": {"lat": float(lat), "lon": float(long)},
                #         }
                #     }
                # )
                # store_geo_query = {
                #     "query": {
                #         "bool": {
                #             "must": store_must_query,
                #         }
                #     },
                #     "size": 1,
                #     "from": 0,
                #     "sort": sort_query,
                # }
                # res = es.search(
                #     index=index_store,
                #     body=store_geo_query,
                #     filter_path=[
                #         "hits.total",
                #         "hits.hits._id",
                #         "hits.hits.sort",
                #         "hits.hits._source",
                #     ],
                # )
                # if res["hits"]["total"]["value"] > 0:
                #     if "hits" in res["hits"]:
                #         for seller in res["hits"]["hits"]:
                #             distance_km = round(seller["sort"][0], 2)
                #             distance_miles = round(distance_km * conv_fac, 2)
                #     else:
                #         distance_km = 0
                #         distance_miles = 0
                # else:
                #     distance_km = 0
                #     distance_miles = 0
                # store_data = db.stores.find_one({"_id": ObjectId(store_id)}, {"storeIsOpen":1, "nextCloseTime":1, "nextOpenTime": 1, "favouriteUsers":1})
                # try:
                #     if "storeIsOpen" in store_data:
                #         store_is_open = store_data["storeIsOpen"]
                #     else:
                #         store_is_open = False
                # except:
                #     store_is_open = False

                # try:
                #     if "nextCloseTime" in store_data:
                #         next_close_time = store_data["nextCloseTime"]
                #     else:
                #         next_close_time = ""
                # except:
                #     next_close_time = ""

                # try:
                #     if "nextOpenTime" in store_data:
                #         next_open_time = store_data["nextOpenTime"]
                #     else:
                #         next_open_time = ""
                # except:
                #     next_open_time = ""

                # if next_close_time == "" and next_open_time == "":
                #     is_temp_close = True
                #     store_tag = "Temporarily Closed"
                # elif next_open_time != "" and store_is_open == False:
                #     is_temp_close = False
                #     next_open_time = int(next_open_time + timezone * 60)
                #     local_time = datetime.datetime.fromtimestamp(next_open_time)
                #     next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                #     next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                #     next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                #     if next_day_midnight_timestamp > next_open_time:
                #         open_time = local_time.strftime("%I:%M %p")
                #         store_tag = "Opens Next At " + open_time
                #     else:
                #         open_time = local_time.strftime("%I:%M %p")
                #         store_tag = "Opens Tomorrow At " + open_time
                # else:
                #     is_temp_close = False
                #     store_tag = ""
                # try:
                #     if user_id in store_data['favouriteUsers']:
                #         product_data['storeData']['isFavourite'] = True
                #     else:
                #         product_data['storeData']['isFavourite'] = False
                # except:
                #     product_data['storeData']['isFavourite'] = False
                # product_data['storeData']['storeTag'] = store_tag
                # product_data['storeData']['isTempClose'] = is_temp_close
                # product_data['storeData']['distanceKm'] = distance_km
                # product_data['storeData']['distanceMiles'] = distance_miles
                final_response['storeData'] = {}
                final_response['productData'] = []
                for prodcut_search_data in check_prodcut_search_data:
                    print(prodcut_search_data)
                    if prodcut_search_data is not None:
                        # try:
                            # for sub in prodcut_search_data['subCategoryProduct']:
                            #     if len(sub['subCategories']) > 0:
                            #         for check in sub['subCategories']['products']:
                            #             # for check in p_sub['products']:
                            #             product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                            #             check['productTag'] = product_tag
                            #             check['productStatus'] = product_status
                            #             check['isFavourite'] = isFavourite
                            #             if isFavourite is True:
                            #                 fav_data.append(check)
                            #     food_product_data.append(sub)
                        # except:
                            # for sub in prodcut_search_data['subCategoryProduct'][0]:
                            #     if len(sub['subCategories']) > 0:
                            #         for check in sub['subCategories']['products']:
                            #             # for check in p_sub['products']:
                            #             product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                            #             check['productTag'] = product_tag
                            #             check['productStatus'] = product_status
                            #             check['isFavourite'] = isFavourite
                            #             if isFavourite is True:
                            #                 fav_data.append(check)
                            #     food_product_data.append(sub)
                        # final_response['productData'] = prodcut_search_data['subCategoryProduct']
                        # for sub in prodcut_search_data['parentCategoryProduct']:
                        #     for check in sub['products']:
                        #         product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                        #         check['productTag'] = product_tag
                        #         check['productStatus'] = product_status
                        #         check['isFavourite'] = isFavourite
                        #         if isFavourite is True:
                        #             fav_data.append(check)
                        #     food_product_data.append(sub)
                        final_response['productData'] = prodcut_search_data['parentCategoryProduct']
                        final_response['favourite'] = fav_data
                        response_answer = {'message': 'data found', 'data': final_response}
                        print('api exicution time : ', time.time()-start_time)
                        return JsonResponse(response_answer, status=200) 
                    else:
                        response_answer = {'message': 'data not found', 'data': final_response}
                        return JsonResponse(response_answer, status=404) 
                response_answer = {'message': 'data not found', 'data': final_response}
                return JsonResponse(response_answer, status=404)
            elif is_contain_meat != "":
                # store_data = db.stores.find_one({"_id": ObjectId(store_id)}, {"storeIsOpen":1, "nextCloseTime":1, "nextOpenTime": 1, "favouriteUsers":1})
                # try:
                #     if "storeIsOpen" in store_data:
                #         store_is_open = store_data["storeIsOpen"]
                #     else:
                #         store_is_open = False
                # except:
                #     store_is_open = False

                # try:
                #     if "nextCloseTime" in store_data:
                #         next_close_time = store_data["nextCloseTime"]
                #     else:
                #         next_close_time = ""
                # except:
                #     next_close_time = ""

                # try:
                #     if "nextOpenTime" in store_data:
                #         next_open_time = store_data["nextOpenTime"]
                #     else:
                #         next_open_time = ""
                # except:
                #     next_open_time = ""

                # if next_close_time == "" and next_open_time == "":
                #     is_temp_close = True
                #     store_tag = "Temporarily Closed"
                # elif next_open_time != "" and store_is_open == False:
                #     is_temp_close = False
                #     next_open_time = int(next_open_time + timezone * 60)
                #     local_time = datetime.datetime.fromtimestamp(next_open_time)
                #     next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                #     next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                #     next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                #     if next_day_midnight_timestamp > next_open_time:
                #         open_time = local_time.strftime("%I:%M %p")
                #         store_tag = "Opens Next At " + open_time
                #     else:
                #         open_time = local_time.strftime("%I:%M %p")
                #         store_tag = "Opens Tomorrow At " + open_time
                # else:
                #     is_temp_close = False
                #     store_tag = ""
                # try:
                #     current_time = datetime.datetime.now(pytz.timezone(region_time_zone))
                #     current_hour = current_time.hour
                # except:
                #     current_time = datetime.datetime.now()
                #     current_hour = current_time.hour

                # if int(current_hour) >= 0 and int(current_hour) < 5:
                #     current_text = "latenightdinner"
                # elif int(current_hour) >= 5 and int(current_hour) < 10:
                #     current_text = "breakfast"
                # elif int(current_hour) >= 10 and int(current_hour) < 11:
                #     current_text = "brunch"
                # elif int(current_hour) >= 11 and int(current_hour) < 15:
                #     current_text = "lunch"
                # elif int(current_hour) >= 15 and int(current_hour) < 19:
                #     current_text = "tea"
                # else:
                #     current_text = "dinner"
                # store_must_query = []
                # distance_km = 0
                # distance_miles = 0
                # store_must_query.append({"match": {"_id": str(store_id)}})
                # geo_distance_sort = {
                #     "_geo_distance": {
                #         "distance_type": "plane",
                #         "location": {"lat": float(lat), "lon": float(long)},
                #         "order": "asc",
                #         "unit": "km",
                #     }
                # }
                # sort_query = [geo_distance_sort]
                # store_must_query.append(
                #     {
                #         "geo_distance": {
                #             "distance": "50km",
                #             "location": {"lat": float(lat), "lon": float(long)},
                #         }
                #     }
                # )
                # store_geo_query = {
                #     "query": {
                #         "bool": {
                #             "must": store_must_query,
                #         }
                #     },
                #     "size": 1,
                #     "from": 0,
                #     "sort": sort_query,
                # }
                # res = es.search(
                #     index=index_store,
                #     body=store_geo_query,
                #     filter_path=[
                #         "hits.total",
                #         "hits.hits._id",
                #         "hits.hits.sort",
                #         "hits.hits._source",
                #     ],
                # )
                # if res["hits"]["total"]["value"] > 0:
                #     if "hits" in res["hits"]:
                #         for seller in res["hits"]["hits"]:
                #             distance_km = round(seller["sort"][0], 2)
                #             distance_miles = round(distance_km * conv_fac, 2)
                #     else:
                #         distance_km = 0
                #         distance_miles = 0
                # else:
                #     distance_km = 0
                #     distance_miles = 0
                # try:
                #     if user_id in store_data['favouriteUsers']:
                #         product_data['storeData']['isFavourite'] = True
                #     else:
                #         product_data['storeData']['isFavourite'] = False
                # except:
                #     product_data['storeData']['isFavourite'] = False
                # product_data['storeData']['distanceKm'] = distance_km
                # product_data['storeData']['distanceMiles'] = distance_miles
                # product_data['storeData']['storeTag'] = store_tag
                # product_data['storeData']['isTempClose'] = is_temp_close
                final_response['storeData'] ={}
                final_response['productData'] = []
                check_prodcut_search_data = db.storeBestProductsNew.aggregate(
                    [
                        {
                            "$match": {
                                "storeId": store_id
                            }
                        },
                        {
                            "$project": {
                                "subCategoryProduct": 1,
                                "parentCategoryProduct": 1,
                                "storeId": 1
                            }
                        },
                        {
                            "$project": {
                                "storeId": 1,
                                "parentCategoryProduct": {
                                    "$map": {
                                        "input": "$parentCategoryProduct",
                                        "as": "parentCat",
                                        "in": {
                                            "catName": "$$parentCat.catName",
                                            "isSubCategories": "$$parentCat.isSubCategories",
                                            "subCategories": "$$parentCat.subCategories",
                                            "products": {
                                                "$filter": {
                                                    "input": "$$parentCat.products",
                                                    "as": "product",
                                                    "cond": {
                                                        "$eq": ["$$product.productTag.isVegetarian", False]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "$project": {
                                "storeId": 1,
                                "parentCategoryProduct": {
                                    "$filter": {
                                        "input": "$parentCategoryProduct",
                                        "as": "cat",
                                        "cond": {
                                            "$gt": [{ "$size": "$$cat.products" }, 0]
                                        }
                                    }
                                }
                            }
                        }
                    ]

                )
                food_product_data = []
                fav_data = []
                for prodcut_search_data in check_prodcut_search_data:
                    # print(prodcut_search_data)
                    if prodcut_search_data is not None:
                        # try:
                        #     for sub in prodcut_search_data['subCategoryProduct']:
                        #         if len(sub['subCategories']) > 0:
                        #             for check in sub['subCategories']['products']:
                        #                 # for check in p_sub['products']:
                        #                 product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                        #                 check['productTag'] = product_tag
                        #                 check['productStatus'] = product_status
                        #                 check['isFavourite'] = isFavourite
                        #                 if isFavourite is True:
                        #                     fav_data.append(check)
                        #         food_product_data.append(sub)
                        # except:
                            # for sub in prodcut_search_data['subCategoryProduct'][0]:
                            #     if len(sub['subCategories']) > 0:
                            #         for check in sub['subCategories']['products']:
                            #             # for check in p_sub['products']:
                            #             product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                            #             check['productTag'] = product_tag
                            #             check['productStatus'] = product_status
                            #             check['isFavourite'] = isFavourite
                            #             # if isFavourite is True:
                            #             #     fav_data.append(check)
                            #     food_product_data.append(sub)
                        # final_response['productData'] = prodcut_search_data['subCategoryProduct']
                        # for sub in prodcut_search_data['parentCategoryProduct']:
                        #     for check in sub['products']:
                        #         product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                        #         check['productTag'] = product_tag
                        #         check['productStatus'] = product_status
                        #         check['isFavourite'] = isFavourite
                        #         # if isFavourite is True and check['containsMeat'] is False:
                        #         #     fav_data.append(check)
                        #     food_product_data.append(sub)
                        final_response['productData'] = prodcut_search_data['parentCategoryProduct']
                        # if len(fav_data) > 0:
                        #     fav_dataframe = pd.DataFrame(fav_data)
                        #     dataframe = fav_dataframe.drop_duplicates(subset="productName", keep="last")
                        #     fav_list = dataframe.to_dict(orient="records")
                        # else:
                        #     fav_list = []
                        final_response['favourite'] = []
                        # recommded_products = product_data.get('recommdedProducts', [])
                        # new_recom = []
                        # if len(recommded_products) > 0:
                        #     for check in recommded_products[current_text]:
                        #         product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                        #         check['productTag'] = product_tag
                        #         check['productStatus'] = product_status
                        #         check['isFavourite'] = isFavourite
                        #         if check['containsMeat'] is False:
                        #             new_recom.append(check)

                            # recommded_dataframe = pd.DataFrame(p_sub['products'])
                            # recommded_details = json.loads(recommded_dataframe.apply (
                            #     check_fav_product, user_id=user_id, axis=1
                            # ).to_json(orient="records"))
                        # if len(new_recom) > 0:
                        #     dataframe = pd.DataFrame(new_recom)
                        #     dataframe = dataframe.drop_duplicates(subset="productName", keep="last")
                        #     new_recommded_product_list = dataframe.to_dict(orient="records")
                        # else:
                        #     new_recommded_product_list = []
                        # final_response['recommdedProducts'] = []
                        # final_response['offerData'] = []
                        recommded_filter = product_data['recommFilter'] if 'recommFilter' in product_data else []
                        if len(recommded_filter) > 0:
                            dataframe = pd.DataFrame(recommded_filter)
                            dataframe= dataframe.sort_values(by='categorySeqId')
                            dataframe = dataframe.drop_duplicates(subset="catName", keep="last")
                            new_recommded_list = dataframe.to_dict(orient="records")
                        else:
                            new_recommded_list = []
                        final_response['recommFilter'] = new_recommded_list
                        final_response['recommdedProducts'] = []
                        final_response['offerData'] = []
                        response_answer = {'message': 'data found', 'data': final_response}
                        print('api exicution time : ', time.time()-start_time)
                        return JsonResponse(response_answer, status=200) 
                    else:
                        response_answer = {'message': 'data not found', 'data': final_response}
                        return JsonResponse(response_answer, status=404) 
                response_answer = {'message': 'data not found', 'data': final_response}
                return JsonResponse(response_answer, status=404)
            else:
                # if local:
                ''' find current time depend in timezone '''
                # store_data = db.stores.find_one({"_id": ObjectId(store_id)}, {"storeIsOpen":1, "nextCloseTime":1, "nextOpenTime": 1, "favouriteUsers":1})
                # try:
                #     if "storeIsOpen" in store_data:
                #         store_is_open = store_data["storeIsOpen"]
                #     else:
                #         store_is_open = False
                # except:
                #     store_is_open = False

                # try:
                #     if "nextCloseTime" in store_data:
                #         next_close_time = store_data["nextCloseTime"]
                #     else:
                #         next_close_time = ""
                # except:
                #     next_close_time = ""

                # try:
                #     if "nextOpenTime" in store_data:
                #         next_open_time = store_data["nextOpenTime"]
                #     else:
                #         next_open_time = ""
                # except:
                #     next_open_time = ""

                # if next_close_time == "" and next_open_time == "":
                #     is_temp_close = True
                #     store_tag = "Temporarily Closed"
                # elif next_open_time != "" and store_is_open == False:
                #     is_temp_close = False
                #     next_open_time = int(next_open_time + timezone * 60)
                #     local_time = datetime.datetime.fromtimestamp(next_open_time)
                #     next_day = datetime.datetime.now() + datetime.timedelta(days=1)
                #     next_day_midnight = next_day.replace(hour=0, minute=0, second=0)
                #     next_day_midnight_timestamp = int(next_day_midnight.timestamp())
                #     if next_day_midnight_timestamp > next_open_time:
                #         open_time = local_time.strftime("%I:%M %p")
                #         store_tag = "Opens Next At " + open_time
                #     else:
                #         open_time = local_time.strftime("%I:%M %p")
                #         store_tag = "Opens Tomorrow At " + open_time
                # else:
                #     is_temp_close = False
                #     store_tag = ""
                # try:
                #     current_time = datetime.datetime.now(pytz.timezone(region_time_zone))
                #     current_hour = current_time.hour
                # except:
                #     current_time = datetime.datetime.now()
                #     current_hour = current_time.hour

                # if int(current_hour) >= 0 and int(current_hour) < 5:
                #     current_text = "latenightdinner"
                # elif int(current_hour) >= 5 and int(current_hour) < 10:
                #     current_text = "breakfast"
                # elif int(current_hour) >= 10 and int(current_hour) < 11:
                #     current_text = "brunch"
                # elif int(current_hour) >= 11 and int(current_hour) < 15:
                #     current_text = "lunch"
                # elif int(current_hour) >= 15 and int(current_hour) < 19:
                #     current_text = "tea"
                # else:
                #     current_text = "dinner"
                # store_must_query = []
                # distance_km = 0
                # distance_miles = 0
                # store_must_query.append({"match": {"_id": str(store_id)}})
                # geo_distance_sort = {
                #     "_geo_distance": {
                #         "distance_type": "plane",
                #         "location": {"lat": float(lat), "lon": float(long)},
                #         "order": "asc",
                #         "unit": "km",
                #     }
                # }
                # sort_query = [geo_distance_sort]
                # store_must_query.append(
                #     {
                #         "geo_distance": {
                #             "distance": "50km",
                #             "location": {"lat": float(lat), "lon": float(long)},
                #         }
                #     }
                # )
                # store_geo_query = {
                #     "query": {
                #         "bool": {
                #             "must": store_must_query,
                #         }
                #     },
                #     "size": 1,
                #     "from": 0,
                #     "sort": sort_query,
                # }
                # res = es.search(
                #     index=index_store,
                #     body=store_geo_query,
                #     filter_path=[
                #         "hits.total",
                #         "hits.hits._id",
                #         "hits.hits.sort",
                #         "hits.hits._source",
                #     ],
                # )
                # if res["hits"]["total"]["value"] > 0:
                #     if "hits" in res["hits"]:
                #         for seller in res["hits"]["hits"]:
                #             distance_km = round(seller["sort"][0], 2)
                #             distance_miles = round(distance_km * conv_fac, 2)
                #     else:
                #         distance_km = 0
                #         distance_miles = 0
                # else:
                #     distance_km = 0
                #     distance_miles = 0
                # try:
                #     if user_id in store_data['favouriteUsers']:
                #         product_data['storeData']['isFavourite'] = True
                #     else:
                #         product_data['storeData']['isFavourite'] = False
                # except:
                #     product_data['storeData']['isFavourite'] = False
                # product_data['storeData']['distanceKm'] = distance_km
                # product_data['storeData']['distanceMiles'] = distance_miles
                # product_data['storeData']['storeTag'] = store_tag
                # product_data['storeData']['isTempClose'] = is_temp_close
                final_response['storeData'] = {}
                final_response['productData'] = []
                # final_response['favourite'] = []
                ''' find store distance '''
                ''' for subCategory '''
                fav_data = []
                food_product_data =  []
                # if len(product_data['subCategoryProduct']) > 0:
                #     for sub in product_data['subCategoryProduct']:
                #         if len(sub['subCategories']) > 0:
                #             for p_sub in sub['subCategories']:
                #                 for check in p_sub['products']:
                #                     product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                #                     check['productTag'] = product_tag
                #                     check['productStatus'] = product_status
                #                     check['isFavourite'] = isFavourite
                #                     if isFavourite is True:
                #                         fav_data.append(check)
                #         food_product_data.append(sub)
                
                # for sub in product_data['parentCategoryProduct']:
                    # for check in sub['products']:
                    #     product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                    #     check['productTag'] = product_tag
                    #     check['productStatus'] = product_status
                    #     check['isFavourite'] = isFavourite
                    #     if isFavourite is True:
                    #         fav_data.append(check)
                    # food_product_data.append(sub)
                # final_response['productData'] = product_data['parentCategoryProduct']
                df = pd.DataFrame(product_data['parentCategoryProduct'])
                try:
                    df = df.sort_values(by='categorySeqId')
                except:
                    pass
                for category in df.itertuples():
                    try:
                        sorted_products = sorted(category.products, key=lambda x: x.get('productSeqId', float('inf')))
                        df.at[category.Index, 'products'] = sorted_products
                    except KeyError as e:
                        print(f"Error while sorting products in category '{category.catName}': {e}")
                        pass
                sorted_product_data = df.to_dict(orient='records')
                final_response['productData'] = sorted_product_data

                # if len(fav_data) > 0:
                #     fav_dataframe = pd.DataFrame(fav_data)
                #     dataframe = fav_dataframe.drop_duplicates(subset="productName", keep="last")
                #     fav_list = dataframe.to_dict(orient="records")
                # else:
                #     fav_list = []
                final_response['favourite'] = []
                recommded_filter = product_data['recommFilter'] if 'recommFilter' in product_data else []
                if len(recommded_filter) > 0:
                    dataframe = pd.DataFrame(recommded_filter)
                    dataframe= dataframe.sort_values(by='categorySeqId')
                    dataframe = dataframe.drop_duplicates(subset="catName", keep="last")
                    new_recommded_list = dataframe.to_dict(orient="records")
                else:
                    new_recommded_list = []
                final_response['recommFilter'] = new_recommded_list
                # recommded_products = product_data.get('recommdedProducts', [])
                # new_recom = []
                # if len(recommded_products) > 0:
                #     for check in recommded_products[current_text]:
                #         product_tag , product_status , isFavourite = food_product_time_management(check, user_id, current_hour)
                #         check['productTag'] = product_tag
                #         check['productStatus'] = product_status
                #         check['isFavourite'] = isFavourite
                #         new_recom.append(check)

                    # recommded_dataframe = pd.DataFrame(p_sub['products'])
                    # recommded_details = json.loads(recommded_dataframe.apply (
                    #     check_fav_product, user_id=user_id, axis=1
                    # ).to_json(orient="records"))
                # if len(new_recom) > 0:
                #             dataframe = pd.DataFrame(new_recom)
                #             dataframe = dataframe.drop_duplicates(subset="productName", keep="last")
                #             new_recommded_product_list = dataframe.to_dict(orient="records")
                # else:
                #     new_recommded_product_list = []
                final_response['recommdedProducts'] = []
                final_response['offerData'] = []
                if final_response['productData']:
                    response_answer = {'message': 'data found', 'data': final_response}
                    print('api exicution time : ', time.time()-start_time)
                    return JsonResponse(response_answer, status=200)
                
                else:
                    response_answer = {'message': 'data not found', 'data': []}
                    return JsonResponse(response_answer, status=404)
                  
        else:
            response_answer = {'message': 'data not found', 'data': []}
            return JsonResponse(response_answer, status=404)



class FoodProductMeatFilter(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META["HTTP_AUTHORIZATION"] if "HTTP_AUTHORIZATION" in request.META else ""
        if token == "":
            response_data = {"message": "Unauthorized"}
            return JsonResponse(response_data, safe=False, status=401)
        try:
            user_id = json.loads(token)["userId"]
            # user_id = "5eb1801d10f43369247407ca"
            print(user_id)
        except:
            user_id = ""
        if user_id == "":
            response_data = {"message": "userId is missing"}
            return JsonResponse(response_data, safe=False, status=401)
        store_id = request.GET.get("storeId", "")
        contains_meat = int(request.GET.get("containsMeat", 0))
        lat = float(request.GET.get("lat", "0"))
        long = float(request.GET.get("long", "0"))
        zone_id = request.GET.get("zoneId", "")
        region_time_zone = request.GET.get("timeZone", "Asia/Calcutta")

        if contains_meat != "":
            if contains_meat == 1:
                contains_meat = True
            else:
                contains_meat = False

        check_product_meat_data = db.storeBestProductsNew.aggregate([
            {
                "$match": {
                    "storeId": store_id,
                    "$or": [
                        {
                            "subCategoryProduct.subCategories.products.containsMeat": contains_meat
                        },
                        {
                            "parentCategoryProduct.subCategories.products.containsMeat": contains_meat
                        }
                    ]
                }
            },
            {
                "$project": {"subCategoryProduct": 1, "parentCategoryProduct": 1}
            },
            {
                "$project": {
                    "_id": 0,
                }
            }
        ])
        print("containsMeat", contains_meat)
        meat_data = []
        final_response = {"productData": []}
        for prodcut_search_data in check_product_meat_data:
            # print(prodcut_search_data)
            if prodcut_search_data is not None:
                if len(prodcut_search_data['subCategoryProduct']) > 0:
                    for sub in prodcut_search_data['subCategoryProduct']:
                        if len(sub['subCategories']) > 0:
                            for check in sub['subCategories']:
                                for check1 in check['products']:
                                    if check1["containsMeat"] == contains_meat:
                                        meat_data.append(check1)
                                check['products'] = meat_data
                    final_response['productData'] = final_response['productData'] + prodcut_search_data[
                        'subCategoryProduct']
                for sub in prodcut_search_data['parentCategoryProduct']:
                    if len(sub['subCategories']) > 0:
                        for check in sub['subCategories']:
                            for check1 in check['products']:
                                if check1["containsMeat"] == contains_meat:
                                    meat_data.append(check1)
                            check['products'] = meat_data
                final_response['productData'] = final_response['productData'] + prodcut_search_data[
                    'subCategoryProduct']

                response_answer = {'message': 'data found', 'data': final_response}
                print('api exicution time : ', time.time() - start_time)
                return JsonResponse(response_answer, status=200)

            else:
                response_answer = {'message': 'data not found', 'data': final_response}
                return JsonResponse(response_answer, status=404)
        response_answer = {'message': 'data found' if len(final_response) > 0 else 'data not found',
                           'data': final_response}
        print('api exicution time : ', time.time() - start_time)
        return JsonResponse(response_answer, status=200)


class AllStoreSearch(APIView):
    ''' This API is used for getting a list of stores according to the store name through searching '''
    def get(self, request):
        token = request.META["HTTP_AUTHORIZATION"] if 'HTTP_AUTHORIZATION' in request.META else ""
        language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
        start_time = time.time()
        
        if token == "":
            response_data = {
                "message": "unauthorized",
            }
            return JsonResponse(response_data, safe=False, status=401)
        try:
            user_id = json.loads(token)["userId"]
        except Exception as e:
            print(e)
            user_id = ""
        if user_id == "":
            user_id = request.GET.get('userId', "")
        
        user_lat = float(request.GET.get("lat", 0))
        user_long = float(request.GET.get("long", 0))
        
        try:
            skip = int(request.GET.get('skip', "0"))
            limit = int(request.GET.get('limit', "10"))
        except:
            skip = 0
            limit = 10
            
        store_name = request.GET.get('storeName', "")
        store_name = store_name.replace("%20", " ")
        store_name = store_name.replace("%2D", "'")
        
        try:
            ''' find all Store '''
            query = {'status': 1}
            if store_name:
                query["storeName.en"] = {"$regex": "^"+str(store_name), "$options": "i"}

            # Define the aggregation pipeline
            pipeline = [
                {
                    "$geoNear": {
                        "near": {
                            "type": "Point",
                            "coordinates": [user_long, user_lat]  # Correct order: [longitude, latitude]
                        },
                        "distanceField": "distance",
                        "spherical": True
                    }
                },
                {"$match": query},  # Use the query for filtering documents
                {
                    "$sort": {
                        "distance": 1
                    }
                },
                {"$facet": {
                    "stores": [  # Retrieve paginated list of stores
                        {"$skip": skip},
                        {"$limit": limit}
                    ],
                    "totalCount": [  # Count the total number of matching stores
                        {"$count": "count"}
                    ]
                }}
            ]
            print("query",pipeline)
            all_store_cursor = db.stores.aggregate(pipeline)
            final_list = []
            store_count = 0  # Initialize store_count variable

            print('query execution time:', time.time() - start_time)

            # Iterate over the cursor to extract results
            for result in all_store_cursor:
                store_count = result.get("totalCount", [])[0]['count'] if result.get("totalCount", []) else 0
                final_list_stores = result.get("stores", [])
                break  # Exit loop after processing the first result

            if not final_list_stores:
                response_data = {'message': 'No store found', 'data': [], "count": 0}
                return JsonResponse(response_data, status=404)

            for store in final_list_stores:
                try:
                    store_name = (
                        store["storeName"][language]
                        if language in store["storeName"]
                        else store["storeName"]["en"]
                    )
                    store_id = str(store["_id"])
                    try:
                        store_lat = float(store["businessLocationAddress"]["lat"]) if "businessLocationAddress" in store else 0
                        store_long = float(store["businessLocationAddress"]["long"]) if "businessLocationAddress" in store else 0
                        address = store["businessLocationAddress"]["address"] if "businessLocationAddress" in store else ""
                        addressArea = store["businessLocationAddress"]["addressArea"] if "addressArea" in store["businessLocationAddress"] else ""
                        locality = store["businessLocationAddress"]["locality"] if "locality" in store["businessLocationAddress"] else ""
                        post_code = store["businessLocationAddress"]["postCode"] if "postCode" in store["businessLocationAddress"] else ""
                        state = store["businessLocationAddress"]["state"] if "state" in store["businessLocationAddress"] else ""
                        country = store["businessLocationAddress"]["country"] if "country" in store["businessLocationAddress"] else ""
                        city = store["businessLocationAddress"]["city"] if "city" in store["businessLocationAddress"] else ""
                    except:
                        store_lat = 0
                        store_long = 0
                        address = ""
                        addressArea = ""
                        locality = ""
                        post_code = ""
                        state = ""
                        country = ""
                        city = ""
                    
                    # ============================query for get the distance by geo query==============
                    try:
                        store_lat = float(store["businessLocationAddress"]["lat"])
                        store_lon = float(store["businessLocationAddress"]["long"])
                    except:
                        store_lat = 0.0
                        store_lon = 0.0
                    distance_km = geodesic((user_lat, user_long), (store_lat, store_lon)).kilometers
                    # Convert distance to miles
                    distance_miles = distance_km * 0.621371
                    # ===================================for the cuisines=============================================
                    cuisine_name = ""   
                    if "averageCostForMealForTwo" in store:
                        cost_for_two = store["averageCostForMealForTwo"]
                    else:
                        cost_for_two = 0
                    
                    # =====================================about store tags=================================
                    if "storeIsOpen" in store:
                        store_is_open = store["storeIsOpen"]
                    else:
                        store_is_open = False
                    
                    if "nextCloseTime" in store:
                        next_close_time = store["nextCloseTime"]
                    else:
                        next_close_time = ""
                    
                    if "nextOpenTime" in store:
                        next_open_time = store["nextOpenTime"]
                    else:
                        next_open_time = ""
                    
                    try:
                        timeZoneWorkingHour = store["timeZoneWorkingHour"] if "timeZoneWorkingHour" in store else ""
                    except:
                        timeZoneWorkingHour = ""
                    
                    is_delivery = False
                    next_open_time = ""
                    next_close_time = ""
                    # store_is_open = False
                    store_tag = "Does Not Deliver To Selected Location"
                    
                    if "shopifyStoreDetails" in store:
                        if "enable" in store["shopifyStoreDetails"]:
                            shopify_enable = store["shopifyStoreDetails"]["enable"]
                        else:
                            shopify_enable = False
                    else:
                        shopify_enable = False
                    
                    # avg_rating_value = 0
                    # seller_rating = db.sellerReviewRatings.aggregate(
                    #     [
                    #         {
                    #             "$match": {
                    #                 "sellerId": str(store["_id"]),
                    #                 "rating": {"$ne": 0},
                    #                 "status": 1,
                    #             }
                    #         },
                    #         {
                    #             "$group": {
                    #                 "_id": "$sellerId",
                    #                 "avgRating": {"$avg": "$rating"},
                    #             }
                    #         },
                    #     ]
                    # )
                    # for avg_rating in seller_rating:
                    #     avg_rating_value = avg_rating["avgRating"]
                    
                    try:
                        safety_standard = store["safetyStandards"] if "safetyStandards" in store else 0
                    except:
                        safety_standard = 0
                    
                    # ===========================offer data==============================
                    try:
                        user_name_document = db.customer.find_one({"storeId": store_id, "parentId": {"$exists": True}}, {"userName": 1})
                        
                        if user_name_document:
                            user_name = user_name_document.get("userName", "")
                        else:
                            user_name = ""

                    except Exception as e:
                        print(f"An error occurred: {e}")
                        user_name = ""     
                    try:
                        fav_store_user_count = len(store['favouriteUsers'])
                    except Exception as e:
                        print(e)
                        fav_store_user_count = 0
                    
                    if "favouriteUsers" in store:
                        if user_id in store["favouriteUsers"]:
                            favourite_store = True
                        else:
                            favourite_store = False
                    else:
                        favourite_store = False
                    reels_id = ""
                    reels_available = False
                    find_customer = db.customer.find_one({'storeId': store_id, "userType": 9})
                    if find_customer is not None:
                        post_details = db.posts.find_one({"userId": ObjectId(str(find_customer['_id'])), "mediaType1": 1}, {'_id': 1})
                        if post_details is not None:
                            reels_available = True
                            reels_id = str(post_details['_id'])
                    
                    cusine_name = ""
                    specialities_ids = [ObjectId(i) for i in store["specialities"]]
                    specialities_info = list(specialities_collection.find({"_id": {"$in": specialities_ids}}, {"specialityName": 1}))
                    for spec_data in specialities_info:
                        if not cusine_name:
                            cusine_name = spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
                        else:
                            cusine_name += ", " + spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
                    
                    total_rating_data = store.get('gastonReviewDetails', [])
                    total_star_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                        "sellerId": store_id,
                                        "attributeId": {"$ne": ""},
                                        "plateformName":"GetFudo"
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
                            ]
                        )
                    total_getfudo_rating = 0
                    avg_rating_getfudo = 0.0
                    totat_star = list(total_star_rating)
                    if totat_star:
                        total_getfudo_rating = totat_star[0]["count"]
                        avg_rating_getfudo = totat_star[0]["avgRating"]
                    total_review = db.sellerReviewRatings.find(
                                    {"sellerId": str(store_id), "plateformName":"GetFudo","sellerReview": {"$ne": ""}, "status": 1}
                                ).count()
                    if total_review or total_getfudo_rating:
                        total_rating_data.append({"GetFudo":{
                            "ratingsCount":str(total_getfudo_rating),
                            "reviewsCount":total_review,
                            "reviewRatings": avg_rating_getfudo
                        }})
                    # Extract review ratings and calculate the average
                    avg_ratings = [
                        platform_data[platform]["reviewRatings"]
                        for platform_data in total_rating_data
                        for platform in platform_data
                        if "reviewRatings" in platform_data[platform]
                    ]
                    avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
                    json_response = {
                        "productCount": 0,
                        "isFavourite":favourite_store,
                        "lat": store_lat,
                        "long": store_long,
                        "address": address,
                        "shopifyEnable": shopify_enable,
                        "safetyStandards": safety_standard,
                        "locality": locality,
                        "cuisines": cusine_name,
                        "tableReservations": store["tableReservations"] if "tableReservations" in store else False,
                        "priceForBookingTable": store["priceForBookingTable"] if "priceForBookingTable" in store else 0,
                        "addressArea": addressArea,
                        "averageCostForMealForTwo": cost_for_two,
                        "logoImages": store["logoImages"],
                        "bannerImages": store["bannerImages"],
                        "listingImage": store["listingImage"] if "listingImage" in store else {},
                        "averageDeliveryTimeInMins": store["averageDeliveryTimeInMins"] if "averageDeliveryTimeInMins" in store else 0,
                        "avgRating": avg_rating_value,
                        "storeIsOpen": store_is_open,
                        "storeType": store["storeType"] if "storeType" in store else "Food",
                        "postCode": post_code,
                        "nextCloseTime": next_close_time,
                        "averageDeliveryTime": str(store["averageDeliveryTimeInMins"]) + " " + "Mins" if "averageDeliveryTimeInMins" in store else "",
                        "nextOpenTime": next_open_time,
                        "city": city,
                        "driverTypeId": store["driverTypeId"] if "driverTypeId" in store else 0,
                        "driverType": store["driverType"] if "driverType" in store else "",
                        "currencySymbol": store["currencySymbol"] if "currencyCode" in store else "INR",
                        "currency": store["currencyCode"] if "currencyCode" in store else "INR",
                        "supportedOrderTypes": store["supportedOrderTypes"] if "supportedOrderTypes" in store else 3,
                        "minimumOrder": store["minimumOrder"] if "minimumOrder" in store else 0,
                        "storeTag": store_tag,
                        "state": state,
                        "country": country,
                        "percentageText": "",
                        "offerName": "",
                        "uniqStoreId": store["uniqStoreId"] if "uniqStoreId" in store else "",
                        "distanceKm": round(distance_km,2),
                        "deliveryPartners":store["deliveryPartners"] if "deliveryPartners" in store else {},
                        "hygieneRating":store["hygieneRating"] if "hygieneRating" in store else 0,
                        "distanceMiles": distance_miles,
                        "storeName": store_name,
                        "storeId": store_id,
                        "seqId": 2,
                        "isDelivery": is_delivery,
                        "userName": user_name,
                        "userLikeCount": fav_store_user_count,
                        "reelsId": reels_id,
                        "reelsAvaialbe": reels_available
                    }
                    final_list.append(json_response)
                except Exception as e:
                    print(e)
                    pass
            response_data = {'data': final_list, 'message': 'data found' if len(final_list) > 0 else 'data not found', "penCount": store_count}
            print('Api exicution time : ', time.time() - start_time)
            return JsonResponse(response_data, status=200 if len(final_list) > 0 else 404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            final_response = {
                "message": message,
            }
            return JsonResponse(final_response, safe=False, status=500)




class AllStoreBusiness(APIView):
    ''' This API is used for getting a list of stores unregister'''
    def get(self, request):
        token = request.META["HTTP_AUTHORIZATION"] if 'HTTP_AUTHORIZATION' in request.META else ""
        language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
        
        if token == "":
            response_data = {
                "message": "unauthorized",
            }
            return JsonResponse(response_data, safe=False, status=401)
        
        try:
            skip = int(request.GET.get('skip', "0"))
            limit = int(request.GET.get('limit', "10"))
        except:
            skip = 0
            limit = 10
            
        store_name = request.GET.get('storeName', "")
        start_time = time.time()
        
        try:
            ''' find all Store '''
            pipeline = []
            if store_name:
                # query = {
                #     "$search": {
                #         "index": "unregister",
                #         "text": {
                #             "query": store_name,
                #             "path": "storeName"
                #         }
                #     }
                # }
                query = {
                    "$match": {
                        "storeName": {
                            "$regex": "^"+str(store_name),
                            "$options": "i"
                        }
                    }
                }
                pipeline.append(query)
            else:
                pipeline = [{
                    "$addFields": {
                        "sortField": {
                            "$switch": {
                                "branches": [
                                    {
                                        "case": {"$regexMatch": {"input": "$storeName", "regex": "^[a-zA-Z]"}},
                                        "then": {"$concat": ["0", "$storeName"]}
                                    },
                                    {
                                        "case": {"$regexMatch": {"input": "$storeName", "regex": "^[0-9]"}},
                                        "then": {"$concat": ["1", "$storeName"]}
                                    }
                                ],
                                "default": {"$concat": ["2", "$storeName"]}
                            }
                        }
                    }
                },
                {"$sort": {"sortField": 1}},
                {"$project": {"sortField": 0}}]
            pipeline.append({"$match": {"isImported": False}})
            pipeline.append({"$skip": skip})
            pipeline.append({"$limit": limit})
            pipeline.append({"$project": {"_id": 0}})

            print(pipeline)
            all_store = db.unRegisterStore.aggregate(pipeline)
            print(" response time", time.time() - start_time)
            count_pipeline = pipeline.copy()
            count_pipeline.pop()  # Remove the $limit stage
            count_pipeline.pop()  # Remove the $skip stage
            count_pipeline.pop()
            count_pipeline.append({"$count": "total_count"})  # Add a $count stage to count the documents
            # Execute the count pipeline to get the total count
            print("count_pipeline",count_pipeline)
            count_result = list(db.unRegisterStore.aggregate(count_pipeline))
            store_count = count_result[0]["total_count"] if count_result else 0


            final_list = []
            if all_store is None:
                response_data = {'message': 'No store found', 'data': [], "count": 0}
                return JsonResponse(response_data, status=404)
            else:
                for store in all_store:
                    try:
                        final_list.append(store)
                    except Exception as e:
                        print(e)
                        pass
                print("response time last", time.time() - start_time)
                response_data = {'data': final_list, 'message': 'data found' if len(final_list) > 0 else 'data not found', "penCount": store_count}
                return JsonResponse(response_data, status=200 if len(final_list) > 0 else 404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            final_response = {
                "message": message,
            }
            return JsonResponse(final_response, safe=False, status=500)
class StoreMoreDetails(APIView):
    def get(self, request):
        try:
            token = request.META.get("HTTP_AUTHORIZATION", "")
            language = request.GET.get('language', 'en')
            user_lat = request.GET.get('lat', 0.0)
            user_long = request.GET.get('long', 0.0)
            if not token:
                return JsonResponse({"message": "Unauthorized", "total_count": 0, "data": []}, status=401)

            try:
                user_id = json.loads(token)["userId"]
            except Exception as e:
                print(e)
                user_id = ""
            if user_id == "":
                user_id = request.GET.get('userId', "")

            store_id = request.GET.get('storeId', "")
            if not store_id:
                return JsonResponse({"message": "storeId not found", "total_count": 0, "data": []}, status=404)

            store_details = db.stores.find_one({'_id': ObjectId(store_id)},
                                                {'timeZoneWorkingHour': 1, 
                                                "storeName": 1,
                                                'logoImages': 1,
                                                'about': 1,
                                                "favouriteUsers":1,
                                                'bannerImages.bannerImageMobile': 1,
                                                'galleryImages': 1,
                                                "hygieneRating":1,
                                                "hygieneRatingInspectionDate":1,
                                                "businessLocationAddress":1,
                                                "businessType":1,
                                                "platformWiseOffers":1,
                                                "currencySymbol":1,
                                                "openTable":1,
                                                "bookATable" :1,
                                                "gastonReviewDetails":1,
                                                "specialities":1,
                                                "avgRating":1,
                                                "storeIsOpen":1,
                                                "minimumOrder":1,
                                                "currencySymbol":1,
                                                "deliveryPartners":1,
                                                "averageCostForMealForTwo":1,
                                                })
            if not store_details:
                return JsonResponse({"message": "Store not found", "total_count": 0, "data": []}, status=404)

            date_data = []
            timeZoneWorkingHour = store_details.get('timeZoneWorkingHour', "").lower()
            current_timestamp = time_zone_converter(timeZoneWorkingHour, datetime.datetime.now().timestamp(), 'UTC')
            current_date = datetime.datetime.fromtimestamp(current_timestamp)
            working_hours = db.workingHour.find(
                    {"storeId": str(store_id), "status": 1,},
                    {"startTime": 1, "endTime": 1, 'day':1, 'nextDay': 1}
                ).sort([("startDateTimestamp", 1)])
            store_working_day = {}
            all_working_day = []
            for find_day in working_hours:
                for i in find_day['day']:
                    store_working_day[i] = {'startTime': find_day['startTime'] , 'endTime': find_day['endTime'], 'nextDay': find_day['nextDay']}
                    if i not in all_working_day:
                        all_working_day.append(i)
            print('store_working_day--',store_working_day)
            print('all_working_day--',all_working_day)
            for i in range(7):
                day = current_date + datetime.timedelta(days=i)
                print(day)
                current_mid_date = day.replace(hour=0, minute=0, second=0)
                current_night_date = day.replace(hour=23, minute=59, second=59)
                current_mid_date_timestmap = time_zone_converter(timezone, int(current_mid_date.timestamp()), timeZoneWorkingHour)
                current_night_date_timestmap = time_zone_converter(timezone, int(current_night_date.timestamp()), timeZoneWorkingHour)
                current_day = day.strftime("%a")
                print(current_day)
                if current_day in all_working_day:
                    time_data = ""
                    # for working in working_hours:
                    start_time = datetime.datetime.strptime(day.strftime("%Y-%m-%d") + " " + store_working_day[current_day]["startTime"], "%Y-%m-%d %H:%M:%S")
                    end_time = datetime.datetime.strptime(day.strftime("%Y-%m-%d") + " " + store_working_day[current_day]["endTime"], "%Y-%m-%d %H:%M:%S")

                    if current_mid_date_timestmap <= start_time.timestamp() <= current_night_date_timestmap \
                            or current_mid_date_timestmap <= end_time.timestamp() <= current_night_date_timestmap:
                        holiday_details = db.holiday.find_one({
                            "storeId": str(store_id),
                            "status": 1,
                            "startDateTimestamp": {"$gte": current_mid_date_timestmap},
                            "endDateTimestamp": {"$lte": current_night_date_timestmap}
                        })

                        if not holiday_details:
                            start_time_store = start_time.strftime("%I:%M %p")
                            end_time_store = end_time.strftime("%I:%M %p")
                            next_text = "(Next Day)" if int(store_working_day[current_day].get("nextDay", 0)) else ""
                            time_range = f"{start_time_store}-{end_time_store} {next_text}"
                            time_data = time_range if not time_data else f"{time_data}, {time_range}"
                        else:
                            start_time_holiday = datetime.datetime.fromtimestamp(holiday_details["startDateTimestamp"]).strftime("%I:%M %p")
                            end_time_holiday = datetime.datetime.fromtimestamp(holiday_details["endDateTimestamp"]).strftime("%I:%M %p")
                            time_data = f"Holiday ({start_time_holiday}-{end_time_holiday})"
                    date_data.append({"day": day.strftime("%A"), "time": time_data if time_data else "Closed"})

            store_name = store_details['storeName'].get(language, store_details['storeName'].get('en', ''))
            banner_image = store_details['bannerImages'].get('bannerImageMobile', '')
            logo_image = store_details['logoImages'].get('logoImageMobile', '')
            find_images = store_details.get('galleryImages', [])
            hygieneRating = store_details.get('hygieneRating', 0)
            hygieneRatingInspectionDate = store_details.get('hygieneRatingInspectionDate', "")
            businessType = store_details.get('businessType', [])
            platform_offers = store_details.get("platformWiseOffers", [])
            try:
                store_lat = float(store_details["businessLocationAddress"]["lat"])
                store_lon = float(store_details["businessLocationAddress"]["long"])
            except:
                store_lat = 0.0
                store_lon = 0.0

            distance_km = geodesic((user_lat, user_long), (store_lat, store_lon)).kilometers
            # Convert distance to miles
            distance_miles = distance_km * 0.621371
            # result_delivery_type = []
            # grouped_by_delivery_type = {}
            # try:
            #     for offer in platform_offers:
            #         delivery_type = offer["deliveryType"]
            #         if delivery_type not in grouped_by_delivery_type:
            #             grouped_by_delivery_type[delivery_type] = []
            #         grouped_by_delivery_type[delivery_type].append(offer)

            #     for delivery_type, offers in grouped_by_delivery_type.items():
            #         result_delivery_type.append({delivery_type: offers}) 
            # except:
            #     result_delivery_type = []
            #     grouped_by_delivery_type = {}
            #     traceback.print_exc()
            #     pass
            new_images = []
            if len(find_images) > 0:
                for i in find_images:
                    try:
                        new_images.append({
                            'small': i['mobile']
                        })
                    except:pass
            store_product_count = db.childProducts.find({'storeId': ObjectId(str(store_id)), "status":1 , "units.isPrimary": True}).count()
            try:
                store_user_count = store_details['favouriteUsers']
                fav_store_user_count = len(store_user_count)
            except Exception as e:
                print(e)
                fav_store_user_count = 0

            if "favouriteUsers" in store_details:
                if user_id in store_details["favouriteUsers"]:
                    favourite_store = True
                else:
                    favourite_store = False
            else:
                favourite_store = False
            # Convert the string to a datetime object
            try:
                date_object = datetime.datetime.strptime(hygieneRatingInspectionDate, "%Y-%m-%d")

                # Format the datetime object to the desired format
                hygieneRatingInspectionDate = date_object.strftime("%d %B %Y")
            except:
                hygieneRatingInspectionDate =""

            cusine_name = ""
            specialities_ids = [ObjectId(i) for i in store_details["specialities"]]
            specialities_info = list(specialities_collection.find({"_id": {"$in": specialities_ids}}, {"specialityName": 1}))
            for spec_data in specialities_info:
                if not cusine_name:
                    cusine_name = spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
                else:
                    cusine_name += ", " + spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
            
            total_rating_data = store_details.get('gastonReviewDetails', [])
            total_star_rating = db.sellerReviewRatings.aggregate(
                    [
                        {
                            "$match": {
                                "status": 1,
                                "rating": {"$ne": 0},
                                "sellerId": str(store_id),
                                "attributeId": {"$ne": ""},
                                "plateformName":"GetFudo"
                            }
                        },
                        {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
                    ]
                )
            total_getfudo_rating = 0
            avg_rating_getfudo = 0.0
            totat_star = list(total_star_rating)
            if totat_star:
                total_getfudo_rating = totat_star[0]["count"]
                avg_rating_getfudo = totat_star[0]["avgRating"]
            total_review = db.sellerReviewRatings.find(
                            {"sellerId": str(store_id), "plateformName":"GetFudo","sellerReview": {"$ne": ""}, "status": 1}
                        ).count()
            if total_review or total_getfudo_rating:
                total_rating_data.append({"GetFudo":{
                    "ratingsCount":str(total_getfudo_rating),
                    "reviewsCount":total_review,
                    "reviewRatings": avg_rating_getfudo
                }})
            # Extract review ratings and calculate the average
            avg_ratings = [
                platform_data[platform]["reviewRatings"]
                for platform_data in total_rating_data
                for platform in platform_data
                if "reviewRatings" in platform_data[platform]
            ]
            avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
            response_data = {
                # 'storeName': store_name,
                'id': str(store_details['_id']),
                "isFavourite":favourite_store,
                'avgRating': avg_rating_value,
                'storeTime': date_data,
                "cuisines": cusine_name,
                'about': store_details.get('about', ""),
                'openTable': store_details.get('openTable', ""),
                'bookATable': store_details.get('bookATable', ""),
                "storeName": store_details['storeName']['en'],
                'currencySymbol': store_details.get('currencySymbol', ''),
                "minimumOrder": store_details.get('minimumOrder'),
                'openForOrders': store_details.get('storeIsOpen', False),
                "deliveryPartners": store_details.get('deliveryPartners', {}),
                'city': store_details.get('businessLocationAddress', {}).get('city', ""),
                'address': store_details.get('businessLocationAddress', {}).get('address', ""),
                'addressArea': store_details.get('businessLocationAddress', {}).get('addressArea', ""),
                'galleryImages': new_images,
                'bannerImages': banner_image,
                'logoImages': logo_image,
                "productCount": store_product_count,
                "hygieneRating":hygieneRating,
                "hygieneRatingInspectionDate":hygieneRatingInspectionDate,
                "platformWiseOffers": platform_offers,
                # "deliveryType":result_delivery_type,
                "businessType":businessType,
                'averageCostfForMealForTwo': store_details.get('averageCostForMealForTwo', 0.0),
                'distanceFromUserInKm': round(distance_km,2),
                "distanceMiles":distance_miles,
                "userLikeCount": fav_store_user_count,
            }
            return JsonResponse({'message': 'Data found', 'data': response_data}, status=200)

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            final_response = {"message": message}
            return JsonResponse(final_response, safe=False, status=500)

class StoreReviewDetails(APIView):
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"] if 'HTTP_AUTHORIZATION' in request.META else ""
            language = request.GET.get('language', 'en')
            if token == "":
                    response_data = {"message": "Unauthorized", "total_count": 0, "data": []}
                    return JsonResponse(response_data, status=401)
            store_id = request.GET.get('storeId', "")
            try:
                skip = int(request.GET.get('skip', 0))
                limit = int(request.GET.get('limit', 10))
            except:
                skip = 0
                limit = 10
            plateform_name = request.GET.get('plateform', "")
            if store_id == "":
                response_data = {"message": "storeId not found", "total_count": 0, "data": []}
                return JsonResponse(response_data, status=404)
            pipeline = [
                { 
                    '$match': { '_id': ObjectId(store_id) } 
                },
                { 
                    '$project': {
                        'galleryImages': {
                            '$map': {
                                'input': '$galleryImages',
                                'as': 'imageEntry',
                                'in': '$$imageEntry.image'
                            }
                        },
                        'avgRating': 1,
                        'gastonReviewDetails': 1
                    }
                }
            ]
            store_details = list(db.stores.aggregate(pipeline))
            if store_details is None:
                response_data = {"message": "store not found", "total_count": 0, "data": []}
                return JsonResponse(response_data, status=404)
            # total_review = db.sellerReviewRatings.find(
            #     {"sellerId": str(store_id), "sellerReview": {"$ne": ""}, "status": 1}
            # ).count()
            # avg_rating_value = store_details[0].get('avgRating', 0.0)
            total_rating_data = store_details[0].get('gastonReviewDetails', [])
            store_galery = store_details[0].get('galleryImages', [])
            total_star_rating = db.sellerReviewRatings.aggregate(
                            [
                                {
                                    "$match": {
                                        "status": 1,
                                        "rating": {"$ne": 0},
                                        "sellerId": store_id,
                                        "attributeId": {"$ne": ""},
                                        "plateformName":"GetFudo"
                                    }
                                },
                                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
                            ]
                        )
            total_getfudo_rating = 0
            avg_rating_getfudo = 0.0
            totat_star = list(total_star_rating)
            if totat_star:
                total_getfudo_rating = totat_star[0]["count"]
                avg_rating_getfudo = totat_star[0]["avgRating"]
            total_review = db.sellerReviewRatings.find(
                            {"sellerId": str(store_id), "plateformName":"GetFudo","sellerReview": {"$ne": ""}, "status": 1}
                        ).count()
            if total_review or total_getfudo_rating:
                total_rating_data.append({"GetFudo":{
                    "ratingsCount":str(total_getfudo_rating),
                    "reviewsCount":total_review,
                    "reviewRatings": avg_rating_getfudo
                }})
            # Extract review ratings and calculate the average
            avg_ratings = [
                platform_data[platform]["reviewRatings"]
                for platform_data in total_rating_data
                for platform in platform_data
                if "reviewRatings" in platform_data[platform]
            ]
            avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
            total_ratings_count = 0
            plus_found = False
            transformed_data =[]
            for platform_data in total_rating_data:
                for platform, details in platform_data.items():
                    transformed_data.append({
                        "platform": platform,
                        "ratingsCount": details.get("ratingsCount", "0"),
                        "reviewRatings": details.get("reviewRatings", 0.0),
                        "reviewsCount":details.get("reviewsCount", 0.0),
                    })
                # Extract the first platform's data in the nested dictionary
                platform_key = next(iter(platform_data))
                count, has_plus = parse_ratings_count(platform_data[platform_key]['ratingsCount'])
                total_ratings_count += count
                if has_plus:
                    plus_found = True
        
            # Format the total count with the "+" if any platform had it
            total_ratings_count_str = f"{total_ratings_count:,}{'+' if plus_found else ''}"
            print("Total ratings count:", total_ratings_count_str)
            five_rating = []
            four_rating = []
            three_rating = []
            two_rating = []
            one_rating = []
            review_data = []

            # total_star_rating = db.sellerReviewRatings.aggregate(
            #     [
            #         {
            #             "$match": {
            #                 "status": 1,
            #                 "rating": {"$ne": 0},
            #                 "sellerId": store_id,
            #                 "attributeId": {"$ne": ""},
            #             }
            #         },
            #         {
            #             "$group": {
            #                 "_id": {
            #                     "orderId": "$orderId",
            #                 },
            #                 "avgRating": {"$sum": 1},
            #                 "rating": {"$avg": "$rating"}
            #             }
            #         },
            #     ]
            # )
            # total_rating = 0
            # for avg_star in total_star_rating:
            #     total_rating = int(avg_star["avgRating"])

            ''' add mongo query to get all store ratting '''
            total_start_rating_query = {
                        "$match": {
                            "status": 1,
                            "rating": {"$ne": 0},
                            "sellerId": store_id,
                            "attributeId": {"$ne": ""}
                        }
                    }
            if plateform_name:
                total_start_rating_query["$match"]["plateformName"] = plateform_name
            total_star_rating_data = db.sellerReviewRatings.aggregate([total_start_rating_query])
            ''' add ratting sequesnce wise like how many four start how many five start etc '''
            for avg_star in total_star_rating_data:
                if avg_star['rating'] != 0:
                    if avg_star['rating'] == 5:
                        five_rating.append(avg_star['rating'])
                    elif avg_star['rating'] >= 4 and avg_star['rating'] < 5:
                        four_rating.append(avg_star['rating'])
                    elif avg_star['rating'] >= 3 and avg_star['rating'] < 4:
                        three_rating.append(avg_star['rating'])
                    elif avg_star['rating'] >= 2 and avg_star['rating'] < 3:
                        two_rating.append(avg_star['rating'])
                    elif avg_star['rating'] >= 1 and avg_star['rating'] < 2:
                        one_rating.append(avg_star['rating'])
                    else:
                        pass
            review_details_query ={
                        "sellerId": str(store_id),
                        "sellerReview": {"$ne": ""},
                        "status": 1,
                    }
            if plateform_name:
                review_details_query["plateformName"] = plateform_name
            review_details = (
                db.sellerReviewRatings.find(
                    review_details_query
                )
                    .skip(skip)
                    .limit(limit)
                    .sort([("createdTimestamp", -1)])
            )
            if review_details.count() > 0:
                for seller in review_details:
                    try:
                        dt_object = datetime.datetime.fromtimestamp(
                            seller["createdTimestamp"]
                        )
                    except:
                        dt_object = seller["createdTimestamp"]

                    from_zone = tz.gettz("UTC")
                    to_zone = tz.gettz("Asia/Kolkata")
                    date_time1 = (dt_object).strftime("%d %b %Y %H:%M:%S %p")
                    date_time1 = datetime.datetime.strptime(
                        date_time1, "%d %b %Y %H:%M:%S %p"
                    )
                    utc = date_time1.replace(tzinfo=from_zone)
                    central = utc.astimezone(to_zone)

                    day_s = datetime.datetime.now() - dt_object
                    if day_s.days == 0:
                        if int(day_s.seconds) > 59:
                            sec = datetime.timedelta(seconds=day_s.seconds)
                            if int(sec.seconds / 60) > 59:
                                time_create = (
                                        str(int(sec.seconds / 3600)) + " hours ago"
                                )
                            else:
                                time_create = (
                                        str(int(sec.seconds / 60)) + " minutes ago"
                                )
                        else:
                            time_create = str(day_s.seconds) + " seconds ago"

                    else:
                        time_create = str(day_s.days) + " days ago"
                    if seller["userId"] !="":
                        customer_details = db.customer.find_one(
                            {"_id": ObjectId(seller["userId"])},
                            {"firstName": 1, "lastName": 1, "profilePic": 1},
                        )
                        if customer_details != None:
                            try:
                                customer_name = (
                                        customer_details["firstName"]
                                        + " "
                                        + customer_details["lastName"]
                                )
                                profile_pic = customer_details["profilePic"]
                            except:
                                customer_name = "N/A"
                                profile_pic = ""
                        else:
                            customer_name = "N/A"
                            profile_pic = ""
                    else:
                        
                        customer_name = seller["userName"]
                        profile_pic = ""
                    if "plateformName" in seller:
                        plateformName = seller["plateformName"]
                    else:
                        plateformName = ""
                    rating_review_data = db.sellerReviewRatings.find(
                        {
                            "sellerId": str(store_id),
                            "userId":seller["userId"],
                            "rating": {"$ne":0},
                            "status":1
                        },
                        {"rating":1}
                    ).sort([("createdTimestamp", -1)]).limit(1)
                    rat_data = 0
                    for r in rating_review_data:
                        rat_data= r["rating"]
                    review_data.append(
                        {
                            "dateTime": (central).strftime("%d %b %Y"),
                            "reviewId": str(seller["_id"]),
                            "userName": seller["userName"],
                            "profilePic": profile_pic,
                            "sellerSince": time_create,
                            "sellerReview": seller["sellerReview"],
                            "attributeId": str(seller["attributeId"]),
                            "rating": float(rat_data),
                            "plateformName" : plateformName
                        }
                    )
            if store_galery:
                pass
            else:
                store_galery = db.childProducts.distinct("images.small",{"storeId": ObjectId(store_id),"images.small":{"$ne":""}})
            
            review_json = {
                    "FiveStarRating": len(five_rating),
                    "FourStartRating": len(four_rating),
                    "ThreeStarRating": len(three_rating),
                    "TwoStarRating": len(two_rating),
                    "OneStarRating": len(one_rating),
                    "reviewData": review_data,
                    "avgRating": avg_rating_value,
                    "totalRatingData":transformed_data,
                    "totalRatings": total_ratings_count_str,
                    "totalReviews": total_ratings_count_str,
                    "photos":store_galery
                }
            return JsonResponse({'message': 'data found', 'data': review_json}, status=200)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            final_response = {"message": message}
            return JsonResponse(final_response, safe=False, status=500)



class StoreMenuDetails(APIView):
    def get(self, request):
        pass

class StoreMenuItemDetails(APIView):
    def get(self, request):
        start_time = time.time()
        print('start_time---',start_time)
        token = request.META.get("HTTP_AUTHORIZATION", "")
        parent_product_id = request.GET.get('parentProductId', "")
        product_id = request.GET.get('productId', "")
        language = request.GET.get('language', 'en')
        store_id = request.GET.get('storeId', "")

        if not token:
            return JsonResponse({"message": "Unauthorized", "total_count": 0, "data": []}, status=401)

        try:
            user_id = json.loads(token).get("userId", "")
        except Exception as e:
            print(e)
            user_id = ""
        
        response_data = {}
        prodcut_details = db.childProducts.aggregate([
                    {
                        '$match': {
                            '_id': ObjectId(str(product_id))
                        }
                    },
                    {
                        '$lookup': {
                            'from': 'childProducts',
                            'let': { 'parentProductId': '$parentProductId', 'storeId': '$storeId' },
                            'pipeline': [
                                {
                                    '$match': {
                                        '$expr': {
                                            '$and': [
                                                { '$eq': ['$parentProductId', '$$parentProductId'] },
                                                { '$eq': ['$storeId', '$$storeId'] }
                                            ]
                                        }
                                    }
                                },
                                {
                                    '$project': {
                                        'pPName': 1, 
                                        'units':1
                                                            }
                                }
                            ],
                            'as': 'variant'
                        }
                    }
                ])
        finl_prodcut_data = list(prodcut_details)
        # Fetch primary product details
        ''' find product addins details   '''
        addons_details = []
        if 'addOns' in finl_prodcut_data[0].get('units', [{}])[0]:
            for addon in finl_prodcut_data[0]['units'][0]['addOns']:
                addons_details.append({
                    'groupName': addon['name'].get(language, addon['name'].get('en', '')),
                    'Mandatory': addon.get('mandatory', 0),
                    'minQtyToSelect': addon.get('minimumLimit', 1),
                    'maxQtyToSelect': addon.get('maxQtyToSelect', 1),
                    'addOnsList': addon['addOns'] if 'addOns' in addon else [],
                    'multiple': addon['multiple'] if 'multiple' in addon else 0,
                    'seqId': addon['seqId'] if 'seqId' in addon else 0,
                    'unitAddOnId': addon['unitAddOnId'] if 'unitAddOnId' in addon else ''

                })
        response_data['addonGroups'] = addons_details
        # Fetch portion details
        portion_details = []
        if len(finl_prodcut_data[0]['variant']) > 0:
            for variant in finl_prodcut_data[0]['variant']:
                offers_details = []
                if "offer" in variant:
                    for offer in variant["offer"]:
                        offer_details = db.offers.find_one({"_id": ObjectId(offer["offerId"]), "status": 1})
                        if offer_details and offer["status"] == 1 and offer_details["startDateTime"] <= int(time.time()):
                            offer["termscond"] = offer_details.get("termscond", "")
                            offer["name"] = offer_details["name"].get("en", "")
                            offer["discountValue"] = offer.get("discountValue", 0)
                            offer["discountType"] = offer.get("discountType", 0)
                            offers_details.append(offer)
                best_offer = max(offers_details, key=lambda x: x.get("discountValue", 0)) if offers_details else {}

                base_price = variant['units'][0]['b2cPricing'][0]['b2cproductSellingPrice']
                discount_value = best_offer.get("discountValue", 0)
                discount_type = best_offer.get("discountType", 0)
                discount_price = discount_value if int(discount_type) == 0 else (float(base_price) * float(discount_value)) / 100
                final_price = base_price - discount_price
                final_price_list = {
                    'basePrice': base_price,
                    'finalPrice': final_price,
                    'discountValue': discount_value,
                    'discountType': discount_type
                }
                print(variant)
                portion_details.append({
                    'id': str(variant['_id']),
                    'porionName': variant['units'][0]['unitName']['en'],
                    'isParentProduct': variant['units'][0]['isPrimary'],
                    'activeOffers': best_offer,
                    'finalPriceList': final_price_list
                })
        end_timr = time.time() - start_time
        print('end_timr----', end_timr)
        response_data['Portions'] = portion_details
        return JsonResponse(response_data, status=200)
class CloseStoresByZone(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META.get("HTTP_AUTHORIZATION", "")
        user_lat = request.GET.get('lat', "")
        user_long = request.GET.get('long', "")
        zone_id = request.GET.get("zoneId","")
        zone_id = zone_id.replace("%2C", ",")

        if zone_id == "":
            response_data = {"message": "please enter the zone id"}
            return JsonResponse(response_data, safe=False, status=422)
        try:
            skip = int(request.GET.get('skip', 0))
            limit = int(request.GET.get('limit', 20))
        except:
            skip = 0
            limit = 20
        from_data = skip
        to_data = limit 
        try:
            user_id = json.loads(token)["userId"]
        except Exception as e:
            print(e)
            user_id = ""
        if user_id == "":
            user_id = request.GET.get('userId', "")

        print("User ID:", user_id)
        speciality_ids_param =  request.GET.get("cuisines", "")
        speciality_ids = list(filter(None, map(str.strip, speciality_ids_param.split(','))))
        min_ratings_data = request.GET.get("minRatings")
        max_ratings_data = request.GET.get("maxRatings")
        min_ratings_data = float(min_ratings_data) if min_ratings_data is not None else None
        max_ratings_data = float(max_ratings_data) if max_ratings_data is not None else None
        avg_cost_min = request.GET.get("avgCost")
        avg_cost_max = request.GET.get("avgCostMax")
        avg_cost_min = float(avg_cost_min) if avg_cost_min is not None else None
        avg_cost_max = float(avg_cost_max) if avg_cost_max is not None else None
        user_lat = float(request.GET.get("lat", 0))
        user_lon = float(request.GET.get("lat", 0))
        seq_id = int(request.GET.get("sort", 0))
        delivery_filter_data = request.GET.get("deliveryTypes","")
        delivery_filter_data = delivery_filter_data.replace("%2C", ",")
        zone_id = [ids for n in zone_id.split() for ids in n.split(",")]


        query = {"$and": [{"serviceZones.zoneId": {"$in":zone_id},"status":1,"storeIsOpen":False}]}
        offer_ids_param = request.GET.get("offers", "")
        offer_ids = list(filter(None, map(str.strip, offer_ids_param.split(','))))
        # if offer_ids_param:
        #     offer_ids = [ObjectId(i) for i in offer_ids]
        #     offer_stores_query = {
        #         "_id": {"$in": offer_ids},
        #         "status": 1
        #     }
        #     offer_stores = list(offers_collection.distinct("storeId", offer_stores_query))
        #     print("offer_stores --->>> ", offer_stores)
        #     query["_id"] = {"$in": [ObjectId(store_id) for store_id in offer_stores]}
        if speciality_ids:
            query["specialities"] = {"$in": speciality_ids}
        # banner_query = {}

        if min_ratings_data is not None or max_ratings_data is not None:
            rating_query = {}
            if min_ratings_data is not None:
                rating_query["$gte"] = min_ratings_data
            if max_ratings_data is not None:
                rating_query["$lte"] = max_ratings_data
            query['avgRating'] = rating_query


        # if avg_cost_min != 0 or avg_cost_max != 0:
        #     query['averageCostForMealForTwo'] = {
        #         "$gte": float(avg_cost_min),
        #         "$lte": float(avg_cost_max)
        #     }
        if avg_cost_min is not None or avg_cost_max is not None:
            cost_query = {}
            if avg_cost_min is not None:
                cost_query["$gte"] = avg_cost_min
            if avg_cost_max is not None:
                cost_query["$lte"] = avg_cost_max
            query['averageCostForMealForTwo'] = cost_query

        order_type = request.GET.get('orderType', '')

        delivery_types_filter = [delivery_types for n in delivery_filter_data.split() for delivery_types in n.split(",")]
        if len(delivery_types_filter) > 0:
            query["deliveryTypes._id"] = {"$in":delivery_types_filter}
        if order_type.isdigit():
            order_type_id = int(order_type)
            # Map order types to supported order types
            if order_type_id == 1:
                query['supportedOrderTypes'] = 1
            elif order_type_id == 2:
                query['supportedOrderTypes'] = 2
            # Check if the order type includes table reservations
            elif order_type_id == 3:
                query['tableReservations'] = True
            # # Check if the order type includes table reservations
            elif order_type_id == 0:
                query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        else:
            # Default to all if the orderType value is not a valid integer
            query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        sort_by_distance = request.GET.get('sortByDistance')

        pipeline = [
            {"$match": query},
            {"$facet": {
                "count": [{"$count": "total"}],
                "data": [
                    {"$skip": from_data},
                    {"$limit": to_data}
                ]
            }}
        ]
        print("pipeline",pipeline)
        store_details = db.stores.aggregate(pipeline)
        final_response = []
        response_store = list(store_details)

        for store in response_store[0]['data']:
            store_lat = float(store["businessLocationAddress"]["lat"])
            store_lon = float(store["businessLocationAddress"]["long"])
            distance_km = geodesic((user_lat, user_long), (store_lat, store_lon)).kilometers
            # Convert distance to miles
            distance_miles = distance_km * 0.621371
            try:
                store_user_count = store['favouriteUsers']
                fav_store_user_count = len(store_user_count)
            except Exception as e:
                print(e)
                fav_store_user_count = 0
            total_review_count = db.sellerReviewRatings.find(
                            {"sellerId": str(store['_id']), "sellerReview": {"$ne": ""}, "status": 1}
                        ).count()

            total_rating_data = store.get('gastonReviewDetails', [])
            total_star_rating = db.sellerReviewRatings.aggregate(
                    [
                        {
                            "$match": {
                                "status": 1,
                                "rating": {"$ne": 0},
                                "sellerId": str(store['_id']),
                                "attributeId": {"$ne": ""},
                                "plateformName":"GetFudo"
                            }
                        },
                        {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
                    ]
                )
            total_getfudo_rating = 0
            avg_rating_getfudo = 0.0
            totat_star = list(total_star_rating)
            if totat_star:
                total_getfudo_rating = totat_star[0]["count"]
                avg_rating_getfudo = totat_star[0]["avgRating"]
            if total_review_count or total_getfudo_rating:
                total_rating_data.append({"GetFudo":{
                    "ratingsCount":str(total_getfudo_rating),
                    "reviewsCount":total_review_count,
                    "reviewRatings": avg_rating_getfudo
                }})
            # Extract review ratings and calculate the average
            avg_ratings = [
                platform_data[platform]["reviewRatings"]
                for platform_data in total_rating_data
                for platform in platform_data
                if "reviewRatings" in platform_data[platform]
            ]
            avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
            final_response.append({
                #nnnnn
                "_id": str(store['_id']),
                "storeName": store['storeName']['en'],
                "avgRating": avg_rating_value,
                "registrationDateTimeStamp": store.get('registrationDateTimeStamp'),
                "averageDeliveryTime": store.get('averageDeliveryTimeInMins'),
                "minimumOrder": store.get('minimumOrder'),
                'openForOrders': store.get('storeIsOpen', False),
                'nextOpensOnTimeStampIfClosed': store.get('nextOpenTime', '') if not store.get('storeIsOpen', False) else '',
                'nextClosesOnTimeStampIfOpen': store.get('nextCloseTime', ''),
                'logoUrl': store.get('logoImages', {}).get('logoImageMobile', ""),
                'storeBannerUrl': store.get('bannerImages', {}).get('bannerImageMobile', ""),
                "reviewCount":total_review_count,
                # 'storePickup': True if store['supportedOrderTypes'] in [1, 3] else False,
                # 'homeDelivery': True if store['supportedOrderTypes'] in [2, 3] else False,
                # 'favoriteStore': False,  # Need more information on how to determine this
                'averageCostfForMealForTwo': store.get('averageCostForMealForTwo', 0.0),
                'currencyCode': store.get('currencyCode', ''),
                'currencySymbol': store.get('currencySymbol', ''),
                "deliveryPartners": store.get('deliveryPartners',{}),
                'distanceFromUserInKm': round(distance_km,2),
                "distanceMiles":distance_miles,
                'city': store.get('businessLocationAddress', {}).get('city', ""),
                'address': store.get('businessLocationAddress', {}).get('address', ""),
                'hygieneRating': store.get('hygieneRating', 0),
                "userLikeCount": fav_store_user_count,
            })

        if final_response:
            if seq_id == 3:
                final_response.sort(key=lambda x: x['averageCostfForMealForTwo'])
            elif seq_id == 4:
                final_response.sort(key=lambda x: x['averageCostfForMealForTwo'], reverse=True)
            elif seq_id == 1:
                final_response.sort(key=lambda x: x['reviewCount'], reverse=True)
            elif seq_id == 7:
                final_response.sort(key=lambda x: x['avgRating'], reverse=True)
            elif seq_id == 2:
                final_response.sort(key=lambda x: x['averageDeliveryTime'])
            elif seq_id == 6:
                final_response.sort(key=lambda x: x['distanceFromUserInKm'])
            elif seq_id == 5:
                # Implement your own recommended logic here
                pass
        try:
            pen_count = response_store[0]['count'][0]['total']
        except:
            pen_count = 0
        print('API response time ->', time.time() - start_time)
        response_data = {
            'message': 'Data found' if pen_count else 'Data not found',
            'data': final_response,
            'pencount': pen_count
        }

        return JsonResponse(response_data, status=200 if pen_count else 404)


class RecomdedStoresByZone(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META.get("HTTP_AUTHORIZATION", "")
        user_lat = request.GET.get('lat', "")
        user_long = request.GET.get('long', "")
        zone_id = request.GET.get("zoneId","")
        zone_id = zone_id.replace("%2C", ",")
        language = request.GET.get('language', 'en')

        if zone_id == "":
            response_data = {"message": "please enter the zone id"}
            return JsonResponse(response_data, safe=False, status=422)
        try:
            skip = int(request.GET.get('skip', 0))
            limit = int(request.GET.get('limit', 20))
        except:
            skip = 0
            limit = 20
        from_data = skip
        to_data = limit 
        try:
            user_id = json.loads(token)["userId"]
        except Exception as e:
            print(e)
            user_id = ""
        if user_id == "":
            user_id = request.GET.get('userId', "")

        print("User ID:", user_id)

        speciality_ids_param =  request.GET.get("cuisines", "")
        speciality_ids = list(filter(None, map(str.strip, speciality_ids_param.split(','))))
        min_ratings_data = request.GET.get("minRatings")
        max_ratings_data = request.GET.get("maxRatings")
        min_ratings_data = float(min_ratings_data) if min_ratings_data is not None else None
        max_ratings_data = float(max_ratings_data) if max_ratings_data is not None else None
        avg_cost_min = request.GET.get("avgCost")
        avg_cost_max = request.GET.get("avgCostMax")
        avg_cost_min = float(avg_cost_min) if avg_cost_min is not None else None
        avg_cost_max = float(avg_cost_max) if avg_cost_max is not None else None
        user_lat = float(request.GET.get("lat", 0))
        user_lon = float(request.GET.get("lat", 0))
        seq_id = int(request.GET.get("sort", 0))
        delivery_filter_data = request.GET.get("deliveryTypes","")
        delivery_filter_data = delivery_filter_data.replace("%2C", ",")
        zone_id = [ids for n in zone_id.split() for ids in n.split(",")]
        query ={"$and": [{"serviceZones.zoneId": {"$in":zone_id},"status":1}]}

        if speciality_ids:
            query["specialities"] = {"$in": speciality_ids}
        # banner_query = {}

        if min_ratings_data is not None or max_ratings_data is not None:
            rating_query = {}
            if min_ratings_data is not None:
                rating_query["$gte"] = min_ratings_data
            if max_ratings_data is not None:
                rating_query["$lte"] = max_ratings_data
            query['avgRating'] = rating_query


        # if avg_cost_min != 0 or avg_cost_max != 0:
        #     query['averageCostForMealForTwo'] = {
        #         "$gte": float(avg_cost_min),
        #         "$lte": float(avg_cost_max)
        #     }
        if avg_cost_min is not None or avg_cost_max is not None:
            cost_query = {}
            if avg_cost_min is not None:
                cost_query["$gte"] = avg_cost_min
            if avg_cost_max is not None:
                cost_query["$lte"] = avg_cost_max
            query['averageCostForMealForTwo'] = cost_query

        order_type = request.GET.get('orderType', '')

        delivery_types_filter = [delivery_types for n in delivery_filter_data.split() for delivery_types in n.split(",")]
        if len(delivery_types_filter) > 0:
            query["deliveryTypes._id"] = {"$in":delivery_types_filter}
        if order_type.isdigit():
            order_type_id = int(order_type)
            # Map order types to supported order types
            if order_type_id == 1:
                query['supportedOrderTypes'] = 1
            elif order_type_id == 2:
                query['supportedOrderTypes'] = 2
            # Check if the order type includes table reservations
            elif order_type_id == 3:
                query['tableReservations'] = True
            # # Check if the order type includes table reservations
            elif order_type_id == 0:
                query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        else:
            # Default to all if the orderType value is not a valid integer
            query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        sort_by_distance = request.GET.get('sortByDistance')

        user_cuisine_preferences = []

        if user_id:
            customer_preferences = db.customer.find_one({"_id": ObjectId(user_id)}, {"specialities": 1})
            if customer_preferences and "specialities" in customer_preferences:
                user_cuisine_preferences = customer_preferences["specialities"]
                if user_cuisine_preferences:
                    query["specialities"]= {"$in": user_cuisine_preferences}

        if not user_cuisine_preferences:
            response_data = {'message': 'No data found', "data": []}
            return JsonResponse(response_data, status=404)

        pipeline = [
            {"$match": query},
            {"$facet": {
                "count": [{"$count": "total"}],
                "data": [
                    {"$skip": from_data},
                    {"$limit": to_data}
                ]
            }}
        ]
        print("pipeline",pipeline)
        store_details = db.stores.aggregate(pipeline)
        final_response = []
        response_store = list(store_details)

        if not response_store or 'data' not in response_store[0]:
            response_data = {'message': 'Data not found', "data": [], 'pencount': 0}
            return JsonResponse(response_data, status=404)

        for store in response_store[0]['data']:
            store_lat = float(store["businessLocationAddress"]["lat"])
            store_lon = float(store["businessLocationAddress"]["long"])
            distance_km = geodesic((user_lat, user_long), (store_lat, store_lon)).kilometers
            # Convert distance to miles
            distance_miles = distance_km * 0.621371
            try:
                store_user_count = store['favouriteUsers']
                fav_store_user_count = len(store_user_count)
            except Exception as e:
                print(e)
                fav_store_user_count = 0

            total_review_count = db.sellerReviewRatings.find(
                            {"sellerId": str(store['_id']), "sellerReview": {"$ne": ""}, "status": 1}
                        ).count()

            if "favouriteUsers" in store:
                if user_id in store["favouriteUsers"]:
                    favourite_store = True
                else:
                    favourite_store = False
            else:
                favourite_store = False
            reels_id = ""
            reels_available = False
            find_customer = db.customer.find_one({'storeId':  str(store['_id']), "userType": 9})
            if find_customer is not None:
                post_details = db.posts.find_one({"userId": ObjectId(str(find_customer['_id'])), "mediaType1": 1}, {'_id': 1})
                if post_details is not None:
                    reels_available = True
                    reels_id = str(post_details['_id'])

            cusine_name = ""
            specialities_ids = [ObjectId(i) for i in store["specialities"]]
            specialities_info = list(specialities_collection.find({"_id": {"$in": specialities_ids}}, {"specialityName": 1}))
            for spec_data in specialities_info:
                if not cusine_name:
                    cusine_name = spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
                else:
                    cusine_name += ", " + spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
            
            total_rating_data = store.get('gastonReviewDetails', [])
            total_star_rating = db.sellerReviewRatings.aggregate(
                    [
                        {
                            "$match": {
                                "status": 1,
                                "rating": {"$ne": 0},
                                "sellerId": str(store['_id']),
                                "attributeId": {"$ne": ""},
                                "plateformName":"GetFudo"
                            }
                        },
                        {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
                    ]
                )
            total_getfudo_rating = 0
            avg_rating_getfudo = 0.0
            totat_star = list(total_star_rating)
            if totat_star:
                total_getfudo_rating = totat_star[0]["count"]
                avg_rating_getfudo = totat_star[0]["avgRating"]
            total_review = db.sellerReviewRatings.find(
                            {"sellerId": str(store['_id']), "plateformName":"GetFudo","sellerReview": {"$ne": ""}, "status": 1}
                        ).count()
            if total_review or total_getfudo_rating:
                total_rating_data.append({"GetFudo":{
                    "ratingsCount":str(total_getfudo_rating),
                    "reviewsCount":total_review,
                    "reviewRatings": avg_rating_getfudo
                }})
            # Extract review ratings and calculate the average
            avg_ratings = [
                platform_data[platform]["reviewRatings"]
                for platform_data in total_rating_data
                for platform in platform_data
                if "reviewRatings" in platform_data[platform]
            ]
            avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
            
            
            final_response.append({
                #nnnnn
                "_id": str(store['_id']),
                "cuisines": cusine_name,
                "isFavourite":favourite_store,
                "storeName": store['storeName']['en'],
                "avgRating": avg_rating_value,
                "registrationDateTimeStamp": store.get('registrationDateTimeStamp'),
                "averageDeliveryTime": store.get('averageDeliveryTimeInMins'),
                "minimumOrder": store.get('minimumOrder'),
                'openForOrders': store.get('storeIsOpen', False),
                'nextOpensOnTimeStampIfClosed': store.get('nextOpenTime', '') if not store.get('storeIsOpen', False) else '',
                'nextClosesOnTimeStampIfOpen': store.get('nextCloseTime', ''),
                'logoUrl': store.get('logoImages', {}).get('logoImageMobile', ""),
                'storeBannerUrl': store.get('bannerImages', {}).get('bannerImageMobile', ""),
                "reviewCount":total_review_count,
                # 'storePickup': True if store['supportedOrderTypes'] in [1, 3] else False,
                # 'homeDelivery': True if store['supportedOrderTypes'] in [2, 3] else False,
                # 'favoriteStore': False,  # Need more information on how to determine this
                'averageCostfForMealForTwo': store.get('averageCostForMealForTwo', 0.0),
                'currencyCode': store.get('currencyCode', ''),
                'currencySymbol': store.get('currencySymbol', ''),
                # "cartValueForFreeDelivery": store.get('freeDeliveryAbove'),
                'distanceFromUserInKm': round(distance_km,2),
                'distanceMiles': distance_miles,
                'city': store.get('businessLocationAddress', {}).get('city', ""),
                'address': store.get('businessLocationAddress', {}).get('address', ""),
                'hygieneRating': store.get('hygieneRating', 0),
                'deliveryPartners': store.get('deliveryPartners', {}),
                "userLikeCount": fav_store_user_count,
                "reelsId": reels_id,
                "reelsAvaialbe": reels_available
            })

        if final_response:
            if seq_id == 3:
                final_response.sort(key=lambda x: x['averageCostfForMealForTwo'])
            elif seq_id == 4:
                final_response.sort(key=lambda x: x['averageCostfForMealForTwo'], reverse=True)
            elif seq_id == 1:
                final_response.sort(key=lambda x: x['reviewCount'], reverse=True)
            elif seq_id == 7:
                final_response.sort(key=lambda x: x['avgRating'], reverse=True)
            elif seq_id == 2:
                final_response.sort(key=lambda x: x['averageDeliveryTime'])
            elif seq_id == 6:
                final_response.sort(key=lambda x: x['distanceFromUserInKm'])
            elif seq_id == 5:
                # Implement your own recommended logic here
                pass

        count_list = response_store[0].get('count', [])
        pen_count = count_list[0]['total'] if count_list else 0
        print('API response time ->', time.time() - start_time)
        response_data = {
            'message': 'Data found' if pen_count else 'Data not found',
            'data': final_response,
            'pencount': pen_count
        }

        return JsonResponse(response_data, status=200 if pen_count else 404)
class HomePageProductSearch(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META.get("HTTP_AUTHORIZATION", "")
        user_lat = request.GET.get('lat', "")
        user_long = request.GET.get('long', "")
        zone_id = request.query_params.get("zoneId","")
        zone_id = zone_id.replace("%2C", ",")
        language = request.GET.get('language', 'en')
        search_item = request.GET.get("search","")
        if search_item == "":
            return JsonResponse({"message":"data not found"}, safe=False, status=404)

        try:
            user_id = json.loads(token)["userId"]
        except Exception as e:
            print(e)
            user_id = ""
        if user_id == "":
            user_id = request.GET.get('userId', "")

        print("User ID:", user_id)

        if search_item:
            search_type = 4
            try:
                session_id = json.loads(token)["sessionId"]
            except:
                session_id = ""
            thread_logs = threading.Thread(
                target=category_search_logs,
                args=(
                    "",
                    "",
                    "",
                    str(search_type),
                    user_id,
                    1,
                    "127.0.0.1",
                    user_lat,
                    user_long,
                    "",
                    "",
                    search_item,
                    DINE_STORE_CATEGORY_ID,
                    "",
                    session_id,
                    "",
                    False,
                    "",
                    "",
                ),
            )
            thread_logs.start()
            search_item = search_item.strip().lower()
            for _ in range(3):
                search_item = search_item.replace("  "," ")
            search_item = unquote(search_item)

        if zone_id == "":
            response_data = {"message": "please enter the zone id"}
            return JsonResponse(response_data, safe=False, status=422)
        try:
            page = int(request.GET.get('page', 1))
        except:
            page = 1
        skip = int(page * 10) - 10
        limit = 10 

        zone_id = [ids for n in zone_id.split() for ids in n.split(",")]
        # pipeline = [
        #     {
        #         "$match": {
        #             "$and": [
        #                 {"serviceZones.zoneId": {"$in": zone_id}},
        #                 {"status": 1}
        #             ]
        #         }
        #     },
        #     {
        #         "$project": {
        #             "_id": 1  # Project only the _id field
        #         }
        #     }
        # ]
        # store_details = db.stores.aggregate(pipeline)
        # store_ids = [store['_id'] for store in store_details]

        # Aggregation query to search products with matching store IDs
        product_pipeline = [
            {
                "$match": {
                    "serviceZones.zoneId": {
                        "$in": zone_id
                    },
                    "status": 1
                }
            },
            {
                "$facet": {
                    "storeDetails": [
                        {
                            "$project": {
                                "_id": 1,
                                "storeName.en": 1,
                                "hygieneRating": 1,
                                "currencyCode": 1,
                                "currencySymbol": 1,
                                "averageCostForMealForTwo": 1,
                                "avgRating": 1,
                                "favouriteUsers": 1,
                                "storeIsOpen": 1,
                                "supportedOrderTypes": 1,
                                "businessLocationAddress":1,
                                "logoImages.logoImageMobile": 1,
                                "bannerImages.bannerImageMobile": 1
                            }
                        },
                        { "$skip": skip },
                        { "$limit": limit },
                        {
                            "$lookup": {
                                "from": "childProducts",
                                "let": { "storeId": "$_id" },
                                "pipeline": [
                                    {
                                        "$match": {
                                            "$expr": {
                                                "$and": [
                                                    { "$eq": ["$storeId", "$$storeId"] },
                                                    { "$regexMatch": { "input": "$productname.en", "regex": ".*Burger.*", "options": "i" } }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$project": {
                                            "_id":0,
                                            "productname": "$productname.en",
                                            "parentProductId": 1,
                                            "productId": { "$toString": "$_id" },
                                            "status": 1,
                                            "childProductId": "$childproductid",
                                            "images": "$images.small",
                                            "currencySymbol": "$currencySymbol",
                                            "currency": "$currency",
                                            "detailDescription": "$detailDescription.en",
                                            "containsMeat":"$containsMeat",
                                            "productTag":"$units.productTag",
                                            "allPrice": {
                                                "$reduce": {
                                                    "input": "$units.b2cPricing",
                                                    "initialValue": [],
                                                    "in": {
                                                        "$concatArrays": ["$$value", "$$this"]
                                                    }
                                                }
                                            }
                                        }
                                    }
                                ],
                                "as": "productData"
                            }
                        },
                        { "$unwind": { "path": "$productData", "preserveNullAndEmptyArrays": True } },
                        {
                            "$group": {
                                "_id": "$_id",
                                "storeName": { "$first": "$storeName.en" },
                                "hygieneRating": { "$first": "$hygieneRating" },
                                "currencyCode": { "$first": "$currencyCode" },
                                "currencySymbol": { "$first": "$currencySymbol" },
                                "averageCostForMealForTwo": { "$first": "$averageCostForMealForTwo" },
                                "avgRating": { "$first": "$avgRating" },
                                "favouriteUsers": { "$first": "$favouriteUsers" },
                                "storeIsOpen": { "$first": "$storeIsOpen" },
                                "supportedOrderTypes": { "$first": "$supportedOrderTypes" },
                                "logoImageMobile": { "$first": "$logoImages.logoImageMobile" },
                                "bannerImageMobile": { "$first": "$bannerImages.bannerImageMobile" },
                                "lat": { "$first": "$businessLocationAddress.lat" },
                                "long": { "$first": "$businessLocationAddress.long" },
                                "address": { "$first": "$businessLocationAddress.address" },
                                "productData": { "$push": "$productData" } 
                            }
                        },
                        {
                            "$project": {
                                "_id": { "$toString": "$_id" },
                                "storeName": 1,
                                "hygieneRating": 1,
                                "currencyCode": 1,
                                "currencySymbol": 1,
                                "averageCostForMealForTwo": 1,
                                "avgRating": 1,
                                # "favouriteUsers": 1,
                                "storeIsOpen": 1,
                                "supportedOrderTypes": 1,
                                "logoImageMobile": 1,
                                "bannerImageMobile": 1,
                                "address":1,
                                "lat":1,
                                "long":1,
                                "productData": { "$slice": ["$productData", 5] }, 
                                "isFavourite": {
                                "$cond": {
                                    "if": { "$in": [user_id, { "$ifNull": ["$favouriteUsers", []] }] }, 
                                    "then": True,
                                    "else": False}},
                                "userLikeCount": { "$size": { "$ifNull": ["$favouriteUsers", []] } } 
                            }
                        },
                        {
                            "$match": {
                                "productData": { "$ne": [] } 
                            }
                        },
                        {
                            "$sort": { "_id": 1 }
                        },
                        
                    ],
                    "storeCount": [
                        { "$count": "count" }
                    ]
                }
            }
        ]
        print("product_pipeline",product_pipeline)
        # Execute the query
        results = list(db.stores.aggregate(product_pipeline))
        print("query execution time ",time.time() - start_time)
        # Process the response data
        stores_with_products = results[0].get("storeDetails", [])
        if not stores_with_products:
            return JsonResponse({"message": "No results found"}, safe=False, status=404)
        total_count = results[0].get("storeCount", [{"count": 0}])[0].get("count", 0)
        if total_count >100:
            total_count = 100
        for store in stores_with_products:
            # store_details = store.get('storeDetails', {})
            store_lat = float(store.get('lat', 0))
            store_lon = float(store.get('long', 0))
            distance_km = geodesic((user_lat, user_long), (store_lat, store_lon)).kilometers
            distance_miles = distance_km * 0.621371
            store['distance_km'] = distance_km
            store['distance_miles'] = distance_miles

        response_data = {
            "data": stores_with_products,
            "totalStoresCount": total_count,
            "executionTime": time.time() - start_time
        }
        return JsonResponse(response_data, safe=False, status=200)

class NewStoresByZone(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META.get("HTTP_AUTHORIZATION", "")
        user_lat = request.GET.get('lat', "")
        user_long = request.GET.get('long', "")
        try:
            page = int(request.GET.get('page', 1))
        except:
            page = 0
        from_data = int(page * 20) - 20
        to_data = 20 
        geo_query = {
              "$geoNear": {
                 "near": {
                    "type": "Point",
                    "coordinates": [float(user_lat), float(user_long)]
                 },
                 "distanceField": "distance",
                 "spherical": True
              }
            }
        store_details = db.newStoresByZone.aggregate(
            [
            geo_query,
            {"$facet":{"count":[
            {
               "$count":"total"
            }],
            "data":[
                {
                "$skip": from_data
                },
                {
                "$limit": to_data
                }
            ]
        }} 
        ])
        final_response = []
        response_store = list(store_details)
        for store in response_store[0]['data']:
            final_response.append(
                {
                    "id": str(store['_id']),
                    "storeId": store['storeId'],
                    "storeName": store['storeName'],
                    "speciality": store['speciality'],
                    "zoneId": store['zoneId'],
                    "location": store['storeLocation'],
                    "businessLocationAddress": store['businessLocationAddress'],
                    "avgRating": store['avgRating'],
                    "logoImages": store['logoImages'],
                    "distance": store['distance'],
                }
            )
        try:
            pen_count = response_store[0]['count'][0]['total']
        except:
            pen_count = 0
        print('api response time -> ', time.time() - start_time)
        response_data = {'message': 'data found' if pen_count != 0 else 'data not found' , 'data': final_response if 'data' in response_store[0] else [], 'pencount': pen_count}
        return JsonResponse(response_data, status=200 if pen_count != 0 else 404)

class PopularStoresByZone(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META.get("HTTP_AUTHORIZATION", "")
        user_lat = request.GET.get('lat', "")
        user_long = request.GET.get('long', "")
        zone_id = request.GET.get("zoneId","")
        zone_id = zone_id.replace("%2C", ",")
        language = request.GET.get('language', 'en')

        if zone_id == "":
            response_data = {"message": "please enter the zone id"}
            return JsonResponse(response_data, safe=False, status=422)
        try:
            skip = int(request.GET.get('skip', 0))
            limit = int(request.GET.get('limit', 20))
        except Exception as e:
            print('e---',e)
            skip = 0
            limit = 20
        from_data = skip
        to_data = limit
        try:
            user_id = json.loads(token)["userId"]
        except Exception as e:
            print(e)
            user_id = ""
        if user_id == "":
            user_id = request.GET.get('userId', "")

        print("User ID:", user_id)


        speciality_ids_param =  request.GET.get("cuisines", "")
        speciality_ids = list(filter(None, map(str.strip, speciality_ids_param.split(','))))
        min_ratings_data = request.GET.get("minRatings")
        max_ratings_data = request.GET.get("maxRatings")
        min_ratings_data = float(min_ratings_data) if min_ratings_data is not None else None
        max_ratings_data = float(max_ratings_data) if max_ratings_data is not None else None
        avg_cost_min = request.GET.get("avgCost")
        avg_cost_max = request.GET.get("avgCostMax")
        avg_cost_min = float(avg_cost_min) if avg_cost_min is not None else None
        avg_cost_max = float(avg_cost_max) if avg_cost_max is not None else None
        user_lat = float(request.GET.get("lat", 0))
        user_lon = float(request.GET.get("lat", 0))
        seq_id = int(request.GET.get("sort", 0))
        delivery_filter_data = request.GET.get("deliveryTypes","")
        delivery_filter_data = delivery_filter_data.replace("%2C", ",")
        zone_id = [ids for n in zone_id.split() for ids in n.split(",")]
        query = {"serviceZones.zoneId": {"$in":zone_id},"status":1}
        if speciality_ids:
            query["specialities"] = {"$in": speciality_ids}
        # banner_query = {}

        if min_ratings_data is not None or max_ratings_data is not None:
            rating_query = {}
            if min_ratings_data is not None:
                rating_query["$gte"] = min_ratings_data
            if max_ratings_data is not None:
                rating_query["$lte"] = max_ratings_data
            query['avgRating'] = rating_query


        # if avg_cost_min != 0 or avg_cost_max != 0:
        #     query['averageCostForMealForTwo'] = {
        #         "$gte": float(avg_cost_min),
        #         "$lte": float(avg_cost_max)
        #     }
        if avg_cost_min is not None or avg_cost_max is not None:
            cost_query = {}
            if avg_cost_min is not None:
                cost_query["$gte"] = avg_cost_min
            if avg_cost_max is not None:
                cost_query["$lte"] = avg_cost_max
            query['averageCostForMealForTwo'] = cost_query

        order_type = request.GET.get('orderType', '')

        delivery_types_filter = [delivery_types for n in delivery_filter_data.split() for delivery_types in n.split(",")]
        if len(delivery_types_filter) > 0:
            query["deliveryTypes._id"] = {"$in":delivery_types_filter}
        if order_type.isdigit():
            order_type_id = int(order_type)
            # Map order types to supported order types
            if order_type_id == 1:
                query['supportedOrderTypes'] = 1
            elif order_type_id == 2:
                query['supportedOrderTypes'] = 2
            # Check if the order type includes table reservations
            elif order_type_id == 3:
                query['tableReservations'] = True
            # # Check if the order type includes table reservations
            elif order_type_id == 0:
                query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        else:
            # Default to all if the orderType value is not a valid integer
            query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        sort_by_distance = request.GET.get('sortByDistance')


        pipeline = [
            {"$match": query},
            { "$sort": { "avgRating": -1 }},
            {"$facet": {
                "count": [{"$count": "total"}],
                "data": [
                    {"$skip": from_data},
                    {"$limit": to_data}
                ]
            }}
        ]

        store_details = db.stores.aggregate(pipeline)
        final_response = []
        response_store = list(store_details)

        for store in response_store[0]['data']:
            try:
                store_user_count = store['favouriteUsers']
                fav_store_user_count = len(store_user_count)
            except Exception as e:
                print(e)
                fav_store_user_count = 0

            total_review_count = db.sellerReviewRatings.find(
                            {"sellerId": str(store['_id']), "sellerReview": {"$ne": ""}, "status": 1}
                        ).count()

            if "favouriteUsers" in store:
                if user_id in store["favouriteUsers"]:
                    favourite_store = True
                else:
                    favourite_store = False
            else:
                favourite_store = False
            store_lat = float(store["businessLocationAddress"]["lat"])
            store_lon = float(store["businessLocationAddress"]["long"])
            distance_km = geodesic((user_lat, user_long), (store_lat, store_lon)).kilometers
            reels_id = ""
            reels_available = False
            find_customer = db.customer.find_one({'storeId': str(store['_id']), "userType": 9})
            if find_customer is not None:
                post_details = db.posts.find_one({"userId": ObjectId(str(find_customer['_id'])), "mediaType1": 1}, {'_id': 1})
                if post_details is not None:
                    reels_available = True
                    reels_id = str(post_details['_id'])
            
            cusine_name = ""
            specialities_ids = [ObjectId(i) for i in store["specialities"]]
            specialities_info = list(specialities_collection.find({"_id": {"$in": specialities_ids}}, {"specialityName": 1}))
            for spec_data in specialities_info:
                if not cusine_name:
                    cusine_name = spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
                else:
                    cusine_name += ", " + spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
            total_rating_data = store.get('gastonReviewDetails', [])
            total_star_rating = db.sellerReviewRatings.aggregate(
                    [
                        {
                            "$match": {
                                "status": 1,
                                "rating": {"$ne": 0},
                                "sellerId": str(store['_id']),
                                "attributeId": {"$ne": ""},
                                "plateformName":"GetFudo"
                            }
                        },
                        {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
                    ]
                )
            total_getfudo_rating = 0
            avg_rating_getfudo = 0.0
            totat_star = list(total_star_rating)
            if totat_star:
                total_getfudo_rating = totat_star[0]["count"]
                avg_rating_getfudo = totat_star[0]["avgRating"]
            total_review = db.sellerReviewRatings.find(
                            {"sellerId": str(store['_id']), "plateformName":"GetFudo","sellerReview": {"$ne": ""}, "status": 1}
                        ).count()
            if total_review or total_getfudo_rating:
                total_rating_data.append({"GetFudo":{
                    "ratingsCount":str(total_getfudo_rating),
                    "reviewsCount":total_review,
                    "reviewRatings": avg_rating_getfudo
                }})
            # Extract review ratings and calculate the average
            avg_ratings = [
                platform_data[platform]["reviewRatings"]
                for platform_data in total_rating_data
                for platform in platform_data
                if "reviewRatings" in platform_data[platform]
            ]
            avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
            
            
            final_response.append({
                #nnnnn
                "_id": str(store['_id']),
                "cuisines": cusine_name,
                "isFavourite":favourite_store,
                "storeName": store['storeName']['en'],
                "avgRating": avg_rating_value,
                "registrationDateTimeStamp": store.get('registrationDateTimeStamp'),
                "averageDeliveryTime": store.get('averageDeliveryTimeInMins'),
                "minimumOrder": store.get('minimumOrder'),
                'openForOrders': store.get('storeIsOpen', False),
                'nextOpensOnTimeStampIfClosed': store.get('nextOpenTime', '') if not store.get('storeIsOpen', False) else '',
                'nextClosesOnTimeStampIfOpen': store.get('nextCloseTime', ''),
                'logoUrl': store.get('logoImages', {}).get('logoImageMobile', ""),
                'storeBannerUrl': store.get('bannerImages', {}).get('bannerImageMobile', ""),
                "reviewCount":total_review_count,
                # 'storePickup': True if store['supportedOrderTypes'] in [1, 3] else False,
                # 'homeDelivery': True if store['supportedOrderTypes'] in [2, 3] else False,
                # 'favoriteStore': False,  # Need more information on how to determine this
                'averageCostfForMealForTwo': store.get('averageCostForMealForTwo', 0.0),
                'currencyCode': store.get('currencyCode', ''),
                'currencySymbol': store.get('currencySymbol', ''),
                # "cartValueForFreeDelivery": store.get('freeDeliveryAbove'),
                'distanceFromUserInKm': round(distance_km,2),
                'city': store.get('businessLocationAddress', {}).get('city', ""),
                'address': store.get('businessLocationAddress', {}).get('address', ""),
                'hygieneRating': store.get('hygieneRating', 0),
                "userLikeCount": fav_store_user_count,
                "reelsId": reels_id,
                "reelsAvaialbe": reels_available
            })

        if final_response:
            if seq_id == 3:
                final_response.sort(key=lambda x: x['averageCostfForMealForTwo'])
            elif seq_id == 4:
                final_response.sort(key=lambda x: x['averageCostfForMealForTwo'], reverse=True)
            elif seq_id == 1:
                final_response.sort(key=lambda x: x['reviewCount'], reverse=True)
            elif seq_id == 7:
                final_response.sort(key=lambda x: x['avgRating'], reverse=True)
            elif seq_id == 2:
                final_response.sort(key=lambda x: x['averageDeliveryTime'])
            elif seq_id == 6:
                final_response.sort(key=lambda x: x['distanceFromUserInKm'])
            elif seq_id == 5:
                # Implement your own recommended logic here
                pass
        
        try:
            pen_count = response_store[0]['count'][0]['total']
        except:
            pen_count = 0
            
        print('API response time ->', time.time() - start_time)
        response_data = {
            'message': 'Data found' if pen_count else 'Data not found',
            'data': final_response,
            'pencount': pen_count
        }

        return JsonResponse(response_data, status=200 if pen_count else 404)

class BookTableNearYouByZone(APIView):
    def get(self, request):
        start_time = time.time()
        token = request.META.get("HTTP_AUTHORIZATION", "")
        user_lat = request.GET.get('lat', "")
        user_long = request.GET.get('long', "")
        try:
            page = int(request.GET.get('page', 1))
        except:
            page = 1
        from_data = int(page * 20) - 20
        to_data = 20 
        geo_query = {
              "$geoNear": {
                 "near": {
                    "type": "Point",
                    "coordinates": [float(user_lat), float(user_long)]
                 },
                 "distanceField": "distance",
                 "spherical": True
              }
            }
        store_details = db.popularStoresByZone.aggregate(
            [
            geo_query,
            {"$facet":{"count":[
            {
               "$count":"total"
            }],
            "data":[
                {
                "$skip": from_data
                },
                {
                "$limit": to_data
                }
            ]
        }} 
        ])
        final_response = []
        response_store = list(store_details)
        for store in response_store[0]['data']:
            final_response.append(
                {
                    "id": str(store['_id']),
                    "storeId": store['storeId'],
                    "storeName": store['storeName'],
                    "speciality": store['speciality'],
                    "zoneId": store['zoneId'],
                    "location": store['storeLocation'],
                    "businessLocationAddress": store['businessLocationAddress'],
                    "avgRating": store['avgRating'],
                    "logoImages": store['logoImages'],
                    "distance": store['distance'],
                }
            )
        try:
            pen_count = response_store[0]['count'][0]['total']
        except:
            pen_count = 0
        print('api response time -> ', time.time() - start_time)
        response_data = {'message': 'data found' if pen_count != 0 else 'data not found' , 'data': final_response if 'data' in response_store[0] else [], 'pencount': pen_count}
        return JsonResponse(response_data, status=200 if pen_count != 0 else 404)
   
def CreateResponseDataV1(row, user_lat, user_lon, offers_result, specialities_data,user_id,language):
    # print("inside the CreateResponseDataV1 ---->>> ")
    # print("row: ", row)
    # Calculate distance from user
    # if 'location' in row:
    #     store_lat = row['location']['lat']
    #     store_lon = row['location']['lon']
    #     distance_km = geodesic((user_lat, user_lon), (store_lat, store_lon)).kilometers
    # else:
    store_lat = float(row["businessLocationAddress"]["lat"])
    store_lon = float(row["businessLocationAddress"]["long"])
    distance_km = geodesic((user_lat, user_lon), (store_lat, store_lon)).kilometers

    # Convert distance to miles
    distance_miles = distance_km * 0.621371
    cusine_name =""

    # s = time.time()
    # print("start specialities --->>> ", s)
    # print("before specialities", time.time() - s)
    row['specialities'] = [ObjectId(i) for i in row["specialities"]]
    # specialities = specialities_collection.find({"_id": {"$in": row["specialities"]}}, {"specialityName": 1, "_id": 0})
    # row['specialities'] = [i["specialityName"]["en"] for i in specialities]
    specialities_info = list(specialities_collection.find({"_id": {"$in": row["specialities"]}}, {"specialityName": 1, "image": 1}))
    specialities_data.extend(specialities_info)
    for spec_data in specialities_info:
        if not cusine_name:
            cusine_name = spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))
        else:
            cusine_name += ", " + spec_data['specialityName'].get(language, spec_data['specialityName'].get("en", ""))

    # Assign the list of specialty dictionaries to 'specialities' field
    # row['specialities'] = specialities_data
    # print("after specialities", time.time() - s)
    # Format the offers data for the current store
    formatted_offers = []
    store_id = str(row['_id'])
    print("store id --->> ", store_id)
    # Retrieve offers data for the current store ID
    # store_offers = [offer for offer in offers_result if store_id in offer.get('storeId', [])]

    # for offer in store_offers:
    #     formatted_offer = {
    #         "offerId": str(offer['_id']),
    #         "offerName": offer['name']['en'],
    #         "storeId": offer['storeId'],
    #         # "productslist": offer.get('productslist', []),
    #         # "startDateTime": offer.get('startDateTime', ''),
    #         # "endDateTime": offer.get('endDateTime', ''),
    #         "offerType": offer.get('offerType', ''),
    #         "offerTypeString": offer.get('offerTypeString', ''),
    #         "discountValue": offer.get('discountValue', ''),
    #         # "applicableOn": offer.get('applicableOn', ''),
    #         # "applicableOnStatus": offer.get('applicableOnStatus', '')
    #     }
    #     formatted_offers.append(formatted_offer)
    try:
        store_user_count = row.get('favouriteUsers',[])
        fav_store_user_count = len(store_user_count)
    except Exception as e:
        print(e)
        fav_store_user_count = 0
    if "favouriteUsers" in row:
        if user_id in row["favouriteUsers"]:
            favourite_store = True
        else:
            favourite_store = False
    else:
        favourite_store = False
    reels_id = ""
    reels_available = False
    find_customer = db.customer.find_one({'storeId': str(row['_id']), "userType": 9})
    if find_customer is not None:
        post_details = db.posts.find_one({"userId": ObjectId(str(find_customer['_id'])), "mediaType1": 1}, {'_id': 1})
        if post_details is not None:
            reels_available = True
            reels_id = str(post_details['_id'])


    total_rating_data = row.get('gastonReviewDetails', [])
    total_star_rating = db.sellerReviewRatings.aggregate(
            [
                {
                    "$match": {
                        "status": 1,
                        "rating": {"$ne": 0},
                        "sellerId": str(row['_id']),
                        "attributeId": {"$ne": ""},
                        "plateformName":"GetFudo"
                    }
                },
                {"$group": {"_id": "$sellerId", "avgRating": {"$avg": "$rating"}, "count": {"$sum": 1}}}
            ]
        )
    total_getfudo_rating = 0
    avg_rating_getfudo = 0.0
    totat_star = list(total_star_rating)
    if totat_star:
        total_getfudo_rating = totat_star[0]["count"]
        avg_rating_getfudo = totat_star[0]["avgRating"]
    total_review = db.sellerReviewRatings.find(
                    {"sellerId": str(row['_id']), "plateformName":"GetFudo","sellerReview": {"$ne": ""}, "status": 1}
                ).count()
    if total_review or total_getfudo_rating:
        total_rating_data.append({"GetFudo":{
            "ratingsCount":str(total_getfudo_rating),
            "reviewsCount":total_review,
            "reviewRatings": avg_rating_getfudo
        }})
    # Extract review ratings and calculate the average
    avg_ratings = [
        platform_data[platform]["reviewRatings"]
        for platform_data in total_rating_data
        for platform in platform_data
        if "reviewRatings" in platform_data[platform]
    ]
    avg_rating_value = sum(avg_ratings) / len(avg_ratings) if avg_ratings else 0.0
    formatted_row = {
        '_id': str(row['_id']),
        'storeName': row['storeName']['en'],
        'avgRating': avg_rating_value,
        'reviewCount': row.get('totalReviews', 0),
        'registrationDateTimeStamp': row.get('registrationDateTimeStamp'),
        "cuisines": cusine_name,
        # 'Address': {
        #     'AddressLine1': row.get('businessLocationAddress', {}).get('addressLine1', ""),
        #     'addressLine2': row.get('businessLocationAddress', {}).get('addressLine2', ""),
        #     'City': row.get('businessLocationAddress', {}).get('city', ""),
        #     'State': row.get('businessLocationAddress', {}).get('state', ""),
        #     'zipCode': row.get('businessLocationAddress', {}).get('postCode', ""),
        #     'Country': row.get('businessLocationAddress', {}).get('country', "")
        # },
        # 'Specialities': specialities_data, #[specialities_collection.find_one({"_id": ObjectId(spec)})['specialityName']['en'] for spec in
                         # row['specialities']],
        "averageDeliveryTime": row.get('averageDeliveryTimeInMins'),
        "minimumOrder": row.get('minimumOrder'),
        # "percentageText": [str(offer['discountValue']) + "%" + " off" if offer['offerType'] == 1 else "₹" + str(
        #     offer['discountValue']) + " off" for offer in store_offers],
        'openForOrders': row.get('storeIsOpen', False),
        'nextOpensOnTimeStampIfClosed': row.get('nextOpenTime', '') if not row.get('storeIsOpen', False) else '',
        'nextClosesOnTimeStampIfOpen': row.get('nextCloseTime', ''),
        'logoUrl': row.get('logoImages', {}).get('logoImageMobile', ""),
        'storeBannerUrl': row.get('bannerImages', {}).get('bannerImageMobile', ""),
        # 'bannerImageUrl': image_mobile_url,
        # 'tableOrdering': row.get('tableReservations', False),
        # 'storePickup': True if row['supportedOrderTypes'] in [1, 3] else False,
        # 'homeDelivery': True if row['supportedOrderTypes'] in [2, 3] else False,
        # 'favoriteStore': False,  # Need more information on how to determine this
        'averageCostfForMealForTwo': row.get('averageCostForMealForTwo', 0.0),
        'currencyCode': row.get('currencyCode', ''),
        'currencySymbol': row.get('currencySymbol', ''),
        # "cartValueForFreeDelivery": row.get('freeDeliveryAbove'),
        'distanceFromUserInKm': round(distance_km,2),
        'city': row.get('businessLocationAddress', {}).get('city', ""),
        'address': row.get('businessLocationAddress', {}).get('address', ""),
        'hygieneRating': row.get('hygieneRating', 0),
        'deliveryPartners': row.get('deliveryPartners', {}),
        "distanceMiles":distance_miles,
        "userLikeCount": fav_store_user_count,
        "isFavourite": favourite_store,
        "reelsId": reels_id,
        "reelsAvaialbe": reels_available
    }

    # print("formatted_row --->>> ", formatted_row)
    return formatted_row, specialities_data


class GetNearByStore(APIView):
    def get(self, request):
        s = time.time()
        print("start --->>> ", s)
        ##### ------------ accepting headera and query parameters ------------------- #####
        language = request.META["HTTP_LANGUAGE"] if "HTTP_LANGUAGE" in request.META else "en"
        token = request.META["HTTP_AUTHORIZATION"]
        if token == "":
            response_data = {
                "message": "unauthorized",
                "totalCount": 0,
                "data": [],
            }
            return ResponseHelper.get_status_401(response_data)
        try:
            user_id = json.loads(token)["userId"]
            # user_id = "5eb1801d10f43369247407ca"
            print(user_id)
        except:
            user_id = ""
        if user_id == "":
            user_id = request.GET.get('userId', "")
        store_category = request.query_params.get("storeCategoryId")
        if not store_category:
            return ResponseHelper.get_status_404({"message": "storeCategoryId is missing or invalid"})
        speciality_ids_param = request.query_params.get("cuisines", "")
        speciality_ids = list(filter(None, map(str.strip, speciality_ids_param.split(','))))
        if 'zoneId' not in request.query_params:
            # Return 400 status and an error response if 'zoneId' key is not provided
            response_data = {
                "error": "zoneId key not provided"
            }
            return ResponseHelper.get_status_404(response_data)
        zone_id = request.query_params.get("zoneId")
        zone_id = zone_id.replace("%2C", ",")
        if not zone_id:
            # Return 404 status and an error response if 'zoneId' key has no value
            response_data = {
                "error": "zoneId key has no value"
            }
            return ResponseHelper.get_status_404(response_data)
        min_ratings_data = request.query_params.get("minRatings")
        max_ratings_data = request.query_params.get("maxRatings")
        min_ratings_data = float(min_ratings_data) if min_ratings_data is not None else None
        max_ratings_data = float(max_ratings_data) if max_ratings_data is not None else None
        avg_cost_min = request.query_params.get("avgCost")
        avg_cost_max = request.query_params.get("avgCostMax")
        avg_cost_min = float(avg_cost_min) if avg_cost_min is not None else None
        avg_cost_max = float(avg_cost_max) if avg_cost_max is not None else None
        user_lat = float(request.query_params.get("userLat", 0))
        user_lon = float(request.query_params.get("userLon", 0))
        seq_id = int(request.query_params.get("sort", 0))
        delivery_filter_data = request.query_params.get("deliveryTypes","")
        delivery_filter_data = delivery_filter_data.replace("%2C", ",")
        skip = int(request.GET.get('skip', 0))
        limit = int(request.GET.get('limit', 20))
        query = {
            "categoryId": store_category,
            "status" : 1,
            "storeIsOpen":True
        }
        offer_ids_param = request.query_params.get("offers", "")
        offer_ids = list(filter(None, map(str.strip, offer_ids_param.split(','))))
        if offer_ids_param:
            offer_ids = [ObjectId(i) for i in offer_ids]
            offer_stores_query = {
                "_id": {"$in": offer_ids},
                "status": 1
            }
            offer_stores = list(offers_collection.distinct("storeId", offer_stores_query))
            print("offer_stores --->>> ", offer_stores)
            query["_id"] = {"$in": [ObjectId(store_id) for store_id in offer_stores]}
        if speciality_ids:
            query["specialities"] = {"$in": speciality_ids}
        # banner_query = {}
        zone_id = [ids for n in zone_id.split() for ids in n.split(",")]
        if zone_id:
            # banner_query["zones.zoneId"] = zone_id
            query["serviceZones.zoneId"] = {"$in":zone_id}

        if min_ratings_data is not None or max_ratings_data is not None:
            rating_query = {}
            if min_ratings_data is not None:
                rating_query["$gte"] = min_ratings_data
            if max_ratings_data is not None:
                rating_query["$lte"] = max_ratings_data
            query['avgRating'] = rating_query


        # if avg_cost_min != 0 or avg_cost_max != 0:
        #     query['averageCostForMealForTwo'] = {
        #         "$gte": float(avg_cost_min),
        #         "$lte": float(avg_cost_max)
        #     }
        if avg_cost_min is not None or avg_cost_max is not None:
            cost_query = {}
            if avg_cost_min is not None:
                cost_query["$gte"] = avg_cost_min
            if avg_cost_max is not None:
                cost_query["$lte"] = avg_cost_max
            query['averageCostForMealForTwo'] = cost_query

        order_type = request.query_params.get('orderType', '')

        delivery_types_filter = [delivery_types for n in delivery_filter_data.split() for delivery_types in n.split(",")]
        if len(delivery_types_filter) > 0:
            query["deliveryTypes._id"] = {"$in":delivery_types_filter}
        if order_type.isdigit():
            order_type_id = int(order_type)
            # Map order types to supported order types
            if order_type_id == 1:
                query['supportedOrderTypes'] = 1
            elif order_type_id == 2:
                query['supportedOrderTypes'] = 2
            # Check if the order type includes table reservations
            elif order_type_id == 3:
                query['tableReservations'] = True
            # # Check if the order type includes table reservations
            elif order_type_id == 0:
                query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        else:
            # Default to all if the orderType value is not a valid integer
            query['supportedOrderTypes'] = {'$in': [1, 2, 3]}
        sort_by_distance = request.query_params.get('sortByDistance')
        geo_near = {}
        print("before sort_by_distance", time.time() - s)
        if sort_by_distance:
            geo_near = {
              "$geoNear": {
                 "near": {
                    "type": "Point",
                    "coordinates": [float(user_lat), float(user_lon)]
                 },
                 "distanceField": "distance",
                 "spherical": True
              }
            }
        projection = {
            "_id": 1,
            "storeName.en": 1,  # Adjust this if 'storeName' is not nested
            "avgRating": 1,
            "totalReviews": 1,
            "registrationDateTimeStamp": 1,
            "businessLocationAddress": 1,
            # "businessLocationAddress.addressLine2": 1,
            # "businessLocationAddress.lat": 1,
            # "businessLocationAddress.long": 1,
            # "businessLocationAddress.city": 1,
            # "businessLocationAddress.state": 1,
            # "businessLocationAddress.postCode": 1,
            # "businessLocationAddress.country": 1,
            "averageDeliveryTimeInMins": 1,
            "minimumOrder": 1,
            "specialities": 1,
            "storeIsOpen": 1,
            "hygieneRating":1,
            "nextCloseTime": 1,
            "nextOpenTime": 1,
            "gastonReviewDetails":1,
            "logoImages.logoImageMobile": 1,
            "bannerImages.bannerImageMobile": 1,
            "tableReservations": 1,
            "supportedOrderTypes": 1,
            "averageCostForMealForTwo": 1,
            "currencyCode": 1,
            "currencySymbol": 1,
            "freeDeliveryAbove": 1,
            "deliveryPartners":1,
            "favouriteUsers":1
        }
        print("before query", time.time() - s)
        # Print the time taken before querying the database
        # print("before query", time.time() - s)
        # print("query: ", query, "projection: ", projection)
        page = int(request.GET.get("page", 1))
        from_data = (page - 1) * 20
        # to_data = page * 20
        aggregation  = []
        fav_aggregation = []
        if geo_near:
            aggregation.append(geo_near)
            fav_aggregation.append(geo_near)
        if query:
            aggregation.append({
                "$match": query
            })
            fav_query = query.copy()
            fav_query["favouriteUsers"]={"$in":[user_id]}
            fav_query["storeIsOpen"] = {"$in": [True, False]}
            # fav_query["storeIsOpen"] = False  # Add the storeIsOpen condition here
            fav_aggregation.append({
                "$match": fav_query
            })
        aggregation.append({"$facet":{"count":[
            {
               "$count":"total"
            }],
            "data":[
                {
                "$skip": skip
                },
                {
                "$limit": limit
                },
                {
                "$project": projection
                }
            ]
        }})
        fav_aggregation.append({"$facet":{"count":[
            {
               "$count":"total"
            }],
            "data":[
                {
                "$skip": skip
                },
                {
                "$limit": limit
                },
                {
                "$project": projection
                }
            ]
        }})
        # # print("aggregation---->> ", aggregation)
        # banner_data = banner_collection.find_one(banner_query, {"image_mobile": 1})
        # image_mobile_url = banner_data.get("image_mobile") if banner_data else ""
        print("aggregation",aggregation)
        print("fav_aggregation",fav_aggregation)

        stores = list(stores_collection.aggregate(aggregation))
        fav_stores = list(stores_collection.aggregate(fav_aggregation))
        # if not stores:
        #     return ResponseHelper.get_status_404("No data found in mongoDB")
        # else:
        # Extract store IDs from the stores_result
        store_ids = [str(store['_id']) for store_data in stores if 'data' in store_data for store in store_data['data']] + \
            [str(store['_id']) for store_data in fav_stores if 'data' in store_data for store in store_data['data']]

        # Query for banner images specific to each store
        banner_query = {
            "data.id": {"$in": store_ids},
            "storeCategoryId": store_category
        }
        if zone_id:
            banner_query["zones.zoneId"] = {"$in":zone_id}

        # Fetch banner data from the database
        banner_data_list = list(banner_collection.find(banner_query, {"data.id": 1, "_id": 1, "image_mobile": 1}))

        # Create an array to store banner details
        banner_data_array = []

        # Populate the array with banner details
        for banner in banner_data_list:
            banner_data_array.append({
                "storeId": str(banner['data'][0]['id']),  # Store ID
                "bannerId": str(banner['_id']),  # Banner ID
                "mobileBannerImageUrl": banner['image_mobile']  # Image URL
            })
        # Query to find active offers for the store IDs
        offer_query = {
            "storeId": {"$in": store_ids},
            "status": 1
        }

        # Fetch active offers from the offers collection for the store IDs
        offers_result = list(offers_collection.find(offer_query, {
            "_id": 1,
            "name.en": 1,
            "storeId": 1,
            # "startDateTime": 1,
            # "endDateTime": 1,
            "offerType": 1,
            "offerTypeString": 1,
            "discountValue": 1,
            "applicableOn": 1,
            "applicableOnStatus": 1
        }))
        # Check if offers are retrieved
        if not offers_result:
            print("No offers found for store IDs:", store_ids)

        if stores:
            if stores[0]["count"]:
                total_count = stores[0]["count"][0]["total"]
            else:
                total_count = 0
            if fav_stores:
                stores = stores[0]["data"] + fav_stores[0]["data"]
                if fav_stores[0]["count"]:
                    fav_total_count = fav_stores[0]["count"][0]["total"]
                else:
                    fav_total_count = 0
            else:
                stores = stores[0]["data"]
                fav_total_count =0
            formatted_stores = []
            fav_store_data =[]
            # formatted_offers = []
            specialities_data = []
            for store_data in stores:
                store_id = str(store_data['_id'])
                # image_mobile_url = banner_data_dict.get(store_id, "")
                formatted_row, specialities = CreateResponseDataV1(store_data, user_lat, user_lon, offers_result,
                                                                           specialities_data,user_id,language)
                formatted_stores.append(formatted_row)
                if "favouriteUsers" in store_data and user_id in store_data["favouriteUsers"]:
                    fav_store_data.append(formatted_row)
                else:
                    pass
                    # print("User ID not found in favouriteUsers list")

                # formatted_offers.extend(offers)
            for store_data in fav_stores[0]["data"]:
                store_id = str(store_data['_id'])
                formatted_row, specialities = CreateResponseDataV1(store_data, user_lat, user_lon, offers_result,
                                                                           specialities_data,user_id,language)
                fav_store_data.append(formatted_row)
            unique_specialities = {}
            for spec in specialities_data:
                name = spec["specialityName"]["en"]
                if name not in unique_specialities:
                    unique_specialities[name] = {
                        "id": str(spec["_id"]),
                        "name": name,                               
                        "image": spec.get("image", "")
                    }

            uniq_data = list(unique_specialities.values())
            uniq_data = sorted(uniq_data, key=lambda x: x["name"])
            # print(uniq_data)

            if seq_id == 3:
                formatted_stores.sort(key=lambda x: x['averageCostfForMealForTwo'])
                fav_store_data.sort(key=lambda x: x['averageCostfForMealForTwo'])
            elif seq_id == 4:
                formatted_stores.sort(key=lambda x: x['averageCostfForMealForTwo'], reverse=True)
                fav_store_data.sort(key=lambda x: x['averageCostfForMealForTwo'], reverse=True)
            elif seq_id == 1:
                formatted_stores.sort(key=lambda x: x['reviewCount'], reverse=True)
                fav_store_data.sort(key=lambda x: x['reviewCount'], reverse=True)
            elif seq_id == 7:
                formatted_stores.sort(key=lambda x: x['avgRating'], reverse=True)
                fav_store_data.sort(key=lambda x: x['avgRating'], reverse=True)
            elif seq_id == 2:
                formatted_stores.sort(key=lambda x: x['averageDeliveryTime'])
                fav_store_data.sort(key=lambda x: x['averageDeliveryTime'])
            elif seq_id == 6:
                formatted_stores.sort(key=lambda x: x['distanceFromUserInKm'])
                fav_store_data.sort(key=lambda x: x['distanceFromUserInKm'])
            elif seq_id == 5:
                # Implement your own recommended logic here
                pass
            # if not formatted_stores:
            #     response_data = {
            #         "message": "No data found in MongoDB",  # Create a response indicating no data found
            #     }
            #     return ResponseHelper.get_status_404(response_data)
            delivery_types = []
            try:
                # Fetch all documents from the deliveryTypes collection
                delivery_types_response = db.deliveryTypes.find({})
                
                for doc in delivery_types_response:
                    print("Processing document...")

                    # Find stores with matching conditions
                    delivery_stores = db.stores.find({
                        "deliveryTypes": {
                            "$elemMatch": {
                                "_id": str(doc['_id'])  # Ensure type matches; convert only if necessary
                            }
                        },
                        "serviceZones.zoneId": {"$in": zone_id},  # Assumes `zone_id` is defined
                        "status": 1
                    })

                    # Check if any stores are returned
                    if delivery_stores.count() > 0:
                        print(str(doc['_id']), "matched document ID")
                        
                        # Convert _id to string if required
                        doc['_id'] = str(doc['_id'])
                        delivery_types.append(doc)

            except Exception as e:
                print(f"An error occurred: {e}")  # Log the exception for better debugging
                delivery_types = []
            # print("after query", time.time() - s)

            if sort_by_distance:
                formatted_stores.sort(key=lambda x: x['distanceFromUserInKm'])
                fav_store_data.sort(key=lambda x: x['distanceFromUserInKm'])

            formatted_stores_df = pd.DataFrame(formatted_stores)
            formatted_stores_df = formatted_stores_df.drop_duplicates(subset="storeName", keep="first")
            normal_store_data = formatted_stores_df.to_dict(orient="records")
            fav_store_data_df = pd.DataFrame(fav_store_data)
            fav_store_data_df = fav_store_data_df.drop_duplicates(subset="storeName", keep="first")
            final_fav_store_data = fav_store_data_df.to_dict(orient="records")

            # response_data = {"data": formatted_stores, "totalCount": total_count}
            # print("sort by distance", time.time() - s) # Print the time taken after sorting by distance
            response_data = {
                "data": normal_store_data,
                # "offers": formatted_offers,
                "banner": banner_data_array,
                "specialities": uniq_data,
                "totalCount": total_count,
                "favStores" : final_fav_store_data,
                "favStoresCount":fav_total_count,
                "deliveryTypes":delivery_types
            }
            return ResponseHelper.get_status_200(response_data)  # Return the formatted stores as a response
  
class StoreProductsVariantsDetails(APIView):
    def get(self, request):
        start_time = time.time()
        print('start_time---',start_time)
        token = request.META.get("HTTP_AUTHORIZATION", "")
        language = request.GET.get('language', 'en')
        store_id = request.GET.get('storeId', "")
        store_category_id = request.GET.get("storeCategoryId", "")
        skip = int(request.GET.get('skip', 0))
        limit = int(request.GET.get('limit', 10))
        if store_category_id == "":
            response_data = {
                "message": "store category id is blank",
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=422)
        if store_id == "":
            response_data = {
                "message": "store id is blank",
                "data": [],
            }
            return JsonResponse(response_data, safe=False, status=422)
        
        response_data = {}
        query={"storeId":ObjectId(store_id),"units.0.isPrimary":True,"status":1}
        product_data = db.childProducts.find(
            query,
            # {"_id": 1}
        ).skip(skip).limit(limit)
        product_count = db.childProducts.find(query).count()
        portion_details = []
        for p in product_data:
            # prodcut_details = db.childProducts.aggregate([
            #             {
            #                 '$match': {
            #                     '_id': ObjectId(str(p["_id"]))
            #                 }
            #             },
            #             {
            #                 '$lookup': {
            #                     'from': 'childProducts',
            #                     'let': { 'parentProductId': '$parentProductId', 'storeId': '$storeId' },
            #                     'pipeline': [
            #                         {
            #                             '$match': {
            #                                 '$expr': {
            #                                     '$and': [
            #                                         { '$eq': ['$parentProductId', '$$parentProductId'] },
            #                                         { '$eq': ['$storeId', '$$storeId'] }
            #                                     ]
            #                                 }
            #                             }
            #                         },
            #                         {
            #                             '$project': {
            #                                 'pPName': 1, 
            #                                 'units':1,
            #                                 "status":1,
            #                                 "containsMeat":1,
            #                                 "isPortion":1
            #                                                     }
            #                         }
            #                     ],
            #                     'as': 'variant'
            #                 }
            #             }
            #         ])
            # finl_prodcut_data = list(prodcut_details)
            # if len(finl_prodcut_data[0]['variant']) > 0:
            #     for variant in finl_prodcut_data[0]['variant']:
            #         print("variant",variant)
            #         if str(variant['status']) == "1":
            portion_details.append({
                'id': str(p['_id']),
                "childproductId":p['childproductid'],
                "parentProductId":p['parentProductId'],
                'productName': p['pPName']['en'],
                'portionName': p['units'][0]['unitName']['en'],
                'isParentProduct': p['units'][0]['isPrimary'],
                "containsMeat":p['containsMeat'],
                "isPortion":p['isPortion'],
                "images":p["images"],
                "storeId":str(p["storeId"])
            })
        end_timr = time.time() - start_time
        print('end_timr----', end_timr)
        response_data['data'] = portion_details
        response_data['count'] = product_count
        if portion_details:
            return JsonResponse(response_data, status=200)
        else:
            return JsonResponse(response_data, status=404)

class MenuItems(APIView):
    def get(self, request):
        try:
            start_time =time.time()
            token = request.META["HTTP_AUTHORIZATION"]
            if token == "":
                response_data = {"message": "Unauthorized", "total_count": 0, "data": []}
                return ResponseHelper.get_status_401(response_data)
            else:
                store_id = request.GET.get('store_id', "")
                if not store_id:
                    response_data = {'message': 'store id is missing'}
                    return JsonResponse(response_data, status=404)
                menu_data = db.menuItems.find_one({"storeId":store_id},{"_id":0,"storeId":1,"productData":1,"recommFilter":1,"total_products":1})
                
                if menu_data:
                    response = {
                        "message": "data found",
                        "data": menu_data,
                        "elapsed_time": time.time() - start_time
                    }
                    return JsonResponse(response, safe=False, status=200)
                else:
                    productData = []
                    recommFilter = []
                    must_query = []
                    must_query.append({"terms": {"status": [1, 2]}})
                    must_query.append({"match": {"storeId": str(store_id)}})
                    must_query.append({"match": {"units.isPrimary": True}})
                    bool_query = {"must": must_query}
                    query = {
                        "query": {
                            "bool": bool_query
                        },
                        "aggs": {
                            "group_by_catName": {
                                "terms": {
                                    "field": "categoryList.parentCategory.categoryName.en.keyword",
                                    "size": 100
                                },
                                "aggs": {
                                    "top_sales_hits": {
                                        "top_hits": {
                                            "_source": {
                                                "includes": [
                                                    "_id",
                                                    "parentProductId",
                                                    # "firstCategoryId",
                                                    # "catName",
                                                    # "secondCategoryId",
                                                    # "subCatName",
                                                    "childproductid",
                                                    "storeId",
                                                    # "thirdCategoryId",
                                                    "detailDescription",
                                                    # "subSubCatName",
                                                    "images.small",
                                                    # "suppliers",
                                                    "containsMeat",
                                                    "consumptionTime",
                                                    "currencySymbol",
                                                    "currency",
                                                    "units.b2cPricing",
                                                    "units.productTag",
                                                    "pName",
                                                    "storeCategoryId"
                                                ]
                                            },
                                            "size": 100
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    res = es.search(index=index_products, body=query)
                    for bucket in res["aggregations"]["group_by_catName"]["buckets"]:
                        product_data = []
                        for hit in bucket["top_sales_hits"]["hits"]["hits"]:
                            source = hit.get("_source", {})
                            flattened_data = {
                                "_id": hit.get("_id"),
                                "parentProductId": source.get("parentProductId"),
                                # "firstCategoryId": source.get("firstCategoryId"),
                                # "catName": source.get("catName"),
                                # "secondCategoryId": source.get("secondCategoryId"),
                                # "subCatName": source.get("subCatName"),
                                "childproductid": source.get("childproductid"),
                                "storeId": source.get("storeId"),
                                # "thirdCategoryId": source.get("thirdCategoryId"),
                                "detailDescription": source.get("detailDescription", {}).get("en"),
                                # "subSubCatName": source.get("subSubCatName"),
                                "images": source["images"][0]["small"] if source.get("images") else "",
                                # "suppliers": source.get("suppliers"),
                                "containsMeat": source.get("containsMeat"),
                                "consumptionTime": source.get("consumptionTime"),
                                "currencySymbol": source.get("currencySymbol"),
                                "currency": source.get("currency"),
                                "units": source["units"][0]["b2cPricing"] if source.get("units") else [],
                                "pName": source.get("pName", "").get("en"),
                                "storeCategoryId": source.get("storeCategoryId"),
                            }

                            # Add 'productTag' if present
                            if 'units' in source and 'productTag' in source['units']:
                                flattened_data['productTag'] = source['units']['productTag']
                            else:
                                flattened_data['productTag'] = {
                                            "isDairyFree" : False,
                                            "isPopular" : False,
                                            "isSpicy" : False,
                                            "isVegan" : False,
                                            "isVegetarian" :False,
                                        }
                            product_data.append(flattened_data)

                        productData.append({
                            "catName": bucket["key"],
                            "products": product_data,
                            "isSubCategories": False,
                            "subCategories": [],
                        })
                        
                        recommFilter.append({
                            "catName": bucket["key"],
                            "pencount": bucket["doc_count"]
                        })
                            
                    total_products = res.get("hits", {}).get("total", {}).get("value", 0)
                    response = {}
                    if total_products != 0:
                        print("adddddddddddddddddddddddddddd")
                        response = {
                            "storeId": str(store_id),
                            "productData": productData,
                            "recommFilter": recommFilter,
                            "total_products": total_products
                        }
                        filter_data = {"storeId": str(store_id)}
                        update = {"$set": response}
                        db.menuItems.update_one(filter_data, update, upsert=True)
                        response = {
                            "message": "data found",
                            "data": response,
                            "elapsed_time": time.time() - start_time
                        }
                        return JsonResponse(response, safe=False, status=200)
                    response = {"message": "data not found"}
                    return JsonResponse(response, safe=False, status=404)
        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            finalResponse = {
                "message": message,
            }
            return JsonResponse(finalResponse, safe=False, status=500)

class GetBannerList(APIView):
    def get(self, request):
        try:
            token = request.META["HTTP_AUTHORIZATION"]
            language = request.META["HTTP_LANGUAGE"]
            zone_id = request.GET["zoneId"]

            if token == "":
                response_data = {
                    "message": "unauthorized",
                }
                return JsonResponse(response_data, safe=False, status=401)
            else:
                # Create query condition for banner lookup
                condition = {
                    "status": 1,
                    "zones.zoneId": "650d5e2de920bc92760fe094"
                }
                print(condition)
                # Find banners for the given zone
                banner_list = db.banner.find(
                    condition,
                    {
                        "image_web": 1,
                        "type": 1,
                        "storeId": 1,
                        "data.id": 1,
                        "data.name": 1
                    }
                )

                if banner_list is not None:
                    # Format the response data
                    formatted_banners = []
                    for banner in banner_list:

                        banner_data = {
                            "id": str(banner["_id"]),
                            "image_web": banner.get("image_web", ""),
                            "type": banner.get("type", 0),
                            "storeId": banner.get("storeId", ""),
                            "storeLinkedId": banner['data'][0]['id'] if 'id' in banner['data'][0] else ""
                        }
                        
                        # Format the data array with id and name
                        # if "data" in banner and banner["data"]:
                        #     for item in banner["data"]:
                        #         data_item = {
                        #             "id": item.get("id", ""),
                        #             "name": item.get("name", {}).get("en", "") if item.get("name") else ""
                        #         }
                        #         banner_data["data"].append(data_item)
                        
                        formatted_banners.append(banner_data)

                    response = {
                        "data": formatted_banners,
                        "message": "Banners found successfully"
                    }
                    return JsonResponse(response, safe=False, status=200)
                else:
                    response = "No banners found for the specified zone."
                    response_data = {
                        "message": response,
                        "data": []
                    }
                    return JsonResponse(response_data, safe=False, status=404)

        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print("Error on line {}".format(sys.exc_info()[-1].tb_lineno), type(ex).__name__, ex)
            error = {"message": message}
            return JsonResponse(error, safe=False, status=500)

 