"""
Django settings for search_api project.

Generated by 'django-admin startproject' using Django 1.8.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from dotenv import load_dotenv
from pymongo import MongoClient
from elasticsearch import Elasticsearch
from cassandra.auth import PlainTextAuthProvider
from cassandra.cluster import Cluster
import redis
import threading
from rejson import Client, Path
currency_exchange_rate = {}


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env_path = "/usr/etc/env"
# env_path = "/home/monil/projects/env"
# env_path = "/Users/admin/Desktop/searchFilter/Shoppd/searchApi/py-ecom-search-module/configs/env"
load_dotenv(dotenv_path=env_path)
NODE_URL=os.getenv("NODE_URL")
MONGO_URL = os.getenv("MONGO_URL")
MONGO_DB_NAME = os.getenv("MONGO_DB_NAME")
REFERRAL_MONGO_URL = os.getenv("REFERRAL_MONGO_URL")
REFERRAL_MONGO_DB_NAME = os.getenv("REFERRAL_MONGO_DB_NAME")
ELASTIC_SEARCH_URL = os.getenv("ELASTIC_SEARCH_URL")
RABBITMQ_URL = os.getenv("RABBITMQ_URL")
RABBITMQ_USER = os.getenv("RABBITMQ_USER")
RABBITMQ_PASSWORD = os.getenv("RABBITMQ_PASSWORD")
POPULAR_API_URL = os.getenv("POPULAR_API_URL")
CASSANDRA_KEYSPACE = os.getenv("CASSANDRA_KEYSPACE")
CASSANDRA_SERVER = os.getenv("CASSANDRA_SERVER")
CENTRAL_PRODUCT_INDEX = os.getenv("CENTRAL_PRODUCT_INDEX")
CENTRAL_PRODUCT_DOC_TYPE = os.getenv("CENTRAL_PRODUCT_DOC_TYPE")
CENTRAL_PRODUCT_VARIENT_INDEX = os.getenv("CENTRAL_PRODUCT_VARIENT_INDEX")
CHILD_PRODUCT_INDEX = os.getenv("CHILD_PRODUCT_INDEX")
CHILD_PRODUCT_DOC_TYPE = os.getenv("CHILD_PRODUCT_DOC_TYPE")
STORE_PRODUCT_INDEX = os.getenv("STORE_PRODUCT_INDEX")
STORE_PRODUCT_DOC_TYPE = os.getenv("STORE_PRODUCT_DOC_TYPE")
CENRAL_STORE_NAME = os.getenv("CENRAL_STORE_NAME")
PYTHON_SERVER = os.getenv("PYTHON_SERVER")
PYTHON_PRODUCT_URL = os.getenv("PYTHON_PRODUCT_URL")
PYTHON_BASE_URL = os.getenv("PYTHON_BASE_URL")
OFFER_INDEX = os.getenv("OFFER_INDEX")
OFFER_DOC_TYPE = os.getenv("OFFER_DOC_TYPE")
KAFKA_URL = os.getenv("KAFKA_URL")
CATEGORY_KAFKA_CONSUMER = os.getenv("CATEGORY_KAFKA_CONSUMER")
FAVOURITE_KAFKA_CONSUMER = os.getenv("FAVOURITE_KAFKA_CONSUMER")
RECENTVIEW_KAFKA_CONSUMER = os.getenv("RECENTVIEW_KAFKA_CONSUMER")
REDIS_IP = os.getenv("REDIS_IP")
REDIS_JSON_PORT = os.getenv("REDIS_JSON_PORT")
REDIS_PASSWORD=os.getenv("REDIS_PASSWORD")
GRPC_URL = os.getenv("GRPC_URL")
STORE_CREATE_TIME = os.getenv("STORE_CREATE_TIME")
TIME_ZONE = os.getenv("TIME_ZONE")
PHARMACY_STORE_CATEGORY_ID=os.getenv("PHARMACY_STORE_CATEGORY_ID")
ECOMMERCE_STORE_CATEGORY_ID=os.getenv("ECOMMERCE_STORE_CATEGORY_ID")
MEAT_STORE_CATEGORY_ID=os.getenv("MEAT_STORE_CATEGORY_ID")
SHOP_LOCAL_STORE_CATEGORY_ID=os.getenv("SHOP_LOCAL_STORE_CATEGORY_ID")
DINE_STORE_CATEGORY_ID=os.getenv("DINE_STORE_CATEGORY_ID")
GROCERY_STORE_CATEGORY_ID=os.getenv("GROCERY_STORE_CATEGORY_ID")
CANNABIS_STORE_CATEGORY_ID=os.getenv("CANNABIS_STORE_CATEGORY_ID")
LIQUOR_STORE_CATEGORY_ID=os.getenv("LIQUOR_STORE_CATEGORY_ID")
WEBSITE_URL=os.getenv("WEBSITE_URL")
conv_fac=os.getenv("conv_fac")
EARTH_REDIS=os.getenv("EARTH_REDIS")
REBBITMQ_IP=os.getenv("REBBITMQ_IP")
REBBITMQ_USERNAME=os.getenv("REBBITMQ_USERNAME")
REBBITMQ_PASSWORD=os.getenv("REBBITMQ_PASSWORD")
CASSANDRA_USERNAME=os.getenv("CASSANDRA_USERNAME")
CASSANDRA_PASSWORD=os.getenv("CASSANDRA_PASSWORD")
APP_NAME=os.getenv("APP_NAME")
SWAGGER_URL=os.getenv("SWAGGER_URL")
CASSANDRA_WALLET_IP=os.getenv("CASSANDRA_WALLET_IP")
CASSANDRA_WALLET_KEYSPACE=os.getenv("CASSANDRA_WALLET_KEYSPACE")
CASSANDRA_WALLET_USERNAME=os.getenv("CASSANDRA_WALLET_USERNAME")
CASSANDRA_WALLET_PASSWORD=os.getenv("CASSANDRA_WALLET_PASSWORD")
GRPC_EMAIL_SERVICE=os.getenv("GRPC_EMAIL_SERVICE")
MEAT_STORE_TYPE=10
DINE_STORE_TYPE=1
YUMMY_STORE_TYPE=12
APP_LOGO = os.getenv("APP_LOGO")
REDIS_JSON_IP= os.getenv("REDIS_JSON_IP")
IS_B2B_ENABLE= os.getenv("IS_B2B_ENABLE")

NEW_RELIC_LICENCE_KEY = os.getenv("NEW_RELIC_LICENCE_KEY")
NEW_RELIC_APP_NAME = os.getenv("NEW_RELIC_APP_NAME")
NEW_RELIC_LOG_LEVEL = os.getenv("NEW_RELIC_LOG_LEVEL")

if NEW_RELIC_LICENCE_KEY:
    print("NEW_RELIC_LICENCE_KEY ->",NEW_RELIC_LICENCE_KEY)
    print("NEW_RELIC_APP_NAME ->",NEW_RELIC_APP_NAME)

    NEW_RELIC_APP_NAME = "py-ecom-search-module" if not NEW_RELIC_APP_NAME else NEW_RELIC_APP_NAME
    NEW_RELIC_LOG_LEVEL = "critical" if NEW_RELIC_LOG_LEVEL not in ('info','debug','warning','critical') else NEW_RELIC_LOG_LEVEL


    with open("./newRelic.ini","r") as f:
        newrelic_conf = f.read()
        newrelic_conf = newrelic_conf.replace("<-LICENCE_KEY->",NEW_RELIC_LICENCE_KEY)
        newrelic_conf = newrelic_conf.replace("<-NEW_RELIC_APP_NAME->",NEW_RELIC_APP_NAME)
        newrelic_conf = newrelic_conf.replace("<-LOG LEVEL->",NEW_RELIC_LOG_LEVEL)

    
    with open("./newRelic.ini","w") as f:
        f.write(newrelic_conf)

if REDIS_JSON_IP is None:
    REDIS_JSON_IP = "localhost"

# value for IS_B2B_ENABLE 0 means we need to calculate b2b price else we don't need to calculate
if IS_B2B_ENABLE is None:
    IS_B2B_ENABLE = 1
IS_B2B_ENABLE = int(IS_B2B_ENABLE)

rj = Client(host=REDIS_JSON_IP, port=6379, decode_responses=True)
rj_brand = redis.StrictRedis(host=REDIS_IP, password=REDIS_PASSWORD, port=6379, db=14)
rj_plp = Client(host=REDIS_JSON_IP, port=6379, decode_responses=True, db=2)
RJ_HOMEPAGE_DATA = Client(host=REDIS_JSON_IP, port=6379, decode_responses=True, db=12)
RJ_DEALS_PRODUCTS = Client(host=REDIS_JSON_IP, port=6379, decode_responses=True, db=13)
RJ_DEALS = Client(host=REDIS_JSON_IP, port=6379, decode_responses=True, db=14)
REDIS_FILTER_LABLE_DB = Client(host=REDIS_JSON_IP, port=6379, decode_responses=True, db=15)

ap = PlainTextAuthProvider(username=CASSANDRA_USERNAME, password=CASSANDRA_PASSWORD)
wallet_ap = PlainTextAuthProvider(username=CASSANDRA_WALLET_USERNAME, password=CASSANDRA_WALLET_PASSWORD)

try:
    session = Cluster([CASSANDRA_SERVER], auth_provider=ap).connect()
except:
    session = ""

try:
    session2 = Cluster([CASSANDRA_SERVER], auth_provider=ap).connect()
except:
    session2 = ""

try:
    waller_session = Cluster([CASSANDRA_WALLET_IP], auth_provider=wallet_ap).connect()
    from validations.calculate_currency_exchange_rate_value import cal_currency_exchange_rate
    try:
        currency_exchange_rate = cal_currency_exchange_rate()
    except:
        pass
except:
    print("error in connection")
    pass

print(MONGO_URL)
client = MongoClient(MONGO_URL)
db = client[MONGO_DB_NAME]

REDIS_BEST_DEALS_DB = redis.Redis(host=REDIS_IP, port=6379, db=10, password=REDIS_PASSWORD)
REDIS_BEST_SUPPLIER_DB = redis.Redis(host=REDIS_IP, port=6379, db=3, password=REDIS_PASSWORD)

try:
    referral_client = MongoClient(REFERRAL_MONGO_URL)
    referral_db = referral_client[REFERRAL_MONGO_DB_NAME]
except:
    referral_db = ""

try:
    from mongo_query_module.create_mongo_index import create_index_function
    thread_rating_logs = threading.Thread(target=create_index_function)
    thread_rating_logs.start()
except:
    pass


es=Elasticsearch([{'host':ELASTIC_SEARCH_URL,'port':9200}])
# es=Elasticsearch([ELASTIC_SEARCH_URL])


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sos29(4ld@j!v9(^h!oua=#d88fwcr$b%9$3i05-m^s5@j6@%#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


CORS_ORIGIN_WHITELIST = [
    "https://api.shoppd.net"
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # 'python_trace',
    'corsheaders',
    'rest_framework_swagger',
    'search',
    'mettamuse_api',
    'home_page_api',
    'django_crontab',
    'drf_yasg',
    "search_filter_api",
    "inventory_validation_app",
    "epic_api",
    "meola_apis",
    "bookstars_api",
    "product_details_apis",
    "product_rating_review",
    "product_question_answer",
    "shop_look_api"
]

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    "type",
    'language',
    'suppliername',
    "from",
    "to",
    "size",
    "searchkeyword",
    "page",
    'level',
    "categoryId",
    "Content-Length",
    "subCategoryId",
    'supplierId',
    "Referer",
    "ipAdress",
    "searchType",
    "platform",
    "city",
    "country",
    'filterType',
    'popularStatus',
    'searchedItem',
    'storeCategoryId',
    'storeType',
    'latitude',
    'longitude',
    'storeId',
    'zoneId',
    'cityId',
    'accept',
    'accept-encoding',
    'authorization',
    'Authorization',
    'content-type',
    'ipaddress',
    'dnt',
    'keyword',
    'origin',
    'skip',
    'limit',
    'user-agent',
    'x-csrftoken',
    "searchIn",
    'x-requested-with',
    "inventoryType",
    "sorttyle",
    "sortType",
    "loginType",
    "zoneid",
    "appName",
    "level",
    "currencycode",
    "text"
)


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'python_trace.middleware.MonitoringMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


CRONJOBS = [
    ('* * * * *', 'search_api.abandoned_cart.abandoned_cart_item'),
]
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'mydatabase',
    }
}


ROOT_URLCONF = 'search_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'search_api.wsgi.application'



# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
